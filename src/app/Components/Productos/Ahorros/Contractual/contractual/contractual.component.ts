import { Component, OnInit, ViewChild, ElementRef, EventEmitter, AfterViewInit } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { ContractualService } from '../../../../../Services/Productos/contractual.service';
import { OperacionesService } from '../../../../../Services/Maestros/operaciones.service';
import { DatePipe, formatDate } from '@angular/common';
import swal from 'sweetalert2';
import { GeneralesService } from '../../../../../Services/Productos/generales.service';
import { ModuleValidationService } from '../../../../../Services/Enviroment/moduleValidation.service';
import { NgxLoadingComponent, ngxLoadingAnimationTypes } from 'ngx-loading';
import { map } from 'rxjs/operators';
import { fromEvent } from 'rxjs';
import { CuentaModel } from '../../../../../Models/Productos/cuenta.model';
import { Replace } from '../../../../../Pipes/utilidades/replace.pipe';
import { NgxToastService } from 'ngx-toast-notifier';
const ColorPrimario = 'rgb(13,165,80)';
const ColorSecundario = 'rgb(13,165,80,0.7)';
declare var $: any;

@Component({
  selector: 'app-contractual',
  templateUrl: './contractual.component.html',
  styleUrls: ['./contractual.component.css'],
  providers: [ContractualService, OperacionesService, GeneralesService, ModuleValidationService],
  standalone : false
})
export class ContractualComponent implements OnInit, AfterViewInit   {
  [x: string]: any;
  @ViewChild('ModalContractual', { static: true }) private ModalContractual!: ElementRef;
  @ViewChild('ModalAsesores', { static: true }) private ModalAsesores!: ElementRef;
  @ViewChild('ModalAsociados', { static: true }) private ModalAsociados!: ElementRef;
  @ViewChild('ModalTitulares', { static: true }) private ModalTitulares!: ElementRef;
  @ViewChild('ModalBuscarAsociados', { static: true }) private ModalBuscarAsociados!: ElementRef;
  @ViewChild('ModalAsesoresExterno', { static: true }) private ModalAsesoresExterno!: ElementRef;
  @ViewChild('ModalCambioEstado', { static: true }) private ModalCambioEstado!: ElementRef;
  @ViewChild('ModalImpresion', { static: true }) private ModalImpresion!: ElementRef;
  @ViewChild('ModalDebitoAutomatico', { static: true }) private ModalDebitoAutomatico!: ElementRef;
  @ViewChild('ModalImpresionCambioCuentaDestino', { static: true }) private ModalImpresionCambioCuentaDestino!: ElementRef;
  @ViewChild('CerrarDebito', { static: true }) private CerrarDebito!: ElementRef;
  @ViewChild('Cerrar', { static: true }) private Cerrar!: ElementRef;
  @ViewChild('tab1', { static: true }) private tab1!: ElementRef;
  @ViewChild('tab3', { static: true }) private tab3!: ElementRef;
  @ViewChild('ngxLoading', { static: false }) ngxLoadingComponent!: NgxLoadingComponent;
  @ViewChild('AbrirSolicitudGestion', { static: true }) private AbrirSolicitudGestion!: ElementRef;
  public loading = false;
  public ngxLoadingAnimationTypes = ngxLoadingAnimationTypes;
  public primaryColour = ColorPrimario;
  public secondaryColour = ColorSecundario;
  public CuentaSolicitud: CuentaModel = new CuentaModel();
  public DocumentoSolicitud : any;
  public ColorAnterior1: any;
  public ColorAnterior2: any;


  public contractualFrom!: FormGroup;
  public contractualOperacionFrom!: FormGroup;
  public CambioEstadoFrom!: FormGroup;
  public AsesorFrom!: FormGroup;
  public AutorizacionFrom!: FormGroup;
  public DebitoAutomaticoFrom!: FormGroup;
  public AdicionarPuntosFrom!: FormGroup;
  public resultOperaciones : any;
  public resultProducto : any;
  public resultAsesor : any;
  public resultFormaPago : any;
  public resultAsociados : any;
  public resultRelacion : any;
  public resultParentesco : any;
  public resultTitulares : any;
  public resultEstados : any;
  public resultPeriodo : any;
  public resultIndicador : any;
  public resultAsesoresExterno : any;
  public resultCuentaNegociacion : any;
  public resultLiquidacion : any;
  public resultCuentaDebito : any;
  public resultTipoFirma : any;
  public resultPuntosAdicionales : any;

  public datoformaPago : any;
  public datoAsesorExterno : any;
  public datoCambioEstado : any;
  public datoLiquidacion : any;
  public datoAutorizacionTasa : any;
  public datoOficina : any;
  public datoProducto : any;
  public datoConsecutivo: any;
  public datoDigito: any;
  public datoTasaNominal: any;
  public datoTasaEfectiva: any;
  public datoValorTotal: any;
  public datoNombreProducto: any;
  public datoPlazo: any;
  public datoCuotaMes: any;
  public datoValorPlan: any;
  public datoIdFormaPago: any;


  dataModulo: any;
  dataUser: any;
  dataHistorial: any[] = [];
  dataAsesor: any;
  dataAitorizacion: any;
  DigitosSorteo: any;

  indexAutorizado : number | null = null;
  fechaDataObj: Date = new Date();
  bloquearbtnActalizar = false;
  bloquearbtnCalcular = false;
  bloquearbtnCambioEstado = false;
  activaNegociacion = false;
  activaSaldos = false;
  activaAutorizados = false;
  activaHistorial = false;
  MostrasAlertaAsociado = false;
  MostrasAlertaProducto = false;

  public itemsSend = {
    NombrePlan: {},
    Cuenta: {},
    NombreApellidos: {},
    Cedula: {},
    Direccion: {},
    Telefono: {},
    Ciudad: {},
    FechaApertura: {},
    FechaVecimiento: {},
    Plazo: {},
    Cuota: {},
    TipoCuentaDestino: {},
    CuentaAhorros: {},
    Sorteo: {}
  };

  public CuentaDestionoSend = {
    NombreOficina: {},
    Nombre: {},
    NumeroDocumento: {},
    IdLiquidacion: {},
    Cuenta: {},
    CuentaDestino: {},
    TipoDocumento: {},
    NombreProducto: {},
  };

  dataTitulareslist: any;
  dataObservacionCuentalist: any;
  dataObjet: any;
  dataAsociados: any;
  FechaActual: string = "";
  dataObservacion: any;
  ArrayCondiciones: any;
  operacionEscogida = '';

  public itemsDataObejct: any[] = [];
  public FechaHoy = new Date();
  public validar = true;
  public indefinido = undefined;

  public Bloquear : boolean | null= false;
  public BloquearNegociacion : boolean | null= false;
  public BloquearCuotaMes : boolean | null = false;
  public BloquearValorTotalPlan : boolean | null = false;
  public bloquearConsultaCuenta : boolean | null = false;
  public BloquearEstado : boolean | null = false;
  public BloquearDatoTitular : boolean | null = false;
  public BloquearAsociado : boolean | null = false;
  public BloquearSorteo : boolean | null = false;
  public BloquearFormaPago : boolean | null = false;
  public BloquearTasa : boolean | null = false;
  public BloquaerProducto : boolean | null = false;
  public BloquearBuscar : boolean | null = false;
  public BloquearPeriodo : boolean | null = false;
  public BloquearCuentaNegociacion : boolean | null = false;
  public Bloquearliquidacion : boolean | null = false;
  public BloquearAsesorExterno : boolean | null = false;
  public BloquearPuntos : boolean | null = false;
  public BloquearBontonPuntos : boolean | null = false;
  public BloquearCuentaOrigen : boolean | null = false;
  public BloquearNombreDebito : boolean | null = false;
  public BloquearNroTitulo : boolean | null = false;
  bloquearBtnActualizarTitular : boolean | null = null
  public BloquearDatoTitularOpcion : boolean | null = false;
  BloquearNrotitulo : boolean | null = false;
  bloquearDatosTitulares : boolean | null = false;



  public GuardarContractualConDebito = {
    ContractualFrom: {},
    DebitoAutomaticoFrom: {}
  };

  selectEstado = true;
  inputEstado = false;
  inputSinDecimal= true;
  inputCuotaMes = false;
  btnGuardar = true;
  obligatorio = false;
  oSorteo = true;
  oTitulo = false;
  btnActualizar = true;
  btnActualizarTitulares = false;
  btnActualizarTab = true;
  btnCalcularTasa = true;
  btnCambiarEstado = true;
  selectCuenta = true;
  inputCuenta = false;
  DescriObservacion = true;
  btnEliminarObservacion = false;
  DescriTipoFirma = true;
    log: any = {};
    dataObjetTitulares: any[] = [];
  private dataGestionOperacion: any;
  private emitEventContractual: EventEmitter<boolean> = new EventEmitter<boolean>();

  private CodModulo = 20;
  public Modulo = this.CodModulo;
  constructor(private ContractualServices: ContractualService,
    private notif: NgxToastService,
    private operacionesService: OperacionesService,
    private generalesService: GeneralesService,
    private moduleValidationService: ModuleValidationService, private el: ElementRef) {
    const obs = fromEvent(this.el.nativeElement, 'click').pipe(
      map((e: any) => {
        this.moduleValidationService.validarLocalPermisos(this.CodModulo);
      })
    );
    obs.subscribe((resulr) => console.log(resulr));
  }
  ngOnInit() {
    this.moduleValidationService.ValidatePermissionsModule(this.CodModulo);
    this.ValidateForm();
    this.Operaciones();
    this.ObtenerRelacion();
    this.FormaPago();
    this.TipoFirma();
    this.Periodo();
    this.Liquidacion();
    this.VolverArriba();
    $('#select').focus().select();
    $('#negociacion').addClass('activar');
    $('#negociacion').addClass('active');
  }
  ngAfterViewInit() {
    this.emitEventContractual.subscribe(
      result => {
        const GetOperacion = Number(localStorage.getItem('EsGestion'));
        if (GetOperacion === 1) {
          this.loading = true;
          let datagest = localStorage.getItem('DataGest');
          this.dataGestionOperacion = JSON.parse(datagest == null ? "" : datagest);
          this.contractualFrom.get('IdCuenta')?.setValue(this.dataGestionOperacion.IdCuenta);
          localStorage.removeItem('EsGestion');
          localStorage.removeItem('DataGest');
          const Operacion = (this.dataGestionOperacion.IdOperacion);
          const num = Operacion;
          const stringForm = num.toString();
          this.contractualOperacionFrom.get('Codigo')?.setValue(stringForm);
        }
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
   }
  // INICIO ENCABEZADO
  EjecutarEmitEvent() {
    this.emitEventContractual.emit(true);
  }
  Operaciones() {
    let data = localStorage.getItem('Data');
    this.dataUser = JSON.parse(window.atob(data == null ? "" : data));
    const arrayExample = [{
      'IdModulo': this.CodModulo,
      'IdUsuario': this.dataUser.IdUsuario,
      'IdOperaciones': '',
      'IdOperacionesPerfil': '',
      'IdPerfil': this.dataUser.idPerfilUsuario
    }];
    this.operacionesService.OperacionesPermitidas(arrayExample[0]).subscribe(
      result => {
        this.resultOperaciones = result;
        this.emitEventContractual.emit(true);
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
    ValorSeleccionado() {
      this.log = {};
      this.listAutorizadoEliminar = [];
      this.btnActualizarTitulares = false;
      this.BloquearDatoTitularOpcion = false;
      this.btnCambiarEstado = true;
      this.btnActualizar = true;
    if (this.contractualOperacionFrom.get('Codigo')?.value !== '2' && this.contractualOperacionFrom.get('Codigo')?.value !== '10' &&
        this.contractualOperacionFrom.get('Codigo')?.value !== '40' && this.contractualOperacionFrom.get('Codigo')?.value !== '13')
            this.BuscarPorCuenta();
        
    if (this.contractualOperacionFrom.get('Codigo')?.value === '2') {          // Buscar
      this.generalesService.Autofocus('SelectBuscar');
      this.clearFrom();
      this.BloquearNroTitulo = false;
      this.DescriTipoFirma = true;
      this.bloquearConsultaCuenta = null;
      this.MostrasAlertaProducto = false;
      this.selectEstado = true;
      this.inputSinDecimal = true;
      this.inputEstado = false;
      this.inputCuotaMes = false;
      this.selectCuenta = true;
      this.inputCuenta = false;
      this.BloquearDatoTitular = false;
      this.BloquearBuscar = null;
      this.BloquearAsociado = false;
      this.BloquearFormaPago = false;
      this.BloquearNegociacion = false;
      this.BloquearValorTotalPlan = false;
      this.BloquearCuotaMes = false;
      this.BloquaerProducto = false;
      this.BloquearPeriodo = false;
      this.BloquearCuentaNegociacion = false;
      this.Bloquearliquidacion = false;
      this.BloquearSorteo = false;
      this.inputEstado = false;
      this.inputCuotaMes = false;
      this.BloquearPuntos = false;
      this.BloquearBontonPuntos = false;
      this.BloquearAsesorExterno = false;
      this.dataObservacion = undefined;
      this.bloquearbtnActalizar = false;
      this.bloquearbtnCalcular = false;
      this.bloquearbtnCambioEstado = false;
      this.btnActualizar = true;
      this.btnCambiarEstado = true;
      this.MostrasAlertaAsociado = false;
      this.operacionEscogida = '/Buscar';
      this.devolverTab(1);
      this.tab1.nativeElement.click();
      $('#saldos').removeClass('activar');
      $('#saldos').removeClass('active');
      $('#autorizados').removeClass('activar');
      $('#autorizados').removeClass('active');
      $('#historial').removeClass('activar');
      $('#historial').removeClass('active');
      $('#negociacion').addClass('activar');
      $('#negociacion').addClass('active');
    } else if (this.contractualOperacionFrom.get('Codigo')?.value === '21') {  // Cambiar forma de pago
      if (this.contractualFrom.get('IdOficina')?.value !== null
        && this.contractualFrom.get('IdOficina')?.value !== undefined
        && this.contractualFrom.get('IdOficina')?.value !== ''
        && this.contractualFrom.get('IdProductoCuenta')?.value !== null
        && this.contractualFrom.get('IdProductoCuenta')?.value !== undefined
        && this.contractualFrom.get('IdProductoCuenta')?.value !== ''
        && this.contractualFrom.get('IdConsecutivo')?.value !== null
        && this.contractualFrom.get('IdConsecutivo')?.value !== undefined
        && this.contractualFrom.get('IdConsecutivo')?.value !== ''
        && this.contractualFrom.get('IdDigito')?.value !== null
        && this.contractualFrom.get('IdDigito')?.value !== undefined
        && this.contractualFrom.get('IdDigito')?.value !== ''
      ) {
        if (this.contractualFrom.get('IdEstado')?.value !== 25 && this.contractualFrom.get('IdEstado')?.value !== 10) {
          this.generalesService.Autofocus('SelectFormaPago');
          this.DebitoAutomaticoFrom.reset();
          this.DescriTipoFirma = true;
          this.log.FormaPagoAnterior = this.resultFormaPago.filter((x : any) => x.IdFormaPago == this.contractualFrom.get('IdFormaPago')?.value)[0].DescripcionFormaPago; 
          if (this.contractualFrom.get('IdFormaPago')?.value == 1)
            this.GetDatosDebito();

          this.BloquearNroTitulo = false;
          this.BloquearCuentaNegociacion = false;
          this.MostrasAlertaAsociado = false;
          this.MostrasAlertaProducto = false;
          this.Bloquearliquidacion = false;
          this.BloquearFormaPago = null;
          this.BloquearSorteo = false;
          this.BloquearDatoTitular = false;
          this.inputEstado = false;
          this.inputCuotaMes = false;
          this.selectEstado = true;
          this.inputSinDecimal = true;
          this.BloquearPuntos = false;
          this.BloquearBontonPuntos = false;
          this.btnActualizar = false;
          this.btnActualizarTab = true;
          this.btnCalcularTasa = true;
          this.btnCambiarEstado = true;
          this.BloquearAsesorExterno = false;
          this.bloquearbtnActalizar = false;
          this.bloquearbtnCalcular = false;
          this.bloquearbtnCambioEstado = false;
          this.FormaPago();
          this.operacionEscogida = '/Cambiar forma de pago';
          this.devolverTab(1);
          this.tab1.nativeElement.click();
          $('#saldos').removeClass('activar');
          $('#saldos').removeClass('active');
          $('#autorizados').removeClass('activar');
          $('#autorizados').removeClass('active');
          $('#historial').removeClass('activar');
          $('#historial').removeClass('active');
          $('#negociacion').addClass('activar');
          $('#negociacion').addClass('active');
        } else {
          this.notif.onWarning('Advertencia', 'Cuenta no se puede editar, estado no valido.');
          this.contractualOperacionFrom.get('Codigo')?.reset();
        }
      } else {
        this.notif.onWarning('Advertencia', 'Debe buscar una cuenta para realizar esta operación.');
        this.contractualOperacionFrom.get('Codigo')?.reset();
      }
    } else if (this.contractualOperacionFrom.get('Codigo')?.value === '27') {  // Cambiar tipo de cuenta destino
      if (this.contractualFrom.get('IdOficina')?.value !== null
        && this.contractualFrom.get('IdOficina')?.value !== undefined
        && this.contractualFrom.get('IdOficina')?.value !== ''
        && this.contractualFrom.get('IdProductoCuenta')?.value !== null
        && this.contractualFrom.get('IdProductoCuenta')?.value !== undefined
        && this.contractualFrom.get('IdProductoCuenta')?.value !== ''
        && this.contractualFrom.get('IdConsecutivo')?.value !== null
        && this.contractualFrom.get('IdConsecutivo')?.value !== undefined
        && this.contractualFrom.get('IdConsecutivo')?.value !== ''
        && this.contractualFrom.get('IdDigito')?.value !== null
        && this.contractualFrom.get('IdDigito')?.value !== undefined
        && this.contractualFrom.get('IdDigito')?.value !== ''
      ) {
        console.log("f",this.contractualFrom.get('CuentaDestino')?.value)
        if (this.contractualFrom.get('IdEstado')?.value !== 25 && this.contractualFrom.get('IdEstado')?.value !== 10) {
          this.log.TipoCuentaDestinoAnterior = this.resultLiquidacion.filter((x : any) => x.IdLiquidacion == this.contractualFrom.get('IdLiquidacion')?.value)[0].DescripcionLiquidacion;
          if(this.contractualFrom.get('CuentaDestino')?.value != "" && this.contractualFrom.get('CuentaDestino')?.value != null && this.contractualFrom.get('CuentaDestino')?.value != undefined)
            this.log.CuentaAhorrosAnterior = this.contractualFrom.get('CuentaDestino')?.value;
          
          this.generalesService.Autofocus('SelectCuentaDestino');
          this.DescriTipoFirma = true;
          this.BloquearNroTitulo = false;
          this.DebitoAutomaticoFrom.reset();
          this.BloquearCuentaNegociacion = null;
          this.Bloquearliquidacion = null;
          this.MostrasAlertaProducto = false;
          this.BloquearFormaPago = false;
          this.MostrasAlertaAsociado = false;
          this.BloquearSorteo = false;
          this.BloquearDatoTitular = false;
          this.inputEstado = false;
          this.inputCuotaMes = false;
          this.selectEstado = true;
          this.inputSinDecimal = true;
          this.BloquearPuntos = false;
          this.BloquearBontonPuntos = false;
          this.btnActualizarTab = false;
          this.btnActualizar = true;
          this.btnCalcularTasa = true;
          this.btnCambiarEstado = true;
          this.BloquearAsesorExterno = false;
          this.bloquearbtnActalizar = false;
          this.bloquearbtnCalcular = false;
          this.bloquearbtnCambioEstado = false;
          this.operacionEscogida = '/Cambiar Tipo cuenta destino';
          this.devolverTab(1);
          this.VolverAbajo();
          this.tab1.nativeElement.click();
          $('#saldos').removeClass('activar');
          $('#saldos').removeClass('active');
          $('#autorizados').removeClass('activar');
          $('#autorizados').removeClass('active');
          $('#historial').removeClass('activar');
          $('#historial').removeClass('active');
          $('#negociacion').addClass('activar');
          $('#negociacion').addClass('active');
        } else {
          this.notif.onWarning('Advertencia', 'Cuenta no se puede editar, estado no valido.');
          this.contractualOperacionFrom.get('Codigo')?.reset();
        }
      } else {
        this.notif.onWarning('Advertencia', 'Debe buscar una cuenta para realizar esta operación.');
        this.contractualOperacionFrom.get('Codigo')?.reset();
      }
    } else if (this.contractualOperacionFrom.get('Codigo')?.value === '12') {  // Adicionar y/o  eliminar autorizados
      if (this.contractualFrom.get('IdOficina')?.value !== null
        && this.contractualFrom.get('IdOficina')?.value !== undefined
        && this.contractualFrom.get('IdOficina')?.value !== ''
        && this.contractualFrom.get('IdProductoCuenta')?.value !== null
        && this.contractualFrom.get('IdProductoCuenta')?.value !== undefined
        && this.contractualFrom.get('IdProductoCuenta')?.value !== ''
        && this.contractualFrom.get('IdConsecutivo')?.value !== null
        && this.contractualFrom.get('IdConsecutivo')?.value !== undefined
        && this.contractualFrom.get('IdConsecutivo')?.value !== ''
        && this.contractualFrom.get('IdDigito')?.value !== null
        && this.contractualFrom.get('IdDigito')?.value !== undefined
        && this.contractualFrom.get('IdDigito')?.value !== ''
      ) {
        if (this.contractualFrom.get('IdEstado')?.value !== 25 && this.contractualFrom.get('IdEstado')?.value !== 10) {
          this.DescriTipoFirma = true;
          this.DebitoAutomaticoFrom.reset();
          this.inputEstado = false;
          this.inputCuotaMes = false;
          this.selectEstado = true;
          this.inputSinDecimal = true;
          this.BloquearDatoTitular = false;
          this.BloquearDatoTitularOpcion = null;
          this.BloquearCuentaNegociacion = false;
          this.BloquearNroTitulo = false;
          this.MostrasAlertaAsociado = false;
          this.MostrasAlertaProducto = false;
          this.Bloquearliquidacion = false;
          this.BloquearSorteo = false;
          this.BloquearPuntos = false;
          this.BloquearBontonPuntos = false;
          this.BloquearAsesorExterno = false;
          this.btnActualizar = true;
          this.btnActualizarTab = true;
          this.btnCalcularTasa = true;
          this.btnCambiarEstado = true;
          this.dataObservacion = undefined;
          this.BloquearFormaPago = false;
          this.bloquearbtnActalizar = false;
          this.bloquearbtnCalcular = false;
          this.bloquearbtnCambioEstado = false;
          this.operacionEscogida = '/Adicionar y/o  eliminar autorizados';
          this.devolverTab(3);
          this.tab3.nativeElement.click();
          this.VolverAbajo();
          this.btnActualizarTitulares = true;
          this.bloquearBtnActualizarTitular = true;
          $('#saldos').removeClass('activar');
          $('#saldos').removeClass('active');
          $('#autorizados').addClass('activar');
          $('#autorizados').addClass('active');
          $('#historial').removeClass('activar');
          $('#historial').removeClass('active');
          $('#negociacion').removeClass('activar');
          $('#negociacion').removeClass('active');
          this.generalesService.Autofocus('SelectTitular');
        } else {
          this.notif.onWarning('Advertencia', 'Cuenta no se puede editar, estado no valido.');
          this.contractualOperacionFrom.get('Codigo')?.reset();
        }
      } else {
        this.notif.onWarning('Advertencia', 'Debe buscar una cuenta para realizar esta operación.');
        this.contractualOperacionFrom.get('Codigo')?.reset();
      }
    } else if (this.contractualOperacionFrom.get('Codigo')?.value === '9')  {  // Cambio de estado
      if (this.contractualFrom.get('IdOficina')?.value !== null
        && this.contractualFrom.get('IdOficina')?.value !== undefined
        && this.contractualFrom.get('IdOficina')?.value !== ''
        && this.contractualFrom.get('IdProductoCuenta')?.value !== null
        && this.contractualFrom.get('IdProductoCuenta')?.value !== undefined
        && this.contractualFrom.get('IdProductoCuenta')?.value !== ''
        && this.contractualFrom.get('IdConsecutivo')?.value !== null
        && this.contractualFrom.get('IdConsecutivo')?.value !== undefined
        && this.contractualFrom.get('IdConsecutivo')?.value !== ''
        && this.contractualFrom.get('IdDigito')?.value !== null
        && this.contractualFrom.get('IdDigito')?.value !== undefined
        && this.contractualFrom.get('IdDigito')?.value !== ''
      ) {
        if (this.contractualFrom.get('IdEstado')?.value !== 25 && this.contractualFrom.get('IdEstado')?.value !== 10) {
          this.DebitoAutomaticoFrom.reset();
          this.ObtenerEstado();
          this.btnCambiarEstado = false;
          this.BloquearDatoTitular = false;
          this.BloquearNroTitulo = false;
          this.BloquearCuentaNegociacion = false;
          this.Bloquearliquidacion = false;
          this.MostrasAlertaAsociado = false;
          this.MostrasAlertaProducto = false;
          this.BloquearSorteo = false;
          this.inputEstado = true;
          this.inputCuotaMes = false;
          this.selectEstado = false;
          this.inputSinDecimal = true;
          this.BloquearPuntos = false;
          this.BloquearBontonPuntos = false;
          this.BloquearEstado = null;
          this.btnActualizar = true;
          this.btnActualizarTab = true;
          this.btnCalcularTasa = true;
          this.btnGuardar = true;
          this.dataObservacion = undefined;
          this.BloquearAsesorExterno = false;
          this.BloquearFormaPago = false;
          this.bloquearbtnActalizar = false;
          this.bloquearbtnCalcular = false;
          this.bloquearbtnCambioEstado = false;
          this.DescriTipoFirma = true;
          this.operacionEscogida = '/ Cambio de estado';
          this.generalesService.Autofocus('SelectCambioEstado');
          this.devolverTab(1);
          this.tab1.nativeElement.click();
          $('#saldos').removeClass('activar');
          $('#saldos').removeClass('active');
          $('#autorizados').removeClass('activar');
          $('#autorizados').removeClass('active');
          $('#historial').removeClass('activar');
          $('#historial').removeClass('active');
          $('#negociacion').addClass('activar');
          $('#negociacion').addClass('active');
        } else {
          this.notif.onWarning('Advertencia', 'Cuenta no se puede editar, estado no valido.');
          this.contractualOperacionFrom.get('Codigo')?.reset();
        }
      } else {
        this.notif.onWarning('Advertencia', 'Debe buscar una cuenta para realizar esta operación.');
        this.contractualOperacionFrom.get('Codigo')?.reset();
      }
    } else if (this.contractualOperacionFrom.get('Codigo')?.value === '10') {  // Apertura de cuenta
      if (this.dataUser.NumeroOficina === '3') {
        this.notif.onWarning('Advertencia', 'No se puede abrir una cuenta en la oficina de administración.');
        this.BloquearBuscar = false;
        this.bloquearConsultaCuenta = false;
        this.clearFrom();
      } else {
        this.generalesService.Autofocus('SelectAsociado');
        this.clearFrom();
        this.OperacionPermitida();
        this.MapearDatosUsuario();
        if (this.contractualFrom.get('IdAsesor')?.value !== null
          && this.contractualFrom.get('IdAsesor')?.value !== undefined
          && this.contractualFrom.get('IdAsesor')?.value !== ' ') {
          this.dataObjetTitulares = [];
          this.Encabezado();
          this.contractualFrom.get('IdPeriodo')?.setValue(30);
          this.DescriTipoFirma = true;
          this.MostrasAlertaAsociado = false;
          this.MostrasAlertaProducto = false;
          this.inputEstado = false;
          this.inputCuotaMes = true;
          this.selectEstado = true;
          this.inputSinDecimal = false;
          this.selectCuenta = false;
          this.inputCuenta = true;
          this.BloquearNroTitulo = null;
          this.BloquearAsociado = null;
          this.BloquearFormaPago = null;
          this.BloquearNegociacion = false;
          this.BloquearValorTotalPlan = false;
          this.BloquearCuotaMes = false;
          this.BloquaerProducto = false;
          this.BloquearPeriodo = false;
          this.btnGuardar = false;
          this.BloquearAsesorExterno = null;
          this.BloquearCuentaNegociacion = false;
          this.Bloquearliquidacion = false;
          this.BloquearSorteo = false;
          this.BloquearBuscar = false;
          this.BloquearDatoTitular = false;
          this.BloquearPuntos = false;
          this.BloquearBontonPuntos = null;
          this.bloquearConsultaCuenta = false;
          this.dataObservacion = undefined;
          this.bloquearbtnActalizar = false;
          this.bloquearbtnCalcular = false;
          this.bloquearbtnCambioEstado = false;
          this.btnCambiarEstado = true;
          this.btnActualizarTab = true;
          this.btnCalcularTasa = true;
          this.btnActualizar = true;
          this.BloquearDatoTitularOpcion = null;
          this.operacionEscogida = '/Apertura de cuenta';
          this.tab1.nativeElement.click();
          $('#saldos').removeClass('activar');
          $('#saldos').removeClass('active');
          $('#autorizados').removeClass('activar');
          $('#autorizados').removeClass('active');
          $('#historial').removeClass('activar');
          $('#historial').removeClass('active');
          $('#negociacion').addClass('activar');
          $('#negociacion').addClass('active');
          $('#SelectAsociado').focusin();
        } else {
          this.notif.onWarning('Advertencia', 'Debe tener Id asesor para poder abrir un cuenta.');
        }
      }
    } else if (this.contractualOperacionFrom.get('Codigo')?.value === '13') {  // Reimprimir
      if (this.contractualFrom.get('IdOficina')?.value !== null
        && this.contractualFrom.get('IdOficina')?.value !== undefined
        && this.contractualFrom.get('IdOficina')?.value !== ''
        && this.contractualFrom.get('IdProductoCuenta')?.value !== null
        && this.contractualFrom.get('IdProductoCuenta')?.value !== undefined
        && this.contractualFrom.get('IdProductoCuenta')?.value !== ''
        && this.contractualFrom.get('IdConsecutivo')?.value !== null
        && this.contractualFrom.get('IdConsecutivo')?.value !== undefined
        && this.contractualFrom.get('IdConsecutivo')?.value !== ''
        && this.contractualFrom.get('IdDigito')?.value !== null
        && this.contractualFrom.get('IdDigito')?.value !== undefined
        && this.contractualFrom.get('IdDigito')?.value !== ''
      ) {
        if (this.contractualFrom.get('IdEstado')?.value !== 25 && this.contractualFrom.get('IdEstado')?.value !== 10) {
        this.DescriTipoFirma = true;
        this.GenerarImpresion();
        $("#ImpresionContractual").show();
        this.ModalImpresion.nativeElement.click();
        this.Cerrar.nativeElement.click();
        this.BloquearNroTitulo = false;
        this.bloquearConsultaCuenta = false;
        this.MostrasAlertaAsociado = false;
        this.MostrasAlertaProducto = false;
        this.selectEstado = true;
        this.inputSinDecimal = true;
        this.inputEstado = false;
        this.inputCuotaMes = false;
        this.selectCuenta = true;
        this.inputCuenta = false;
        this.BloquearDatoTitular = false;
        this.BloquearBuscar = false;
        this.BloquearAsociado = false;
        this.BloquearFormaPago = false;
        this.BloquearNegociacion = false;
        this.BloquearValorTotalPlan = false;
        this.BloquearCuotaMes = false;
        this.BloquaerProducto = false;
        this.BloquearPeriodo = false;
        this.BloquearCuentaNegociacion = false;
        this.Bloquearliquidacion = false;
        this.BloquearSorteo = false;
        this.BloquearPuntos = false;
        this.BloquearBontonPuntos = false;
        this.BloquearAsesorExterno = false;
        this.dataObservacion = undefined;
        this.bloquearbtnActalizar = false;
        this.bloquearbtnCalcular = false;
        this.bloquearbtnCambioEstado = false;
        this.btnActualizar = true;
        this.btnCambiarEstado = true;
        this.operacionEscogida = '/Reimprimir';
        this.devolverTab(1);
        this.tab1.nativeElement.click();
        $('#saldos').removeClass('activar');
        $('#saldos').removeClass('active');
        $('#autorizados').removeClass('activar');
        $('#autorizados').removeClass('active');
        $('#historial').removeClass('activar');
        $('#historial').removeClass('active');
        $('#negociacion').addClass('activar');
        $('#negociacion').addClass('active');
      this.generalesService.Guardarlog(this.contractualFrom.value, 13,
      this.contractualFrom.get('IdCuenta')?.value, this.contractualFrom.get('LngTercero')?.value, 20).subscribe(
        result => {
          this.loading = false;
          console.log(result);
        },
        error => {
          this.loading = false;
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
          );
          this.ObtenerHistorial();
        } else {
          this.notif.onWarning('Advertencia', 'Cuenta no se puede reimprimir, estado no valido.',
);
          this.contractualOperacionFrom.get('Codigo')?.reset();
        }
      } else {
        this.notif.onWarning('Advertencia', 'Debe buscar una cuenta para realizar esta operación.',
);
        this.contractualOperacionFrom.get('Codigo')?.reset();
      }
    } else if (this.contractualOperacionFrom.get('Codigo')?.value === '19') {  // Cambiar asesor externo
      if (this.contractualFrom.get('IdOficina')?.value !== null
        && this.contractualFrom.get('IdOficina')?.value !== undefined
        && this.contractualFrom.get('IdOficina')?.value !== ''
        && this.contractualFrom.get('IdProductoCuenta')?.value !== null
        && this.contractualFrom.get('IdProductoCuenta')?.value !== undefined
        && this.contractualFrom.get('IdProductoCuenta')?.value !== ''
        && this.contractualFrom.get('IdConsecutivo')?.value !== null
        && this.contractualFrom.get('IdConsecutivo')?.value !== undefined
        && this.contractualFrom.get('IdConsecutivo')?.value !== ''
        && this.contractualFrom.get('IdDigito')?.value !== null
        && this.contractualFrom.get('IdDigito')?.value !== undefined
        && this.contractualFrom.get('IdDigito')?.value !== ''
      ) {
        if (this.contractualFrom.get('IdEstado')?.value !== 25 && this.contractualFrom.get('IdEstado')?.value !== 10) {
            this.DescriTipoFirma = true;
            this.generalesService.Autofocus('SelectAsesorExterno');
            this.operacionEscogida = '/Cambiar asesor externo';
            this.BloquearAsociado = false;
            this.BloquearNroTitulo = false;
            this.MostrasAlertaAsociado = false;
            this.MostrasAlertaProducto = false;
            this.BloquearFormaPago = false;
            this.BloquearPuntos = false;
            this.BloquearEstado = false;
            this.bloquearConsultaCuenta = false;
            this.BloquearBuscar = false;
            this.btnActualizar = false;
            this.btnCambiarEstado = true;
            this.btnGuardar = true;
            this.BloquearAsesorExterno = null;
            this.bloquearbtnActalizar = false;
            this.bloquearbtnCalcular = false;
            this.bloquearbtnCambioEstado = false;
            this.Bloquearliquidacion = false;
            this.inputEstado = false;
            this.inputCuotaMes = false;
            this.selectEstado = true;
            this.inputSinDecimal = true;
            this.btnActualizarTab = true;
            this.btnCalcularTasa = true;
            this.BloquearDatoTitular = false;
            this.devolverTab(1);
            this.tab1.nativeElement.click();
            this.log.IdAsesorExternoAnterior = this.AsesorFrom.get('strCodigo')?.value == null ? 0 : this.AsesorFrom.get('strCodigo')?.value;
            this.log.AsesorExternoAnterior  =  this.AsesorFrom.get('strNombre')?.value == null ? "": this.AsesorFrom.get('strNombre')?.value;
            $('#saldos').removeClass('activar');
            $('#saldos').removeClass('active');
            $('#autorizados').removeClass('activar');
            $('#autorizados').removeClass('active');
            $('#historial').removeClass('activar');
            $('#historial').removeClass('active');
            $('#negociacion').addClass('activar');
            $('#negociacion').addClass('active');
        } else {
          this.notif.onWarning('Advertencia', 'Cuenta no se puede editar, estado no valido.');
          this.contractualOperacionFrom.get('Codigo')?.reset();
        }
      } else {
        this.notif.onWarning('Advertencia', 'Debe buscar una cuenta para realizar esta operación.');
        this.contractualOperacionFrom.get('Codigo')?.reset();
      }
    } else if (this.contractualOperacionFrom.get('Codigo')?.value === '28') {  // Adicionar puntos
      if (this.contractualFrom.get('IdOficina')?.value !== null
        && this.contractualFrom.get('IdOficina')?.value !== undefined
        && this.contractualFrom.get('IdOficina')?.value !== ''
        && this.contractualFrom.get('IdProductoCuenta')?.value !== null
        && this.contractualFrom.get('IdProductoCuenta')?.value !== undefined
        && this.contractualFrom.get('IdProductoCuenta')?.value !== ''
        && this.contractualFrom.get('IdConsecutivo')?.value !== null
        && this.contractualFrom.get('IdConsecutivo')?.value !== undefined
        && this.contractualFrom.get('IdConsecutivo')?.value !== ''
        && this.contractualFrom.get('IdDigito')?.value !== null
        && this.contractualFrom.get('IdDigito')?.value !== undefined
        && this.contractualFrom.get('IdDigito')?.value !== '') {
          if (this.contractualFrom.get('IdEstado')?.value !== 25 && this.contractualFrom.get('IdEstado')?.value !== 10) {
              if (this.AdicionarPuntosFrom.get('AdicionarPunto')?.value == null || this.AdicionarPuntosFrom.get('AdicionarPunto')?.value.PuntosAdicionales == null)
                  this.log.PuntosAdicionalesAnterior = 0;
              else
                  this.log.PuntosAdicionalesAnterior = Number(this.AdicionarPuntosFrom.get('AdicionarPunto')?.value.PuntosAdicionales);
                  
          this.operacionEscogida = '/Adicionar puntos';
          this.generalesService.Autofocus('SelectAdicionarPuntos');
          this.ObtenerPuntosAdicionales();
          this.BuscarCuentaParaPuntos();
          this.bloquearConsultaCuenta = false;
          this.DescriTipoFirma = true;
          this.BloquearNroTitulo = false;
          this.selectEstado = true;
          this.inputSinDecimal = true;
          this.MostrasAlertaAsociado = false;
          this.MostrasAlertaProducto = false;
          this.inputEstado = false;
          this.inputCuotaMes = false;
          this.selectCuenta = true;
          this.inputCuenta = false;
          this.BloquearDatoTitular = false;
          this.BloquearBuscar = false;
          this.BloquearAsociado = false;
          this.BloquearFormaPago = false;
          this.BloquearNegociacion = false;
          this.BloquearValorTotalPlan = false;
          this.BloquearCuotaMes = false;
          this.BloquaerProducto = false;
          this.BloquearPeriodo = false;
          this.BloquearCuentaNegociacion = false;
          this.Bloquearliquidacion = false;
          this.BloquearSorteo = false;
          this.inputEstado = false;
          this.inputCuotaMes = false;
          this.BloquearPuntos = false;
          this.BloquearBontonPuntos = false;
          this.BloquearAsesorExterno = false;
          this.dataObservacion = undefined;
          this.bloquearbtnActalizar = false;
          this.bloquearbtnCalcular = false;
          this.bloquearbtnCambioEstado = false;
          this.btnActualizar = true;
          this.btnActualizarTab = false;
          this.btnCalcularTasa = false;
          this.btnCambiarEstado = true;
          this.BloquearPuntos = null;
          this.VolverAbajo();
          this.tab1.nativeElement.click();
          $('#saldos').removeClass('activar');
          $('#saldos').removeClass('active');
          $('#autorizados').removeClass('activar');
          $('#autorizados').removeClass('active');
          $('#historial').removeClass('activar');
          $('#historial').removeClass('active');
          $('#negociacion').addClass('activar');
          $('#negociacion').addClass('active');
        } else {
          this.notif.onWarning('Advertencia', 'Cuenta no se puede editar, estado no valido.');
          this.contractualOperacionFrom.get('Codigo')?.reset();
        }
      } else {
        this.notif.onWarning('Advertencia', 'Debe buscar una cuenta para realizar esta operación.');
      this.contractualOperacionFrom.get('Codigo')?.reset();
      }
    } else if (this.contractualOperacionFrom.get('Codigo')?.value === '23') {  // Gestionar operacion
      if (this.contractualFrom.get('IdOficina')?.value !== null
        && this.contractualFrom.get('IdOficina')?.value !== undefined
        && this.contractualFrom.get('IdOficina')?.value !== ''
        && this.contractualFrom.get('IdProductoCuenta')?.value !== null
        && this.contractualFrom.get('IdProductoCuenta')?.value !== undefined
        && this.contractualFrom.get('IdProductoCuenta')?.value !== ''
        && this.contractualFrom.get('IdConsecutivo')?.value !== null
        && this.contractualFrom.get('IdConsecutivo')?.value !== undefined
        && this.contractualFrom.get('IdConsecutivo')?.value !== ''
        && this.contractualFrom.get('IdDigito')?.value !== null
        && this.contractualFrom.get('IdDigito')?.value !== undefined
        && this.contractualFrom.get('IdDigito')?.value !== ''
      ) {
        if (this.contractualFrom.get('IdEstado')?.value !== 25 && this.contractualFrom.get('IdEstado')?.value !== 10) {
        this.SolicitarGestion();
        this.bloquearConsultaCuenta = false;
        this.BloquearNroTitulo = false;
        this.DescriTipoFirma = true;
        this.MostrasAlertaAsociado = false;
        this.MostrasAlertaProducto = false;
        this.selectEstado = true;
        this.inputSinDecimal = true;
        this.inputEstado = false;
        this.inputCuotaMes = false;
        this.selectCuenta = true;
        this.inputCuenta = false;
        this.BloquearDatoTitular = false;
        this.BloquearBuscar = false;
        this.BloquearAsociado = false;
        this.BloquearFormaPago = false;
        this.BloquearNegociacion = false;
        this.BloquearValorTotalPlan = false;
        this.BloquearCuotaMes = false;
        this.BloquaerProducto = false;
        this.BloquearPeriodo = false;
        this.BloquearCuentaNegociacion = false;
        this.Bloquearliquidacion = false;
        this.BloquearSorteo = false;
        this.inputEstado = false;
        this.inputCuotaMes = false;
        this.BloquearPuntos = false;
        this.BloquearBontonPuntos = false;
        this.BloquearAsesorExterno = false;
        this.dataObservacion = undefined;
        this.bloquearbtnActalizar = false;
        this.bloquearbtnCalcular = false;
        this.bloquearbtnCambioEstado = false;
        this.btnActualizar = true;
        this.btnCambiarEstado = true;
        this.operacionEscogida = '/Gestionar operación';
        this.devolverTab(1);
        this.tab1.nativeElement.click();
        $('#saldos').removeClass('activar');
        $('#saldos').removeClass('active');
        $('#autorizados').removeClass('activar');
        $('#autorizados').removeClass('active');
        $('#historial').removeClass('activar');
        $('#historial').removeClass('active');
        $('#negociacion').addClass('activar');
        $('#negociacion').addClass('active');
        } else {
          this.notif.onWarning('Advertencia', 'Cuenta no se puede editar, estado no valido.',
);
          this.contractualOperacionFrom.get('Codigo')?.reset();
        }
      } else {
        this.notif.onWarning('Advertencia', 'Debe buscar una cuenta para realizar esta operación.',
        );
      this.contractualOperacionFrom.get('Codigo')?.reset();
      }
    } else if (this.contractualOperacionFrom.get('Codigo')?.value === '40') {  // Apertura de cuenta mismo titular
      if (this.dataUser.NumeroOficina === '3') {
        this.notif.onWarning('Advertencia', 'No se puede abrir una cuenta en la oficina de administración.');
        this.BloquearBuscar = false;
        this.bloquearConsultaCuenta = false;
        this.clearFrom();
      } else {
        this.generalesService.Autofocus('SelectAsociado');
        this.clearFrom();
        this.OperacionPermitida();
        this.MapearDatosUsuario();
        if (this.contractualFrom.get('IdAsesor')?.value !== null
          && this.contractualFrom.get('IdAsesor')?.value !== undefined
          && this.contractualFrom.get('IdAsesor')?.value !== ' ') {
            this.dataObjetTitulares = [];
            this.Encabezado();
            this.contractualFrom.get('IdPeriodo')?.setValue(30);
            this.DescriTipoFirma = true;
            this.MostrasAlertaAsociado = false;
            this.MostrasAlertaProducto = false;
            this.inputEstado = false;
            this.inputCuotaMes = true;
            this.selectEstado = true;
            this.inputSinDecimal = false;
            this.selectCuenta = false;
            this.inputCuenta = true;
            this.BloquearNroTitulo = null;
            this.BloquearAsociado = null;
            this.BloquearFormaPago = null;
            this.BloquearNegociacion = false;
            this.BloquearValorTotalPlan = false;
            this.BloquearCuotaMes = false;
            this.BloquaerProducto = false;
            this.BloquearPeriodo = false;
            this.btnGuardar = false;
            this.BloquearAsesorExterno = null;
            this.BloquearCuentaNegociacion = false;
            this.Bloquearliquidacion = false;
            this.BloquearSorteo = false;
            this.BloquearBuscar = false;
            this.BloquearDatoTitular = false;
            this.BloquearPuntos = false;
            this.BloquearBontonPuntos = null;
            this.bloquearConsultaCuenta = false;
            this.dataObservacion = undefined;
            this.bloquearbtnActalizar = false;
            this.bloquearbtnCalcular = false;
            this.bloquearbtnCambioEstado = false;
            this.btnCambiarEstado = true;
            this.btnActualizarTab = true;
            this.btnCalcularTasa = true;
            this.btnActualizar = true;
            this.operacionEscogida = '/Apertura de cuenta';
            this.tab1.nativeElement.click();
            $('#saldos').removeClass('activar');
            $('#saldos').removeClass('active');
            $('#autorizados').removeClass('activar');
            $('#autorizados').removeClass('active');
            $('#historial').removeClass('activar');
            $('#historial').removeClass('active');
            $('#negociacion').addClass('activar');
            $('#negociacion').addClass('active');
            $('#SelectAsociado').focusin();
        } else {
            this.notif.onWarning('Advertencia', 'Debe tener Id asesor para poder abrir un cuenta.');
            this.clearFrom();
        }
      }
    } else if (this.contractualOperacionFrom.get('Codigo')?.value === '44') {  // Cambiar Nro Titulo
      if (this.contractualFrom.get('IdOficina')?.value !== null
        && this.contractualFrom.get('IdOficina')?.value !== undefined
        && this.contractualFrom.get('IdOficina')?.value !== ''
        && this.contractualFrom.get('IdProductoCuenta')?.value !== null
        && this.contractualFrom.get('IdProductoCuenta')?.value !== undefined
        && this.contractualFrom.get('IdProductoCuenta')?.value !== ''
        && this.contractualFrom.get('IdConsecutivo')?.value !== null
        && this.contractualFrom.get('IdConsecutivo')?.value !== undefined
        && this.contractualFrom.get('IdConsecutivo')?.value !== ''
        && this.contractualFrom.get('IdDigito')?.value !== null
        && this.contractualFrom.get('IdDigito')?.value !== undefined
        && this.contractualFrom.get('IdDigito')?.value !== ''
      ) {
        if (this.contractualFrom.get('IdEstado')?.value !== 25 && this.contractualFrom.get('IdEstado')?.value !== 10) {
          this.log.NumeroTituloAnterior = this.contractualFrom.get('NroTitulo')?.value == null ? "" : this.contractualFrom.get('NroTitulo')?.value; 
          this.DescriTipoFirma = true;
          this.bloquearConsultaCuenta = false;
          this.MostrasAlertaAsociado = false;
          this.MostrasAlertaProducto = false;
          this.BloquearNroTitulo = null;
          this.selectEstado = true;
          this.inputSinDecimal = true;
          this.inputEstado = false;
          this.inputCuotaMes = false;
          this.selectCuenta = true;
          this.inputCuenta = false;
          this.BloquearBuscar = false;
          this.BloquearAsociado = false;
          this.BloquearFormaPago = false;
          this.BloquearNegociacion = false;
          this.BloquearValorTotalPlan = false;
          this.BloquearCuotaMes = false;
          this.BloquaerProducto = false;
          this.BloquearPeriodo = false;
          this.BloquearCuentaNegociacion = false;
          this.Bloquearliquidacion = false;
          this.BloquearSorteo = false;
          this.BloquearDatoTitular = false;
          this.BloquearPuntos = false;
          this.BloquearBontonPuntos = false;
          this.BloquearAsesorExterno = false;
          this.dataObservacion = undefined;
          this.bloquearbtnActalizar = false;
          this.bloquearbtnCalcular = false;
          this.bloquearbtnCambioEstado = false;
          this.btnActualizar = false;
          this.btnCambiarEstado = true;
          this.operacionEscogida = '/Cambiar Nro. Título';
          this.devolverTab(1);
          this.tab1.nativeElement.click();
          $('#saldos').removeClass('activar');
          $('#saldos').removeClass('active');
          $('#autorizados').removeClass('activar');
          $('#autorizados').removeClass('active');
          $('#historial').removeClass('activar');
          $('#historial').removeClass('active');
          $('#negociacion').addClass('activar');
          $('#negociacion').addClass('active');
            this.ObtenerHistorial();
        } else {
          this.notif.onWarning('Advertencia', 'Cuenta no se puede editar, estado no valido.');
          this.contractualOperacionFrom.get('Codigo')?.reset();
        }
      } else {
        this.notif.onWarning('Advertencia', 'Debe buscar una cuenta para realizar esta operación.');
        this.contractualOperacionFrom.get('Codigo')?.reset();
      }
    } 
    this.ResetValorSeleccionado();
    }
    ResetValorSeleccionado(tipo: number = 0) {
        if (this.contractualOperacionFrom.get('Codigo')?.value != '2'
          && this.contractualOperacionFrom.get('Codigo')?.value != '21'
          && this.contractualOperacionFrom.get('Codigo')?.value != '27'
          && this.contractualOperacionFrom.get('Codigo')?.value != '12'
          && this.contractualOperacionFrom.get('Codigo')?.value != '28'
          && this.contractualOperacionFrom.get('Codigo')?.value != '44'
          && this.contractualOperacionFrom.get('Codigo')?.value != '19'
          && this.contractualOperacionFrom.get('Codigo')?.value != '9'
          && this.contractualOperacionFrom.get('Codigo')?.value != '10'
          && this.contractualOperacionFrom.get('Codigo')?.value != '23'
          && this.contractualOperacionFrom.get('Codigo')?.value != '40'
          && this.contractualOperacionFrom.get('Codigo')?.value != '13')
            this.contractualOperacionFrom.get('Codigo')?.reset();
        if (tipo == 1 && this.contractualOperacionFrom.get('Codigo')?.value == '2')
          this.contractualOperacionFrom.get('Codigo')?.reset();
  }
  GetDatosDebito() {
    this.ContractualServices.GetDatosDebito(this.contractualFrom.get('IdCuenta')?.value).subscribe(x => {
      if (x != null) {
        this.log.AnteriorDebito = {};
        this.log.AnteriorDebito.Documento = x.NumeroDocuemnto;
        this.log.AnteriorDebito.Nombre = x.Nombre;
        this.log.AnteriorDebito.CuentaAhorros = x.Cuenta;
      }
    }, err => {
      console.log("DatosDebitoError",err)
    });
  }
  linkPdf : any ;
   GenerarImpresion(){
      this.ContractualServices.GenerarImpresion(this.itemsSend).subscribe(
      result => {
        const pdfinBase64 = result.FileStream._buffer;
          const byteArray = new Uint8Array(atob(pdfinBase64).split("").map((char) => char.charCodeAt(0)));
          const newBolb = new Blob([byteArray], { type: "application/pdf" });
          this.linkPdf = URL.createObjectURL(newBolb);
          const url = window.URL.createObjectURL(newBolb);
          document.querySelector("object")!.data = url;
          document.querySelector("object")!.name = "Impresion";
          document.querySelector("object")!.type = "application/pdf";
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
   }
  SolicitarGestion() {
    this.CuentaSolicitud = new CuentaModel();
    this.CuentaSolicitud = {
     IdOficina: this.datoOficina,
      IdProducto: this.datoProducto,
      IdConsecutivo: this.datoConsecutivo,
      IdDigito: this.datoDigito
    };

    this.DocumentoSolicitud = this.contractualFrom.get('NumeroDocumento')?.value;
    this.AbrirSolicitudGestion.nativeElement.click();
    this.Guardarlog();
    this.contractualOperacionFrom.get('Codigo')?.reset();
    this.ObtenerHistorial();
  }
  selectEstadoActivo() {
    this.bloquearbtnCambioEstado = true;
  }
  EstadoSeleccionado() {
    if (this.contractualFrom.get('IdOficina')?.value !== null
      && this.contractualFrom.get('IdOficina')?.value !== undefined
      && this.contractualFrom.get('IdOficina')?.value !== ''
      && this.contractualFrom.get('IdProductoCuenta')?.value !== null
      && this.contractualFrom.get('IdProductoCuenta')?.value !== undefined
      && this.contractualFrom.get('IdProductoCuenta')?.value !== ''
      && this.contractualFrom.get('IdConsecutivo')?.value !== null
      && this.contractualFrom.get('IdConsecutivo')?.value !== undefined
      && this.contractualFrom.get('IdConsecutivo')?.value !== ''
      && this.contractualFrom.get('IdDigito')?.value !== null
      && this.contractualFrom.get('IdDigito')?.value !== undefined
      && this.contractualFrom.get('IdDigito')?.value !== '') {
      if (+this.contractualFrom.get('IdEstado')?.value !== this.datoCambioEstado) {

        if (this.contractualFrom.get('IdEstado')?.value === '20') {
            if (this.datoCambioEstado !== 45) {
            this.Observaciones(this.contractualFrom.get('IdEstado')?.value);
            this.ModalCambioEstado.nativeElement.click();
            } else {
            this.notif.onWarning('Advertencia', 'Cuenta debe estar activa para bloquear.');
            this.bloquearbtnCambioEstado = false;
            }
          } else {
            this.cambiarEstado();
          }
      } else {
        this.notif.onWarning('Advertencia', 'Debe cambiar estado cuenta.');
        this.bloquearbtnCambioEstado = false;
      }
    } else
      this.notif.onWarning('Advertencia', 'Debe buscar una cuenta para realizar esta operación.');
  }
  FormaPagoSeleccionada() {
    if (this.contractualFrom.get('IdFormaPago')?.value === '0') {
      this.DebitoAutomaticoFrom.reset();
      this.bloquearbtnActalizar = true;
    } else if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
      this.ModalDebitoAutomatico.nativeElement.click();
    } else if (this.contractualFrom.get('IdFormaPago')?.value === '2') {
      this.DebitoAutomaticoFrom.reset();
      this.ÖbtenerConvenio();
    }
  }
  MapearDatosUsuario() {
    let data = localStorage.getItem('Data');
    this.dataUser = JSON.parse(window.atob(data == null ? "" : data));
    this.contractualFrom.get('NombreOficina')?.setValue(this.dataUser.Oficina);
    this.contractualFrom.get('NumeroOficina')?.setValue(this.dataUser.NumeroOficina);
    this.contractualFrom.get('IdAsesor')?.setValue(this.dataUser.IdAsesor);
    this.contractualFrom.get('NombreAsesor')?.setValue(this.dataUser.Nombre);
  }
  Producto() {
    if (this.contractualFrom.get('IdProducto')?.value !== null
    && this.contractualFrom.get('IdProducto')?.value !== undefined
    && this.contractualFrom.get('IdProducto')?.value !== '') {
      this.oSorteo = true;
      this.oTitulo = false;
      this.CondicionesProducto();
    }
  }
  BuscarProducto() {
    if (this.ArrayCondiciones !== undefined) {
      this.DigitosSorteo = this.ArrayCondiciones.DigitosSorteo;
      let IdProducto = '*';
      let Descripcion = '*';
      if (this.contractualFrom.get('IdProducto')?.value !== null
        && this.contractualFrom.get('IdProducto')?.value !== undefined
        && this.contractualFrom.get('IdProducto')?.value !== '') {
        this.contractualFrom.get('DescripcionProducto')?.setValue('');
        IdProducto = this.contractualFrom.get('IdProducto')?.value;
      } else if (this.contractualFrom.get('DescripcionProducto')?.value !== null
        && this.contractualFrom.get('DescripcionProducto')?.value !== undefined
        && this.contractualFrom.get('DescripcionProducto')?.value !== '') {
        Descripcion = this.contractualFrom.get('DescripcionProducto')?.value;
      }
      this.loading = true;
      this.ContractualServices.getBuscarProducto(IdProducto, Descripcion).subscribe(
        result => {
          this.loading = false;
          if (result.length === 0) {
            this.notif.onWarning('Advertencia', 'No se encontró el producto.');
            this.contractualFrom.get('IdProducto')?.reset();
          } else if (result.length === 1) {
            const fechaHoy = new DatePipe('en-CO').transform(new Date(), 'yyyy/MM/dd');
            const fechaVigencia = new DatePipe('en-CO').transform(this.ArrayCondiciones.FechaVigencia, 'yyyy/MM/dd');
            if (fechaHoy != null && fechaVigencia != null && fechaHoy <= fechaVigencia) {
              this.contractualFrom.get('IdProducto')?.setValue(result[0].IdProducto);
              this.contractualFrom.get('DescripcionProducto')?.setValue(result[0].DescripcionProducto);
              this.MostrasAlertaProducto = false;
              if (this.contractualOperacionFrom.get('Codigo')?.value === '10'
                || this.contractualOperacionFrom.get('Codigo')?.value === '40') {
                this.Sorteo();
                this.Semilla();
                this.contractualFrom.get('Sorteo')?.reset();
                this.contractualFrom.get('Plazo')?.reset();
                this.contractualFrom.get('CuotaMes')?.reset();
                this.contractualFrom.get('ValorPlan')?.reset();
                this.contractualFrom.get('TasaNominal')?.reset();
                this.contractualFrom.get('TasaEfectiva')?.reset();
                this.contractualFrom.get('IdIndicador')?.reset();
                this.contractualFrom.get('Puntos')?.reset();
                this.BloquearNegociacion = null;
                this.BloquearPeriodo = null;
                this.Bloquearliquidacion = null;
                this.BloquearCuentaNegociacion = null;
                if (this.contractualFrom.get('IdProducto')?.value === 207) {
                  this.contractualFrom.get('NroTitulo')?.setValue(0);
                  this.BloquearNroTitulo = false;
                  this.oTitulo = true;
                }
              }
            } else {
              this.notif.onWarning('Advertencia', 'El producto no está vigente.');
              this.contractualFrom.get('IdProducto')?.reset();
              this.contractualFrom.get('DescripcionProducto')?.reset();
            }
          } else if (result.length > 1) {
            this.BloquearNegociacion = null;
            this.BloquearValorTotalPlan = false;
            this.BloquearCuotaMes = null;
            this.BloquearPeriodo = null;
            this.Bloquearliquidacion = null;
            this.BloquearCuentaNegociacion = null;
            this.resultProducto = result;
            this.ModalContractual.nativeElement.click();

            this.contractualFrom.get('Plazo')?.reset();
            this.contractualFrom.get('CuotaMes')?.reset();
            this.contractualFrom.get('ValorPlan')?.reset();
            this.contractualFrom.get('TasaNominal')?.reset();
            this.contractualFrom.get('TasaEfectiva')?.reset();
            this.contractualFrom.get('IdIndicador')?.reset();
            this.contractualFrom.get('Puntos')?.reset();
          }
        },
        error => {
          this.loading = false;
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    } else {
      let IdProducto = '*';
      let Descripcion = '*';
      if (this.contractualFrom.get('IdProducto')?.value !== null
        && this.contractualFrom.get('IdProducto')?.value !== undefined
        && this.contractualFrom.get('IdProducto')?.value !== '') {
        this.contractualFrom.get('DescripcionProducto')?.setValue('');
        IdProducto = this.contractualFrom.get('IdProducto')?.value;
      } else if (this.contractualFrom.get('DescripcionProducto')?.value !== null
        && this.contractualFrom.get('DescripcionProducto')?.value !== undefined
        && this.contractualFrom.get('DescripcionProducto')?.value !== '') {
        Descripcion = this.contractualFrom.get('DescripcionProducto')?.value;
      }
      this.loading = true;
      this.ContractualServices.getBuscarProducto(IdProducto, Descripcion).subscribe(
        result => {
          this.loading = false;
          if (result.length === 0) {
            this.notif.onWarning('Advertencia', 'No se encontró el producto.');
            this.contractualFrom.get('IdProducto')?.reset();
          } else if (result.length === 1) {
            const fechaHoy = new DatePipe('en-CO').transform(new Date(), 'yyyy/MM/dd');
            const fechaVigencia = new DatePipe('en-CO').transform(this.ArrayCondiciones.FechaVigencia, 'yyyy/MM/dd');
            if (fechaHoy != null && fechaVigencia != null && fechaHoy <= fechaVigencia) {
              this.contractualFrom.get('IdProducto')?.setValue(result[0].IdProducto);
              this.contractualFrom.get('DescripcionProducto')?.setValue(result[0].DescripcionProducto);
              if (this.contractualOperacionFrom.get('Codigo')?.value === '10'
              || this.contractualOperacionFrom.get('Codigo')?.value === '40') {
                this.Sorteo();
                this.Semilla();
                this.contractualFrom.get('Sorteo')?.reset();
                this.contractualFrom.get('Plazo')?.reset();
                this.contractualFrom.get('CuotaMes')?.reset();
                this.contractualFrom.get('ValorPlan')?.reset();
                this.contractualFrom.get('TasaNominal')?.reset();
                this.contractualFrom.get('TasaEfectiva')?.reset();
                this.contractualFrom.get('IdIndicador')?.reset();
                this.contractualFrom.get('Puntos')?.reset();
                this.BloquearNegociacion = null;
                this.BloquearPeriodo = null;
                this.Bloquearliquidacion = null;
                this.BloquearCuentaNegociacion = null;
              }
            } else {
              this.notif.onWarning('Advertencia', 'El producto no está vigente.');
              this.contractualFrom.get('IdProducto')?.reset();
              this.contractualFrom.get('DescripcionProducto')?.reset();
            }
          } else if (result.length > 1) {
            this.BloquearNegociacion = null;
            this.BloquearValorTotalPlan = false;
            this.BloquearCuotaMes = null;
            this.BloquearPeriodo = null;
            this.Bloquearliquidacion = null;
            this.BloquearCuentaNegociacion = null;
            this.resultProducto = result;
            this.ModalContractual.nativeElement.click();

            this.contractualFrom.get('Plazo')?.reset();
            this.contractualFrom.get('CuotaMes')?.reset();
            this.contractualFrom.get('ValorPlan')?.reset();
            this.contractualFrom.get('TasaNominal')?.reset();
            this.contractualFrom.get('TasaEfectiva')?.reset();
            this.contractualFrom.get('IdIndicador')?.reset();
            this.contractualFrom.get('Puntos')?.reset();
          }
        },
        error => {
          this.loading = false;
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    }
  }
  ValidarCampoProducto() {
    if (this.contractualFrom.get('DescripcionProducto')?.value !== ''
    && this.contractualFrom.get('DescripcionProducto')?.value !== null
    && this.contractualFrom.get('DescripcionProducto')?.value !== undefined) {
      this.MostrasAlertaProducto = false;
    } else {
      this.MostrasAlertaProducto = true;
    }
  }
  MapearDatosProductos(datos : any) {
    this.ArrayCondiciones = undefined;
    this.contractualFrom.get('IdProducto')?.setValue(datos.IdProducto);
    this.contractualFrom.get('DescripcionProducto')?.setValue(datos.DescripcionProducto);
    this.MostrasAlertaProducto = false;
    this.CondicionesProducto();
  }
  BuscarAsesor() {
    let IdAsesor = '*';
    let NombreAsesor = '*';

    if (this.contractualFrom.get('IdAsesor')?.value !== null
      && this.contractualFrom.get('IdAsesor')?.value !== undefined
      && this.contractualFrom.get('IdAsesor')?.value !== '') {
      this.contractualFrom.get('NombreAsesor')?.setValue('');
      IdAsesor = this.contractualFrom.get('IdAsesor')?.value;
    } else if (this.contractualFrom.get('NombreAsesor')?.value !== null
      && this.contractualFrom.get('NombreAsesor')?.value !== undefined
      && this.contractualFrom.get('NombreAsesor')?.value !== '') {
      NombreAsesor = this.contractualFrom.get('NombreAsesor')?.value;
    }

    if (IdAsesor === '*' && NombreAsesor === '*') {
      this.notif.onWarning('Advertencia', 'Debe ingresar el documento o el nombre del asesor.');
    } else {
      this.loading = true;
      this.ContractualServices.getBuscarAsesor(IdAsesor, NombreAsesor).subscribe(
        result => {
          this.loading = false;
          if (result.length === 1) {
            this.MapearDatosAsesor(result);
          } else if (result.length > 1) {
            this.resultAsesor = result;
            this.ModalAsesores.nativeElement.click();
          } else if (result === null || result.length === 0) {
            this.notif.onWarning('Advertencia', 'No se encontró al asesor.');
          }
        },
        error => {
          this.loading = false;
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    }
  }
  MapearDatosAsesor(datos : any) {
    if (datos.length >= 1) {
      this.contractualFrom.get('IdAsesor')?.setValue(datos[0].IdAsesor);
      this.contractualFrom.get('NombreAsesor')?.setValue(datos[0].Nombre);
      this.contractualFrom.get('DocumentoAsesor')?.setValue(datos[0].Documento);
    } else {
      this.contractualFrom.get('IdAsesor')?.setValue(datos.IdAsesor);
      this.contractualFrom.get('NombreAsesor')?.setValue(datos.Nombre);
      this.contractualFrom.get('DocumentoAsesor')?.setValue(datos.Documento);
    }
  }
  FormaPago() {
    this.ContractualServices.getFormaPago().subscribe(
      result => {
        this.resultFormaPago = result;
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  OperacionPermitida() {
    this.ContractualServices.getOperacionPermitida().subscribe(
      result => {
        this.contractualFrom.get('DescripcionOperacion')?.setValue(result[0].DescripcionOperacion);
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  ObtenerRelacion() {
    this.ContractualServices.ObtenerRelacion().subscribe(
      result => {
        this.resultRelacion = result;
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  Encabezado() {
    this.ContractualServices.getEncabezado().subscribe(
      result => {
        this.contractualFrom.get('DescripcionEstado')?.setValue(result[0].DescripcionEstado);
        this.contractualFrom.get('DescripcionFormaPago')?.setValue(result[1].DescripcionFormaPago);
        this.contractualFrom.get('IdFormaPago')?.setValue(result[1].IdFormaPago);
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  BuscarAsociado() {  
    this.ContractualServices.getBuscarAsesor(this.contractualFrom.get('IdAsesor')?.value, '*').subscribe(
      result => {
        this.loading = false;
        if (result.length === 1) {
          this.MapearDatosAsesor(result);
          this.Asociado();
          this.contractualFrom.get('IdPeriodo')?.setValue(30);
        }
      });
  }
  Asociado() {
    if (this.contractualOperacionFrom.get('Codigo')?.value === '10') {
      this.contractualFrom.get('IdCuentaDestino')?.reset();
      this.contractualFrom.get('IdLiquidacion')?.reset();
      this.contractualFrom.get('IdFormaPago')?.setValue(0);
      let Documento = '*';
      let Nombre = '*';
      if (this.contractualFrom.get('NumeroDocumento')?.value !== null
        && this.contractualFrom.get('NumeroDocumento')?.value !== undefined
        && this.contractualFrom.get('NumeroDocumento')?.value !== ''
        || this.contractualFrom.get('Nombre')?.value !== null
        && this.contractualFrom.get('Nombre')?.value !== undefined
        && this.contractualFrom.get('Nombre')?.value !== '') {

        if (this.contractualFrom.get('NumeroDocumento')?.value !== null
          && this.contractualFrom.get('NumeroDocumento')?.value !== undefined
          && this.contractualFrom.get('NumeroDocumento')?.value !== '') {
          Documento = this.contractualFrom.get('NumeroDocumento')?.value;
        } else if (this.contractualFrom.get('Nombre')?.value !== null
          && this.contractualFrom.get('Nombre')?.value !== undefined
          && this.contractualFrom.get('Nombre')?.value !== '') {
          Nombre = this.contractualFrom.get('Nombre')?.value;
        }
        if (this.contractualFrom.get('DocumentoAsesor')?.value !== this.contractualFrom.get('NumeroDocumento')?.value) {

          this.loading = true;
          this.ContractualServices.BuscarAsociado(Documento, Nombre).subscribe(
            result => {
              this.loading = false;
              if (result.length === 0) {
                this.notif.onWarning('Advertencia', 'No se encontró el asociado.');
              } else if (result.length === 1) {
                this.BuscarAsociadoModal(result[0].NumeroDocumento);
                this.BloquearDatoTitular = null;
                this.BloquaerProducto = null;
                this.BloquearFormaPago = null;
                this.MostrasAlertaAsociado = false;
                this.generalesService.Autofocus('SelectProducto');
              } else if (result.length > 1) {
                this.resultAsociados = result;
                this.ModalAsociados.nativeElement.click();
                this.BloquearDatoTitular = null;
                this.BloquaerProducto = null;
                this.BloquearFormaPago = null;
              } else if (result.Mensaje !== undefined || result.Mensaje !== null) {
                if (result.Mensaje === 'Gerencia de desarrollo.') {
                  swal.fire({
                    title: '<strong>! Advertencia ¡</strong>',
                    text: '',
                    icon: 'error',
                    animation: false,
                    html: 'Se encontraron coincidencias en la lista de <b>personas vetadas</b> por favor comuníquese con </b>'
                      + result.Mensaje + '.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    confirmButtonText: 'Ok',
                    confirmButtonColor: 'rgb(160, 0, 87)'
                  });
                } else if (result.Mensaje === 'Oficial de cumplimiento.') {
                  swal.fire({
                    title: '<strong>! Advertencia ¡</strong>',
                    text: '',
                    icon: 'error',
                    animation: false,
                    html: 'Se encontraron coincidencias en la lista de <b>personas vetadas</b> por favor comuníquese con </b>'
                      + result.Mensaje + '.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    confirmButtonText: 'Ok',
                    confirmButtonColor: 'rgb(160, 0, 87)'
                  });
                } else {
                  this.notif.onWarning('Advertencia', result.Mensaje);
                  this.clearFrom();
                  this.MapearDatosUsuario();
                  this.Encabezado();
                  this.OperacionPermitida();
                  this.btnGuardar = false;
                  this.BloquearFormaPago = null;
                  this.BloquearAsociado = null;
                  this.BloquearBuscar = false;
                  this.bloquearConsultaCuenta = false;
                }
                this.clearFrom();
                this.MapearDatosUsuario();
                this.Encabezado();
                this.OperacionPermitida();
                this.btnGuardar = false;
                this.BloquearFormaPago = null;
                this.BloquearAsociado = null;
                this.BloquearBuscar = false;
                this.bloquearConsultaCuenta = false;
              }
            },
            error => {
              this.loading = false;
              const errorMessage = <any>error;
              console.log(errorMessage);
            }
          );
        } else {
          this.notif.onWarning('Advertencia', 'La apertura debe ser de diferente titular.',
  );
          this.contractualFrom.get('NumeroDocumento')?.reset();
        }
      }
    } else if (this.contractualOperacionFrom.get('Codigo')?.value === '40') {
      this.contractualFrom.get('IdCuentaDestino')?.reset();
      this.contractualFrom.get('IdLiquidacion')?.reset();
      this.contractualFrom.get('IdFormaPago')?.setValue(0);
      let Documento = '*';
      let Nombre = '*';
      if (this.contractualFrom.get('NumeroDocumento')?.value !== null
        && this.contractualFrom.get('NumeroDocumento')?.value !== undefined
        && this.contractualFrom.get('NumeroDocumento')?.value !== ''
        || this.contractualFrom.get('Nombre')?.value !== null
        && this.contractualFrom.get('Nombre')?.value !== undefined
        && this.contractualFrom.get('Nombre')?.value !== '') {

        if (this.contractualFrom.get('NumeroDocumento')?.value !== null
          && this.contractualFrom.get('NumeroDocumento')?.value !== undefined
          && this.contractualFrom.get('NumeroDocumento')?.value !== '') {
          Documento = this.contractualFrom.get('NumeroDocumento')?.value;
        } else if (this.contractualFrom.get('Nombre')?.value !== null
          && this.contractualFrom.get('Nombre')?.value !== undefined
          && this.contractualFrom.get('Nombre')?.value !== '') {
          Nombre = this.contractualFrom.get('Nombre')?.value;
        }
        if (this.contractualFrom.get('DocumentoAsesor')?.value === this.contractualFrom.get('NumeroDocumento')?.value) {

          this.loading = true;
          this.ContractualServices.BuscarAsociado(Documento, Nombre).subscribe(
            result => {
              this.loading = false;
              if (result.length === 0) {
                this.notif.onWarning('Advertencia', 'No se encontró el asociado.');
              } else if (result.length === 1) {
                this.contractualFrom.get('NumeroDocumento')?.setValue(result[0].NumeroDocumento);
                this.contractualFrom.get('Nombre')?.setValue(result[0].PrimerApellido + ' ' +
                  result[0].SegundoApellido + ' ' + result[0].PrimerNombre + ' ' + result[0].SegundoNombre);
                this.contractualFrom.get('NumeroOficinaAsociado')?.setValue(result[0].IdOficina);
                this.contractualFrom.get('NombreOficinaAsociado')?.setValue(result[0].NombreOficina);
                this.contractualFrom.get('Clase')?.setValue(result[0].IdRelacionTipo);
                this.contractualFrom.get('LngTercero')?.setValue(result[0].lngTercero);
                this.BloquearDatoTitular = null;
                this.BloquaerProducto = null;
                this.BloquearFormaPago = null;
                this.generalesService.Autofocus('SelectProducto');
              } else if (result.length > 1) {
                this.resultAsociados = result;
                this.ModalAsociados.nativeElement.click();
                this.BloquearDatoTitular = null;
                this.BloquaerProducto = null;
                this.BloquearFormaPago = null;
              } else if (result.Mensaje !== undefined || result.Mensaje !== null) {
                if (result.Mensaje === 'Gerencia de desarrollo.') {
                  swal.fire({
                    title: '<strong>! Advertencia ¡</strong>',
                    text: '',
                    icon: 'error',
                    animation: false,
                    html: 'Se encontraron coincidencias en la lista de <b>personas vetadas</b> por favor comuníquese con </b>'
                      + result.Mensaje + '.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    confirmButtonText: 'Ok',
                    confirmButtonColor: 'rgb(160, 0, 87)'
                  });
                } else if (result.Mensaje === 'Oficial de cumplimiento.') {
                  swal.fire({
                    title: '<strong>! Advertencia ¡</strong>',
                    text: '',
                    icon: 'error',
                    animation: false,
                    html: 'Se encontraron coincidencias en la lista de <b>personas vetadas</b> por favor comuníquese con </b>'
                      + result.Mensaje + '.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    confirmButtonText: 'Ok',
                    confirmButtonColor: 'rgb(160, 0, 87)'
                  });
                } else {
                  this.notif.onWarning('Advertencia', result.Mensaje);
                  this.clearFrom();
                  this.MapearDatosUsuario();
                  this.Encabezado();
                  this.OperacionPermitida();
                  this.btnGuardar = false;
                  this.BloquearFormaPago = null;
                  this.BloquearAsociado = null;
                  this.BloquearBuscar = false;
                  this.bloquearConsultaCuenta = false;
                }
                this.clearFrom();
                this.MapearDatosUsuario();
                this.Encabezado();
                this.OperacionPermitida();
                this.btnGuardar = false;
                this.BloquearFormaPago = null;
                this.BloquearAsociado = null;
                this.BloquearBuscar = false;
                this.bloquearConsultaCuenta = false;
              }
            },
            error => {
              this.loading = false;
              const errorMessage = <any>error;
              console.log(errorMessage);
            }
          );
        } else {
          this.notif.onWarning('Advertencia', 'La apertura debe ser del mismo titular.',
  );
            this.contractualFrom.get('NumeroDocumento')?.reset();
        }
      }
    }
  }
  BuscarAsociadoModal(Documento = '*') {
    let Nombre = '*';
    if (this.contractualFrom.get('NumeroDocumento')?.value !== null
      && this.contractualFrom.get('NumeroDocumento')?.value !== undefined
      && this.contractualFrom.get('NumeroDocumento')?.value !== ''
    ) {
      this.contractualFrom.get('Nombre')?.setValue('');
      Documento = this.contractualFrom.get('NumeroDocumento')?.value;
    } else if (this.contractualFrom.get('Nombre')?.value !== null
      && this.contractualFrom.get('Nombre')?.value !== undefined
      && this.contractualFrom.get('Nombre')?.value !== ''
    ) {
      Nombre = this.contractualFrom.get('Nombre')?.value;
    }
    this.loading = true;
    this.ContractualServices.BuscarAsociado(Documento, Nombre).subscribe(
      result => {
        this.loading = false;
        this.dataObjet = undefined;
        if (result.length === 0) {
          this.notif.onWarning('Advertencia', 'No se encontró el asociado.');
          this.btnGuardar = false;
        } else if (result.length === 1) {
          this.contractualFrom.get('NumeroDocumento')?.setValue(result[0].NumeroDocumento);
          this.contractualFrom.get('Nombre')?.setValue(result[0].PrimerApellido + ' ' +
            result[0].SegundoApellido + ' ' + result[0].PrimerNombre + ' ' + result[0].SegundoNombre);
          this.contractualFrom.get('NumeroOficinaAsociado')?.setValue(result[0].IdOficina);
          this.contractualFrom.get('NombreOficinaAsociado')?.setValue(result[0].NombreOficina);
          this.contractualFrom.get('Clase')?.setValue(result[0].IdRelacionTipo);
          this.contractualFrom.get('LngTercero')?.setValue(result[0].lngTercero);
          this.MostrasAlertaAsociado = false;
        } else if (result.length > 1) {
          this.resultAsociados = result;
          this.ModalAsociados.nativeElement.click();
        } else if (result.Mensaje !== undefined || result.Mensaje !== null) {
          if (result.Mensaje === 'Persona Vetada') {
            swal.fire({
              title: 'Persona vetada',
              text: '',
              icon: 'error',
              confirmButtonColor: 'rgb(160,0,87)',
              allowOutsideClick: false,
              allowEscapeKey: false
            });
            this.clearFrom();
            this.MapearDatosUsuario();
            this.Encabezado();
            this.OperacionPermitida();
            this.btnGuardar = false;
            this.BloquearFormaPago = null;
            this.BloquearAsociado = null;
            this.BloquearBuscar = false;
            this.bloquearConsultaCuenta = false;
          } else {
            this.notif.onWarning('Advertencia', result.Mensaje);
            this.clearFrom();
            this.MapearDatosUsuario();
            this.Encabezado();
            this.OperacionPermitida();
            this.btnGuardar = false;
            this.BloquearFormaPago = null;
            this.BloquearAsociado = null;
            this.BloquearBuscar = false;
            this.bloquearConsultaCuenta = false;
          }
        }
      },
      error => {
        this.loading = false;
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  ValidarCampoAsociado() {
    if (this.contractualFrom.get('Nombre')?.value !== ''
    && this.contractualFrom.get('Nombre')?.value !== null
    && this.contractualFrom.get('Nombre')?.value !== undefined) {
      this.MostrasAlertaAsociado = false;
    } else {
      this.MostrasAlertaAsociado = true;
    }
  }
  BuscarPorCuenta() {
    if (this.contractualFrom.get('IdOficina')?.value !== ''
      && this.contractualFrom.get('IdOficina')?.value !== undefined
      && this.contractualFrom.get('IdOficina')?.value !== null
      && this.contractualFrom.get('IdProductoCuenta')?.value !== ''
      && this.contractualFrom.get('IdProductoCuenta')?.value !== undefined
      && this.contractualFrom.get('IdProductoCuenta')?.value !== null
      && this.contractualFrom.get('IdConsecutivo')?.value !== ''
      && this.contractualFrom.get('IdConsecutivo')?.value !== undefined
      && this.contractualFrom.get('IdConsecutivo')?.value !== null
      && this.contractualFrom.get('IdDigito')?.value !== ''
      && this.contractualFrom.get('IdDigito')?.value !== undefined
      && this.contractualFrom.get('IdDigito')?.value !== null
    ) {
      this.Bloquear = false;
      this.BloquearFormaPago = false;
      this.BloquearAsociado = false;
      this.BloquearBuscar = false;
      this.loading = true;
      this.ContractualServices.getBuscarCuenta(this.contractualFrom.value).subscribe(
        result => {
          this.loading = false;
            if (result !== null) {
            this.ResetValorSeleccionado(1);
            this.MapearDatosCuenta(result);
            this.btnGuardar = true;
            this.itemsSend.NombrePlan = this.contractualFrom.get('DescripcionProducto')?.value;
            this.itemsSend.Cuenta = this.contractualFrom.get('Cuenta')?.value;
            this.itemsSend.NombreApellidos = this.contractualFrom.get('Nombre')?.value;
            this.itemsSend.Cedula = this.contractualFrom.get('NumeroDocumento')?.value;
            this.itemsSend.Direccion = this.contractualFrom.get('DireccionContractual')?.value;
            this.itemsSend.Telefono = this.contractualFrom.get('TelefonoContractual')?.value;
            this.itemsSend.Ciudad = this.contractualFrom.get('CiudadContractual')?.value;
            this.itemsSend.FechaApertura = this.contractualFrom.get('FechaApertura')?.value;
            this.itemsSend.FechaVecimiento = this.contractualFrom.get('FechaVencimiento')?.value;
            this.itemsSend.Plazo = this.contractualFrom.get('Plazo')?.value;
            this.itemsSend.Cuota = this.contractualFrom.get('CuotaMes')?.value;
            this.itemsSend.TipoCuentaDestino = 'Cuenta destino:';
            this.itemsSend.CuentaAhorros = this.contractualFrom.get('CuentaDestino')?.value;
            this.itemsSend.Sorteo = this.contractualFrom.get('Sorteo')?.value;
          } else {
            this.loading = false;
            this.notif.onWarning('Advertencia', 'La cuenta no existe.');
            this.clearTitulares();
            this.contractualFrom.get('IdOficina')?.reset();
            this.contractualFrom.get('IdProductoCuenta')?.reset();
            this.contractualFrom.get('IdConsecutivo')?.reset();
            this.contractualFrom.get('IdDigito')?.reset();
            this.dataObjet = undefined;
            this.BloquearBuscar = null;
            this.clearFrom();
          }
        },
        error => {
          this.loading = false;
          const errorMessage = <any>error;
          console.log(errorMessage);
          this.notif.onWarning('Advertencia', 'La cuenta no existe.');
          this.clearTitulares();
          this.contractualFrom.get('IdOficina')?.reset();
          this.contractualFrom.get('IdProductoCuenta')?.reset();
          this.contractualFrom.get('IdConsecutivo')?.reset();
          this.contractualFrom.get('IdDigito')?.reset();
          this.dataObjet = undefined;
          this.BloquearBuscar = null;
        }
      );
    } else {
      this.notif.onWarning('Advertencia', 'Número de cuenta incompleto.');
    }
  }
  BuscarCuentaParaPuntos() {
    this.ContractualServices.getBuscarCuenta(this.contractualFrom.value).subscribe(
      result => {
        const numberNominal = this.returnFormatNum(result.ltTasa[0].TasaNominal);
        this.contractualFrom.get('TasaNominal')?.setValue(numberNominal + " %");
        const numberEfectiva = this.returnFormatNum(result.ltTasa[0].TasaEfectiva);
        this.contractualFrom.get('TasaEfectiva')?.setValue(numberEfectiva  + " %");
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  BuscarDatosCuenta(IdOficina : number, IdProductoCuenta : number, IdConsecutivo : number, IdDigito : number) {
    this.loading = true;
    this.ContractualServices.getBuscarCuenta
      ({ 'IdOficina': IdOficina, 'IdProductoCuenta': IdProductoCuenta, 'IdConsecutivo': IdConsecutivo,  'IdDigito': IdDigito }).subscribe(
        result => {
          this.loading = false;
          this.MapearDatosCuenta(result);
          this.btnCambiarEstado = true;
          this.btnActualizar = true;
          this.btnGuardar = true;

          this.contractualFrom.get('DocumentoTitular')?.reset();
          this.contractualFrom.get('NombreTitular')?.reset();
          this.contractualFrom.get('Tipo')?.reset();
          this.itemsDataObejct = [];
          this.BloquearFormaPago = false;

          this.itemsSend.NombrePlan = this.contractualFrom.get('DescripcionProducto')?.value;
          this.itemsSend.Cuenta = this.contractualFrom.get('Cuenta')?.value;
          this.itemsSend.NombreApellidos = this.contractualFrom.get('Nombre')?.value;
          this.itemsSend.Cedula = this.contractualFrom.get('NumeroDocumento')?.value;
          this.itemsSend.Direccion = this.contractualFrom.get('DireccionContractual')?.value;
          this.itemsSend.Telefono = this.contractualFrom.get('TelefonoContractual')?.value;
          this.itemsSend.Ciudad = this.contractualFrom.get('CiudadContractual')?.value;
          this.itemsSend.FechaApertura = this.contractualFrom.get('FechaApertura')?.value;
          this.itemsSend.FechaVecimiento = this.contractualFrom.get('FechaVencimiento')?.value;
          this.itemsSend.Plazo = this.contractualFrom.get('Plazo')?.value;
          this.itemsSend.Cuota = this.contractualFrom.get('CuotaMes')?.value;
          this.itemsSend.TipoCuentaDestino = 'Cuenta destino:';
          this.itemsSend.CuentaAhorros = this.contractualFrom.get('CuentaDestino')?.value;
          this.itemsSend.Sorteo = this.contractualFrom.get('Sorteo')?.value;

          if (this.contractualOperacionFrom.get('Codigo')?.value === '10'
          ||  this.contractualOperacionFrom.get('Codigo')?.value === '40'){
            
            this.GenerarImpresion();
            $("#ImpresionContractual").show();
            this.ModalImpresion.nativeElement.click();
            this.contractualOperacionFrom.get('Codigo')?.reset();

          }else 
          {
            this.contractualOperacionFrom.get('Codigo')?.reset();
          }

           if (this.contractualOperacionFrom.get('Codigo')?.value !== null
          &&  this.contractualOperacionFrom.get('Codigo')?.value !== '2' ) {
            this.ValorSeleccionado();
          } else {
            this.contractualOperacionFrom.get('Codigo')?.reset();
          }

        },
        error => {
          this.loading = false;
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
  }
  MapearDatosCuenta(result : any) {
    if (result !== null) {
      console.log("Cuenta",result);
      let data = localStorage.getItem('Data');
      this.dataUser = JSON.parse(window.atob(data == null ? "" : data));
      if (result.length >= 1) {
        this.dataObjet = result;
        this.contractualFrom.get('Cuenta')?.setValue(this.dataObjet[0].Cuenta);
        this.contractualFrom.get('IdCuenta')?.setValue(this.dataObjet[0].IdCuenta);
        this.contractualFrom.get('IdUsuarioSGF')?.setValue(this.dataUser.IdUsuarioSGF);
        this.contractualFrom.get('LngTercero')?.setValue(this.dataObjet.LngTercero);
        this.contractualFrom.get('NumeroDocumento')?.setValue(this.dataObjet[0].NumeroDocumento);
        this.contractualFrom.get('TipoDocumento')?.setValue(this.dataObjet[0].TipoDocumento);
        this.contractualFrom.get('Nombre')?.setValue(this.dataObjet[0].PrimerApellido + ' ' + this.dataObjet[0].SegundoApellido +
          ' ' + this.dataObjet[0].PrimerNombre + ' ' + this.dataObjet[0].SegundoNombre);
        this.contractualFrom.get('IdAsesor')?.setValue(this.dataObjet[0].IdAsesor);
        if (this.contractualFrom.get('IdAsesor')?.value === 2) {
          this.contractualFrom.get('NombreAsesor')?.setValue('Coogranada');
        } else {
          this.contractualFrom.get('NombreAsesor')?.setValue(this.dataObjet[0].PrimerApellidoAsesor +
            ' ' + this.dataObjet[0].SegundoApellidoAsesor +
            ' ' + this.dataObjet[0].PrimerNombreAsesor + ' ' + this.dataObjet[0].SegundoNombreAsesor);
        }
        this.contractualFrom.get('NumeroOficina')?.setValue(this.dataObjet[0].IdOficina);
        this.contractualFrom.get('NombreOficina')?.setValue(this.dataObjet[0].DescripcionOficina);
        this.contractualFrom.get('IdOficina')?.setValue(this.dataObjet[0].IdOficina);
        this.datoOficina = +this.dataObjet[0].IdOficina;
        this.contractualFrom.get('IdProducto')?.setValue(this.dataObjet[0].IdProducto);
        this.contractualFrom.get('DescripcionProducto')?.setValue(this.dataObjet[0].DescripcionProducto);
        this.datoNombreProducto = this.dataObjet[0].DescripcionProducto;
        this.contractualFrom.get('IdEstado')?.setValue(this.dataObjet[0].IdEstado);
        this.datoCambioEstado = +this.dataObjet[0].IdEstado;
        this.contractualFrom.get('DescripcionEstado')?.setValue(this.dataObjet[0].DescripcionEstado);
        this.contractualFrom.get('IdFormaPago')?.setValue(this.dataObjet[0].IdFormaPago);
        this.datoformaPago = +this.dataObjet[0].IdFormaPago;
        this.datoIdFormaPago = +this.dataObjet[0].IdFormaPago;
        this.contractualFrom.get('DescripcionFormaPago')?.setValue(this.dataObjet[0].DescripcionFormaPago);
        this.contractualFrom.get('IdProductoCuenta')?.setValue(this.dataObjet[0].IdProducto);
        this.datoProducto = +this.dataObjet[0].IdProducto;
        this.contractualFrom.get('IdConsecutivo')?.setValue(this.dataObjet[0].IdConsecutivo);
        this.datoConsecutivo = +this.dataObjet[0].IdConsecutivo;
        this.contractualFrom.get('IdDigito')?.setValue(this.dataObjet[0].IdDigito);
        this.datoDigito = +this.dataObjet[0].IdDigito;
        this.contractualFrom.get('DescripcionOperacion')?.setValue(this.dataObjet[0].DescripcionOperacion);
        this.contractualFrom.get('Sorteo')?.setValue(this.dataObjet[0].Sorteo);
        this.contractualFrom.get('NroTitulo')?.setValue(this.dataObjet[0].NroTitulo);
        this.contractualFrom.get('NroTituloAnterior')?.setValue(this.dataObjet[0].NroTitulo);
        this.contractualFrom.get('NumeroOficinaAsociado')?.setValue(this.dataObjet[0].IdOficinaAsociado);
        this.contractualFrom.get('NombreOficinaAsociado')?.setValue(this.dataObjet[0].DescripcionOficinaAsociado);
        this.contractualFrom.get('Clase')?.setValue(this.dataObjet[0].IdRelacionTipo);
        this.contractualFrom.get('IdPeriodo')?.setValue(this.dataObjet[0].IdPeriodo);
        this.contractualFrom.get('Plazo')?.setValue(this.dataObjet[0].Plazo);
        this.datoPlazo = this.dataObjet[0].Plazo;
        this.contractualFrom.get('Efectivo')?.setValue(this.dataObjet[0].Efectivo);
        this.contractualFrom.get('Canje')?.setValue(this.dataObjet[0].Canje);
        this.contractualFrom.get('CuotaMes')?.setValue(this.dataObjet[0].CuotaMes);
        this.datoCuotaMes = this.dataObjet[0].CuotaMes;
        this.contractualFrom.get('InteresCausado')?.setValue(this.dataObjet[0].InteresCausado);
        this.contractualFrom.get('InteresxPagar')?.setValue(this.dataObjet[0].InteresxPagar);
        this.contractualFrom.get('InteresLiquidado')?.setValue(this.dataObjet[0].InteresLiquidado);
        this.contractualFrom.get('InteresxPuntos')?.setValue(this.dataObjet[0].InteresxPuntos);
        this.contractualFrom.get('Retencion')?.setValue(this.dataObjet[0].Retencion);
        this.contractualFrom.get('SaldoMinimo')?.setValue(this.dataObjet[0].SaldoMinimo);
        this.contractualFrom.get('ValorPlan')?.setValue(this.dataObjet[0].ValorPlan);
        this.datoValorPlan = this.dataObjet[0].ValorPlan;
        this.contractualFrom.get('SaldoInicial')?.setValue(this.dataObjet[0].SaldoInicial);

        const numberNominal = this.returnFormatNum(this.dataObjet[0].ltTasa[0].TasaNominal.toFixed(4));
        this.contractualFrom.get('TasaNominal')?.setValue(numberNominal + "%");
        const numberEfectiva = this.dataObjet[0].ltTasa[0].TasaEfectiva.toFixed(4);
        this.contractualFrom.get('TasaEfectiva')?.setValue(numberEfectiva + "%");

        this.datoTasaEfectiva = this.returnFormatNumSeis(this.dataObjet[0].ltTasa[0].TasaEfectiva);
        this.datoAutorizacionTasa = this.returnFormatNumSeis(this.dataObjet[0].ltTasa[0].TasaEfectiva);
        
        this.Indicador();
        if (this.dataObjet[0].PuntosA !== null) {
          this.ContractualServices.ObtenerPuntosAdicionales(this.datoProducto).subscribe(
            resultP => {
              this.resultPuntosAdicionales = resultP;
              this.resultPuntosAdicionales.forEach((elementPuntos : any ) => {
                if (elementPuntos.IdPuntosAdicionales === this.dataObjet[0].PuntosA.IdPuntosAdicionales) {
                  this.AdicionarPuntosFrom.get('AdicionarPunto')?.setValue(elementPuntos);
                }
              });
            },
            error => {
              const errorMessage = <any>error;
              console.log(errorMessage);
            }
          );
        }
        this.contractualFrom.get('IdIndicador')?.setValue(this.dataObjet[0].IdIndicador);
        this.contractualFrom.get('Puntos')?.setValue(this.dataObjet[0].Puntos);
        this.contractualFrom.get('IdLiquidacion')?.setValue(this.dataObjet[0].IdLiquidacion);
        this.datoLiquidacion = +this.dataObjet[0].IdLiquidacion;
        this.contractualFrom.get('CuentaDestino')?.setValue(this.dataObjet[0].CuentaDestino);
        this.contractualFrom.get('IdCuentaDestino')?.setValue(this.dataObjet[0].IdCuentaDestino);
        //this.datoCuentaDestino = this.dataObjet[0].IdCuentaDestino;
        this.AsesorFrom.get('strCodigo')?.setValue(this.dataObjet[0].IdAsesorExterno);
        this.datoAsesorExterno = +this.dataObjet[0].IdAsesorExterno;
        this.AsesorFrom.get('strNombre')?.setValue(this.dataObjet[0].PrimerNombreAsesorE + ' ' + this.dataObjet[0].SegundoNombreAsesoreE +
          ' ' + this.dataObjet[0].PrimerApellidoAsesorE + ' ' + this.dataObjet[0].SegundoApellidoAsesorE);
        this.contractualFrom.get('DireccionContractual')?.setValue(this.dataObjet[0].DireccionContractual);
        this.contractualFrom.get('TelefonoContractual')?.setValue(this.dataObjet[0].TelefonoContractual);
        this.contractualFrom.get('CiudadContractual')?.setValue(this.dataObjet[0].CiudadContractual);
        this.ObtenerHistorial();
        this.contractualFrom.get('FechaApertura')?.setValue(
          new DatePipe('en-CO').transform(this.dataObjet[0].FechaApertura, 'yyyy/MM/dd  HH:mm:ss'));
        this.contractualFrom.get('FechaUltimaTrans')?.setValue(
          new DatePipe('en-CO').transform(this.dataObjet[0].FechaUltimaTrans, 'yyyy/MM/dd  HH:mm:ss'));
        this.contractualFrom.get('FechaVencimiento')?.setValue(
          new DatePipe('en-CO').transform(this.dataObjet[0].FechaVencimiento, 'yyyy/MM/dd  HH:mm:ss'));
        if (this.dataObjet.FechaCancelacion != null) {
          this.contractualFrom.get('FechaCancelacion')?.setValue(
            new DatePipe('en-CO').transform(this.dataObjet[0].FechaCancelacion, 'yyyy/MM/dd  HH:mm:ss'));
        } else {
          this.contractualFrom.get('FechaCancelacion')?.reset();
        } if (this.dataObjet[0].ValorSorteo === null) {
          this.contractualFrom.get('ValorSorteo')?.setValue(0);
        } else {
          this.contractualFrom.get('ValorSorteo')?.setValue(this.dataObjet[0].ValorSorteo);
        } if (this.dataObjet[0].InteresxPuntos === null) {
          this.contractualFrom.get('InteresxPuntos')?.setValue(0);
        } else {
          this.contractualFrom.get('InteresxPuntos')?.setValue(this.dataObjet[0].InteresxPuntos);
        }
        this.SaldoTotal();
        this.contractualFrom.get('BuscarDocumento')?.reset();
        this.contractualFrom.get('BuscarNombre')?.reset();
        this.BloquearBuscar = false;
        this.dataObjet.Titulares = this.dataObjet[0].Titulares;
        this.emitEventContractual.emit(true);
      } else {
        this.dataObjet = result;
        this.contractualFrom.get('Cuenta')?.setValue(this.dataObjet.Cuenta);
        this.contractualFrom.get('IdCuenta')?.setValue(this.dataObjet.IdCuenta);
        this.contractualFrom.get('IdUsuarioSGF')?.setValue(this.dataUser.IdUsuarioSGF);
        this.contractualFrom.get('LngTercero')?.setValue(this.dataObjet.LngTercero);
        this.contractualFrom.get('NumeroDocumento')?.setValue(this.dataObjet.NumeroDocumento);
        this.contractualFrom.get('TipoDocumento')?.setValue(this.dataObjet.TipoDocumento);
        this.contractualFrom.get('Nombre')?.setValue(this.dataObjet.PrimerApellido + ' ' + this.dataObjet.SegundoApellido +
          ' ' + this.dataObjet.PrimerNombre + ' ' + this.dataObjet.SegundoNombre);
        this.contractualFrom.get('IdAsesor')?.setValue(this.dataObjet.IdAsesor);
        if (this.contractualFrom.get('IdAsesor')?.value === 2) {
          this.contractualFrom.get('NombreAsesor')?.setValue('Coogranada');
        } else {
          this.contractualFrom.get('NombreAsesor')?.setValue(this.dataObjet.PrimerApellidoAsesor + ' '
            + this.dataObjet.SegundoApellidoAsesor +
            ' ' + this.dataObjet.PrimerNombreAsesor + ' ' + this.dataObjet.SegundoNombreAsesor);
        }
        this.contractualFrom.get('NumeroOficina')?.setValue(this.dataObjet.IdOficina);
        this.contractualFrom.get('NombreOficina')?.setValue(this.dataObjet.DescripcionOficina);
        this.contractualFrom.get('IdOficina')?.setValue(this.dataObjet.IdOficina);
        this.datoOficina = +this.dataObjet.IdOficina;
        this.contractualFrom.get('IdProducto')?.setValue(this.dataObjet.IdProducto);
        this.contractualFrom.get('DescripcionProducto')?.setValue(this.dataObjet.DescripcionProducto);
        this.datoNombreProducto = this.dataObjet.DescripcionProducto;
        this.contractualFrom.get('IdEstado')?.setValue(this.dataObjet.IdEstado);
        this.datoCambioEstado = +this.dataObjet.IdEstado;
        this.contractualFrom.get('DescripcionEstado')?.setValue(this.dataObjet.DescripcionEstado);
        this.contractualFrom.get('IdFormaPago')?.setValue(this.dataObjet.IdFormaPago);
        this.datoformaPago = +this.dataObjet.IdFormaPago;
        this.datoIdFormaPago = +this.dataObjet.IdFormaPago;
        this.contractualFrom.get('DescripcionFormaPago')?.setValue(this.dataObjet.DescripcionFormaPago);
        this.contractualFrom.get('IdProductoCuenta')?.setValue(this.dataObjet.IdProducto);
        this.datoProducto = +this.dataObjet.IdProducto;
        this.contractualFrom.get('IdConsecutivo')?.setValue(this.dataObjet.IdConsecutivo);
        this.datoConsecutivo = +this.dataObjet.IdConsecutivo;
        this.contractualFrom.get('IdDigito')?.setValue(this.dataObjet.IdDigito);
        this.datoDigito = +this.dataObjet.IdDigito;
        this.contractualFrom.get('DescripcionOperacion')?.setValue(this.dataObjet.DescripcionOperacion);
        this.contractualFrom.get('Sorteo')?.setValue(this.dataObjet.Sorteo);
        this.contractualFrom.get('NroTitulo')?.setValue(this.dataObjet.NroTitulo);
        this.contractualFrom.get('NroTituloAnterior')?.setValue(this.dataObjet.NroTitulo);
        this.contractualFrom.get('NumeroOficinaAsociado')?.setValue(this.dataObjet.IdOficinaAsociado);
        this.contractualFrom.get('NombreOficinaAsociado')?.setValue(this.dataObjet.DescripcionOficinaAsociado);
        this.contractualFrom.get('Clase')?.setValue(this.dataObjet.IdRelacionTipo);
        this.contractualFrom.get('IdPeriodo')?.setValue(this.dataObjet.IdPeriodo);
        this.contractualFrom.get('Plazo')?.setValue(this.dataObjet.Plazo);
        this.datoPlazo = this.dataObjet.Plazo;
        this.contractualFrom.get('Efectivo')?.setValue(this.dataObjet.Efectivo);
        this.contractualFrom.get('Canje')?.setValue(this.dataObjet.Canje);
        this.contractualFrom.get('CuotaMes')?.setValue(this.dataObjet.CuotaMes);
        this.datoCuotaMes = this.dataObjet.CuotaMes;
        this.contractualFrom.get('InteresCausado')?.setValue(this.dataObjet.InteresCausado);
        this.contractualFrom.get('InteresxPagar')?.setValue(this.dataObjet.InteresxPagar);
        this.contractualFrom.get('InteresLiquidado')?.setValue(this.dataObjet.InteresLiquidado);
        this.contractualFrom.get('InteresxPuntos')?.setValue(this.dataObjet.InteresxPuntos);
        this.contractualFrom.get('Retencion')?.setValue(this.dataObjet.Retencion);
        this.contractualFrom.get('SaldoMinimo')?.setValue(this.dataObjet.SaldoMinimo);
        this.contractualFrom.get('ValorPlan')?.setValue(this.dataObjet.ValorPlan);
        this.datoValorPlan = this.dataObjet.ValorPlan;
        this.contractualFrom.get('SaldoInicial')?.setValue(this.dataObjet.SaldoInicial);
        const numberNominal = this.returnFormatNum(this.dataObjet.ltTasa[0].TasaNominal.toFixed(4));
        this.contractualFrom.get('TasaNominal')?.setValue(numberNominal + "%");
        const numberEfectiva = this.dataObjet.ltTasa[0].TasaEfectiva.toFixed(4);
        this.contractualFrom.get('TasaEfectiva')?.setValue(numberEfectiva + "%");
        this.datoTasaEfectiva = this.returnFormatNumSeis(this.dataObjet.ltTasa[0].TasaEfectiva);
        this.datoAutorizacionTasa = this.returnFormatNumSeis(this.dataObjet.ltTasa[0].TasaEfectiva);
        this.Indicador();
        this.contractualFrom.get('IdIndicador')?.setValue(this.dataObjet.IdIndicador);
        this.contractualFrom.get('Puntos')?.setValue(this.dataObjet.Puntos);
        if (this.dataObjet.PuntosA !== null) {
          this.ContractualServices.ObtenerPuntosAdicionales(this.datoProducto).subscribe(
            resultP => {
              this.resultPuntosAdicionales = resultP;
              this.resultPuntosAdicionales.forEach((elementPuntos : any) => {
                if (elementPuntos.IdPuntosAdicionales === this.dataObjet.PuntosA.IdPuntosAdicionales) {
                  this.AdicionarPuntosFrom.get('AdicionarPunto')?.setValue(elementPuntos);
                }
              });
            },
            error => {
              const errorMessage = <any>error;
              console.log(errorMessage);
            }
          );
        }
        this.contractualFrom.get('IdLiquidacion')?.setValue(this.dataObjet.IdLiquidacion);
        this.datoLiquidacion = +this.dataObjet.IdLiquidacion;
        this.contractualFrom.get('CuentaDestino')?.setValue(this.dataObjet.CuentaDestino);
        this.contractualFrom.get('IdCuentaDestino')?.setValue(this.dataObjet.IdCuentaDestino);
        //this.datoCuentaDestino = this.dataObjet.IdCuentaDestino;

        this.AsesorFrom.get('strCodigo')?.setValue(this.dataObjet.IdAsesorExterno);
        this.datoAsesorExterno = +this.dataObjet.IdAsesorExterno;
        this.AsesorFrom.get('strNombre')?.setValue(this.dataObjet.PrimerNombreAsesorE + ' ' + this.dataObjet.SegundoNombreAsesoreE +
          ' ' + this.dataObjet.PrimerApellidoAsesorE + ' ' + this.dataObjet.SegundoApellidoAsesorE);
        this.contractualFrom.get('DireccionContractual')?.setValue(this.dataObjet.DireccionContractual);
        this.contractualFrom.get('TelefonoContractual')?.setValue(this.dataObjet.TelefonoContractual);
        this.contractualFrom.get('CiudadContractual')?.setValue(this.dataObjet.CiudadContractual);
        this.ObtenerHistorial();
        this.contractualFrom.get('FechaApertura')?.setValue(
          new DatePipe('en-CO').transform(this.dataObjet.FechaApertura, 'yyyy/MM/dd  HH:mm:ss'));
        this.contractualFrom.get('FechaUltimaTrans')?.setValue(
          new DatePipe('en-CO').transform(this.dataObjet.FechaUltimaTrans, 'yyyy/MM/dd  HH:mm:ss'));
        this.contractualFrom.get('FechaVencimiento')?.setValue(
          new DatePipe('en-CO').transform(this.dataObjet.FechaVencimiento, 'yyyy/MM/dd  HH:mm:ss'));
        if (this.dataObjet.FechaCancelacion != null) {
          this.contractualFrom.get('FechaCancelacion')?.setValue(
            new DatePipe('en-CO').transform(this.dataObjet.FechaCancelacion, 'yyyy/MM/dd  HH:mm:ss'));
        } else {
          this.contractualFrom.get('FechaCancelacion')?.reset();
        } if (this.dataObjet.ValorSorteo === null) {
          this.contractualFrom.get('ValorSorteo')?.setValue(0);
        } else {
          this.contractualFrom.get('ValorSorteo')?.setValue(this.dataObjet.ValorSorteo);
        } if (this.dataObjet.InteresxPuntos === null) {
          this.contractualFrom.get('InteresxPuntos')?.setValue(0);
        } else {
          this.contractualFrom.get('InteresxPuntos')?.setValue(this.dataObjet.InteresxPuntos);
        }
        this.SaldoTotal();
        this.contractualFrom.get('BuscarDocumento')?.reset();
        this.contractualFrom.get('BuscarNombre')?.reset();
        this.BloquearBuscar = false;
        this.emitEventContractual.emit(true);
        }       
        if (this.dataObjet.Titulares != null && this.dataObjet.Titulares.length !== 0) {
            this.dataObjetTitulares = this.dataObjet.Titulares;
            this.dataObjetTitulares.forEach(x => x.Accion = "DB");
            this.dataObjetTitulares = this.dataObjetTitulares.sort((a, b) => {
              const A = new Date(a.FechaMatricula).getTime();
              const B = new Date(b.FechaMatricula).getTime();
              if (A > B)
                return -1;
              if (A < B)
                return 1;
              return 0;
            });
          } else {
            this.dataObjetTitulares = [];
          }
      this.bloquearConsultaCuenta = false;
    } else {
      this.loading = false;
      this.notif.onWarning('Advertencia', 'La cuenta no existe.');
      this.clearCampos();
      this.dataObjet = undefined;
    }
  }
  BuscarPorIdCuenta() {
  this.ContractualServices.BuscarPorIdCuenta(this.contractualFrom.get('IdCuenta')?.value).subscribe(
    result => {
      const  IdOficina  = result.IdOficina;
      const  IdProducto = result.IdProducto;
      const IdConsecutivo = result.IdConsecutivo;
      const  IdDigito = result.IdDigito;
      this.BuscarDatosCuenta(IdOficina, IdProducto, IdConsecutivo, IdDigito);
    },
    error => {
      const errorMessage = <any>error;
      console.log(errorMessage);
    }
  );
  }
  private returnFormatNum(num : string): string {
    num = num.toString();
    num = num.slice(0, (num.indexOf('.')) + 5);
    return num;
  }

  private returnFormatNumSeis(num : string): string {
    num = num.toString();
    num = num.slice(0, (num.indexOf('.')) + 7);
    return num;
  }

  BotonBuscarContractual() {
    if (this.contractualFrom.get('BuscarDocumento')?.value !== null
    && this.contractualFrom.get('BuscarDocumento')?.value !== undefined
    && this.contractualFrom.get('BuscarDocumento')?.value !== '') {
      this.BuscarCuentaPorDocumento();
    } else if (this.contractualFrom.get('BuscarNombre')?.value !== null
      && this.contractualFrom.get('BuscarNombre')?.value !== undefined
      && this.contractualFrom.get('BuscarNombre')?.value !== '') {
      this.BuscarCuentaPorNombre();
     }
    
  }
  BuscarCuentaPorDocumento() {
      this.loading = true;
      this.ContractualServices.getBuscarPorDocumento(this.contractualFrom.value).subscribe(
        result => {
          this.loading = false;
          if (result.length === 0) {
            this.notif.onWarning('Advertencia', 'No se encontró registro.');
            this.clearFrom();
            this.generalesService.Autofocus('SelectBuscar');
          } else if (result.length <= 1) {
            this.contractualFrom.get('BuscarDocumento')?.reset();
            this.clearFrom();
            this.MapearDatosCuenta(result);
            this.btnCambiarEstado = true;
            this.btnActualizar = true;
            this.btnGuardar = true;
            this.contractualOperacionFrom.get('Codigo')?.reset();

            this.itemsSend.NombrePlan = this.contractualFrom.get('DescripcionProducto')?.value;
            this.itemsSend.Cuenta = this.contractualFrom.get('Cuenta')?.value;
            this.itemsSend.NombreApellidos = this.contractualFrom.get('Nombre')?.value;
            this.itemsSend.Cedula = this.contractualFrom.get('NumeroDocumento')?.value;
            this.itemsSend.Direccion = this.contractualFrom.get('DireccionContractual')?.value;
            this.itemsSend.Telefono = this.contractualFrom.get('TelefonoContractual')?.value;
            this.itemsSend.Ciudad = this.contractualFrom.get('CiudadContractual')?.value;
            this.itemsSend.FechaApertura = this.contractualFrom.get('FechaApertura')?.value;
            this.itemsSend.FechaVecimiento = this.contractualFrom.get('FechaVencimiento')?.value;
            this.itemsSend.Plazo = this.contractualFrom.get('Plazo')?.value;
            this.itemsSend.Cuota = this.contractualFrom.get('CuotaMes')?.value;
            this.itemsSend.TipoCuentaDestino = 'Cuenta destino:';
            this.itemsSend.CuentaAhorros = this.contractualFrom.get('CuentaDestino')?.value;
            this.itemsSend.Sorteo = this.contractualFrom.get('Sorteo')?.value;

          } else {
            this.dataAsociados = result;
            this.ModalBuscarAsociados.nativeElement.click();
            this.btnCambiarEstado = true;
            this.btnActualizar = true;
            this.btnGuardar = true;
          }
        },
        error => {
          this.loading = false;
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
  }
  BuscarCuentaPorNombre() {
        this.loading = true;
        this.ContractualServices.getBuscarPorNombre(this.contractualFrom.value).subscribe(
          result => {
            this.loading = false;
            if (result.length === 0) {
              this.notif.onWarning('Advertencia', 'No se encontró registro.');
              this.clearFrom();
              this.generalesService.Autofocus('SelectBuscarNombre');
            } else if (result.length <= 1) {
              this.contractualFrom.get('BuscarDocumento')?.reset();
              this.clearFrom();
              this.MapearDatosCuenta(result);
              this.btnCambiarEstado = true;
              this.btnActualizar = true;
              this.btnGuardar = true;
              this.contractualOperacionFrom.get('Codigo')?.reset();

              this.itemsSend.NombrePlan = this.contractualFrom.get('DescripcionProducto')?.value;
              this.itemsSend.Cuenta = this.contractualFrom.get('Cuenta')?.value;
              this.itemsSend.NombreApellidos = this.contractualFrom.get('Nombre')?.value;
              this.itemsSend.Cedula = this.contractualFrom.get('NumeroDocumento')?.value;
              this.itemsSend.Direccion = this.contractualFrom.get('DireccionContractual')?.value;
              this.itemsSend.Telefono = this.contractualFrom.get('TelefonoContractual')?.value;
              this.itemsSend.Ciudad = this.contractualFrom.get('CiudadContractual')?.value;
              this.itemsSend.FechaApertura = this.contractualFrom.get('FechaApertura')?.value;
              this.itemsSend.FechaVecimiento = this.contractualFrom.get('FechaVencimiento')?.value;
              this.itemsSend.Plazo = this.contractualFrom.get('Plazo')?.value;
              this.itemsSend.Cuota = this.contractualFrom.get('CuotaMes')?.value;
              this.itemsSend.TipoCuentaDestino = 'Cuenta destino:';
              this.itemsSend.CuentaAhorros = this.contractualFrom.get('CuentaDestino')?.value;
              this.itemsSend.Sorteo = this.contractualFrom.get('Sorteo')?.value;

            } else {
              this.dataAsociados = result;
              this.ModalBuscarAsociados.nativeElement.click();
              this.btnCambiarEstado = true;
              this.btnGuardar = true;
            }
          },
          error => {
            this.loading = false;
            const errorMessage = <any>error;
            console.log(errorMessage);
          }
        );
  }
  ObtenerEstado() {
    let data = localStorage.getItem('Data');
    this.dataUser = JSON.parse(window.atob(data == null ? "" : data));
    const arrayExample = {
      'IdOperacion': 9,
      'IdPerfil': this.dataUser.idPerfilUsuario,
      'IdModulo': '20'
    };
    this.operacionesService.ObtenerEstadosXOperacionesData(arrayExample).subscribe(
      result => {
        this.resultEstados = result;
        if (this.contractualOperacionFrom.get('Codigo')?.value === '9') {
          this.log.EstadoAnterior = this.resultEstados.filter((x : any) => x.IdEstado == this.contractualFrom.get('IdEstado')?.value)[0].Descripcion;
          this.contractualFrom.get('IdEstado')?.setValue(0);
        }  
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      });
  }
  BuscarAsesorExternoCodigo() {
    if (this.AsesorFrom.get('strCodigo')?.value !== null
      && this.AsesorFrom.get('strCodigo')?.value !== undefined
      && this.AsesorFrom.get('strCodigo')?.value !== ''
      || this.AsesorFrom.get('strNombre')?.value !== null
      && this.AsesorFrom.get('strNombre')?.value !== undefined
      && this.AsesorFrom.get('strNombre')?.value !== '') {
        this.loading = true;
      this.ContractualServices.getBuscarAsesorExterno(this.AsesorFrom.value).subscribe(
        result => {
          this.loading = false;
          if (result.length === 1) {
            this.AsesorFrom.get('strCodigo')?.setValue(result[0].intIdAsesor);
            this.AsesorFrom.get('strNombre')?.setValue(result[0].Nombre);
          } else if (result.length > 1) {
            this.resultAsesoresExterno = result;
            this.ModalAsesoresExterno.nativeElement.click();
          } else if (result === null || result.length === 0) {
            this.notif.onWarning('Advertencia', 'No se encontró al asesor externo.');
            this.AsesorFrom.get('strCodigo')?.reset();
            this.AsesorFrom.get('strNombre')?.reset();
          }
          if (this.contractualOperacionFrom.get('Codigo')?.value === '19') {
            this.bloquearbtnActalizar = true;
          } else if (this.contractualOperacionFrom.get('Codigo')?.value === '10'
            || this.contractualOperacionFrom.get('Codigo')?.value === '40') {
            this.btnGuardar = false;
          }
        },
        error => {
          this.loading = false;
          this.notif.onWarning('Advertencia', 'El valor ingresado no tiene el formato correcto');
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    }
  }
  BuscarAsesorExternoTodos() {
    if (this.AsesorFrom.get('strCodigo')?.value === '       '
     || this.AsesorFrom.get('strCodigo')?.value === null
     && this.AsesorFrom.get('strNombre')?.value === '       '
     || this.AsesorFrom.get('strNombre')?.value === null) {
      this.AsesorFrom.get('strCodigo')?.setValue('');
      this.AsesorFrom.get('strNombre')?.setValue('');
   }

    this.ContractualServices.getBuscarAsesorExterno(this.AsesorFrom.value).subscribe(
      result => {
        if (result.length > 1) {
          this.resultAsesoresExterno = result;
          this.ModalAsesoresExterno.nativeElement.click();

          if (this.contractualOperacionFrom.get('Codigo')?.value === '19') {
            this.bloquearbtnActalizar = true;
          } else if (this.contractualOperacionFrom.get('Codigo')?.value === '10'
            || this.contractualOperacionFrom.get('Codigo')?.value === '40') {
            this.btnGuardar = false;
          }
        } else {
          if (result.length !== 0) {
            this.AsesorFrom.get('strNombre')?.reset();
            this.AsesorFrom.get('strCodigo')?.reset();
            result.forEach((elementt : any) => {
              this.AsesorFrom.get('strNombre')?.setValue(elementt.Nombre);
              this.AsesorFrom.get('strCodigo')?.setValue(elementt.intIdAsesor);
            });
          } else {
            this.AsesorFrom.get('strNombre')?.setValue('');
            this.AsesorFrom.get('strCodigo')?.setValue('');
            this.notif.onWarning('Advertencia', 'No se encontró el asesor externo.');
          }
        }
      },
      error => {
        this.notif.onWarning('Advertencia', 'El valor ingresado no tiene el formato correcto');
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  MapearDatosAsesorExterno(datos : any) {
    this.contractualFrom.get('strCodigo')?.setValue(datos.intIdAsesor);
    this.contractualFrom.get('strNombre')?.setValue(datos.Nombre);
  }
  Sorteo() {
    if (this.contractualFrom.get('IdProducto')?.value === 201 || this.contractualFrom.get('IdProducto')?.value === 202 ||
      this.contractualFrom.get('IdProducto')?.value === 209) {
      this.BloquearSorteo = null;
      this.oSorteo = false;
    } else {
      this.BloquearSorteo = false;
    }
  }
  Semilla() {
    if (this.contractualFrom.get('IdProducto')?.value === 207) {
      this.BloquearValorTotalPlan = null;
      this.BloquearCuotaMes = false;
      this.obligatorio = true;
  } else {
    this.BloquearValorTotalPlan = false;
    this.BloquearCuotaMes = null;
    this.obligatorio = false;
  }
  }
  ValidarSorteo() {
    this.loading = true;
    this.ContractualServices.getValidarSorteo(this.contractualFrom.value).subscribe(
      result => {
        this.loading = false;
        if (result.Mensaje !== undefined || result.Mensaje !== null) {
          this.notif.onWarning('Advertencia', result.Mensaje);
          this.contractualFrom.get('Sorteo')?.reset();
        }
      },
      error => {
        this.loading = false;
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  ConvertTasa(str: string) {
    let conveTasa: string = str;
    if(str != null && str != ""){
    let str1 : string[] = str.trim().split(".");
      if(str1.length == 2){
        let str2 : string =  str1[1].split("%")[0];
        let str3 : string = str2.substring(0,4);
        conveTasa = str1[0] + "." + str3 + "%";
      }
    }
    return conveTasa
  }

  GuardarContractual() {
    if (this.contractualFrom.get('TasaNominal')?.value !== '0.0000%'){    
        let data = localStorage.getItem('Data');
        this.dataUser = JSON.parse(window.atob(data == null ? "" : data));
        this.contractualFrom.get('IdUsuarioSGF')?.setValue(this.dataUser.IdUsuarioSGF);
        this.contractualFrom.get('IdAsesor')?.setValue(this.dataUser.IdAsesor);
        this.contractualFrom.get('NumeroOficina')?.setValue(this.dataUser.NumeroOficina);
        this.BloquearNroTitulo = false;

        let itemsLogApertura: any = {};
        itemsLogApertura.OficinaAsociado = this.contractualFrom.get('NombreOficinaAsociado')?.value;
        itemsLogApertura.Relacion = this.resultRelacion.filter((x : any) => x.Clase == this.contractualFrom.get('Clase')?.value)[0].Descripcion;
        itemsLogApertura.Documento = this.contractualFrom.get('NumeroDocumento')?.value;
        itemsLogApertura.Nombre = this.contractualFrom.get('Nombre')?.value;
        itemsLogApertura.Oficina = this.contractualFrom.get('NombreOficina')?.value;
        itemsLogApertura.IdProducto = this.contractualFrom.get('IdProducto')?.value;
        itemsLogApertura.Producto = this.contractualFrom.get('DescripcionProducto')?.value;
        itemsLogApertura.OperacionPermitida = this.contractualFrom.get('DescripcionOperacion')?.value;
        itemsLogApertura.IdAsesor = this.contractualFrom.get('IdAsesor')?.value;
        itemsLogApertura.Asesor = this.contractualFrom.get('NombreAsesor')?.value;
        itemsLogApertura.EstadoCuenta = this.contractualFrom.get('DescripcionEstado')?.value;
            
        if (this.AsesorFrom.get('strCodigo')?.value !== null && this.AsesorFrom.get('strCodigo')?.value !== undefined && this.AsesorFrom.get('strCodigo')?.value !== '') {
            itemsLogApertura.IdAsesorExterno = this.AsesorFrom.get('strCodigo')?.value;
            itemsLogApertura.AsesorExterno = this.AsesorFrom.get('strNombre')?.value;
        } 
        itemsLogApertura.FormaPago = this.resultFormaPago.filter((x : any) => x.IdFormaPago == this.contractualFrom.get('IdFormaPago')?.value)[0].DescripcionFormaPago; 
        if (this.contractualFrom.get('IdFormaPago')?.value == 1) {
            itemsLogApertura.FormaPagoDebito = {};
            itemsLogApertura.FormaPagoDebito.Documento = this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value;
            itemsLogApertura.FormaPagoDebito.Nombre = this.DebitoAutomaticoFrom.get('NombreDebito')?.value;
            itemsLogApertura.FormaPagoDebito.CuentaAhorros = this.resultCuentaDebito.filter((x : any) => x.IdCuenta == this.DebitoAutomaticoFrom.get('IdCuentaOrigen')?.value)[0].Cuenta;
        }
        itemsLogApertura.NroTitulo = this.contractualFrom.get('NroTitulo')?.value;
        if (this.contractualFrom.get('Sorteo')?.value !== null && this.contractualFrom.get('Sorteo')?.value !== undefined && this.contractualFrom.get('Sorteo')?.value !== '')
            itemsLogApertura.NroSorteo = this.contractualFrom.get('Sorteo')?.value;

        itemsLogApertura.Plazo = this.contractualFrom.get('Plazo')?.value;
        itemsLogApertura.CuotaMes = this.contractualFrom.get('CuotaMes')?.value;
        itemsLogApertura.ValorTotalPlan = this.contractualFrom.get('ValorPlan')?.value;
        itemsLogApertura.Periodo = this.resultPeriodo.filter((x : any) => x.IdPeriodo == this.contractualFrom.get('IdPeriodo')?.value)[0].DescripcionPeriodo;
        itemsLogApertura.TipoCuentaDestino = this.resultLiquidacion.filter((x : any) => x.IdLiquidacion == this.contractualFrom.get('IdLiquidacion')?.value)[0].DescripcionLiquidacion;
        itemsLogApertura.CuentaAhorros = this.contractualFrom.get('IdCuentaDestino')?.value == null ? null : this.resultCuentaNegociacion.filter((x : any) => x.IdCuenta == this.contractualFrom.get('IdCuentaDestino')?.value)[0].CuentaD;
        console.log("indicador",this.resultIndicador)
        if (this.contractualFrom.get('IdIndicador')?.value != 0 && this.contractualFrom.get('IdIndicador')?.value != null)
        itemsLogApertura.Indicardor = this.resultIndicador.filter((x : any) => x.IdIndicador == this.contractualFrom.get('IdIndicador')?.value)[0].DescripcionIndicador;
      
        itemsLogApertura.Puntos = this.contractualFrom.get('Puntos')?.value;
        itemsLogApertura.PuntosAdicionales = this.AdicionarPuntosFrom.get('AdicionarPunto')?.value == null ? 0 : this.AdicionarPuntosFrom.get('AdicionarPunto')?.value;
        itemsLogApertura.TasaEfectiva = this.contractualFrom.get('TasaEfectiva')?.value;
        itemsLogApertura.TasaNominal = this.contractualFrom.get('TasaNominal')?.value;
        if (this.dataObjetTitulares.length > 0) {
          this.contractualFrom.get('Titulares')?.setValue(this.dataObjetTitulares);
          itemsLogApertura.Autorizados = this.dataObjetTitulares;
          itemsLogApertura.Autorizados.forEach((x : any) => {
            delete x.Accion;
          });
        }
        if (this.contractualFrom.get('Clase')?.value === 10) {
            if (this.dataObjetTitulares != null && this.dataObjetTitulares.length > 0) {

                var TasaNominalSin = this.contractualFrom.get('TasaNominal')?.value;
                TasaNominalSin = TasaNominalSin.replace("%", "");
                if (TasaNominalSin !== this.datoTasaNominal)
                this.contractualFrom.get('TasaNominal')?.setValue(this.datoTasaNominal);
                
                var TasaEfectivaSin = this.contractualFrom.get('TasaEfectiva')?.value;
                TasaEfectivaSin = TasaEfectivaSin.replace("%", "");
                
                if (TasaEfectivaSin !== this.datoTasaEfectiva)
                this.contractualFrom.get('TasaEfectiva')?.setValue(this.datoTasaEfectiva);

                if (this.contractualFrom.get('IdProducto')?.value !== 207 && this.contractualFrom.get('ValorPlan')?.value !== this.datoValorTotal) 
                    this.contractualFrom.get('ValorPlan')?.setValue(this.datoValorTotal);  

                this.contractualFrom.get('FechaVencimiento')?.setValue(this.ArrayCondiciones.FechaVencimiento);
                let data = localStorage.getItem('Data');
                this.dataUser = JSON.parse(window.atob(data == null ? "" : data));
                this.contractualFrom.get('IdUsuarioSGF')?.setValue(this.dataUser.IdUsuarioSGF);
                
                if (this.contractualFrom.get('IdProducto')?.value === 208)
                this.contractualFrom.get('Sorteo')?.setValue('0');
                
                if (this.contractualFrom.get('IdProducto')?.value === 207) {

                    if (this.AsesorFrom.get('strCodigo')?.value !== null
                        && this.AsesorFrom.get('strCodigo')?.value !== undefined
                        && this.AsesorFrom.get('strCodigo')?.value !== '') {

                        this.dataAsesor = this.AsesorFrom.get('strCodigo')?.value;
                        this.contractualFrom.get('IdAsesorExterno')?.setValue(this.dataAsesor);


                        if (this.dataObjet !== undefined) {
                        this.dataTitulareslist = this.dataObjet.Titulares;
                        this.contractualFrom.get('Titulares')?.setValue(this.dataTitulareslist);
                        }

                        if (this.ArrayCondiciones.blnPlazoMinMax === true) {
                            if (JSON.parse(this.contractualFrom.get('Plazo')?.value) >= this.ArrayCondiciones.PlazoMinimo
                                && JSON.parse(this.contractualFrom.get('Plazo')?.value) <= this.ArrayCondiciones.PlazoMaximo) {
                                if (this.ArrayCondiciones.blnMontoMinMax === true) {
                                    if (this.contractualFrom.get('ValorPlan')?.value >= this.ArrayCondiciones.SdoMinimo
                                        && this.contractualFrom.get('ValorPlan')?.value <= this.ArrayCondiciones.SdoMaximo) {
                                        if (this.ArrayCondiciones.blnSorteo === true) {
                                            if (this.contractualFrom.get('Sorteo')?.value !== null
                                                && this.contractualFrom.get('Sorteo')?.value !== undefined
                                                && this.contractualFrom.get('Sorteo')?.value !== '') {
                                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {
                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();

                                                            },
                                                            error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                            });
                                                        } else {
                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            },
                                                            error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                            });
                                                        }
                                                    } else {
                                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                    }
                                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    }
                                                }
                                            } else {
                                                this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                            }
                                        } else if (this.ArrayCondiciones.blnSorteo === false) {
                                            this.contractualFrom.get('Sorteo')?.reset();
                                            if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    }
                                                    );
                                                } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    }
                                                    );
                                                }
                                                } else {
                                                    this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                }
                                            } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                    }
                                                );
                                                } else {
                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                    });
                                                }
                                            }
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                    }
                                }
                                if (this.ArrayCondiciones.blnMontoMinMax === false) {
                                    if (this.ArrayCondiciones.blnSorteo === true) {
                                        if (this.contractualFrom.get('Sorteo')?.value !== null
                                        && this.contractualFrom.get('Sorteo')?.value !== undefined
                                        && this.contractualFrom.get('Sorteo')?.value !== '') {

                                        if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                            if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                          );
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    this.itemsDataObejct = [];
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                }
                                                );
                                            } else {
                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                          );
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    this.itemsDataObejct = [];

                                                    this.itemsSend.NombrePlan = this.contractualFrom.get('DescripcionProducto')?.value;
                                                    this.itemsSend.Cuenta = this.contractualFrom.get('Cuenta')?.value;
                                                    this.itemsSend.NombreApellidos = this.contractualFrom.get('Nombre')?.value;
                                                    this.itemsSend.Cedula = this.contractualFrom.get('NumeroDocumento')?.value;
                                                    this.itemsSend.Direccion = this.contractualFrom.get('DireccionContractual')?.value;
                                                    this.itemsSend.Telefono = this.contractualFrom.get('TelefonoContractual')?.value;
                                                    this.itemsSend.Ciudad = this.contractualFrom.get('CiudadContractual')?.value;
                                                    this.itemsSend.FechaApertura = this.contractualFrom.get('FechaApertura')?.value;
                                                    this.itemsSend.FechaVecimiento = this.contractualFrom.get('FechaVencimiento')?.value;
                                                    this.itemsSend.Plazo = this.contractualFrom.get('Plazo')?.value;
                                                    this.itemsSend.Cuota = this.contractualFrom.get('CuotaMes')?.value;
                                                    this.itemsSend.TipoCuentaDestino = 'Cuenta destino:';
                                                    this.itemsSend.CuentaAhorros = this.contractualFrom.get('CuentaDestino')?.value;
                                                    this.itemsSend.Sorteo = this.contractualFrom.get('Sorteo')?.value;

                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                }
                                                );
                                            }
                                            } else {
                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.',
                                      );
                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                            }
                                        } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                            this.contractualFrom.get('IdCuentaDestino')?.reset();
                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                this.itemsDataObejct = [];
                                                },
                                                error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                                }
                                            );
                                            } else {
                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                this.itemsDataObejct = [];
                                                },
                                                error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                                }
                                            );
                                            }
                                        }
                                        } else {
                                        this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                        }
                                    } else if (this.ArrayCondiciones.blnSorteo === false) {
                                        this.contractualFrom.get('Sorteo')?.reset();
                                        if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                                }
                                            );
                                            } else {
                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                                }
                                            );
                                            }
                                        } else {
                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                        }
                                        } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            }
                                            );
                                        } else {
                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            });
                                        }
                                        }
                                    }
                                }
                            } else {
                                this.notif.onWarning('Advertencia','El plazo ingresado no es permitido para este producto.');
                                this.contractualFrom.get('plazo')?.reset();
                                this.contractualFrom.get('CuotaMes')?.reset();
                                this.contractualFrom.get('ValorPlan')?.reset();
                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                            }
                        } else {
                        if (this.ArrayCondiciones.blnMontoMinMax === true) {
                            if (this.contractualFrom.get('ValorPlan')?.value >= this.ArrayCondiciones.SdoMinimo
                            && this.contractualFrom.get('ValorPlan')?.value <= this.ArrayCondiciones.SdoMaximo) {

                            if (this.ArrayCondiciones.blnSorteo === true) {
                                if (this.contractualFrom.get('Sorteo')?.value !== null
                                && this.contractualFrom.get('Sorteo')?.value !== undefined
                                && this.contractualFrom.get('Sorteo')?.value !== '') {

                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            }
                                            );
                                        } else {
                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            }
                                            );
                                        }
                                        } else {
                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                        }
                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                            }
                                        );
                                        } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            this.itemsDataObejct = [];
                                            },
                                            error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                            });
                                        }
                                    }
                                } else {
                                    this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                }
                            } else if (this.ArrayCondiciones.blnSorteo === false) {
                                this.contractualFrom.get('Sorteo')?.reset();
                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                            }
                                        );
                                        } else {
                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                                error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            });
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                    }
                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        }
                                        );
                                    }
                                }
                            }
                            } else {
                                this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                            }
                        }
                        if (this.ArrayCondiciones.blnMontoMinMax === false) {
                            if (this.ArrayCondiciones.blnSorteo === true) {
                                if (this.contractualFrom.get('Sorteo')?.value !== null
                                    && this.contractualFrom.get('Sorteo')?.value !== undefined
                                    && this.contractualFrom.get('Sorteo')?.value !== '') {

                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                this.itemsDataObejct = [];
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                }
                                            );
                                            } else {
                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                this.itemsDataObejct = [];
                                                },
                                                    error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            }
                                        } else {
                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                        }
                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                this.itemsDataObejct = [];
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            });
                                        } else {
                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.BloquearDatoTitular = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearAsociado = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.BloquearCuotaMes = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearPuntos = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                this.itemsDataObejct = [];
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            });
                                        }
                                    }
                                } else {
                                    this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                }
                            } else if (this.ArrayCondiciones.blnSorteo === false) {
                            this.contractualFrom.get('Sorteo')?.reset();
                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            });
                                        } else {
                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            });
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                    }
                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                    this.contractualFrom.get('IdCuentaDestino')?.reset();
                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                        result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog(itemsLogApertura);
                                        this.DebitoAutomaticoFrom.reset();
                                        },
                                            error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                        result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog(itemsLogApertura);
                                        this.DebitoAutomaticoFrom.reset();
                                        },
                                            error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    }
                                }
                            }
                        }
                        }
                    } else {
                        swal.fire({
                        title: '¿Desea agregar un asesor externo?',
                        text: '',
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Si',
                        cancelButtonText: 'No',
                        confirmButtonColor: 'rgb(13,165,80)',
                        cancelButtonColor: 'rgb(160,0,87)',
                        allowOutsideClick: false,
                        allowEscapeKey: false
                        }).then((results) => {
                            if (results.value) {
                                this.generalesService.Autofocus('SelectAsesorExterno');
                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                            } else {
                                if (this.dataObjet !== undefined) {
                                this.dataTitulareslist = this.dataObjet.Titulares;
                                this.contractualFrom.get('Titulares')?.setValue(this.dataTitulareslist);
                                }
                                if (this.itemsDataObejct.length > 0) {
                                this.dataObservacionCuentalist = this.itemsDataObejct;
                                this.contractualFrom.get('ObservacionesCuenta')?.setValue(this.dataObservacionCuentalist);
                                }
                                if (this.ArrayCondiciones.blnPlazoMinMax === true) {
                                    if (JSON.parse(this.contractualFrom.get('Plazo')?.value) >= this.ArrayCondiciones.PlazoMinimo
                                        && JSON.parse(this.contractualFrom.get('Plazo')?.value) <= this.ArrayCondiciones.PlazoMaximo) {
                                        if (this.ArrayCondiciones.blnMontoMinMax === true) {
                                            if (this.contractualFrom.get('ValorPlan')?.value >= this.ArrayCondiciones.SdoMinimo
                                                && this.contractualFrom.get('ValorPlan')?.value <= this.ArrayCondiciones.SdoMaximo) {

                                                if (this.ArrayCondiciones.blnSorteo === true) {
                                                    if (this.contractualFrom.get('Sorteo')?.value !== null
                                                        && this.contractualFrom.get('Sorteo')?.value !== undefined
                                                        && this.contractualFrom.get('Sorteo')?.value !== '') {

                                                        if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                            if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                                    this.loading = true;
                                                                    this.btnGuardar = true;
                                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                                    result => {
                                                                    this.loading = false;
                                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                    this.Bloquear = false;
                                                                    this.BloquearNrotitulo = false;
                                                                    this.BloquearNegociacion = false;
                                                                    this.BloquearCuotaMes = false;
                                                                    this.BloquearValorTotalPlan = false;
                                                                    this.bloquearConsultaCuenta = false;
                                                                    this.BloquearEstado = false;
                                                                    this.BloquearDatoTitular = false;
                                                                    this.BloquearAsociado = false;
                                                                    this.BloquearSorteo = false;
                                                                    this.BloquearFormaPago = false;
                                                                    this.BloquearTasa = false;
                                                                    this.BloquaerProducto = false;
                                                                    this.BloquearBuscar = false;
                                                                    this.BloquearPeriodo = false;
                                                                    this.BloquearCuentaNegociacion = false;
                                                                    this.Bloquearliquidacion = false;
                                                                    this.BloquearAsesorExterno = false;
                                                                    this.BloquearPuntos = false;
                                                                    this.BloquearBontonPuntos = false;
                                                                    this.BloquearCuentaOrigen = false;
                                                                    this.BloquearNombreDebito = false;
                                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                    this.btnGuardar = true;
                                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                    this.Guardarlog(itemsLogApertura);
                                                                    this.DebitoAutomaticoFrom.reset();
                                                                    this.itemsDataObejct = [];
                                                                    },
                                                                        error => {
                                                                        this.loading = false;
                                                                        const errorMessage = <any>error;
                                                                        console.log(errorMessage);
                                                                    }
                                                                );
                                                                } else {
                                                                    this.loading = true;
                                                                    this.btnGuardar = true;
                                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                                    result => {
                                                                    this.loading = false;
                                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                    this.Bloquear = false;
                                                                    this.BloquearNrotitulo = false;
                                                                    this.BloquearNegociacion = false;
                                                                    this.BloquearCuotaMes = false;
                                                                    this.BloquearValorTotalPlan = false;
                                                                    this.bloquearConsultaCuenta = false;
                                                                    this.BloquearEstado = false;
                                                                    this.BloquearDatoTitular = false;
                                                                    this.BloquearAsociado = false;
                                                                    this.BloquearSorteo = false;
                                                                    this.BloquearFormaPago = false;
                                                                    this.BloquearTasa = false;
                                                                    this.BloquaerProducto = false;
                                                                    this.BloquearBuscar = false;
                                                                    this.BloquearPeriodo = false;
                                                                    this.BloquearCuentaNegociacion = false;
                                                                    this.Bloquearliquidacion = false;
                                                                    this.BloquearAsesorExterno = false;
                                                                    this.BloquearPuntos = false;
                                                                    this.BloquearBontonPuntos = false;
                                                                    this.BloquearCuentaOrigen = false;
                                                                    this.BloquearNombreDebito = false;
                                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                    this.btnGuardar = true;
                                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                    this.Guardarlog(itemsLogApertura);
                                                                    this.DebitoAutomaticoFrom.reset();
                                                                    this.itemsDataObejct = [];
                                                                    },
                                                                        error => {
                                                                        this.loading = false;
                                                                        const errorMessage = <any>error;
                                                                        console.log(errorMessage);
                                                                    });
                                                                }
                                                            } else {
                                                                this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                            }
                                                        } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                            this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                                this.loading = true;
                                                                this.btnGuardar = true;
                                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                                result => {
                                                                    this.loading = false;
                                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                    this.Bloquear = false;
                                                                    this.BloquearNrotitulo = false;
                                                                    this.BloquearNegociacion = false;
                                                                    this.BloquearCuotaMes = false;
                                                                    this.BloquearValorTotalPlan = false;
                                                                    this.bloquearConsultaCuenta = false;
                                                                    this.BloquearEstado = false;
                                                                    this.BloquearDatoTitular = false;
                                                                    this.BloquearAsociado = false;
                                                                    this.BloquearSorteo = false;
                                                                    this.BloquearFormaPago = false;
                                                                    this.BloquearTasa = false;
                                                                    this.BloquaerProducto = false;
                                                                    this.BloquearBuscar = false;
                                                                    this.BloquearPeriodo = false;
                                                                    this.BloquearCuentaNegociacion = false;
                                                                    this.Bloquearliquidacion = false;
                                                                    this.BloquearAsesorExterno = false;
                                                                    this.BloquearPuntos = false;
                                                                    this.BloquearBontonPuntos = false;
                                                                    this.BloquearCuentaOrigen = false;
                                                                    this.BloquearNombreDebito = false;
                                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                    this.btnGuardar = true;
                                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                    this.Guardarlog(itemsLogApertura);
                                                                    this.DebitoAutomaticoFrom.reset();
                                                                    this.itemsDataObejct = [];
                                                                },
                                                                error => {
                                                                    this.loading = false;
                                                                    const errorMessage = <any>error;
                                                                    console.log(errorMessage);
                                                                });
                                                            } else {
                                                                this.loading = true;
                                                                this.btnGuardar = true;
                                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                                result => {
                                                                    this.loading = false;
                                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                    this.Bloquear = false;
                                                                    this.BloquearNrotitulo = false;
                                                                    this.BloquearNegociacion = false;
                                                                    this.BloquearCuotaMes = false;
                                                                    this.BloquearValorTotalPlan = false;
                                                                    this.bloquearConsultaCuenta = false;
                                                                    this.BloquearEstado = false;
                                                                    this.BloquearDatoTitular = false;
                                                                    this.BloquearAsociado = false;
                                                                    this.BloquearSorteo = false;
                                                                    this.BloquearFormaPago = false;
                                                                    this.BloquearTasa = false;
                                                                    this.BloquaerProducto = false;
                                                                    this.BloquearBuscar = false;
                                                                    this.BloquearPeriodo = false;
                                                                    this.BloquearCuentaNegociacion = false;
                                                                    this.Bloquearliquidacion = false;
                                                                    this.BloquearAsesorExterno = false;
                                                                    this.BloquearPuntos = false;
                                                                    this.BloquearBontonPuntos = false;
                                                                    this.BloquearCuentaOrigen = false;
                                                                    this.BloquearNombreDebito = false;
                                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                    this.btnGuardar = true;
                                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                    this.Guardarlog(itemsLogApertura);
                                                                    this.DebitoAutomaticoFrom.reset();
                                                                    this.itemsDataObejct = [];
                                                                },
                                                                error => {
                                                                    this.loading = false;
                                                                    const errorMessage = <any>error;
                                                                    console.log(errorMessage);
                                                                });
                                                            }
                                                        }
                                                    } else {
                                                        this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                    }
                                                } else if (this.ArrayCondiciones.blnSorteo === false) {
                                                    this.contractualFrom.get('Sorteo')?.reset();
                                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                            result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog(itemsLogApertura);
                                                                this.DebitoAutomaticoFrom.reset();
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            }
                                                            );
                                                        } else {
                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                            result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog(itemsLogApertura);
                                                                this.DebitoAutomaticoFrom.reset();
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        }
                                                        } else {
                                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                        }
                                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                                result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog(itemsLogApertura);
                                                                this.DebitoAutomaticoFrom.reset();
                                                            },
                                                                error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            }
                                                        );
                                                        } else {
                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                                result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog(itemsLogApertura);
                                                                this.DebitoAutomaticoFrom.reset();
                                                            },
                                                            error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                            });
                                                        }
                                                    }
                                                }
                                            } else {
                                                this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                            }
                                        }
                                        if (this.ArrayCondiciones.blnMontoMinMax === false) {
                                            if (this.ArrayCondiciones.blnSorteo === true) {
                                                if (this.contractualFrom.get('Sorteo')?.value !== null
                                                && this.contractualFrom.get('Sorteo')?.value !== undefined
                                                && this.contractualFrom.get('Sorteo')?.value !== '') {

                                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                                this.loading = true;
                                                                this.btnGuardar = true;
                                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                                result => {
                                                                    this.loading = false;
                                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                    this.Bloquear = false;
                                                                    this.BloquearNrotitulo = false;
                                                                    this.BloquearNegociacion = false;
                                                                    this.BloquearCuotaMes = false;
                                                                    this.BloquearValorTotalPlan = false;
                                                                    this.bloquearConsultaCuenta = false;
                                                                    this.BloquearEstado = false;
                                                                    this.BloquearDatoTitular = false;
                                                                    this.BloquearAsociado = false;
                                                                    this.BloquearSorteo = false;
                                                                    this.BloquearFormaPago = false;
                                                                    this.BloquearTasa = false;
                                                                    this.BloquaerProducto = false;
                                                                    this.BloquearBuscar = false;
                                                                    this.BloquearPeriodo = false;
                                                                    this.BloquearCuentaNegociacion = false;
                                                                    this.Bloquearliquidacion = false;
                                                                    this.BloquearAsesorExterno = false;
                                                                    this.BloquearPuntos = false;
                                                                    this.BloquearBontonPuntos = false;
                                                                    this.BloquearCuentaOrigen = false;
                                                                    this.BloquearNombreDebito = false;
                                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                                          );
                                                                    this.btnGuardar = true;
                                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                    this.Guardarlog(itemsLogApertura);
                                                                    this.DebitoAutomaticoFrom.reset();
                                                                    this.itemsDataObejct = [];
                                                                },
                                                                error => {
                                                                    this.loading = false;
                                                                    const errorMessage = <any>error;
                                                                    console.log(errorMessage);
                                                                });
                                                            } else {
                                                                this.loading = true;
                                                                this.btnGuardar = true;
                                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                                result => {
                                                                    this.loading = false;
                                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                    this.Bloquear = false;
                                                                    this.BloquearNrotitulo = false;
                                                                    this.BloquearNegociacion = false;
                                                                    this.BloquearCuotaMes = false;
                                                                    this.BloquearValorTotalPlan = false;
                                                                    this.bloquearConsultaCuenta = false;
                                                                    this.BloquearEstado = false;
                                                                    this.BloquearDatoTitular = false;
                                                                    this.BloquearAsociado = false;
                                                                    this.BloquearSorteo = false;
                                                                    this.BloquearFormaPago = false;
                                                                    this.BloquearTasa = false;
                                                                    this.BloquaerProducto = false;
                                                                    this.BloquearBuscar = false;
                                                                    this.BloquearPeriodo = false;
                                                                    this.BloquearCuentaNegociacion = false;
                                                                    this.Bloquearliquidacion = false;
                                                                    this.BloquearAsesorExterno = false;
                                                                    this.BloquearPuntos = false;
                                                                    this.BloquearBontonPuntos = false;
                                                                    this.BloquearCuentaOrigen = false;
                                                                    this.BloquearNombreDebito = false;
                                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                    this.btnGuardar = true;
                                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                    this.Guardarlog(itemsLogApertura);
                                                                    this.DebitoAutomaticoFrom.reset();
                                                                    this.itemsDataObejct = [];
                                                                },
                                                                error => {
                                                                    this.loading = false;
                                                                    const errorMessage = <any>error;
                                                                    console.log(errorMessage);
                                                                }
                                                                );
                                                            }
                                                        } else {
                                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                        }
                                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                                result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog(itemsLogApertura);
                                                                this.DebitoAutomaticoFrom.reset();
                                                                this.itemsDataObejct = [];
                                                            },
                                                                error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        } else {
                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                                result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog(itemsLogApertura);
                                                                this.DebitoAutomaticoFrom.reset();
                                                                this.itemsDataObejct = [];
                                                            },
                                                                error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        }
                                                    }
                                                } else {
                                                    this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                }
                                            } else if (this.ArrayCondiciones.blnSorteo === false) {
                                                this.contractualFrom.get('Sorteo')?.reset();
                                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                        result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                        });
                                                    } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                        result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog();
                                                        this.DebitoAutomaticoFrom.reset();



                                                        },
                                                        error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                        }
                                                    );
                                                    }
                                                } else {
                                                    this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                }
                                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia','El plazo ingresado no es permitido para este producto.');
                                        this.contractualFrom.get('plazo')?.reset();
                                        this.contractualFrom.get('CuotaMes')?.reset();
                                        this.contractualFrom.get('ValorPlan')?.reset();
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");

                                    }
                                } else {
                                if (this.ArrayCondiciones.blnMontoMinMax === true) {
                                    if (this.contractualFrom.get('ValorPlan')?.value >= this.ArrayCondiciones.SdoMinimo
                                    && this.contractualFrom.get('ValorPlan')?.value <= this.ArrayCondiciones.SdoMaximo) {

                                        if (this.ArrayCondiciones.blnSorteo === true) {
                                            if (this.contractualFrom.get('Sorteo')?.value !== null
                                            && this.contractualFrom.get('Sorteo')?.value !== undefined
                                            && this.contractualFrom.get('Sorteo')?.value !== '') {

                                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                            result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog(itemsLogApertura);
                                                                this.DebitoAutomaticoFrom.reset();
                                                                this.itemsDataObejct = [];
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        } else {
                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                            result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog(itemsLogApertura);
                                                                this.DebitoAutomaticoFrom.reset();
                                                                this.itemsDataObejct = [];
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        }
                                                    } else {
                                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                    }
                                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                    this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            this.itemsDataObejct = [];
                                                        },
                                                            error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            this.itemsDataObejct = [];
                                                        },
                                                            error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    }
                                                }
                                            } else {
                                                this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                            }
                                        } else if (this.ArrayCondiciones.blnSorteo === false) {
                                            this.contractualFrom.get('Sorteo')?.reset();
                                            if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                        },
                                                            error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();

                                                            this.itemsSend.NombrePlan = this.contractualFrom.get('DescripcionProducto')?.value;
                                                            this.itemsSend.Cuenta = this.contractualFrom.get('Cuenta')?.value;
                                                            this.itemsSend.NombreApellidos = this.contractualFrom.get('Nombre')?.value;
                                                            this.itemsSend.Cedula = this.contractualFrom.get('NumeroDocumento')?.value;
                                                            this.itemsSend.Direccion = this.contractualFrom.get('DireccionContractual')?.value;
                                                            this.itemsSend.Telefono = this.contractualFrom.get('TelefonoContractual')?.value;
                                                            this.itemsSend.Ciudad = this.contractualFrom.get('CiudadContractual')?.value;
                                                            this.itemsSend.FechaApertura = this.contractualFrom.get('FechaApertura')?.value;
                                                            this.itemsSend.FechaVecimiento = this.contractualFrom.get('FechaVencimiento')?.value;
                                                            this.itemsSend.Plazo = this.contractualFrom.get('Plazo')?.value;
                                                            this.itemsSend.Cuota = this.contractualFrom.get('CuotaMes')?.value;
                                                            this.itemsSend.TipoCuentaDestino = 'Cuenta destino:';
                                                            this.itemsSend.CuentaAhorros = this.contractualFrom.get('CuentaDestino')?.value;
                                                            this.itemsSend.Sorteo = this.contractualFrom.get('Sorteo')?.value;
                                                        },
                                                            error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    }
                                                } else {
                                                    this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                }
                                            } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                            }
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                    }
                                }
                                    if (this.ArrayCondiciones.blnMontoMinMax === false) {
                                        if (this.ArrayCondiciones.blnSorteo === true) {
                                            if (this.contractualFrom.get('Sorteo')?.value !== null
                                                && this.contractualFrom.get('Sorteo')?.value !== undefined
                                                && this.contractualFrom.get('Sorteo')?.value !== '') {

                                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                                result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog(itemsLogApertura);
                                                                this.DebitoAutomaticoFrom.reset();
                                                                this.itemsDataObejct = [];
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            }
                                                        );
                                                        } else {
                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                                result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog(itemsLogApertura);
                                                                this.DebitoAutomaticoFrom.reset();
                                                                this.itemsDataObejct = [];
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        }
                                                    } else {
                                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                    }
                                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                    this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            this.itemsDataObejct = [];
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        }
                                                        );
                                                    } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            this.itemsDataObejct = [];
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    }
                                                }
                                            } else {
                                                this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                            }
                                        } else if (this.ArrayCondiciones.blnSorteo === false) {
                                            this.contractualFrom.get('Sorteo')?.reset();
                                            if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    }
                                                } else {
                                                    this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                }
                                            } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                        result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                        result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        });
                    }
                } else {
                    if (this.AsesorFrom.get('strCodigo')?.value !== null
                        && this.AsesorFrom.get('strCodigo')?.value !== undefined
                        && this.AsesorFrom.get('strCodigo')?.value !== '') {

                        this.dataAsesor = this.AsesorFrom.get('strCodigo')?.value;
                        this.contractualFrom.get('IdAsesorExterno')?.setValue(this.dataAsesor);
                        if (this.dataObjet !== undefined) {
                        this.dataTitulareslist = this.dataObjet.Titulares;
                        this.contractualFrom.get('Titulares')?.setValue(this.dataTitulareslist);
                        }
                        if (this.ArrayCondiciones.blnPlazoMinMax === true) {
                            if (JSON.parse(this.contractualFrom.get('Plazo')?.value) >= this.ArrayCondiciones.PlazoMinimo
                                && JSON.parse(this.contractualFrom.get('Plazo')?.value) <= this.ArrayCondiciones.PlazoMaximo) {
                                if (this.ArrayCondiciones.blnMontoMinMax === true) {
                                    if (this.contractualFrom.get('CuotaMes')?.value >= this.ArrayCondiciones.SdoMinimo
                                        && this.contractualFrom.get('CuotaMes')?.value <= this.ArrayCondiciones.SdoMaximo) {

                                        if (this.ArrayCondiciones.blnSorteo === true) {
                                        if (this.contractualFrom.get('Sorteo')?.value !== null
                                            && this.contractualFrom.get('Sorteo')?.value !== undefined
                                            && this.contractualFrom.get('Sorteo')?.value !== '') {

                                            if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                        result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                        result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                        });
                                                    }
                                                } else {
                                                    this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                }
                                            } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                            }
                                        } else {
                                            this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                        }
                                        } else if (this.ArrayCondiciones.blnSorteo === false) {
                                        this.contractualFrom.get('Sorteo')?.reset();
                                            if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                                } else {
                                                    this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                }
                                            } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();

                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                            }
                                        }

                                    } else {
                                        this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.',
                              );
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                    }
                                }
                                if (this.ArrayCondiciones.blnMontoMinMax === false) {
                                    if (this.ArrayCondiciones.blnSorteo === true) {
                                        if (this.contractualFrom.get('Sorteo')?.value !== null
                                        && this.contractualFrom.get('Sorteo')?.value !== undefined
                                        && this.contractualFrom.get('Sorteo')?.value !== '') {

                                            if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                              );
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                        this.itemsDataObejct = [];
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                              );
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                        this.itemsDataObejct = [];
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                                } else {
                                                    this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                }
                                            } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    this.itemsDataObejct = [];
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    this.itemsDataObejct = [];
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                            }   
                                        } else {
                                            this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                        }
                                    } else if (this.ArrayCondiciones.blnSorteo === false) {
                                        this.contractualFrom.get('Sorteo')?.reset();
                                        if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                            if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                            } else {
                                                this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                            }
                                        } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                } );
                                            } else {
                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            }
                                        }
                                    }
                                }
                            } else {
                                this.notif.onWarning('Advertencia','El plazo ingresado no es permitido para este producto.');
                                this.contractualFrom.get('plazo')?.reset();
                                this.contractualFrom.get('CuotaMes')?.reset();
                                this.contractualFrom.get('ValorPlan')?.reset();
                            }
                        } else {
                        if (this.ArrayCondiciones.blnMontoMinMax === true) {
                            if (this.contractualFrom.get('CuotaMes')?.value >= this.ArrayCondiciones.SdoMinimo
                            && this.contractualFrom.get('CuotaMes')?.value <= this.ArrayCondiciones.SdoMaximo) {

                                if (this.ArrayCondiciones.blnSorteo === true) {
                                    if (this.contractualFrom.get('Sorteo')?.value !== null
                                    && this.contractualFrom.get('Sorteo')?.value !== undefined
                                    && this.contractualFrom.get('Sorteo')?.value !== '') {

                                        if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                            if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                            } else {
                                                this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                            }
                                        } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                            this.contractualFrom.get('IdCuentaDestino')?.reset();
                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            } else {
                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                this.itemsDataObejct = [];
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            }
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                    }
                                } else if (this.ArrayCondiciones.blnSorteo === false) {
                                    this.contractualFrom.get('Sorteo')?.reset();
                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            } else {
                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            }
                                        } else {
                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                        }
                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                    this.contractualFrom.get('IdCuentaDestino')?.reset();
                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();

                                                this.itemsSend.NombrePlan = this.contractualFrom.get('DescripcionProducto')?.value;
                                                this.itemsSend.Cuenta = this.contractualFrom.get('Cuenta')?.value;
                                                this.itemsSend.NombreApellidos = this.contractualFrom.get('Nombre')?.value;
                                                this.itemsSend.Cedula = this.contractualFrom.get('NumeroDocumento')?.value;
                                                this.itemsSend.Direccion = this.contractualFrom.get('DireccionContractual')?.value;
                                                this.itemsSend.Telefono = this.contractualFrom.get('TelefonoContractual')?.value;
                                                this.itemsSend.Ciudad = this.contractualFrom.get('CiudadContractual')?.value;
                                                this.itemsSend.FechaApertura = this.contractualFrom.get('FechaApertura')?.value;
                                                this.itemsSend.FechaVecimiento = this.contractualFrom.get('FechaVencimiento')?.value;
                                                this.itemsSend.Plazo = this.contractualFrom.get('Plazo')?.value;
                                                this.itemsSend.Cuota = this.contractualFrom.get('CuotaMes')?.value;
                                                this.itemsSend.TipoCuentaDestino = 'Cuenta destino:';
                                                this.itemsSend.CuentaAhorros = this.contractualFrom.get('CuentaDestino')?.value;
                                                this.itemsSend.Sorteo = this.contractualFrom.get('Sorteo')?.value;
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            });
                                        } else {
                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            });
                                        }
                                    }
                                }
                            } else {
                                this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                            }
                        }
                            if (this.ArrayCondiciones.blnMontoMinMax === false) {
                                if (this.ArrayCondiciones.blnSorteo === true) {
                                    if (this.contractualFrom.get('Sorteo')?.value !== null
                                        && this.contractualFrom.get('Sorteo')?.value !== undefined
                                        && this.contractualFrom.get('Sorteo')?.value !== '') {

                                        if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                            if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    this.itemsDataObejct = [];
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    this.itemsDataObejct = [];
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                            } else {
                                                this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.',
                                      );
                                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                            }
                                        } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                            this.contractualFrom.get('IdCuentaDestino')?.reset();
                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    this.itemsDataObejct = [];
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            } else {
                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearPuntos = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    this.itemsDataObejct = [];
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            }
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                    }
                                } else if (this.ArrayCondiciones.blnSorteo === false) {
                                this.contractualFrom.get('Sorteo')?.reset();
                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            } else {
                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            }
                                        } else {
                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                        }
                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            });
                                        } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        swal.fire({
                        title: '¿Desea agregar un asesor externo?',
                        text: '',
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Si',
                        cancelButtonText: 'No',
                        confirmButtonColor: 'rgb(13,165,80)',
                        cancelButtonColor: 'rgb(160,0,87)',
                        allowOutsideClick: false,
                        allowEscapeKey: false
                        }).then((results) => {
                            if (results.value) {
                                this.generalesService.Autofocus('SelectAsesorExterno');
                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")

                            } else {
                                if (this.dataObjet !== undefined) {
                                this.dataTitulareslist = this.dataObjet.Titulares;
                                this.contractualFrom.get('Titulares')?.setValue(this.dataTitulareslist);
                                }
                                if (this.itemsDataObejct.length > 0) {
                                this.dataObservacionCuentalist = this.itemsDataObejct;
                                this.contractualFrom.get('ObservacionesCuenta')?.setValue(this.dataObservacionCuentalist);
                                }
                                if (this.ArrayCondiciones.blnPlazoMinMax === true) {
                                    if (JSON.parse(this.contractualFrom.get('Plazo')?.value) >= this.ArrayCondiciones.PlazoMinimo
                                        && JSON.parse(this.contractualFrom.get('Plazo')?.value) <= this.ArrayCondiciones.PlazoMaximo) {
                                        if (this.ArrayCondiciones.blnMontoMinMax === true) {
                                            if (this.contractualFrom.get('CuotaMes')?.value >= this.ArrayCondiciones.SdoMinimo
                                                && this.contractualFrom.get('CuotaMes')?.value <= this.ArrayCondiciones.SdoMaximo) {

                                                if (this.ArrayCondiciones.blnSorteo === true) {
                                                    if (this.contractualFrom.get('Sorteo')?.value !== null
                                                        && this.contractualFrom.get('Sorteo')?.value !== undefined
                                                        && this.contractualFrom.get('Sorteo')?.value !== '') {

                                                        if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                                result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog(itemsLogApertura);
                                                                this.DebitoAutomaticoFrom.reset();
                                                                this.itemsDataObejct = [];
                                                                },
                                                                error => {
                                                                    this.loading = false;
                                                                    const errorMessage = <any>error;
                                                                    console.log(errorMessage);
                                                                });
                                                            } else {
                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                                result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog(itemsLogApertura);
                                                                this.DebitoAutomaticoFrom.reset();
                                                                this.itemsDataObejct = [];
                                                                },
                                                                error => {
                                                                    this.loading = false;
                                                                    const errorMessage = <any>error;
                                                                    console.log(errorMessage);
                                                                });
                                                            }
                                                        } else {
                                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                                        }
                                                        } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                            result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog();
                                                                this.DebitoAutomaticoFrom.reset();
                                                                this.itemsDataObejct = [];


                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            }
                                                            );
                                                        } else {
                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                            result => {
                                                                this.loading = false;
                                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                this.Bloquear = false;
                                                                this.BloquearNrotitulo = false;
                                                                this.BloquearNegociacion = false;
                                                                this.BloquearCuotaMes = false;
                                                                this.BloquearValorTotalPlan = false;
                                                                this.bloquearConsultaCuenta = false;
                                                                this.BloquearEstado = false;
                                                                this.BloquearDatoTitular = false;
                                                                this.BloquearAsociado = false;
                                                                this.BloquearSorteo = false;
                                                                this.BloquearFormaPago = false;
                                                                this.BloquearTasa = false;
                                                                this.BloquaerProducto = false;
                                                                this.BloquearBuscar = false;
                                                                this.BloquearPeriodo = false;
                                                                this.BloquearCuentaNegociacion = false;
                                                                this.Bloquearliquidacion = false;
                                                                this.BloquearAsesorExterno = false;
                                                                this.BloquearPuntos = false;
                                                                this.BloquearBontonPuntos = false;
                                                                this.BloquearCuentaOrigen = false;
                                                                this.BloquearNombreDebito = false;
                                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                this.btnGuardar = true;
                                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                this.Guardarlog();
                                                                this.DebitoAutomaticoFrom.reset();
                                                                this.itemsDataObejct = [];



                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            }
                                                            );
                                                        }
                                                        }
                                                    } else {
                                                        this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                                    }
                                                } else if (this.ArrayCondiciones.blnSorteo === false) {
                                                    this.contractualFrom.get('Sorteo')?.reset();
                                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                                this.loading = true;
                                                                this.btnGuardar = true;
                                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                                result => {
                                                                    this.loading = false;
                                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                    this.Bloquear = false;
                                                                    this.BloquearNrotitulo = false;
                                                                    this.BloquearNegociacion = false;
                                                                    this.BloquearCuotaMes = false;
                                                                    this.BloquearValorTotalPlan = false;
                                                                    this.bloquearConsultaCuenta = false;
                                                                    this.BloquearEstado = false;
                                                                    this.BloquearDatoTitular = false;
                                                                    this.BloquearAsociado = false;
                                                                    this.BloquearSorteo = false;
                                                                    this.BloquearFormaPago = false;
                                                                    this.BloquearTasa = false;
                                                                    this.BloquaerProducto = false;
                                                                    this.BloquearBuscar = false;
                                                                    this.BloquearPeriodo = false;
                                                                    this.BloquearCuentaNegociacion = false;
                                                                    this.Bloquearliquidacion = false;
                                                                    this.BloquearAsesorExterno = false;
                                                                    this.BloquearPuntos = false;
                                                                    this.BloquearBontonPuntos = false;
                                                                    this.BloquearCuentaOrigen = false;
                                                                    this.BloquearNombreDebito = false;
                                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                    this.btnGuardar = true;
                                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                    this.Guardarlog(itemsLogApertura);
                                                                    this.DebitoAutomaticoFrom.reset();
                                                                },
                                                                error => {
                                                                    this.loading = false;
                                                                    const errorMessage = <any>error;
                                                                    console.log(errorMessage);
                                                                });
                                                            } else {
                                                                this.loading = true;
                                                                this.btnGuardar = true;
                                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                                result => {
                                                                    this.loading = false;
                                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                    this.Bloquear = false;
                                                                    this.BloquearNrotitulo = false;
                                                                    this.BloquearNegociacion = false;
                                                                    this.BloquearCuotaMes = false;
                                                                    this.BloquearValorTotalPlan = false;
                                                                    this.bloquearConsultaCuenta = false;
                                                                    this.BloquearEstado = false;
                                                                    this.BloquearDatoTitular = false;
                                                                    this.BloquearAsociado = false;
                                                                    this.BloquearSorteo = false;
                                                                    this.BloquearFormaPago = false;
                                                                    this.BloquearTasa = false;
                                                                    this.BloquaerProducto = false;
                                                                    this.BloquearBuscar = false;
                                                                    this.BloquearPeriodo = false;
                                                                    this.BloquearCuentaNegociacion = false;
                                                                    this.Bloquearliquidacion = false;
                                                                    this.BloquearAsesorExterno = false;
                                                                    this.BloquearPuntos = false;
                                                                    this.BloquearBontonPuntos = false;
                                                                    this.BloquearCuentaOrigen = false;
                                                                    this.BloquearNombreDebito = false;
                                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                    this.btnGuardar = true;
                                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                    this.Guardarlog(itemsLogApertura);
                                                                    this.DebitoAutomaticoFrom.reset();
                                                                },
                                                                error => {
                                                                    this.loading = false;
                                                                    const errorMessage = <any>error;
                                                                    console.log(errorMessage);
                                                                });
                                                            }
                                                        } else {
                                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                                        }
                                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        }
                                                    }
                                                }
                                            } else {
                                                this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                            }
                                        }
                                        if (this.ArrayCondiciones.blnMontoMinMax === false) {
                                            if (this.ArrayCondiciones.blnSorteo === true) {
                                                if (this.contractualFrom.get('Sorteo')?.value !== null
                                                && this.contractualFrom.get('Sorteo')?.value !== undefined
                                                && this.contractualFrom.get('Sorteo')?.value !== '') {

                                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                                this.loading = true;
                                                                this.btnGuardar = true;
                                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                                result => {
                                                                    this.loading = false;
                                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                    this.Bloquear = false;
                                                                    this.BloquearNrotitulo = false;
                                                                    this.BloquearNegociacion = false;
                                                                    this.BloquearCuotaMes = false;
                                                                    this.BloquearValorTotalPlan = false;
                                                                    this.bloquearConsultaCuenta = false;
                                                                    this.BloquearEstado = false;
                                                                    this.BloquearDatoTitular = false;
                                                                    this.BloquearAsociado = false;
                                                                    this.BloquearSorteo = false;
                                                                    this.BloquearFormaPago = false;
                                                                    this.BloquearTasa = false;
                                                                    this.BloquaerProducto = false;
                                                                    this.BloquearBuscar = false;
                                                                    this.BloquearPeriodo = false;
                                                                    this.BloquearCuentaNegociacion = false;
                                                                    this.Bloquearliquidacion = false;
                                                                    this.BloquearAsesorExterno = false;
                                                                    this.BloquearPuntos = false;
                                                                    this.BloquearBontonPuntos = false;
                                                                    this.BloquearCuentaOrigen = false;
                                                                    this.BloquearNombreDebito = false;
                                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                                          );
                                                                    this.btnGuardar = true;
                                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                    this.Guardarlog(itemsLogApertura);
                                                                    this.DebitoAutomaticoFrom.reset();
                                                                    this.itemsDataObejct = [];
                                                                },
                                                                error => {
                                                                    this.loading = false;
                                                                    const errorMessage = <any>error;
                                                                    console.log(errorMessage);
                                                                });
                                                            } else {
                                                                this.loading = true;
                                                                this.btnGuardar = true;
                                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                                result => {
                                                                    this.loading = false;
                                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                    this.Bloquear = false;
                                                                    this.BloquearNrotitulo = false;
                                                                    this.BloquearNegociacion = false;
                                                                    this.BloquearCuotaMes = false;
                                                                    this.BloquearValorTotalPlan = false;
                                                                    this.bloquearConsultaCuenta = false;
                                                                    this.BloquearEstado = false;
                                                                    this.BloquearDatoTitular = false;
                                                                    this.BloquearAsociado = false;
                                                                    this.BloquearSorteo = false;
                                                                    this.BloquearFormaPago = false;
                                                                    this.BloquearTasa = false;
                                                                    this.BloquaerProducto = false;
                                                                    this.BloquearBuscar = false;
                                                                    this.BloquearPeriodo = false;
                                                                    this.BloquearCuentaNegociacion = false;
                                                                    this.Bloquearliquidacion = false;
                                                                    this.BloquearAsesorExterno = false;
                                                                    this.BloquearPuntos = false;
                                                                    this.BloquearBontonPuntos = false;
                                                                    this.BloquearCuentaOrigen = false;
                                                                    this.BloquearNombreDebito = false;
                                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                                          );
                                                                    this.btnGuardar = true;
                                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                    this.Guardarlog(itemsLogApertura);
                                                                    this.DebitoAutomaticoFrom.reset();
                                                                    this.itemsDataObejct = [];
                                                                },
                                                                error => {
                                                                    this.loading = false;
                                                                    const errorMessage = <any>error;
                                                                    console.log(errorMessage);
                                                                });
                                                            }
                                                        } else {
                                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                                        }
                                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            this.itemsDataObejct = [];
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            this.itemsDataObejct = [];
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        }
                                                    }
                                                } else {
                                                    this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                                }
                                            } else if (this.ArrayCondiciones.blnSorteo === false) {
                                                this.contractualFrom.get('Sorteo')?.reset();
                                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        }
                                                    } else {
                                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                                    }
                                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia','El plazo ingresado no es permitido para este producto.');
                                        this.contractualFrom.get('plazo')?.reset();
                                        this.contractualFrom.get('CuotaMes')?.reset();
                                        this.contractualFrom.get('ValorPlan')?.reset();
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                    }
                                } else {
                                    if (this.ArrayCondiciones.blnMontoMinMax === true) {
                                        if (this.contractualFrom.get('CuotaMes')?.value >= this.ArrayCondiciones.SdoMinimo
                                        && this.contractualFrom.get('CuotaMes')?.value <= this.ArrayCondiciones.SdoMaximo) {

                                            if (this.ArrayCondiciones.blnSorteo === true) {
                                                if (this.contractualFrom.get('Sorteo')?.value !== null
                                                && this.contractualFrom.get('Sorteo')?.value !== undefined
                                                && this.contractualFrom.get('Sorteo')?.value !== '') {

                                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                                this.loading = true;
                                                                this.btnGuardar = true;
                                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                                result => {
                                                                    this.loading = false;
                                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                    this.Bloquear = false;
                                                                    this.BloquearNrotitulo = false;
                                                                    this.BloquearNegociacion = false;
                                                                    this.BloquearCuotaMes = false;
                                                                    this.BloquearValorTotalPlan = false;
                                                                    this.bloquearConsultaCuenta = false;
                                                                    this.BloquearEstado = false;
                                                                    this.BloquearDatoTitular = false;
                                                                    this.BloquearAsociado = false;
                                                                    this.BloquearSorteo = false;
                                                                    this.BloquearFormaPago = false;
                                                                    this.BloquearTasa = false;
                                                                    this.BloquaerProducto = false;
                                                                    this.BloquearBuscar = false;
                                                                    this.BloquearPeriodo = false;
                                                                    this.BloquearCuentaNegociacion = false;
                                                                    this.Bloquearliquidacion = false;
                                                                    this.BloquearAsesorExterno = false;
                                                                    this.BloquearPuntos = false;
                                                                    this.BloquearBontonPuntos = false;
                                                                    this.BloquearCuentaOrigen = false;
                                                                    this.BloquearNombreDebito = false;
                                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                    this.btnGuardar = true;
                                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                    this.Guardarlog(itemsLogApertura);
                                                                    this.DebitoAutomaticoFrom.reset();
                                                                    this.itemsDataObejct = [];
                                                                },
                                                                error => {
                                                                    this.loading = false;
                                                                    const errorMessage = <any>error;
                                                                    console.log(errorMessage);
                                                                });
                                                            } else {
                                                                this.loading = true;
                                                                this.btnGuardar = true;
                                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                                result => {
                                                                    this.loading = false;
                                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                                    this.Bloquear = false;
                                                                    this.BloquearNrotitulo = false;
                                                                    this.BloquearNegociacion = false;
                                                                    this.BloquearCuotaMes = false;
                                                                    this.BloquearValorTotalPlan = false;
                                                                    this.bloquearConsultaCuenta = false;
                                                                    this.BloquearEstado = false;
                                                                    this.BloquearDatoTitular = false;
                                                                    this.BloquearAsociado = false;
                                                                    this.BloquearSorteo = false;
                                                                    this.BloquearFormaPago = false;
                                                                    this.BloquearTasa = false;
                                                                    this.BloquaerProducto = false;
                                                                    this.BloquearBuscar = false;
                                                                    this.BloquearPeriodo = false;
                                                                    this.BloquearCuentaNegociacion = false;
                                                                    this.Bloquearliquidacion = false;
                                                                    this.BloquearAsesorExterno = false;
                                                                    this.BloquearPuntos = false;
                                                                    this.BloquearBontonPuntos = false;
                                                                    this.BloquearCuentaOrigen = false;
                                                                    this.BloquearNombreDebito = false;
                                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                                    this.btnGuardar = true;
                                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                                    this.Guardarlog(itemsLogApertura);
                                                                    this.DebitoAutomaticoFrom.reset();
                                                                    this.itemsDataObejct = [];
                                                                },
                                                                error => {
                                                                    this.loading = false;
                                                                    const errorMessage = <any>error;
                                                                    console.log(errorMessage);
                                                                });
                                                            }
                                                        } else {
                                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                                        }
                                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            this.itemsDataObejct = [];
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            this.itemsDataObejct = [];
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        }
                                                    }
                                                } else {
                                                    this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                }
                                            } else if (this.ArrayCondiciones.blnSorteo === false) {
                                                this.contractualFrom.get('Sorteo')?.reset();
                                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        }
                                                    } else {
                                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                    }
                                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    }
                                                }
                                            }
                                        } else {
                                            this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                        }
                                    }
                                    if (this.ArrayCondiciones.blnMontoMinMax === false) {
                                        if (this.ArrayCondiciones.blnSorteo === true) {
                                            if (this.contractualFrom.get('Sorteo')?.value !== null
                                                && this.contractualFrom.get('Sorteo')?.value !== undefined
                                                && this.contractualFrom.get('Sorteo')?.value !== '') {

                                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            this.itemsDataObejct = [];
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        } else {
                                                            this.loading = true;
                                                            this.btnGuardar = true;
                                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                            result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            this.itemsDataObejct = [];
                                                            },
                                                            error => {
                                                                this.loading = false;
                                                                const errorMessage = <any>error;
                                                                console.log(errorMessage);
                                                            });
                                                        }
                                                    } else {
                                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                    }
                                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                    this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            this.itemsDataObejct = [];
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                            this.itemsDataObejct = [];
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    }
                                                }
                                            } else {
                                                this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                            }
                                        } else if (this.ArrayCondiciones.blnSorteo === false) {
                                        this.contractualFrom.get('Sorteo')?.reset();
                                            if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                                if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                                && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    } else {
                                                        this.loading = true;
                                                        this.btnGuardar = true;
                                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                        result => {
                                                            this.loading = false;
                                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                            this.Bloquear = false;
                                                            this.BloquearNrotitulo = false;
                                                            this.BloquearNegociacion = false;
                                                            this.BloquearCuotaMes = false;
                                                            this.BloquearValorTotalPlan = false;
                                                            this.bloquearConsultaCuenta = false;
                                                            this.BloquearEstado = false;
                                                            this.BloquearDatoTitular = false;
                                                            this.BloquearAsociado = false;
                                                            this.BloquearSorteo = false;
                                                            this.BloquearFormaPago = false;
                                                            this.BloquearTasa = false;
                                                            this.BloquaerProducto = false;
                                                            this.BloquearBuscar = false;
                                                            this.BloquearPeriodo = false;
                                                            this.BloquearCuentaNegociacion = false;
                                                            this.Bloquearliquidacion = false;
                                                            this.BloquearAsesorExterno = false;
                                                            this.BloquearPuntos = false;
                                                            this.BloquearBontonPuntos = false;
                                                            this.BloquearCuentaOrigen = false;
                                                            this.BloquearNombreDebito = false;
                                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                            this.btnGuardar = true;
                                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                            this.Guardarlog(itemsLogApertura);
                                                            this.DebitoAutomaticoFrom.reset();
                                                        },
                                                        error => {
                                                            this.loading = false;
                                                            const errorMessage = <any>error;
                                                            console.log(errorMessage);
                                                        });
                                                    }
                                                } else {
                                                    this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                                }
                                            } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                this.loading = true;
                                                this.btnGuardar = true;
                                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                    this.loading = false;
                                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                    this.Bloquear = false;
                                                    this.BloquearNrotitulo = false;
                                                    this.BloquearNegociacion = false;
                                                    this.BloquearCuotaMes = false;
                                                    this.BloquearValorTotalPlan = false;
                                                    this.bloquearConsultaCuenta = false;
                                                    this.BloquearEstado = false;
                                                    this.BloquearDatoTitular = false;
                                                    this.BloquearAsociado = false;
                                                    this.BloquearSorteo = false;
                                                    this.BloquearFormaPago = false;
                                                    this.BloquearTasa = false;
                                                    this.BloquaerProducto = false;
                                                    this.BloquearBuscar = false;
                                                    this.BloquearPeriodo = false;
                                                    this.BloquearCuentaNegociacion = false;
                                                    this.Bloquearliquidacion = false;
                                                    this.BloquearAsesorExterno = false;
                                                    this.BloquearPuntos = false;
                                                    this.BloquearBontonPuntos = false;
                                                    this.BloquearCuentaOrigen = false;
                                                    this.BloquearNombreDebito = false;
                                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                    this.btnGuardar = true;
                                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                    this.Guardarlog(itemsLogApertura);
                                                    this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        });
                    }
                }
                
            } else {
                this.notif.onWarning('Advertencia', 'Debe ingresar al menos un autorizado cuando el titular es menor.');
            }      
        } else {
            var TasaNominalSin = this.contractualFrom.get('TasaNominal')?.value;
            TasaNominalSin = TasaNominalSin.replace("%", "");
            if (TasaNominalSin !== this.datoTasaNominal) {
                this.contractualFrom.get('TasaNominal')?.setValue(this.datoTasaNominal);
            }
            var TasaEfectivaSin = this.contractualFrom.get('TasaEfectiva')?.value;
            TasaEfectivaSin = TasaEfectivaSin.replace("%", "");
            if (TasaEfectivaSin !== this.datoTasaEfectiva) {
                this.contractualFrom.get('TasaEfectiva')?.setValue(this.datoTasaEfectiva);
            }

            if (this.contractualFrom.get('IdProducto')?.value !== 207) {
                if (this.contractualFrom.get('ValorPlan')?.value !== this.datoValorTotal) {
                this.contractualFrom.get('ValorPlan')?.setValue(this.datoValorTotal);
                }
            }
            this.contractualFrom.get('FechaVencimiento')?.setValue(this.ArrayCondiciones.FechaVencimiento);
            let data = localStorage.getItem('Data');
            this.dataUser = JSON.parse(window.atob(data == null ? "" : data));
            this.contractualFrom.get('IdUsuarioSGF')?.setValue(this.dataUser.IdUsuarioSGF);
            if (this.contractualFrom.get('IdProducto')?.value === 208) {
                this.contractualFrom.get('Sorteo')?.setValue('0');
            }
            if (this.contractualFrom.get('IdProducto')?.value === 207) {

                if (this.AsesorFrom.get('strCodigo')?.value !== null
                && this.AsesorFrom.get('strCodigo')?.value !== undefined
                && this.AsesorFrom.get('strCodigo')?.value !== '') {

                this.dataAsesor = this.AsesorFrom.get('strCodigo')?.value;
                this.contractualFrom.get('IdAsesorExterno')?.setValue(this.dataAsesor);


                if (this.dataObjet !== undefined) {
                    this.dataTitulareslist = this.dataObjet.Titulares;
                    this.contractualFrom.get('Titulares')?.setValue(this.dataTitulareslist);
                }

                if (this.ArrayCondiciones.blnPlazoMinMax === true) {
                    if (JSON.parse(this.contractualFrom.get('Plazo')?.value) >= this.ArrayCondiciones.PlazoMinimo
                    && JSON.parse(this.contractualFrom.get('Plazo')?.value) <= this.ArrayCondiciones.PlazoMaximo) {
                        if (this.ArrayCondiciones.blnMontoMinMax === true) {
                            if (this.contractualFrom.get('ValorPlan')?.value >= this.ArrayCondiciones.SdoMinimo
                            && this.contractualFrom.get('ValorPlan')?.value <= this.ArrayCondiciones.SdoMaximo) {

                                if (this.ArrayCondiciones.blnSorteo === true) {
                                    if (this.contractualFrom.get('Sorteo')?.value !== null
                                    && this.contractualFrom.get('Sorteo')?.value !== undefined
                                    && this.contractualFrom.get('Sorteo')?.value !== '') {

                                        if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                            if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                            } else {
                                                this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                            }
                                        } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                            this.contractualFrom.get('IdCuentaDestino')?.reset();
                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            } else {
                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            }
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                    }
                                } else if (this.ArrayCondiciones.blnSorteo === false) {
                                    this.contractualFrom.get('Sorteo')?.reset();
                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            } else {
                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                });
                                            }
                                        } else {
                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                        }
                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            });
                                        } else {
                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                            });
                                        }
                                    }
                                }

                            } else {
                                this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                            }
                        }
                        if (this.ArrayCondiciones.blnMontoMinMax === false) {
                            if (this.ArrayCondiciones.blnSorteo === true) {
                                if (this.contractualFrom.get('Sorteo')?.value !== null
                                    && this.contractualFrom.get('Sorteo')?.value !== undefined
                                    && this.contractualFrom.get('Sorteo')?.value !== '') {

                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                            && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                            if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                this.itemsDataObejct = [];
                                                },
                                                error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                }
                                            );
                                            } else {
                                            this.loading = true;
                                            this.btnGuardar = true;
                                            this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                result => {
                                                this.loading = false;
                                                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                this.Bloquear = false;
                                                this.BloquearNrotitulo = false;
                                                this.BloquearNegociacion = false;
                                                this.BloquearCuotaMes = false;
                                                this.BloquearValorTotalPlan = false;
                                                this.bloquearConsultaCuenta = false;
                                                this.BloquearEstado = false;
                                                this.BloquearDatoTitular = false;
                                                this.BloquearAsociado = false;
                                                this.BloquearSorteo = false;
                                                this.BloquearFormaPago = false;
                                                this.BloquearTasa = false;
                                                this.BloquaerProducto = false;
                                                this.BloquearBuscar = false;
                                                this.BloquearPeriodo = false;
                                                this.BloquearCuentaNegociacion = false;
                                                this.Bloquearliquidacion = false;
                                                this.BloquearAsesorExterno = false;
                                                this.BloquearPuntos = false;
                                                this.BloquearBontonPuntos = false;
                                                this.BloquearCuentaOrigen = false;
                                                this.BloquearNombreDebito = false;
                                                this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                this.btnGuardar = true;
                                                this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                this.Guardarlog(itemsLogApertura);
                                                this.DebitoAutomaticoFrom.reset();
                                                this.itemsDataObejct = [];

                                                this.itemsSend.NombrePlan = this.contractualFrom.get('DescripcionProducto')?.value;
                                                this.itemsSend.Cuenta = this.contractualFrom.get('Cuenta')?.value;
                                                this.itemsSend.NombreApellidos = this.contractualFrom.get('Nombre')?.value;
                                                this.itemsSend.Cedula = this.contractualFrom.get('NumeroDocumento')?.value;
                                                this.itemsSend.Direccion = this.contractualFrom.get('DireccionContractual')?.value;
                                                this.itemsSend.Telefono = this.contractualFrom.get('TelefonoContractual')?.value;
                                                this.itemsSend.Ciudad = this.contractualFrom.get('CiudadContractual')?.value;
                                                this.itemsSend.FechaApertura = this.contractualFrom.get('FechaApertura')?.value;
                                                this.itemsSend.FechaVecimiento = this.contractualFrom.get('FechaVencimiento')?.value;
                                                this.itemsSend.Plazo = this.contractualFrom.get('Plazo')?.value;
                                                this.itemsSend.Cuota = this.contractualFrom.get('CuotaMes')?.value;
                                                this.itemsSend.TipoCuentaDestino = 'Cuenta destino:';
                                                this.itemsSend.CuentaAhorros = this.contractualFrom.get('CuentaDestino')?.value;
                                                this.itemsSend.Sorteo = this.contractualFrom.get('Sorteo')?.value;
                                                },
                                                error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                                });
                                            }
                                        } else {
                                            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                        }
                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                      this.contractualFrom.get('IdCuentaDestino')?.reset();
                                      if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                          this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                          this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog(itemsLogApertura);
                                              this.DebitoAutomaticoFrom.reset();
                                              this.itemsDataObejct = [];
                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          });
                                      } else {
                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog(itemsLogApertura);
                                              this.DebitoAutomaticoFrom.reset();
                                              this.itemsDataObejct = [];
                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          });
                                      }
                                    }
                                } else {
                                    this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                }
                            } else if (this.ArrayCondiciones.blnSorteo === false) {
                            this.contractualFrom.get('Sorteo')?.reset();
                            if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                    result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog();
                                        this.DebitoAutomaticoFrom.reset();



                                    },
                                    error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                    }
                                    );
                                } else {
                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                    result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog();
                                        this.DebitoAutomaticoFrom.reset();



                                    },
                                    error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                    }
                                    );
                                }
                                } else {
                                this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                }
                            } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                this.loading = true;
                                this.btnGuardar = true;
                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                    result => {
                                    this.loading = false;
                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                    this.Bloquear = false;
                                    this.BloquearNrotitulo = false;
                                    this.BloquearNegociacion = false;
                                    this.BloquearCuotaMes = false;
                                    this.BloquearValorTotalPlan = false;
                                    this.bloquearConsultaCuenta = false;
                                    this.BloquearEstado = false;
                                    this.BloquearDatoTitular = false;
                                    this.BloquearAsociado = false;
                                    this.BloquearSorteo = false;
                                    this.BloquearFormaPago = false;
                                    this.BloquearTasa = false;
                                    this.BloquaerProducto = false;
                                    this.BloquearBuscar = false;
                                    this.BloquearPeriodo = false;
                                    this.BloquearCuentaNegociacion = false;
                                    this.Bloquearliquidacion = false;
                                    this.BloquearAsesorExterno = false;
                                    this.BloquearPuntos = false;
                                    this.BloquearBontonPuntos = false;
                                    this.BloquearCuentaOrigen = false;
                                    this.BloquearNombreDebito = false;
                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                    this.btnGuardar = true;
                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                    this.Guardarlog();
                                    this.DebitoAutomaticoFrom.reset();




                                    },
                                    error => {
                                    this.loading = false;
                                    const errorMessage = <any>error;
                                    console.log(errorMessage);
                                    }
                                );
                                } else {
                                this.loading = true;
                                this.btnGuardar = true;
                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                    result => {
                                    this.loading = false;
                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                    this.Bloquear = false;
                                    this.BloquearNrotitulo = false;
                                    this.BloquearNegociacion = false;
                                    this.BloquearCuotaMes = false;
                                    this.BloquearValorTotalPlan = false;
                                    this.bloquearConsultaCuenta = false;
                                    this.BloquearEstado = false;
                                    this.BloquearDatoTitular = false;
                                    this.BloquearAsociado = false;
                                    this.BloquearSorteo = false;
                                    this.BloquearFormaPago = false;
                                    this.BloquearTasa = false;
                                    this.BloquaerProducto = false;
                                    this.BloquearBuscar = false;
                                    this.BloquearPeriodo = false;
                                    this.BloquearCuentaNegociacion = false;
                                    this.Bloquearliquidacion = false;
                                    this.BloquearAsesorExterno = false;
                                    this.BloquearPuntos = false;
                                    this.BloquearBontonPuntos = false;
                                    this.BloquearCuentaOrigen = false;
                                    this.BloquearNombreDebito = false;
                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                    this.btnGuardar = true;
                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                    this.Guardarlog();
                                    this.DebitoAutomaticoFrom.reset();



                                    },
                                    error => {
                                    this.loading = false;
                                    const errorMessage = <any>error;
                                    console.log(errorMessage);
                                    }
                                );
                                }
                            }
                            }
                        }
                    } else {
                      this.notif.onWarning('Advertencia','El plazo ingresado no es permitido para este producto.');
                      this.contractualFrom.get('plazo')?.reset();
                      this.contractualFrom.get('CuotaMes')?.reset();
                      this.contractualFrom.get('ValorPlan')?.reset();
                      this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                      this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                    }
                } else {
                    if (this.ArrayCondiciones.blnMontoMinMax === true) {
                      if (this.contractualFrom.get('ValorPlan')?.value >= this.ArrayCondiciones.SdoMinimo
                          && this.contractualFrom.get('ValorPlan')?.value <= this.ArrayCondiciones.SdoMaximo) {

                          if (this.ArrayCondiciones.blnSorteo === true) {
                            if (this.contractualFrom.get('Sorteo')?.value !== null
                                && this.contractualFrom.get('Sorteo')?.value !== undefined
                                && this.contractualFrom.get('Sorteo')?.value !== '') {

                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                  if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                      && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                      && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                      if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                      this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                      this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                      this.loading = true;
                                      this.btnGuardar = true;
                                      this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                          result => {
                                          this.loading = false;
                                          this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                          this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                          this.Bloquear = false;
                                          this.BloquearNrotitulo = false;
                                          this.BloquearNegociacion = false;
                                          this.BloquearCuotaMes = false;
                                          this.BloquearValorTotalPlan = false;
                                          this.bloquearConsultaCuenta = false;
                                          this.BloquearEstado = false;
                                          this.BloquearDatoTitular = false;
                                          this.BloquearAsociado = false;
                                          this.BloquearSorteo = false;
                                          this.BloquearFormaPago = false;
                                          this.BloquearTasa = false;
                                          this.BloquaerProducto = false;
                                          this.BloquearBuscar = false;
                                          this.BloquearPeriodo = false;
                                          this.BloquearCuentaNegociacion = false;
                                          this.Bloquearliquidacion = false;
                                          this.BloquearAsesorExterno = false;
                                          this.BloquearPuntos = false;
                                          this.BloquearBontonPuntos = false;
                                          this.BloquearCuentaOrigen = false;
                                          this.BloquearNombreDebito = false;
                                          this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                          this.btnGuardar = true;
                                          this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                          this.Guardarlog(itemsLogApertura);
                                          this.DebitoAutomaticoFrom.reset();
                                          },
                                          error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                          });
                                      } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                          result => {
                                          this.loading = false;
                                          this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                          this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                          this.Bloquear = false;
                                          this.BloquearNrotitulo = false;
                                          this.BloquearNegociacion = false;
                                          this.BloquearCuotaMes = false;
                                          this.BloquearValorTotalPlan = false;
                                          this.bloquearConsultaCuenta = false;
                                          this.BloquearEstado = false;
                                          this.BloquearDatoTitular = false;
                                          this.BloquearAsociado = false;
                                          this.BloquearSorteo = false;
                                          this.BloquearFormaPago = false;
                                          this.BloquearTasa = false;
                                          this.BloquaerProducto = false;
                                          this.BloquearBuscar = false;
                                          this.BloquearPeriodo = false;
                                          this.BloquearCuentaNegociacion = false;
                                          this.Bloquearliquidacion = false;
                                          this.BloquearAsesorExterno = false;
                                          this.BloquearPuntos = false;
                                          this.BloquearBontonPuntos = false;
                                          this.BloquearCuentaOrigen = false;
                                          this.BloquearNombreDebito = false;
                                          this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                          this.btnGuardar = true;
                                          this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                          this.Guardarlog(itemsLogApertura);
                                          this.DebitoAutomaticoFrom.reset();
                                          },
                                          error => {
                                          this.loading = false;
                                          const errorMessage = <any>error;
                                          console.log(errorMessage);
                                          });
                                      }
                                  } else {
                                      this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                  }
                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                  if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                      this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                      this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                      this.loading = true;
                                      this.btnGuardar = true;
                                      this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                      result => {
                                          this.loading = false;
                                          this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                          this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                          this.Bloquear = false;
                                          this.BloquearNrotitulo = false;
                                          this.BloquearNegociacion = false;
                                          this.BloquearCuotaMes = false;
                                          this.BloquearValorTotalPlan = false;
                                          this.bloquearConsultaCuenta = false;
                                          this.BloquearEstado = false;
                                          this.BloquearDatoTitular = false;
                                          this.BloquearAsociado = false;
                                          this.BloquearSorteo = false;
                                          this.BloquearFormaPago = false;
                                          this.BloquearTasa = false;
                                          this.BloquaerProducto = false;
                                          this.BloquearBuscar = false;
                                          this.BloquearPeriodo = false;
                                          this.BloquearCuentaNegociacion = false;
                                          this.Bloquearliquidacion = false;
                                          this.BloquearAsesorExterno = false;
                                          this.BloquearPuntos = false;
                                          this.BloquearBontonPuntos = false;
                                          this.BloquearCuentaOrigen = false;
                                          this.BloquearNombreDebito = false;
                                          this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                          this.btnGuardar = true;
                                          this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                          this.Guardarlog(itemsLogApertura);
                                          this.DebitoAutomaticoFrom.reset();
                                      },
                                      error => {
                                          this.loading = false;
                                          const errorMessage = <any>error;
                                          console.log(errorMessage);
                                      });
                                  } else {
                                      this.loading = true;
                                      this.btnGuardar = true;
                                      this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                      result => {
                                          this.loading = false;
                                          this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                          this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                          this.Bloquear = false;
                                          this.BloquearNrotitulo = false;
                                          this.BloquearNegociacion = false;
                                          this.BloquearCuotaMes = false;
                                          this.BloquearValorTotalPlan = false;
                                          this.bloquearConsultaCuenta = false;
                                          this.BloquearEstado = false;
                                          this.BloquearDatoTitular = false;
                                          this.BloquearAsociado = false;
                                          this.BloquearSorteo = false;
                                          this.BloquearFormaPago = false;
                                          this.BloquearTasa = false;
                                          this.BloquaerProducto = false;
                                          this.BloquearBuscar = false;
                                          this.BloquearPeriodo = false;
                                          this.BloquearCuentaNegociacion = false;
                                          this.Bloquearliquidacion = false;
                                          this.BloquearAsesorExterno = false;
                                          this.BloquearPuntos = false;
                                          this.BloquearBontonPuntos = false;
                                          this.BloquearCuentaOrigen = false;
                                          this.BloquearNombreDebito = false;
                                          this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                          this.btnGuardar = true;
                                          this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                          this.Guardarlog(itemsLogApertura);
                                          this.DebitoAutomaticoFrom.reset();
                                          this.itemsDataObejct = [];
                                      },
                                      error => {
                                          this.loading = false;
                                          const errorMessage = <any>error;
                                          console.log(errorMessage);
                                      });
                                  }
                                }
                            } else {
                                this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                            }
                          } else if (this.ArrayCondiciones.blnSorteo === false) {
                          this.contractualFrom.get('Sorteo')?.reset();
                            if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                              if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                              && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                              && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                    result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog(itemsLogApertura);
                                        this.DebitoAutomaticoFrom.reset();
                                    },
                                    error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                    });
                                } else {
                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                    result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog(itemsLogApertura);
                                        this.DebitoAutomaticoFrom.reset();
                                    },
                                    error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                    });
                                }
                              } else {
                                this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                              }
                            } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                              if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                              this.loading = true;
                              this.btnGuardar = true;
                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                  result => {
                                  this.loading = false;
                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                  this.Bloquear = false;
                                  this.BloquearNrotitulo = false;
                                  this.BloquearNegociacion = false;
                                  this.BloquearCuotaMes = false;
                                  this.BloquearValorTotalPlan = false;
                                  this.bloquearConsultaCuenta = false;
                                  this.BloquearEstado = false;
                                  this.BloquearDatoTitular = false;
                                  this.BloquearAsociado = false;
                                  this.BloquearSorteo = false;
                                  this.BloquearFormaPago = false;
                                  this.BloquearTasa = false;
                                  this.BloquaerProducto = false;
                                  this.BloquearBuscar = false;
                                  this.BloquearPeriodo = false;
                                  this.BloquearCuentaNegociacion = false;
                                  this.Bloquearliquidacion = false;
                                  this.BloquearAsesorExterno = false;
                                  this.BloquearPuntos = false;
                                  this.BloquearBontonPuntos = false;
                                  this.BloquearCuentaOrigen = false;
                                  this.BloquearNombreDebito = false;
                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                  this.btnGuardar = true;
                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                  this.Guardarlog(itemsLogApertura);
                                  this.DebitoAutomaticoFrom.reset();
                                  },
                                  error => {
                                    this.loading = false;
                                    const errorMessage = <any>error;
                                    console.log(errorMessage);
                                  });
                              } else {
                              this.loading = true;
                              this.btnGuardar = true;
                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                  result => {
                                  this.loading = false;
                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                  this.Bloquear = false;
                                  this.BloquearNrotitulo = false;
                                  this.BloquearNegociacion = false;
                                  this.BloquearCuotaMes = false;
                                  this.BloquearValorTotalPlan = false;
                                  this.bloquearConsultaCuenta = false;
                                  this.BloquearEstado = false;
                                  this.BloquearDatoTitular = false;
                                  this.BloquearAsociado = false;
                                  this.BloquearSorteo = false;
                                  this.BloquearFormaPago = false;
                                  this.BloquearTasa = false;
                                  this.BloquaerProducto = false;
                                  this.BloquearBuscar = false;
                                  this.BloquearPeriodo = false;
                                  this.BloquearCuentaNegociacion = false;
                                  this.Bloquearliquidacion = false;
                                  this.BloquearAsesorExterno = false;
                                  this.BloquearPuntos = false;
                                  this.BloquearBontonPuntos = false;
                                  this.BloquearCuentaOrigen = false;
                                  this.BloquearNombreDebito = false;
                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                  this.btnGuardar = true;
                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                  this.Guardarlog(itemsLogApertura);
                                  this.DebitoAutomaticoFrom.reset();
                                  },
                                  error => {
                                    this.loading = false;
                                    const errorMessage = <any>error;
                                    console.log(errorMessage);
                                  }
                              );
                              }
                            }
                          }
                      } else {
                          this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.',
                );
                          this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                          this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                      }
                    }
                    if (this.ArrayCondiciones.blnMontoMinMax === false) {
                      if (this.ArrayCondiciones.blnSorteo === true) {
                          if (this.contractualFrom.get('Sorteo')?.value !== null
                          && this.contractualFrom.get('Sorteo')?.value !== undefined
                          && this.contractualFrom.get('Sorteo')?.value !== '') {

                          if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                              if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                              && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                              && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                              if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                  this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                  this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                  this.loading = true;
                                  this.btnGuardar = true;
                                  this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                  result => {
                                      this.loading = false;
                                      this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                      this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                      this.Bloquear = false;
                                      this.BloquearNrotitulo = false;
                                      this.BloquearNegociacion = false;
                                      this.BloquearCuotaMes = false;
                                      this.BloquearValorTotalPlan = false;
                                      this.bloquearConsultaCuenta = false;
                                      this.BloquearEstado = false;
                                      this.BloquearDatoTitular = false;
                                      this.BloquearAsociado = false;
                                      this.BloquearSorteo = false;
                                      this.BloquearFormaPago = false;
                                      this.BloquearTasa = false;
                                      this.BloquaerProducto = false;
                                      this.BloquearBuscar = false;
                                      this.BloquearPeriodo = false;
                                      this.BloquearCuentaNegociacion = false;
                                      this.Bloquearliquidacion = false;
                                      this.BloquearAsesorExterno = false;
                                      this.BloquearPuntos = false;
                                      this.BloquearBontonPuntos = false;
                                      this.BloquearCuentaOrigen = false;
                                      this.BloquearNombreDebito = false;
                                      this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                            );
                                      this.btnGuardar = true;
                                      this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                      this.Guardarlog();
                                      this.DebitoAutomaticoFrom.reset();
                                      this.itemsDataObejct = [];






                                  },
                                  error => {
                                      this.loading = false;
                                      const errorMessage = <any>error;
                                      console.log(errorMessage);
                                  }
                                  );
                              } else {
                                  this.loading = true;
                                  this.btnGuardar = true;
                                  this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                  result => {
                                      this.loading = false;
                                      this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                      this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                      this.Bloquear = false;
                                      this.BloquearNrotitulo = false;
                                      this.BloquearNegociacion = false;
                                      this.BloquearCuotaMes = false;
                                      this.BloquearValorTotalPlan = false;
                                      this.bloquearConsultaCuenta = false;
                                      this.BloquearEstado = false;
                                      this.BloquearDatoTitular = false;
                                      this.BloquearAsociado = false;
                                      this.BloquearSorteo = false;
                                      this.BloquearFormaPago = false;
                                      this.BloquearTasa = false;
                                      this.BloquaerProducto = false;
                                      this.BloquearBuscar = false;
                                      this.BloquearPeriodo = false;
                                      this.BloquearCuentaNegociacion = false;
                                      this.Bloquearliquidacion = false;
                                      this.BloquearAsesorExterno = false;
                                      this.BloquearPuntos = false;
                                      this.BloquearBontonPuntos = false;
                                      this.BloquearCuentaOrigen = false;
                                      this.BloquearNombreDebito = false;
                                      this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                            );
                                      this.btnGuardar = true;
                                      this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                      this.Guardarlog();
                                      this.DebitoAutomaticoFrom.reset();
                                      this.itemsDataObejct = [];



                                  },
                                  error => {
                                      this.loading = false;
                                      const errorMessage = <any>error;
                                      console.log(errorMessage);
                                  }
                                  );
                              }
                              } else {
                              this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.',
                        );
                              this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                              this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                              }
                          } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                              this.contractualFrom.get('IdCuentaDestino')?.reset();
                              if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                              this.loading = true;
                              this.btnGuardar = true;
                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                  result => {
                                  this.loading = false;
                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                  this.Bloquear = false;
                                  this.BloquearNrotitulo = false;
                                  this.BloquearNegociacion = false;
                                  this.BloquearCuotaMes = false;
                                  this.BloquearValorTotalPlan = false;
                                  this.bloquearConsultaCuenta = false;
                                  this.BloquearEstado = false;
                                  this.BloquearDatoTitular = false;
                                  this.BloquearAsociado = false;
                                  this.BloquearSorteo = false;
                                  this.BloquearFormaPago = false;
                                  this.BloquearTasa = false;
                                  this.BloquaerProducto = false;
                                  this.BloquearBuscar = false;
                                  this.BloquearPeriodo = false;
                                  this.BloquearCuentaNegociacion = false;
                                  this.Bloquearliquidacion = false;
                                  this.BloquearAsesorExterno = false;
                                  this.BloquearPuntos = false;
                                  this.BloquearBontonPuntos = false;
                                  this.BloquearCuentaOrigen = false;
                                  this.BloquearNombreDebito = false;
                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                  this.btnGuardar = true;
                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                  this.Guardarlog();
                                  this.DebitoAutomaticoFrom.reset();
                                  this.itemsDataObejct = [];





                                  },
                                  error => {
                                  this.loading = false;
                                  const errorMessage = <any>error;
                                  console.log(errorMessage);
                                  }
                              );
                              } else {
                              this.loading = true;
                              this.btnGuardar = true;
                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                  result => {
                                  this.loading = false;
                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                  this.BloquearDatoTitular = false;
                                  this.BloquearNrotitulo = false;
                                  this.BloquearAsociado = false;
                                  this.BloquaerProducto = false;
                                  this.BloquearAsesorExterno = false;
                                  this.BloquearFormaPago = false;
                                  this.BloquearCuentaNegociacion = false;
                                  this.BloquearNegociacion = false;
                                  this.BloquearValorTotalPlan = false;
                                  this.BloquearCuotaMes = false;
                                  this.Bloquearliquidacion = false;
                                  this.BloquearSorteo = false;
                                  this.BloquearPuntos = false;
                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                  this.btnGuardar = true;
                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                  this.Guardarlog();
                                  this.DebitoAutomaticoFrom.reset();
                                  this.itemsDataObejct = [];



                                  },
                                  error => {
                                  this.loading = false;
                                  const errorMessage = <any>error;
                                  console.log(errorMessage);
                                  }
                              );
                              }
                          }
                          } else {
                          this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                          this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                          this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                          }
                      } else if (this.ArrayCondiciones.blnSorteo === false) {
                          this.contractualFrom.get('Sorteo')?.reset();
                          if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                          if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                              && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                              && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                              if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                              this.loading = true;
                              this.btnGuardar = true;
                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                  result => {
                                  this.loading = false;
                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                  this.Bloquear = false;
                                  this.BloquearNrotitulo = false;
                                  this.BloquearNegociacion = false;
                                  this.BloquearCuotaMes = false;
                                  this.BloquearValorTotalPlan = false;
                                  this.bloquearConsultaCuenta = false;
                                  this.BloquearEstado = false;
                                  this.BloquearDatoTitular = false;
                                  this.BloquearAsociado = false;
                                  this.BloquearSorteo = false;
                                  this.BloquearFormaPago = false;
                                  this.BloquearTasa = false;
                                  this.BloquaerProducto = false;
                                  this.BloquearBuscar = false;
                                  this.BloquearPeriodo = false;
                                  this.BloquearCuentaNegociacion = false;
                                  this.Bloquearliquidacion = false;
                                  this.BloquearAsesorExterno = false;
                                  this.BloquearPuntos = false;
                                  this.BloquearBontonPuntos = false;
                                  this.BloquearCuentaOrigen = false;
                                  this.BloquearNombreDebito = false;
                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                  this.btnGuardar = true;
                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                  this.Guardarlog();
                                  this.DebitoAutomaticoFrom.reset();





                                  },
                                  error => {
                                  this.loading = false;
                                  const errorMessage = <any>error;
                                  console.log(errorMessage);
                                  }
                              );
                              } else {
                              this.loading = true;
                              this.btnGuardar = true;
                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                  result => {
                                  this.loading = false;
                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                  this.Bloquear = false;
                                  this.BloquearNrotitulo = false;
                                  this.BloquearNegociacion = false;
                                  this.BloquearCuotaMes = false;
                                  this.BloquearValorTotalPlan = false;
                                  this.bloquearConsultaCuenta = false;
                                  this.BloquearEstado = false;
                                  this.BloquearDatoTitular = false;
                                  this.BloquearAsociado = false;
                                  this.BloquearSorteo = false;
                                  this.BloquearFormaPago = false;
                                  this.BloquearTasa = false;
                                  this.BloquaerProducto = false;
                                  this.BloquearBuscar = false;
                                  this.BloquearPeriodo = false;
                                  this.BloquearCuentaNegociacion = false;
                                  this.Bloquearliquidacion = false;
                                  this.BloquearAsesorExterno = false;
                                  this.BloquearPuntos = false;
                                  this.BloquearBontonPuntos = false;
                                  this.BloquearCuentaOrigen = false;
                                  this.BloquearNombreDebito = false;
                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                  this.btnGuardar = true;
                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                  this.Guardarlog();
                                  this.DebitoAutomaticoFrom.reset();





                                  },
                                  error => {
                                  this.loading = false;
                                  const errorMessage = <any>error;
                                  console.log(errorMessage);
                                  }
                              );
                              }
                          } else {
                              this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                              this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                              this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                          }
                          } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                          this.contractualFrom.get('IdCuentaDestino')?.reset();
                          if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                              this.loading = true;
                              this.btnGuardar = true;
                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                              result => {
                                  this.loading = false;
                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                  this.Bloquear = false;
                                  this.BloquearNrotitulo = false;
                                  this.BloquearNegociacion = false;
                                  this.BloquearCuotaMes = false;
                                  this.BloquearValorTotalPlan = false;
                                  this.bloquearConsultaCuenta = false;
                                  this.BloquearEstado = false;
                                  this.BloquearDatoTitular = false;
                                  this.BloquearAsociado = false;
                                  this.BloquearSorteo = false;
                                  this.BloquearFormaPago = false;
                                  this.BloquearTasa = false;
                                  this.BloquaerProducto = false;
                                  this.BloquearBuscar = false;
                                  this.BloquearPeriodo = false;
                                  this.BloquearCuentaNegociacion = false;
                                  this.Bloquearliquidacion = false;
                                  this.BloquearAsesorExterno = false;
                                  this.BloquearPuntos = false;
                                  this.BloquearBontonPuntos = false;
                                  this.BloquearCuentaOrigen = false;
                                  this.BloquearNombreDebito = false;
                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                  this.btnGuardar = true;
                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                  this.Guardarlog();
                                  this.DebitoAutomaticoFrom.reset();
                              },
                              error => {
                                  this.loading = false;
                                  const errorMessage = <any>error;
                                  console.log(errorMessage);
                              }
                              );
                          } else {
                              this.loading = true;
                              this.btnGuardar = true;
                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                              result => {
                                  this.loading = false;
                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                  this.Bloquear = false;
                                  this.BloquearNrotitulo = false;
                                  this.BloquearNegociacion = false;
                                  this.BloquearCuotaMes = false;
                                  this.BloquearValorTotalPlan = false;
                                  this.bloquearConsultaCuenta = false;
                                  this.BloquearEstado = false;
                                  this.BloquearDatoTitular = false;
                                  this.BloquearAsociado = false;
                                  this.BloquearSorteo = false;
                                  this.BloquearFormaPago = false;
                                  this.BloquearTasa = false;
                                  this.BloquaerProducto = false;
                                  this.BloquearBuscar = false;
                                  this.BloquearPeriodo = false;
                                  this.BloquearCuentaNegociacion = false;
                                  this.Bloquearliquidacion = false;
                                  this.BloquearAsesorExterno = false;
                                  this.BloquearPuntos = false;
                                  this.BloquearBontonPuntos = false;
                                  this.BloquearCuentaOrigen = false;
                                  this.BloquearNombreDebito = false;
                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                  this.btnGuardar = true;
                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                  this.Guardarlog();
                                  this.DebitoAutomaticoFrom.reset();



                              },
                              error => {
                                  this.loading = false;
                                  const errorMessage = <any>error;
                                  console.log(errorMessage);
                              }
                              );
                          }
                          }
                      }
                    }
                }
                } else {
                swal.fire({
                    title: '¿Desea agregar un asesor externo?',
                    text: '',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Si',
                    cancelButtonText: 'No',
                    confirmButtonColor: 'rgb(13,165,80)',
                    cancelButtonColor: 'rgb(160,0,87)',
                    allowOutsideClick: false,
                    allowEscapeKey: false
                }).then((results) => {
                    if (results.value) {
                    this.generalesService.Autofocus('SelectAsesorExterno');
                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                    } else {
                    if (this.dataObjet !== undefined) {
                        this.dataTitulareslist = this.dataObjet.Titulares;
                        this.contractualFrom.get('Titulares')?.setValue(this.dataTitulareslist);
                    }
                    if (this.itemsDataObejct.length > 0) {
                        this.dataObservacionCuentalist = this.itemsDataObejct;
                        this.contractualFrom.get('ObservacionesCuenta')?.setValue(this.dataObservacionCuentalist);
                    }
                    if (this.ArrayCondiciones.blnPlazoMinMax === true) {
                        if (JSON.parse(this.contractualFrom.get('Plazo')?.value) >= this.ArrayCondiciones.PlazoMinimo
                        && JSON.parse(this.contractualFrom.get('Plazo')?.value) <= this.ArrayCondiciones.PlazoMaximo) {
                        if (this.ArrayCondiciones.blnMontoMinMax === true) {
                            if (this.contractualFrom.get('ValorPlan')?.value >= this.ArrayCondiciones.SdoMinimo
                            && this.contractualFrom.get('ValorPlan')?.value <= this.ArrayCondiciones.SdoMaximo) {

                              if (this.ArrayCondiciones.blnSorteo === true) {
                                  if (this.contractualFrom.get('Sorteo')?.value !== null
                                  && this.contractualFrom.get('Sorteo')?.value !== undefined
                                  && this.contractualFrom.get('Sorteo')?.value !== '') {

                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                          if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                              result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                        );
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                                  this.itemsDataObejct = [];
                                              },
                                              error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                              });
                                          } else {
                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                              result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                                  this.itemsDataObejct = [];
                                              },
                                              error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                              });
                                          }
                                        } else {
                                          this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                          this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                          this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                        }
                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            this.itemsDataObejct = [];
                                            },
                                            error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                            });
                                        } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            this.itemsDataObejct = [];
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        }
                                    }
                                  } else {
                                    this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                  }
                              } else if (this.ArrayCondiciones.blnSorteo === false) {
                                  this.contractualFrom.get('Sorteo')?.reset();
                                  if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                            });
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                    }
                                  } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                  this.contractualFrom.get('IdCuentaDestino')?.reset();
                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    }
                                  }
                              }
                            } else {
                              this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                              this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                              this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                            }
                        }
                          if (this.ArrayCondiciones.blnMontoMinMax === false) {
                              if (this.ArrayCondiciones.blnSorteo === true) {
                                if (this.contractualFrom.get('Sorteo')?.value !== null
                                    && this.contractualFrom.get('Sorteo')?.value !== undefined
                                    && this.contractualFrom.get('Sorteo')?.value !== '') {

                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                      if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                          && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                          && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                          if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                          this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                          this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                              result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog(itemsLogApertura);
                                              this.DebitoAutomaticoFrom.reset();
                                              this.itemsDataObejct = [];
                                              },
                                              error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                              });
                                          } else {
                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                              result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog(itemsLogApertura);
                                              this.DebitoAutomaticoFrom.reset();
                                              this.itemsDataObejct = [];
                                              },
                                              error => {
                                                this.loading = false;
                                                const errorMessage = <any>error;
                                                console.log(errorMessage);
                                              });
                                          }
                                      } else {
                                          this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.',
                                );
                                          this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                          this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                      }
                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                      this.contractualFrom.get('IdCuentaDestino')?.reset();
                                      if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                          this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                          this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog(itemsLogApertura);
                                              this.DebitoAutomaticoFrom.reset();
                                              this.itemsDataObejct = [];
                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          });
                                      } else {
                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog(itemsLogApertura);
                                              this.DebitoAutomaticoFrom.reset();
                                              this.itemsDataObejct = [];
                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          });
                                      }
                                    }
                                } else {
                                    this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                }
                              } else if (this.ArrayCondiciones.blnSorteo === false) {
                              this.contractualFrom.get('Sorteo')?.reset();
                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                      if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                          this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                          this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog(itemsLogApertura);
                                              this.DebitoAutomaticoFrom.reset();
                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          });
                                      } else {
                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog(itemsLogApertura);
                                              this.DebitoAutomaticoFrom.reset();
                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          });
                                      }
                                    } else {
                                      this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                      this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                      this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                    }
                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                    this.contractualFrom.get('IdCuentaDestino')?.reset();
                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                      this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                      this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                      this.loading = true;
                                      this.btnGuardar = true;
                                      this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                        result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog(itemsLogApertura);
                                        this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                        });
                                    } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                        result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog(itemsLogApertura);
                                        this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                          this.loading = false;
                                          const errorMessage = <any>error;
                                          console.log(errorMessage);
                                        });
                                    }
                                }
                              }
                          }
                        } else {
                          this.notif.onWarning('Advertencia','El plazo ingresado no es permitido para este producto.');
                          this.contractualFrom.get('plazo')?.reset();
                          this.contractualFrom.get('CuotaMes')?.reset();
                          this.contractualFrom.get('ValorPlan')?.reset();
                          this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                          this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                        }
                    } else {
                        if (this.ArrayCondiciones.blnMontoMinMax === true) {
                          if (this.contractualFrom.get('ValorPlan')?.value >= this.ArrayCondiciones.SdoMinimo
                              && this.contractualFrom.get('ValorPlan')?.value <= this.ArrayCondiciones.SdoMaximo) {

                              if (this.ArrayCondiciones.blnSorteo === true) {
                                if (this.contractualFrom.get('Sorteo')?.value !== null
                                    && this.contractualFrom.get('Sorteo')?.value !== undefined
                                    && this.contractualFrom.get('Sorteo')?.value !== '') {

                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            this.itemsDataObejct = [];
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            this.itemsDataObejct = [];
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                    }
                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                    this.contractualFrom.get('IdCuentaDestino')?.reset();
                                      if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                          this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                          this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog(itemsLogApertura);
                                              this.DebitoAutomaticoFrom.reset();
                                              this.itemsDataObejct = [];
                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          });
                                      } else {
                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog(itemsLogApertura);
                                              this.DebitoAutomaticoFrom.reset();
                                              this.itemsDataObejct = [];
                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          });
                                      }
                                    }
                                } else {
                                    this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                }
                              } else if (this.ArrayCondiciones.blnSorteo === false) {
                              this.contractualFrom.get('Sorteo')?.reset();
                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                      if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                          this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                          this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog(itemsLogApertura);
                                              this.DebitoAutomaticoFrom.reset();
                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          });
                                      } else {
                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog(itemsLogApertura);
                                              this.DebitoAutomaticoFrom.reset();

                                              this.itemsSend.NombrePlan = this.contractualFrom.get('DescripcionProducto')?.value;
                                              this.itemsSend.Cuenta = this.contractualFrom.get('Cuenta')?.value;
                                              this.itemsSend.NombreApellidos = this.contractualFrom.get('Nombre')?.value;
                                              this.itemsSend.Cedula = this.contractualFrom.get('NumeroDocumento')?.value;
                                              this.itemsSend.Direccion = this.contractualFrom.get('DireccionContractual')?.value;
                                              this.itemsSend.Telefono = this.contractualFrom.get('TelefonoContractual')?.value;
                                              this.itemsSend.Ciudad = this.contractualFrom.get('CiudadContractual')?.value;
                                              this.itemsSend.FechaApertura = this.contractualFrom.get('FechaApertura')?.value;
                                              this.itemsSend.FechaVecimiento = this.contractualFrom.get('FechaVencimiento')?.value;
                                              this.itemsSend.Plazo = this.contractualFrom.get('Plazo')?.value;
                                              this.itemsSend.Cuota = this.contractualFrom.get('CuotaMes')?.value;
                                              this.itemsSend.TipoCuentaDestino = 'Cuenta destino:';
                                              this.itemsSend.CuentaAhorros = this.contractualFrom.get('CuentaDestino')?.value;
                                              this.itemsSend.Sorteo = this.contractualFrom.get('Sorteo')?.value;
                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          });
                                      }
                                    } else {
                                      this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                      this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                      this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                    }
                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                    this.contractualFrom.get('IdCuentaDestino')?.reset();
                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                        result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog(itemsLogApertura);
                                        this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                          this.loading = false;
                                          const errorMessage = <any>error;
                                          console.log(errorMessage);
                                        });
                                    } else {
                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                        result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog(itemsLogApertura);
                                        this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                          this.loading = false;
                                          const errorMessage = <any>error;
                                          console.log(errorMessage);
                                        });
                                    }
                                }
                              }
                          } else {
                              this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                              this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                              this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                          }
                      }
                        if (this.ArrayCondiciones.blnMontoMinMax === false) {
                          if (this.ArrayCondiciones.blnSorteo === true) {
                              if (this.contractualFrom.get('Sorteo')?.value !== null
                              && this.contractualFrom.get('Sorteo')?.value !== undefined
                              && this.contractualFrom.get('Sorteo')?.value !== '') {

                              if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                  if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                  && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                  && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                  if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                      this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                      this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                      this.loading = true;
                                      this.btnGuardar = true;
                                      this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                      result => {
                                          this.loading = false;
                                          this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                          this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                          this.Bloquear = false;
                                          this.BloquearNrotitulo = false;
                                          this.BloquearNegociacion = false;
                                          this.BloquearCuotaMes = false;
                                          this.BloquearValorTotalPlan = false;
                                          this.bloquearConsultaCuenta = false;
                                          this.BloquearEstado = false;
                                          this.BloquearDatoTitular = false;
                                          this.BloquearAsociado = false;
                                          this.BloquearSorteo = false;
                                          this.BloquearFormaPago = false;
                                          this.BloquearTasa = false;
                                          this.BloquaerProducto = false;
                                          this.BloquearBuscar = false;
                                          this.BloquearPeriodo = false;
                                          this.BloquearCuentaNegociacion = false;
                                          this.Bloquearliquidacion = false;
                                          this.BloquearAsesorExterno = false;
                                          this.BloquearPuntos = false;
                                          this.BloquearBontonPuntos = false;
                                          this.BloquearCuentaOrigen = false;
                                          this.BloquearNombreDebito = false;
                                          this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                          this.btnGuardar = true;
                                          this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                          this.Guardarlog();
                                          this.DebitoAutomaticoFrom.reset();
                                          this.itemsDataObejct = [];
                                      },
                                      error => {
                                          this.loading = false;
                                          const errorMessage = <any>error;
                                          console.log(errorMessage);
                                      }
                                      );
                                  } else {
                                      this.loading = true;
                                      this.btnGuardar = true;
                                      this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                      result => {
                                          this.loading = false;
                                          this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                          this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                          this.Bloquear = false;
                                          this.BloquearNrotitulo = false;
                                          this.BloquearNegociacion = false;
                                          this.BloquearCuotaMes = false;
                                          this.BloquearValorTotalPlan = false;
                                          this.bloquearConsultaCuenta = false;
                                          this.BloquearEstado = false;
                                          this.BloquearDatoTitular = false;
                                          this.BloquearAsociado = false;
                                          this.BloquearSorteo = false;
                                          this.BloquearFormaPago = false;
                                          this.BloquearTasa = false;
                                          this.BloquaerProducto = false;
                                          this.BloquearBuscar = false;
                                          this.BloquearPeriodo = false;
                                          this.BloquearCuentaNegociacion = false;
                                          this.Bloquearliquidacion = false;
                                          this.BloquearAsesorExterno = false;
                                          this.BloquearPuntos = false;
                                          this.BloquearBontonPuntos = false;
                                          this.BloquearCuentaOrigen = false;
                                          this.BloquearNombreDebito = false;
                                          this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                );
                                          this.btnGuardar = true;
                                          this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                          this.Guardarlog();
                                          this.DebitoAutomaticoFrom.reset();
                                          this.itemsDataObejct = [];

                                      },
                                      error => {
                                          this.loading = false;
                                          const errorMessage = <any>error;
                                          console.log(errorMessage);
                                      }
                                      );
                                  }
                                  } else {
                                  this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.',
                            );
                                  this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                  this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                  }
                              } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                  this.contractualFrom.get('IdCuentaDestino')?.reset();
                                  if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                  this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                  this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                  this.loading = true;
                                  this.btnGuardar = true;
                                  this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                      result => {
                                      this.loading = false;
                                      this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                      this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                      this.Bloquear = false;
                                      this.BloquearNrotitulo = false;
                                      this.BloquearNegociacion = false;
                                      this.BloquearCuotaMes = false;
                                      this.BloquearValorTotalPlan = false;
                                      this.bloquearConsultaCuenta = false;
                                      this.BloquearEstado = false;
                                      this.BloquearDatoTitular = false;
                                      this.BloquearAsociado = false;
                                      this.BloquearSorteo = false;
                                      this.BloquearFormaPago = false;
                                      this.BloquearTasa = false;
                                      this.BloquaerProducto = false;
                                      this.BloquearBuscar = false;
                                      this.BloquearPeriodo = false;
                                      this.BloquearCuentaNegociacion = false;
                                      this.Bloquearliquidacion = false;
                                      this.BloquearAsesorExterno = false;
                                      this.BloquearPuntos = false;
                                      this.BloquearBontonPuntos = false;
                                      this.BloquearCuentaOrigen = false;
                                      this.BloquearNombreDebito = false;
                                      this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                      this.btnGuardar = true;
                                      this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                      this.Guardarlog();
                                      this.DebitoAutomaticoFrom.reset();
                                      this.itemsDataObejct = [];




                                      },
                                      error => {
                                      this.loading = false;
                                      const errorMessage = <any>error;
                                      console.log(errorMessage);
                                      }
                                  );
                                  } else {
                                  this.loading = true;
                                  this.btnGuardar = true;
                                  this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                      result => {
                                      this.loading = false;
                                      this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                      this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                      this.Bloquear = false;
                                      this.BloquearNrotitulo = false;
                                      this.BloquearNegociacion = false;
                                      this.BloquearCuotaMes = false;
                                      this.BloquearValorTotalPlan = false;
                                      this.bloquearConsultaCuenta = false;
                                      this.BloquearEstado = false;
                                      this.BloquearDatoTitular = false;
                                      this.BloquearAsociado = false;
                                      this.BloquearSorteo = false;
                                      this.BloquearFormaPago = false;
                                      this.BloquearTasa = false;
                                      this.BloquaerProducto = false;
                                      this.BloquearBuscar = false;
                                      this.BloquearPeriodo = false;
                                      this.BloquearCuentaNegociacion = false;
                                      this.Bloquearliquidacion = false;
                                      this.BloquearAsesorExterno = false;
                                      this.BloquearPuntos = false;
                                      this.BloquearBontonPuntos = false;
                                      this.BloquearCuentaOrigen = false;
                                      this.BloquearNombreDebito = false;
                                      this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                      this.btnGuardar = true;
                                      this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                      this.Guardarlog();
                                      this.DebitoAutomaticoFrom.reset();
                                      this.itemsDataObejct = [];


                                      },
                                      error => {
                                      this.loading = false;
                                      const errorMessage = <any>error;
                                      console.log(errorMessage);
                                      }
                                  );
                                  }
                              }
                              } else {
                              this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                              this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                              this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                              }
                          } else if (this.ArrayCondiciones.blnSorteo === false) {
                              this.contractualFrom.get('Sorteo')?.reset();
                              if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                        result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog(itemsLogApertura);
                                        this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                          this.loading = false;
                                          const errorMessage = <any>error;
                                          console.log(errorMessage);
                                        });
                                    } else {
                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                        result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog(itemsLogApertura);
                                        this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                          this.loading = false;
                                          const errorMessage = <any>error;
                                          console.log(errorMessage);
                                        });
                                    }
                                } else {
                                    this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                }
                              } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                              this.contractualFrom.get('IdCuentaDestino')?.reset();
                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                    result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog(itemsLogApertura);
                                        this.DebitoAutomaticoFrom.reset();
                                    },
                                    error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                    });
                                } else {
                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                    result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog(itemsLogApertura);
                                        this.DebitoAutomaticoFrom.reset();
                                    },
                                    error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                    });
                                }
                              }
                          }
                        }
                      }
                    }
                });
              }
            } else {
                if (this.AsesorFrom.get('strCodigo')?.value !== null
                && this.AsesorFrom.get('strCodigo')?.value !== undefined
                && this.AsesorFrom.get('strCodigo')?.value !== '') {

                  this.dataAsesor = this.AsesorFrom.get('strCodigo')?.value;
                  this.contractualFrom.get('IdAsesorExterno')?.setValue(this.dataAsesor);
                  if (this.dataObjet !== undefined) {
                      this.dataTitulareslist = this.dataObjet.Titulares;
                      this.contractualFrom.get('Titulares')?.setValue(this.dataTitulareslist);
                  }
                  if (this.ArrayCondiciones.blnPlazoMinMax === true) {
                      if (JSON.parse(this.contractualFrom.get('Plazo')?.value) >= this.ArrayCondiciones.PlazoMinimo
                      && JSON.parse(this.contractualFrom.get('Plazo')?.value) <= this.ArrayCondiciones.PlazoMaximo) {
                        if (this.ArrayCondiciones.blnMontoMinMax === true) {
                            if (this.contractualFrom.get('CuotaMes')?.value >= this.ArrayCondiciones.SdoMinimo
                            && this.contractualFrom.get('CuotaMes')?.value <= this.ArrayCondiciones.SdoMaximo) {
                              if (this.ArrayCondiciones.blnSorteo === true) {
                                  if (this.contractualFrom.get('Sorteo')?.value !== null
                                  && this.contractualFrom.get('Sorteo')?.value !== undefined
                                  && this.contractualFrom.get('Sorteo')?.value !== '') {
                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {
                                          if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                              result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                              },
                                              error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                              });
                                          } else {
                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                              result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                              },
                                              error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                              });
                                          }
                                        } else {
                                          this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                          this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                          this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                        }
                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                            });
                                        }
                                    }
                                  } else {
                                    this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                  }
                              } else if (this.ArrayCondiciones.blnSorteo === false) {
                                  this.contractualFrom.get('Sorteo')?.reset();
                                  if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                    }
                                  } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                  this.contractualFrom.get('IdCuentaDestino')?.reset();
                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    }
                                  }
                              }

                            } else {
                              this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                              this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                              this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                            }
                        }
                        if (this.ArrayCondiciones.blnMontoMinMax === false) {
                            if (this.ArrayCondiciones.blnSorteo === true) {
                            if (this.contractualFrom.get('Sorteo')?.value !== null
                                && this.contractualFrom.get('Sorteo')?.value !== undefined
                                && this.contractualFrom.get('Sorteo')?.value !== '') {

                                if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                    && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                        result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                  );
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog();
                                        this.DebitoAutomaticoFrom.reset();
                                        this.itemsDataObejct = [];



                                        },
                                        error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                        }
                                    );
                                    } else {
                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                        result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                  );
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog();
                                        this.DebitoAutomaticoFrom.reset();
                                        this.itemsDataObejct = [];


                                        },
                                        error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                        }
                                    );
                                    }
                                } else {
                                    this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.',
                          );
                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                }
                                } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                    result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog();
                                        this.DebitoAutomaticoFrom.reset();
                                        this.itemsDataObejct = [];




                                    },
                                    error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                    }
                                    );
                                } else {
                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                    result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog();
                                        this.DebitoAutomaticoFrom.reset();
                                        this.itemsDataObejct = [];


                                    },
                                    error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                    }
                                    );
                                }
                                }
                            } else {
                                this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                            }
                            } else if (this.ArrayCondiciones.blnSorteo === false) {
                            this.contractualFrom.get('Sorteo')?.reset();
                            if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                    result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog();
                                        this.DebitoAutomaticoFrom.reset();

                                    },
                                    error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                    }
                                    );
                                } else {
                                    this.loading = true;
                                    this.btnGuardar = true;
                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                    result => {
                                        this.loading = false;
                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                        this.Bloquear = false;
                                        this.BloquearNrotitulo = false;
                                        this.BloquearNegociacion = false;
                                        this.BloquearCuotaMes = false;
                                        this.BloquearValorTotalPlan = false;
                                        this.bloquearConsultaCuenta = false;
                                        this.BloquearEstado = false;
                                        this.BloquearDatoTitular = false;
                                        this.BloquearAsociado = false;
                                        this.BloquearSorteo = false;
                                        this.BloquearFormaPago = false;
                                        this.BloquearTasa = false;
                                        this.BloquaerProducto = false;
                                        this.BloquearBuscar = false;
                                        this.BloquearPeriodo = false;
                                        this.BloquearCuentaNegociacion = false;
                                        this.Bloquearliquidacion = false;
                                        this.BloquearAsesorExterno = false;
                                        this.BloquearPuntos = false;
                                        this.BloquearBontonPuntos = false;
                                        this.BloquearCuentaOrigen = false;
                                        this.BloquearNombreDebito = false;
                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                        this.btnGuardar = true;
                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                        this.Guardarlog();
                                        this.DebitoAutomaticoFrom.reset();


                                    },
                                    error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                    }
                                    );
                                }
                                } else {
                                this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                }
                            } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                this.contractualFrom.get('IdCuentaDestino')?.reset();
                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                this.loading = true;
                                this.btnGuardar = true;
                                this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                    result => {
                                    this.loading = false;
                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                    this.Bloquear = false;
                                    this.BloquearNrotitulo = false;
                                    this.BloquearNegociacion = false;
                                    this.BloquearCuotaMes = false;
                                    this.BloquearValorTotalPlan = false;
                                    this.bloquearConsultaCuenta = false;
                                    this.BloquearEstado = false;
                                    this.BloquearDatoTitular = false;
                                    this.BloquearAsociado = false;
                                    this.BloquearSorteo = false;
                                    this.BloquearFormaPago = false;
                                    this.BloquearTasa = false;
                                    this.BloquaerProducto = false;
                                    this.BloquearBuscar = false;
                                    this.BloquearPeriodo = false;
                                    this.BloquearCuentaNegociacion = false;
                                    this.Bloquearliquidacion = false;
                                    this.BloquearAsesorExterno = false;
                                    this.BloquearPuntos = false;
                                    this.BloquearBontonPuntos = false;
                                    this.BloquearCuentaOrigen = false;
                                    this.BloquearNombreDebito = false;
                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                    this.btnGuardar = true;
                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                    this.Guardarlog();
                                    this.DebitoAutomaticoFrom.reset();



                                    },
                                    error => {
                                    this.loading = false;
                                    const errorMessage = <any>error;
                                    console.log(errorMessage);
                                    }
                                );
                                } else {
                                this.loading = true;
                                this.btnGuardar = true;
                                this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                    result => {
                                    this.loading = false;
                                    this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                    this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                    this.Bloquear = false;
                                    this.BloquearNrotitulo = false;
                                    this.BloquearNegociacion = false;
                                    this.BloquearCuotaMes = false;
                                    this.BloquearValorTotalPlan = false;
                                    this.bloquearConsultaCuenta = false;
                                    this.BloquearEstado = false;
                                    this.BloquearDatoTitular = false;
                                    this.BloquearAsociado = false;
                                    this.BloquearSorteo = false;
                                    this.BloquearFormaPago = false;
                                    this.BloquearTasa = false;
                                    this.BloquaerProducto = false;
                                    this.BloquearBuscar = false;
                                    this.BloquearPeriodo = false;
                                    this.BloquearCuentaNegociacion = false;
                                    this.Bloquearliquidacion = false;
                                    this.BloquearAsesorExterno = false;
                                    this.BloquearPuntos = false;
                                    this.BloquearBontonPuntos = false;
                                    this.BloquearCuentaOrigen = false;
                                    this.BloquearNombreDebito = false;
                                    this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                    this.btnGuardar = true;
                                    this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                    this.Guardarlog();
                                    this.DebitoAutomaticoFrom.reset();


                                    },
                                    error => {
                                    this.loading = false;
                                    const errorMessage = <any>error;
                                    console.log(errorMessage);
                                    }
                                );
                                }
                            }
                            }
                        }
                      } else {
                        this.notif.onWarning('Advertencia','El plazo ingresado no es permitido para este producto.');
                        this.contractualFrom.get('plazo')?.reset();
                        this.contractualFrom.get('CuotaMes')?.reset();
                        this.contractualFrom.get('ValorPlan')?.reset();
                      }
                  } else {
                      if (this.ArrayCondiciones.blnMontoMinMax === true) {
                        if (this.contractualFrom.get('CuotaMes')?.value >= this.ArrayCondiciones.SdoMinimo
                            && this.contractualFrom.get('CuotaMes')?.value <= this.ArrayCondiciones.SdoMaximo) {

                            if (this.ArrayCondiciones.blnSorteo === true) {
                              if (this.contractualFrom.get('Sorteo')?.value !== null
                                  && this.contractualFrom.get('Sorteo')?.value !== undefined
                                  && this.contractualFrom.get('Sorteo')?.value !== '') {

                                  if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                            });
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                    }
                                  } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                  this.contractualFrom.get('IdCuentaDestino')?.reset();
                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            this.itemsDataObejct = [];
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    }
                                  }
                              } else {
                                  this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                  this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                  this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                              }
                            } else if (this.ArrayCondiciones.blnSorteo === false) {
                            this.contractualFrom.get('Sorteo')?.reset();
                              if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                  if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                  && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                  && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    }
                                  } else {
                                    this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                  }
                              } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                  this.contractualFrom.get('IdCuentaDestino')?.reset();
                                  if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                  this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                  this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                  this.loading = true;
                                  this.btnGuardar = true;
                                  this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                      result => {
                                      this.loading = false;
                                      this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                      this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                      this.Bloquear = false;
                                      this.BloquearNrotitulo = false;
                                      this.BloquearNegociacion = false;
                                      this.BloquearCuotaMes = false;
                                      this.BloquearValorTotalPlan = false;
                                      this.bloquearConsultaCuenta = false;
                                      this.BloquearEstado = false;
                                      this.BloquearDatoTitular = false;
                                      this.BloquearAsociado = false;
                                      this.BloquearSorteo = false;
                                      this.BloquearFormaPago = false;
                                      this.BloquearTasa = false;
                                      this.BloquaerProducto = false;
                                      this.BloquearBuscar = false;
                                      this.BloquearPeriodo = false;
                                      this.BloquearCuentaNegociacion = false;
                                      this.Bloquearliquidacion = false;
                                      this.BloquearAsesorExterno = false;
                                      this.BloquearPuntos = false;
                                      this.BloquearBontonPuntos = false;
                                      this.BloquearCuentaOrigen = false;
                                      this.BloquearNombreDebito = false;
                                      this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                      this.btnGuardar = true;
                                      this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                      this.Guardarlog(itemsLogApertura);
                                      this.DebitoAutomaticoFrom.reset();

                                      this.itemsSend.NombrePlan = this.contractualFrom.get('DescripcionProducto')?.value;
                                      this.itemsSend.Cuenta = this.contractualFrom.get('Cuenta')?.value;
                                      this.itemsSend.NombreApellidos = this.contractualFrom.get('Nombre')?.value;
                                      this.itemsSend.Cedula = this.contractualFrom.get('NumeroDocumento')?.value;
                                      this.itemsSend.Direccion = this.contractualFrom.get('DireccionContractual')?.value;
                                      this.itemsSend.Telefono = this.contractualFrom.get('TelefonoContractual')?.value;
                                      this.itemsSend.Ciudad = this.contractualFrom.get('CiudadContractual')?.value;
                                      this.itemsSend.FechaApertura = this.contractualFrom.get('FechaApertura')?.value;
                                      this.itemsSend.FechaVecimiento = this.contractualFrom.get('FechaVencimiento')?.value;
                                      this.itemsSend.Plazo = this.contractualFrom.get('Plazo')?.value;
                                      this.itemsSend.Cuota = this.contractualFrom.get('CuotaMes')?.value;
                                      this.itemsSend.TipoCuentaDestino = 'Cuenta destino:';
                                      this.itemsSend.CuentaAhorros = this.contractualFrom.get('CuentaDestino')?.value;
                                      this.itemsSend.Sorteo = this.contractualFrom.get('Sorteo')?.value;
                                      },
                                      error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                      });
                                  } else {
                                  this.loading = true;
                                  this.btnGuardar = true;
                                  this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                      result => {
                                      this.loading = false;
                                      this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                      this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                      this.Bloquear = false;
                                      this.BloquearNrotitulo = false;
                                      this.BloquearNegociacion = false;
                                      this.BloquearCuotaMes = false;
                                      this.BloquearValorTotalPlan = false;
                                      this.bloquearConsultaCuenta = false;
                                      this.BloquearEstado = false;
                                      this.BloquearDatoTitular = false;
                                      this.BloquearAsociado = false;
                                      this.BloquearSorteo = false;
                                      this.BloquearFormaPago = false;
                                      this.BloquearTasa = false;
                                      this.BloquaerProducto = false;
                                      this.BloquearBuscar = false;
                                      this.BloquearPeriodo = false;
                                      this.BloquearCuentaNegociacion = false;
                                      this.Bloquearliquidacion = false;
                                      this.BloquearAsesorExterno = false;
                                      this.BloquearPuntos = false;
                                      this.BloquearBontonPuntos = false;
                                      this.BloquearCuentaOrigen = false;
                                      this.BloquearNombreDebito = false;
                                      this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                      this.btnGuardar = true;
                                      this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                      this.Guardarlog(itemsLogApertura);
                                      this.DebitoAutomaticoFrom.reset();
                                      },
                                      error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                      });
                                  }
                              }
                            }
                        } else {
                            this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.',
                  );
                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                        }
                      }
                      if (this.ArrayCondiciones.blnMontoMinMax === false) {
                        if (this.ArrayCondiciones.blnSorteo === true) {
                            if (this.contractualFrom.get('Sorteo')?.value !== null
                            && this.contractualFrom.get('Sorteo')?.value !== undefined
                            && this.contractualFrom.get('Sorteo')?.value !== '') {

                              if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                  if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                  && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                  && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                  );
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            this.itemsDataObejct = [];
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        }
                                        );
                                    } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            this.itemsDataObejct = [];
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    }
                                  } else {
                                    this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                  }
                              } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                  this.contractualFrom.get('IdCuentaDestino')?.reset();
                                  if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                  this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                  this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                  this.loading = true;
                                  this.btnGuardar = true;
                                  this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                      result => {
                                      this.loading = false;
                                      this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                      this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                      this.Bloquear = false;
                                      this.BloquearNrotitulo = false;
                                      this.BloquearNegociacion = false;
                                      this.BloquearCuotaMes = false;
                                      this.BloquearValorTotalPlan = false;
                                      this.bloquearConsultaCuenta = false;
                                      this.BloquearEstado = false;
                                      this.BloquearDatoTitular = false;
                                      this.BloquearAsociado = false;
                                      this.BloquearSorteo = false;
                                      this.BloquearFormaPago = false;
                                      this.BloquearTasa = false;
                                      this.BloquaerProducto = false;
                                      this.BloquearBuscar = false;
                                      this.BloquearPeriodo = false;
                                      this.BloquearCuentaNegociacion = false;
                                      this.Bloquearliquidacion = false;
                                      this.BloquearAsesorExterno = false;
                                      this.BloquearPuntos = false;
                                      this.BloquearBontonPuntos = false;
                                      this.BloquearCuentaOrigen = false;
                                      this.BloquearNombreDebito = false;
                                      this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                      this.btnGuardar = true;
                                      this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                      this.Guardarlog(itemsLogApertura);
                                      this.DebitoAutomaticoFrom.reset();
                                      this.itemsDataObejct = [];
                                      },
                                      error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                      });
                                  } else {
                                  this.loading = true;
                                  this.btnGuardar = true;
                                  this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                      result => {
                                      this.loading = false;
                                      this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                      this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                      this.BloquearDatoTitular = false;
                                      this.BloquearNrotitulo = false;
                                      this.BloquearAsociado = false;
                                      this.BloquaerProducto = false;
                                      this.BloquearAsesorExterno = false;
                                      this.BloquearFormaPago = false;
                                      this.BloquearCuentaNegociacion = false;
                                      this.BloquearNegociacion = false;
                                      this.BloquearValorTotalPlan = false;
                                      this.BloquearCuotaMes = false;
                                      this.Bloquearliquidacion = false;
                                      this.BloquearSorteo = false;
                                      this.BloquearPuntos = false;
                                      this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                      this.btnGuardar = true;
                                      this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                      this.Guardarlog(itemsLogApertura);
                                      this.DebitoAutomaticoFrom.reset();
                                      this.itemsDataObejct = [];
                                      },
                                      error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                      });
                                  }
                              }
                            } else {
                              this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                              this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                              this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                            }
                        } else if (this.ArrayCondiciones.blnSorteo === false) {
                            this.contractualFrom.get('Sorteo')?.reset();
                            if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                              if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                  && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                  && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                  if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                  this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                  this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                  this.loading = true;
                                  this.btnGuardar = true;
                                  this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                      result => {
                                      this.loading = false;
                                      this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                      this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                      this.Bloquear = false;
                                      this.BloquearNrotitulo = false;
                                      this.BloquearNegociacion = false;
                                      this.BloquearCuotaMes = false;
                                      this.BloquearValorTotalPlan = false;
                                      this.bloquearConsultaCuenta = false;
                                      this.BloquearEstado = false;
                                      this.BloquearDatoTitular = false;
                                      this.BloquearAsociado = false;
                                      this.BloquearSorteo = false;
                                      this.BloquearFormaPago = false;
                                      this.BloquearTasa = false;
                                      this.BloquaerProducto = false;
                                      this.BloquearBuscar = false;
                                      this.BloquearPeriodo = false;
                                      this.BloquearCuentaNegociacion = false;
                                      this.Bloquearliquidacion = false;
                                      this.BloquearAsesorExterno = false;
                                      this.BloquearPuntos = false;
                                      this.BloquearBontonPuntos = false;
                                      this.BloquearCuentaOrigen = false;
                                      this.BloquearNombreDebito = false;
                                      this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                      this.btnGuardar = true;
                                      this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                      this.Guardarlog(itemsLogApertura);
                                      this.DebitoAutomaticoFrom.reset();
                                      },
                                      error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                      });
                                  } else {
                                  this.loading = true;
                                  this.btnGuardar = true;
                                  this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                      result => {
                                      this.loading = false;
                                      this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                      this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                      this.Bloquear = false;
                                      this.BloquearNrotitulo = false;
                                      this.BloquearNegociacion = false;
                                      this.BloquearCuotaMes = false;
                                      this.BloquearValorTotalPlan = false;
                                      this.bloquearConsultaCuenta = false;
                                      this.BloquearEstado = false;
                                      this.BloquearDatoTitular = false;
                                      this.BloquearAsociado = false;
                                      this.BloquearSorteo = false;
                                      this.BloquearFormaPago = false;
                                      this.BloquearTasa = false;
                                      this.BloquaerProducto = false;
                                      this.BloquearBuscar = false;
                                      this.BloquearPeriodo = false;
                                      this.BloquearCuentaNegociacion = false;
                                      this.Bloquearliquidacion = false;
                                      this.BloquearAsesorExterno = false;
                                      this.BloquearPuntos = false;
                                      this.BloquearBontonPuntos = false;
                                      this.BloquearCuentaOrigen = false;
                                      this.BloquearNombreDebito = false;
                                      this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                      this.btnGuardar = true;
                                      this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                      this.Guardarlog(itemsLogApertura);
                                      this.DebitoAutomaticoFrom.reset();
                                      },
                                      error => {
                                        this.loading = false;
                                        const errorMessage = <any>error;
                                        console.log(errorMessage);
                                      });
                                  }
                              } else {
                                  this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                  this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                  this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                              }
                            } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                            this.contractualFrom.get('IdCuentaDestino')?.reset();
                              if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                  this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                  this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                  this.loading = true;
                                  this.btnGuardar = true;
                                  this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                  result => {
                                      this.loading = false;
                                      this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                      this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                      this.Bloquear = false;
                                      this.BloquearNrotitulo = false;
                                      this.BloquearNegociacion = false;
                                      this.BloquearCuotaMes = false;
                                      this.BloquearValorTotalPlan = false;
                                      this.bloquearConsultaCuenta = false;
                                      this.BloquearEstado = false;
                                      this.BloquearDatoTitular = false;
                                      this.BloquearAsociado = false;
                                      this.BloquearSorteo = false;
                                      this.BloquearFormaPago = false;
                                      this.BloquearTasa = false;
                                      this.BloquaerProducto = false;
                                      this.BloquearBuscar = false;
                                      this.BloquearPeriodo = false;
                                      this.BloquearCuentaNegociacion = false;
                                      this.Bloquearliquidacion = false;
                                      this.BloquearAsesorExterno = false;
                                      this.BloquearPuntos = false;
                                      this.BloquearBontonPuntos = false;
                                      this.BloquearCuentaOrigen = false;
                                      this.BloquearNombreDebito = false;
                                      this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                      this.btnGuardar = true;
                                      this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                      this.Guardarlog(itemsLogApertura);
                                      this.DebitoAutomaticoFrom.reset();
                                  },
                                  error => {
                                      this.loading = false;
                                      const errorMessage = <any>error;
                                      console.log(errorMessage);
                                  });
                              } else {
                                  this.loading = true;
                                  this.btnGuardar = true;
                                  this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                  result => {
                                      this.loading = false;
                                      this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                      this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                      this.Bloquear = false;
                                      this.BloquearNrotitulo = false;
                                      this.BloquearNegociacion = false;
                                      this.BloquearCuotaMes = false;
                                      this.BloquearValorTotalPlan = false;
                                      this.bloquearConsultaCuenta = false;
                                      this.BloquearEstado = false;
                                      this.BloquearDatoTitular = false;
                                      this.BloquearAsociado = false;
                                      this.BloquearSorteo = false;
                                      this.BloquearFormaPago = false;
                                      this.BloquearTasa = false;
                                      this.BloquaerProducto = false;
                                      this.BloquearBuscar = false;
                                      this.BloquearPeriodo = false;
                                      this.BloquearCuentaNegociacion = false;
                                      this.Bloquearliquidacion = false;
                                      this.BloquearAsesorExterno = false;
                                      this.BloquearPuntos = false;
                                      this.BloquearBontonPuntos = false;
                                      this.BloquearCuentaOrigen = false;
                                      this.BloquearNombreDebito = false;
                                      this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                      this.btnGuardar = true;
                                      this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                      this.Guardarlog(itemsLogApertura);
                                      this.DebitoAutomaticoFrom.reset();
                                  },
                                  error => {
                                      this.loading = false;
                                      const errorMessage = <any>error;
                                      console.log(errorMessage);
                                  });
                              }
                            }
                        }
                      }
                  }
                } else {
                  swal.fire({
                      title: '¿Desea agregar un asesor externo?',
                      text: '',
                      icon: 'question',
                      showCancelButton: true,
                      confirmButtonText: 'Si',
                      cancelButtonText: 'No',
                      confirmButtonColor: 'rgb(13,165,80)',
                      cancelButtonColor: 'rgb(160,0,87)',
                      allowOutsideClick: false,
                      allowEscapeKey: false
                  }).then((results) => {
                      if (results.value) {
                      this.generalesService.Autofocus('SelectAsesorExterno');
                      this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                      this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")

                      } else {
                      if (this.dataObjet !== undefined) {
                          this.dataTitulareslist = this.dataObjet.Titulares;
                          this.contractualFrom.get('Titulares')?.setValue(this.dataTitulareslist);
                      }
                      if (this.itemsDataObejct.length > 0) {
                          this.dataObservacionCuentalist = this.itemsDataObejct;
                          this.contractualFrom.get('ObservacionesCuenta')?.setValue(this.dataObservacionCuentalist);
                      }
                        if (this.ArrayCondiciones.blnPlazoMinMax === true) {
                            if (JSON.parse(this.contractualFrom.get('Plazo')?.value) >= this.ArrayCondiciones.PlazoMinimo
                            && JSON.parse(this.contractualFrom.get('Plazo')?.value) <= this.ArrayCondiciones.PlazoMaximo) {
                              if (this.ArrayCondiciones.blnMontoMinMax === true) {
                                  if (this.contractualFrom.get('CuotaMes')?.value >= this.ArrayCondiciones.SdoMinimo
                                  && this.contractualFrom.get('CuotaMes')?.value <= this.ArrayCondiciones.SdoMaximo) {

                                    if (this.ArrayCondiciones.blnSorteo === true) {
                                        if (this.contractualFrom.get('Sorteo')?.value !== null
                                        && this.contractualFrom.get('Sorteo')?.value !== undefined
                                        && this.contractualFrom.get('Sorteo')?.value !== '') {

                                          if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                              if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                              && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                              && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                                if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                                    this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                                    this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                              );
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                        this.itemsDataObejct = [];
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                } else {
                                                    this.loading = true;
                                                    this.btnGuardar = true;
                                                    this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                    result => {
                                                        this.loading = false;
                                                        this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                        this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                        this.Bloquear = false;
                                                        this.BloquearNrotitulo = false;
                                                        this.BloquearNegociacion = false;
                                                        this.BloquearCuotaMes = false;
                                                        this.BloquearValorTotalPlan = false;
                                                        this.bloquearConsultaCuenta = false;
                                                        this.BloquearEstado = false;
                                                        this.BloquearDatoTitular = false;
                                                        this.BloquearAsociado = false;
                                                        this.BloquearSorteo = false;
                                                        this.BloquearFormaPago = false;
                                                        this.BloquearTasa = false;
                                                        this.BloquaerProducto = false;
                                                        this.BloquearBuscar = false;
                                                        this.BloquearPeriodo = false;
                                                        this.BloquearCuentaNegociacion = false;
                                                        this.Bloquearliquidacion = false;
                                                        this.BloquearAsesorExterno = false;
                                                        this.BloquearPuntos = false;
                                                        this.BloquearBontonPuntos = false;
                                                        this.BloquearCuentaOrigen = false;
                                                        this.BloquearNombreDebito = false;
                                                        this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                        this.btnGuardar = true;
                                                        this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                        this.Guardarlog(itemsLogApertura);
                                                        this.DebitoAutomaticoFrom.reset();
                                                        this.itemsDataObejct = [];
                                                    },
                                                    error => {
                                                        this.loading = false;
                                                        const errorMessage = <any>error;
                                                        console.log(errorMessage);
                                                    });
                                                }
                                              } else {
                                                this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                                this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                                this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                              }
                                          } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                              this.contractualFrom.get('IdCuentaDestino')?.reset();
                                              if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                  result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                                  this.itemsDataObejct = [];
                                                  },
                                                  error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                                  });
                                              } else {
                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                  result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                                  this.itemsDataObejct = [];
                                                  },
                                                  error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                                  });
                                              }
                                          }
                                        } else {
                                          this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                          this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                          this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                        }
                                    } else if (this.ArrayCondiciones.blnSorteo === false) {
                                        this.contractualFrom.get('Sorteo')?.reset();
                                        if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                          if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                              && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                              && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                              if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                  result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                                  },
                                                  error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                                  });
                                              } else {
                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                  result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                                  },
                                                  error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                                  });
                                              }
                                          } else {
                                              this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                              this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                              this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                          }
                                        } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                          if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                              result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                              },
                                              error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                              });
                                          } else {
                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                              result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                              },
                                              error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                              });
                                          }
                                        }
                                    }
                                  } else {
                                  this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                                  this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                  this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                  }
                              }
                              if (this.ArrayCondiciones.blnMontoMinMax === false) {
                                  if (this.ArrayCondiciones.blnSorteo === true) {
                                  if (this.contractualFrom.get('Sorteo')?.value !== null
                                      && this.contractualFrom.get('Sorteo')?.value !== undefined
                                      && this.contractualFrom.get('Sorteo')?.value !== '') {

                                      if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                      if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                          && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                          && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                          if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                          this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                          this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                              result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                        );
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog();
                                              this.DebitoAutomaticoFrom.reset();
                                              this.itemsDataObejct = [];



                                              },
                                              error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                              }
                                          );
                                          } else {
                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                              result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                        );
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog();
                                              this.DebitoAutomaticoFrom.reset();
                                              this.itemsDataObejct = [];


                                              },
                                              error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                              }
                                          );
                                          }
                                      } else {
                                          this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.',
                                );
                                          this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                          this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                      }
                                      } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                      this.contractualFrom.get('IdCuentaDestino')?.reset();
                                      if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                          this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                          this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog();
                                              this.DebitoAutomaticoFrom.reset();
                                              this.itemsDataObejct = [];

                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          }
                                          );
                                      } else {
                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog();
                                              this.DebitoAutomaticoFrom.reset();
                                              this.itemsDataObejct = [];
                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          }
                                          );
                                      }
                                      }
                                  } else {
                                      this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                      this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                      this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                  }
                                  } else if (this.ArrayCondiciones.blnSorteo === false) {
                                  this.contractualFrom.get('Sorteo')?.reset();
                                  if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                      if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                      && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                      && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                      if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                          this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                          this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog();
                                              this.DebitoAutomaticoFrom.reset();
                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          }
                                          );
                                      } else {
                                          this.loading = true;
                                          this.btnGuardar = true;
                                          this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                          result => {
                                              this.loading = false;
                                              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                              this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                              this.Bloquear = false;
                                              this.BloquearNrotitulo = false;
                                              this.BloquearNegociacion = false;
                                              this.BloquearCuotaMes = false;
                                              this.BloquearValorTotalPlan = false;
                                              this.bloquearConsultaCuenta = false;
                                              this.BloquearEstado = false;
                                              this.BloquearDatoTitular = false;
                                              this.BloquearAsociado = false;
                                              this.BloquearSorteo = false;
                                              this.BloquearFormaPago = false;
                                              this.BloquearTasa = false;
                                              this.BloquaerProducto = false;
                                              this.BloquearBuscar = false;
                                              this.BloquearPeriodo = false;
                                              this.BloquearCuentaNegociacion = false;
                                              this.Bloquearliquidacion = false;
                                              this.BloquearAsesorExterno = false;
                                              this.BloquearPuntos = false;
                                              this.BloquearBontonPuntos = false;
                                              this.BloquearCuentaOrigen = false;
                                              this.BloquearNombreDebito = false;
                                              this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                              this.btnGuardar = true;
                                              this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                              this.Guardarlog();
                                              this.DebitoAutomaticoFrom.reset();

                                          },
                                          error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                          }
                                          );
                                      }
                                      } else {
                                      this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                      this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                      this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                      }
                                  } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                      this.contractualFrom.get('IdCuentaDestino')?.reset();
                                      if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                      this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                      this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                      this.loading = true;
                                      this.btnGuardar = true;
                                      this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                          result => {
                                          this.loading = false;
                                          this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                          this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                          this.Bloquear = false;
                                          this.BloquearNrotitulo = false;
                                          this.BloquearNegociacion = false;
                                          this.BloquearCuotaMes = false;
                                          this.BloquearValorTotalPlan = false;
                                          this.bloquearConsultaCuenta = false;
                                          this.BloquearEstado = false;
                                          this.BloquearDatoTitular = false;
                                          this.BloquearAsociado = false;
                                          this.BloquearSorteo = false;
                                          this.BloquearFormaPago = false;
                                          this.BloquearTasa = false;
                                          this.BloquaerProducto = false;
                                          this.BloquearBuscar = false;
                                          this.BloquearPeriodo = false;
                                          this.BloquearCuentaNegociacion = false;
                                          this.Bloquearliquidacion = false;
                                          this.BloquearAsesorExterno = false;
                                          this.BloquearPuntos = false;
                                          this.BloquearBontonPuntos = false;
                                          this.BloquearCuentaOrigen = false;
                                          this.BloquearNombreDebito = false;
                                          this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                          this.btnGuardar = true;
                                          this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                          this.Guardarlog();
                                          this.DebitoAutomaticoFrom.reset();

                                          },
                                          error => {
                                          this.loading = false;
                                          const errorMessage = <any>error;
                                          console.log(errorMessage);
                                          }
                                      );
                                      } else {
                                      this.loading = true;
                                      this.btnGuardar = true;
                                      this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                          result => {
                                          this.loading = false;
                                          this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                          this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                          this.Bloquear = false;
                                          this.BloquearNrotitulo = false;
                                          this.BloquearNegociacion = false;
                                          this.BloquearCuotaMes = false;
                                          this.BloquearValorTotalPlan = false;
                                          this.bloquearConsultaCuenta = false;
                                          this.BloquearEstado = false;
                                          this.BloquearDatoTitular = false;
                                          this.BloquearAsociado = false;
                                          this.BloquearSorteo = false;
                                          this.BloquearFormaPago = false;
                                          this.BloquearTasa = false;
                                          this.BloquaerProducto = false;
                                          this.BloquearBuscar = false;
                                          this.BloquearPeriodo = false;
                                          this.BloquearCuentaNegociacion = false;
                                          this.Bloquearliquidacion = false;
                                          this.BloquearAsesorExterno = false;
                                          this.BloquearPuntos = false;
                                          this.BloquearBontonPuntos = false;
                                          this.BloquearCuentaOrigen = false;
                                          this.BloquearNombreDebito = false;
                                          this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                          this.btnGuardar = true;
                                          this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                          this.Guardarlog();
                                          this.DebitoAutomaticoFrom.reset();


                                          },
                                          error => {
                                          this.loading = false;
                                          const errorMessage = <any>error;
                                          console.log(errorMessage);
                                          }
                                      );
                                      }
                                  }
                                  }
                              }
                            } else {
                            this.notif.onWarning('Advertencia', 'El plazo ingresado no es permitido para este producto.');
                            this.contractualFrom.get('plazo')?.reset();
                            this.contractualFrom.get('CuotaMes')?.reset();
                            this.contractualFrom.get('ValorPlan')?.reset();
                            this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                            this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                            }
                        } else {
                            if (this.ArrayCondiciones.blnMontoMinMax === true) {
                              if (this.contractualFrom.get('CuotaMes')?.value >= this.ArrayCondiciones.SdoMinimo
                                  && this.contractualFrom.get('CuotaMes')?.value <= this.ArrayCondiciones.SdoMaximo) {

                                  if (this.ArrayCondiciones.blnSorteo === true) {
                                    if (this.contractualFrom.get('Sorteo')?.value !== null
                                        && this.contractualFrom.get('Sorteo')?.value !== undefined
                                        && this.contractualFrom.get('Sorteo')?.value !== '') {

                                        if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                          if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                              && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                              && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                              if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                                  result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                                  this.itemsDataObejct = [];
                                                  },
                                                  error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                  });
                                              } else {
                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                                  result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                                  this.itemsDataObejct = [];
                                                  },
                                                  error => {
                                                    this.loading = false;
                                                    const errorMessage = <any>error;
                                                    console.log(errorMessage);
                                                  });
                                              }
                                          } else {
                                              this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                              this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%")
                                              this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%")
                                          }
                                        } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                          if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                              result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                                  this.itemsDataObejct = [];
                                              },
                                              error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                              });
                                          } else {
                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                              result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                                  this.itemsDataObejct = [];
                                              },
                                              error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                              });
                                          }
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                    }
                                  } else if (this.ArrayCondiciones.blnSorteo === false) {
                                  this.contractualFrom.get('Sorteo')?.reset();
                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                          if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                              result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                              },
                                              error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                              });
                                          } else {
                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                              result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                              },
                                              error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                              });
                                          }
                                        } else {
                                          this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                          this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                          this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                        }
                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            }
                                        );
                                        } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();

                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        }
                                    }
                                  }
                              } else {
                                  this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
                                  this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                  this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                              }
                            }
                            if (this.ArrayCondiciones.blnMontoMinMax === false) {
                              if (this.ArrayCondiciones.blnSorteo === true) {
                                  if (this.contractualFrom.get('Sorteo')?.value !== null
                                  && this.contractualFrom.get('Sorteo')?.value !== undefined
                                  && this.contractualFrom.get('Sorteo')?.value !== '') {

                                    if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                        if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                          if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                              result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.',
                                        );
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                                  this.itemsDataObejct = [];
                                              },
                                              error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                              });
                                          } else {
                                              this.loading = true;
                                              this.btnGuardar = true;
                                              this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                              result => {
                                                  this.loading = false;
                                                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                                  this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                                  this.Bloquear = false;
                                                  this.BloquearNrotitulo = false;
                                                  this.BloquearNegociacion = false;
                                                  this.BloquearCuotaMes = false;
                                                  this.BloquearValorTotalPlan = false;
                                                  this.bloquearConsultaCuenta = false;
                                                  this.BloquearEstado = false;
                                                  this.BloquearDatoTitular = false;
                                                  this.BloquearAsociado = false;
                                                  this.BloquearSorteo = false;
                                                  this.BloquearFormaPago = false;
                                                  this.BloquearTasa = false;
                                                  this.BloquaerProducto = false;
                                                  this.BloquearBuscar = false;
                                                  this.BloquearPeriodo = false;
                                                  this.BloquearCuentaNegociacion = false;
                                                  this.Bloquearliquidacion = false;
                                                  this.BloquearAsesorExterno = false;
                                                  this.BloquearPuntos = false;
                                                  this.BloquearBontonPuntos = false;
                                                  this.BloquearCuentaOrigen = false;
                                                  this.BloquearNombreDebito = false;
                                                  this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                                  this.btnGuardar = true;
                                                  this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                                  this.Guardarlog(itemsLogApertura);
                                                  this.DebitoAutomaticoFrom.reset();
                                                  this.itemsDataObejct = [];
                                              },
                                              error => {
                                                  this.loading = false;
                                                  const errorMessage = <any>error;
                                                  console.log(errorMessage);
                                              });
                                          }
                                        } else {
                                          this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                        }
                                    } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                        this.contractualFrom.get('IdCuentaDestino')?.reset();
                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            this.itemsDataObejct = [];
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            this.itemsDataObejct = [];
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        }
                                    }
                                  } else {
                                    this.notif.onWarning('Advertencia', 'Debe ingresar el número de sorteo.');
                                    this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                    this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                  }
                              } else if (this.ArrayCondiciones.blnSorteo === false) {
                                  this.contractualFrom.get('Sorteo')?.reset();
                                  if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
                                    if (this.contractualFrom.get('IdCuentaDestino')?.value !== null
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
                                        && this.contractualFrom.get('IdCuentaDestino')?.value !== '') {

                                        if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                            result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                            },
                                            error => {
                                              this.loading = false;
                                              const errorMessage = <any>error;
                                              console.log(errorMessage);
                                            });
                                        }
                                    } else {
                                        this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta de ahorros.');
                                        this.contractualFrom.get('TasaEfectiva')?.setValue(this.contractualFrom.get('TasaEfectiva')?.value + "%");
                                        this.contractualFrom.get('TasaNominal')?.setValue(this.contractualFrom.get('TasaNominal')?.value + "%");
                                    }
                                  } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
                                  this.contractualFrom.get('IdCuentaDestino')?.reset();
                                    if (this.contractualFrom.get('IdFormaPago')?.value === '1') {
                                        this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
                                        this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractualConDebito(this.GuardarContractualConDebito).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    } else {
                                        this.loading = true;
                                        this.btnGuardar = true;
                                        this.ContractualServices.getGuardarContractual(this.contractualFrom.value).subscribe(
                                        result => {
                                            this.loading = false;
                                            this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                                            this.contractualFrom.get('FechaApertura')?.setValue(result.FechaApertura);
                                            this.Bloquear = false;
                                            this.BloquearNrotitulo = false;
                                            this.BloquearNegociacion = false;
                                            this.BloquearCuotaMes = false;
                                            this.BloquearValorTotalPlan = false;
                                            this.bloquearConsultaCuenta = false;
                                            this.BloquearEstado = false;
                                            this.BloquearDatoTitular = false;
                                            this.BloquearAsociado = false;
                                            this.BloquearSorteo = false;
                                            this.BloquearFormaPago = false;
                                            this.BloquearTasa = false;
                                            this.BloquaerProducto = false;
                                            this.BloquearBuscar = false;
                                            this.BloquearPeriodo = false;
                                            this.BloquearCuentaNegociacion = false;
                                            this.Bloquearliquidacion = false;
                                            this.BloquearAsesorExterno = false;
                                            this.BloquearPuntos = false;
                                            this.BloquearBontonPuntos = false;
                                            this.BloquearCuentaOrigen = false;
                                            this.BloquearNombreDebito = false;
                                            this.notif.onSuccess('Exitoso', 'La cuenta se guardó correctamente.');
                                            this.btnGuardar = true;
                                            this.BuscarDatosCuenta(result.IdOficina, result.IdProducto, result.IdConsecutivo, result.IdDigito);
                                            this.Guardarlog(itemsLogApertura);
                                            this.DebitoAutomaticoFrom.reset();
                                        },
                                        error => {
                                            this.loading = false;
                                            const errorMessage = <any>error;
                                            console.log(errorMessage);
                                        });
                                    }
                                  }
                              }
                            }
                        }
                      }
                  });
                }
            }
        } 
    } else {
        this.notif.onWarning('Advertencia', 'Tasa no valida.');
    }
  }
  ActualizarContractual() {
    if (this.contractualFrom.get('IdOficina')?.value !== null
      && this.contractualFrom.get('IdOficina')?.value !== undefined
      && this.contractualFrom.get('IdOficina')?.value !== ''
      && this.contractualFrom.get('IdProductoCuenta')?.value !== null
      && this.contractualFrom.get('IdProductoCuenta')?.value !== undefined
      && this.contractualFrom.get('IdProductoCuenta')?.value !== ''
      && this.contractualFrom.get('IdConsecutivo')?.value !== null
      && this.contractualFrom.get('IdConsecutivo')?.value !== undefined
      && this.contractualFrom.get('IdConsecutivo')?.value !== ''
      && this.contractualFrom.get('IdDigito')?.value !== null
      && this.contractualFrom.get('IdDigito')?.value !== undefined
      && this.contractualFrom.get('IdDigito')?.value !== '') {

      if (this.contractualFrom.get('IdOficina')?.value !== this.datoOficina) {
        this.contractualFrom.get('IdOficina')?.setValue(this.datoOficina);
      }
      if (this.contractualFrom.get('IdProductoCuenta')?.value !== this.datoProducto ||
        this.contractualFrom.get('IdProducto')?.value !== this.datoProducto ) {
        this.contractualFrom.get('IdProductoCuenta')?.setValue(this.datoProducto);
        this.contractualFrom.get('IdProducto')?.setValue(this.datoProducto);
        this.contractualFrom.get('DescripcionProducto')?.setValue(this.datoNombreProducto);
      }
      if (this.contractualFrom.get('IdConsecutivo')?.value !== this.datoConsecutivo) {
        this.contractualFrom.get('IdConsecutivo')?.setValue(this.datoConsecutivo);
      }
      if (this.contractualFrom.get('IdDigito')?.value !== this.datoDigito) {
        this.contractualFrom.get('IdDigito')?.setValue(this.datoDigito);
      }

      if (this.itemsDataObejct.length > 0) {
        this.dataObservacionCuentalist = this.itemsDataObejct;
        this.contractualFrom.get('ObservacionesCuenta')?.setValue(this.dataObservacionCuentalist);
      }
      if (this.contractualOperacionFrom.get('Codigo')?.value === '21') {         // Actualizar forma de pago

        if (this.contractualFrom.get('Plazo')?.value !== this.datoPlazo) {
          this.contractualFrom.get('Plazo')?.setValue(this.datoPlazo);
        }
        if (this.contractualFrom.get('CuotaMes')?.value !== this.datoCuotaMes) {
          this.contractualFrom.get('CuotaMes')?.setValue(this.datoCuotaMes);
        }
        if (this.contractualFrom.get('ValorPlan')?.value !== this.datoValorPlan) {
          this.contractualFrom.get('ValorPlan')?.setValue(this.datoValorPlan);
        }
        if (this.contractualFrom.get('IdLiquidacion')?.value !== this.datoLiquidacion) {
          this.contractualFrom.get('IdLiquidacion')?.setValue(this.datoLiquidacion);
        }
        this.log.FormaPagoActualiza = this.resultFormaPago.filter((x : any) => x.IdFormaPago == this.contractualFrom.get('IdFormaPago')?.value)[0].DescripcionFormaPago; 
        if (this.contractualFrom.get('IdFormaPago')?.value == 1) {
          this.log.ActualizaDebito = {};
          this.log.ActualizaDebito.Documento = this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value;
          this.log.ActualizaDebito.Nombre = this.DebitoAutomaticoFrom.get('NombreDebito')?.value;
          this.log.ActualizaDebito.CuentaAhorros = this.resultCuentaDebito.filter((x : any) => x.IdCuenta == this.DebitoAutomaticoFrom.get('IdCuentaOrigen')?.value)[0].Cuenta;
        }
        if (+this.contractualFrom.get('IdFormaPago')?.value !== this.datoformaPago) {
          this.datoformaPago = +this.contractualFrom.get('IdFormaPago')?.value;

          this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
          this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

          this.loading = true;
          this.ContractualServices.getActualizarContractual(this.GuardarContractualConDebito).subscribe(
            result => {
              this.loading = false;
              this.Bloquear = false;
              this.BloquearNegociacion = false;
              this.BloquearNroTitulo = false;
              this.BloquearCuotaMes = false;
              this.BloquearValorTotalPlan = false;
              this.bloquearConsultaCuenta = false;
              this.BloquearEstado = false;
              this.BloquearDatoTitular = false;
              this.BloquearAsociado = false;
              this.BloquearSorteo = false;
              this.BloquearFormaPago = false;
              this.BloquearTasa = false;
              this.BloquaerProducto = false;
              this.BloquearBuscar = false;
              this.BloquearPeriodo = false;
              this.BloquearCuentaNegociacion = false;
              this.Bloquearliquidacion = false;
              this.BloquearAsesorExterno = false;
              this.BloquearPuntos = false;
              this.BloquearBontonPuntos = false;
              this.BloquearCuentaOrigen = false;
              this.BloquearNombreDebito = false;
              this.notif.onSuccess('Exitoso', 'El cambio de forma de pago se actualizó correctamente.',
    );
              this.btnGuardar = true;
              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
              this.btnActualizar = true;
              this.bloquearbtnActalizar = false;
              this.bloquearbtnCalcular = false;
              this.selectEstado = true;
              this.inputSinDecimal = true;
              this.inputEstado = false;
              this.inputCuotaMes = false;
              this.Guardarlog(this.log);
              this.contractualOperacionFrom.get('Codigo')?.reset();
              this.ObtenerHistorial();
              this.itemsDataObejct = [];
              this.BuscarPorCuenta();
            },
            error => {
              this.loading = false;
              const errorMessage = <any>error;
              console.log(errorMessage);
            }
          );
        } else {
          this.notif.onWarning('Advertencia', 'Debe cambiar forma de pago.');
          this.bloquearbtnActalizar = false;
          this.bloquearbtnCalcular = false;
        }
      } else if (this.contractualOperacionFrom.get('Codigo')?.value === '27') {  // Actualizar Tipo cuenta Destino

        this.log.TipoCuentaDestinoActualiza = this.resultLiquidacion.filter((x : any) => x.IdLiquidacion == this.contractualFrom.get('IdLiquidacion')?.value)[0].DescripcionLiquidacion;
 
        if (this.contractualFrom.get('IdLiquidacion')?.value === '1') {
          this.log.CuentaAhorroActualiza = this.resultCuentaNegociacion.filter((x : any ) => x.IdCuenta == this.contractualFrom.get('IdCuentaDestino')?.value)[0].CuentaD;
          if (this.contractualFrom.get('IdCuentaDestino')?.value !== undefined
            && this.contractualFrom.get('IdCuentaDestino')?.value !== ''
            && this.contractualFrom.get('IdCuentaDestino')?.value !== null) {

            if (+this.contractualFrom.get('IdLiquidacion')?.value !== this.datoLiquidacion) {
              this.datoformaPago = +this.contractualFrom.get('IdLiquidacion')?.value;

              if (this.contractualFrom.get('Plazo')?.value !== this.datoPlazo) {
                this.contractualFrom.get('Plazo')?.setValue(this.datoPlazo);
              }
              if (this.contractualFrom.get('CuotaMes')?.value !== this.datoCuotaMes) {
                this.contractualFrom.get('CuotaMes')?.setValue(this.datoCuotaMes);
              }
              if (this.contractualFrom.get('ValorPlan')?.value !== this.datoValorPlan) {
                this.contractualFrom.get('ValorPlan')?.setValue(this.datoValorPlan);
              }
              if (+this.contractualFrom.get('IdFormaPago')?.value !== this.datoIdFormaPago) {
                this.contractualFrom.get('IdFormaPago')?.setValue(this.datoIdFormaPago);
              }

              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

              this.loading = true;
              this.ContractualServices.getActualizarContractual(this.GuardarContractualConDebito).subscribe(
                result => {
                  this.loading = false;
                  this.Bloquear = false;
                  this.BloquearNroTitulo = false;
                  this.BloquearNegociacion = false;
                  this.BloquearCuotaMes = false;
                  this.BloquearValorTotalPlan = false;
                  this.bloquearConsultaCuenta = false;
                  this.BloquearEstado = false;
                  this.BloquearDatoTitular = false;
                  this.BloquearAsociado = false;
                  this.BloquearSorteo = false;
                  this.BloquearFormaPago = false;
                  this.BloquearTasa = false;
                  this.BloquaerProducto = false;
                  this.BloquearBuscar = false;
                  this.BloquearPeriodo = false;
                  this.BloquearCuentaNegociacion = false;
                  this.Bloquearliquidacion = false;
                  this.BloquearAsesorExterno = false;
                  this.BloquearPuntos = false;
                  this.BloquearBontonPuntos = false;
                  this.BloquearCuentaOrigen = false;
                  this.BloquearNombreDebito = false;
                  this.notif.onSuccess('Exitoso', 'El cambio de Tipo cuenta destino se actualizó correctamente.',
        );
                  this.btnGuardar = true;
                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                  this.btnActualizar = false;
                  this.btnActualizarTab = true;
                  this.bloquearbtnActalizar = false;
                  this.bloquearbtnCalcular = false;
                  this.selectEstado = true;
                  this.inputSinDecimal = true;
                  this.inputEstado = false;
                  this.inputCuotaMes = false;
                  this.selectCuenta = true;
                  this.inputCuenta = false;
                  this.Guardarlog(this.log);
                  this.contractualOperacionFrom.get('Codigo')?.reset();
                  this.itemsDataObejct = [];
                  this.BuscarPorCuenta();
                  this.ObtenerHistorial();
                  this.ContractualServices.getBuscarCuenta(this.contractualFrom.value).subscribe(
                    // tslint:disable-next-line:no-shadowed-variable
                    result => {
                      let data = localStorage.getItem('Data');
                      this.dataUser = JSON.parse(window.atob(data == null ? "" : data));
                      this.CuentaDestionoSend.NombreOficina = this.dataUser.Oficina;
                      this.CuentaDestionoSend.Nombre = this.contractualFrom.get('Nombre')?.value;
                      this.CuentaDestionoSend.NumeroDocumento = this.contractualFrom.get('NumeroDocumento')?.value;
                      this.CuentaDestionoSend.IdLiquidacion = this.contractualFrom.get('IdLiquidacion')?.value;
                      this.CuentaDestionoSend.Cuenta = this.contractualFrom.get('Cuenta')?.value;
                      this.CuentaDestionoSend.TipoDocumento = this.contractualFrom.get('TipoDocumento')?.value;
                      this.CuentaDestionoSend.NombreProducto = this.contractualFrom.get('DescripcionProducto')?.value;
                      this.CuentaDestionoSend.CuentaDestino = result.CuentaDestino;
                      this.ModalImpresionCambioCuentaDestino.nativeElement.click();
                    },
                  );
                },
                error => {
                  this.loading = false;
                  const errorMessage = <any>error;
                  console.log(errorMessage);
                }
              );
            } else {
              this.notif.onWarning('Advertencia', 'Debe cambiar Tipo cuenta destino');
              this.bloquearbtnActalizar = false;
              this.bloquearbtnCalcular = false;
            }
          } else {
            this.notif.onWarning('Advertencia', 'Debe seleccionar una cuenta ahorros.');
          }
        } else if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
          if (+this.contractualFrom.get('IdLiquidacion')?.value !== this.datoLiquidacion) {
            this.datoformaPago = +this.contractualFrom.get('IdLiquidacion')?.value;

            if (this.contractualFrom.get('Plazo')?.value !== this.datoPlazo) {
              this.contractualFrom.get('Plazo')?.setValue(this.datoPlazo);
            }
            if (this.contractualFrom.get('CuotaMes')?.value !== this.datoCuotaMes) {
              this.contractualFrom.get('CuotaMes')?.setValue(this.datoCuotaMes);
            }
            if (this.contractualFrom.get('ValorPlan')?.value !== this.datoValorPlan) {
              this.contractualFrom.get('ValorPlan')?.setValue(this.datoValorPlan);
            }
            if (+this.contractualFrom.get('IdFormaPago')?.value !== this.datoIdFormaPago) {
              this.contractualFrom.get('IdFormaPago')?.setValue(this.datoIdFormaPago);
            }

            this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
            this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;

            this.loading = true;
            this.ContractualServices.getActualizarContractual(this.GuardarContractualConDebito).subscribe(
              result => {
                this.loading = false;
                this.Bloquear = false;
                this.BloquearNegociacion = false;
                this.BloquearCuotaMes = false;
                this.BloquearValorTotalPlan = false;
                this.bloquearConsultaCuenta = false;
                this.BloquearEstado = false;
                this.BloquearDatoTitular = false;
                this.BloquearAsociado = false;
                this.BloquearSorteo = false;
                this.BloquearFormaPago = false;
                this.BloquearTasa = false;
                this.BloquaerProducto = false;
                this.BloquearBuscar = false;
                this.BloquearPeriodo = false;
                this.BloquearCuentaNegociacion = false;
                this.Bloquearliquidacion = false;
                this.BloquearAsesorExterno = false;
                this.BloquearPuntos = false;
                this.BloquearBontonPuntos = false;
                this.BloquearCuentaOrigen = false;
                this.BloquearNombreDebito = false;
                this.notif.onSuccess('Exitoso', 'El cambio de Tipo cuenta destino se actualizó correctamente.');
                this.btnGuardar = true;
                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                this.btnActualizar = false;
                this.btnActualizarTab = true;
                this.bloquearbtnActalizar = false;
                this.bloquearbtnCalcular = false;
                this.selectEstado = true;
                this.inputSinDecimal = true;
                this.inputEstado = false;
                this.inputCuotaMes = false;
                this.selectCuenta = true;
                this.inputCuenta = false;
                this.Guardarlog(this.log);
                this.contractualOperacionFrom.get('Codigo')?.reset();
                this.itemsDataObejct = [];
                this.BuscarPorCuenta();
                this.ObtenerHistorial();
                this.ContractualServices.getBuscarCuenta(this.contractualFrom.value).subscribe(
                  // tslint:disable-next-line:no-shadowed-variable
                  result => {
                    let data = localStorage.getItem('Data');
                    this.dataUser = JSON.parse(window.atob(data == null ? "" : data));
                    this.CuentaDestionoSend.NombreOficina = this.dataUser.Oficina;
                    this.CuentaDestionoSend.Nombre = this.contractualFrom.get('Nombre')?.value;
                    this.CuentaDestionoSend.NumeroDocumento = this.contractualFrom.get('NumeroDocumento')?.value;
                    this.CuentaDestionoSend.IdLiquidacion = this.contractualFrom.get('IdLiquidacion')?.value;
                    this.CuentaDestionoSend.Cuenta = this.contractualFrom.get('Cuenta')?.value;
                    this.CuentaDestionoSend.TipoDocumento = this.contractualFrom.get('TipoDocumento')?.value;
                    this.CuentaDestionoSend.NombreProducto = this.contractualFrom.get('DescripcionProducto')?.value;
                    this.CuentaDestionoSend.CuentaDestino = result.CuentaDestino;
                    this.ModalImpresionCambioCuentaDestino.nativeElement.click();
                  },
                );
              },
              error => {
                this.loading = false;
                const errorMessage = <any>error;
                console.log(errorMessage);
              }
            );
          } else {
            this.notif.onWarning('Advertencia', 'Debe cambiar Tipo cuenta destino.');
            this.bloquearbtnActalizar = false;
            this.bloquearbtnCalcular = false;
          }
        }
      } else if (this.contractualOperacionFrom.get('Codigo')?.value === '12') {  // Actualizar titulares contractual
        if (this.contractualFrom.get('Clase')?.value === 10) {
            if (this.dataObjetTitulares.length !== 0) {
                this.btnActualizarTitulares = false;
                this.dataTitulareslist = this.dataObjetTitulares;
                this.contractualFrom.get('Titulares')?.setValue(this.dataTitulareslist);
                this.loading = true;
            this.ContractualServices.getActualizarTitulares(this.contractualFrom.value).subscribe(
              result => {
                this.loading = false;
                this.Bloquear = false;
                this.BloquearNroTitulo = false;
                this.BloquearNegociacion = false;
                this.BloquearCuotaMes = false;
                this.BloquearValorTotalPlan = false;
                this.bloquearConsultaCuenta = false;
                this.BloquearEstado = false;
                this.BloquearDatoTitular = false;
                this.BloquearAsociado = false;
                this.BloquearSorteo = false;
                this.BloquearFormaPago = false;
                this.BloquearTasa = false;
                this.BloquaerProducto = false;
                this.BloquearBuscar = false;
                this.BloquearPeriodo = false;
                this.BloquearCuentaNegociacion = false;
                this.Bloquearliquidacion = false;
                this.BloquearAsesorExterno = false;
                this.BloquearPuntos = false;
                this.BloquearBontonPuntos = false;
                this.BloquearCuentaOrigen = false;
                this.BloquearNombreDebito = false;
                this.DescriTipoFirma = true;
                this.notif.onSuccess('Exitoso', 'Se adicionó y/o eliminó titular correctamente.');
                this.btnGuardar = true;
                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                this.btnActualizar = true;
                this.bloquearbtnActalizar = false;
                this.bloquearbtnCalcular = false;
                this.selectEstado = true;
                this.inputSinDecimal = true;
                this.BloquearDatoTitularOpcion = false;
                this.inputEstado = false;
                this.inputCuotaMes = false;
                let tempAutorizaLog: any[] = [];
                if (this.dataTitulareslist.length > 0) {
                  this.dataTitulareslist.forEach((x : any) => {
                    if (x.Accion != "DB")
                        tempAutorizaLog.push({
                          Accion: x.Accion,
                          Documento: x.Documento,
                          Nombre: x.Nombre,
                          TipoTitular: x.TipoTitular,
                          TipoFirma: x.TipoFirma
                        });
                  });
                }
                if (this.listAutorizadoEliminar.length > 0) {
                  this.listAutorizadoEliminar.forEach((x : any) => {
                    tempAutorizaLog.push({
                      Accion: "Eliminar",
                      Documento: x.Documento,
                      Nombre: x.Nombre,
                      TipoTitular: x.TipoTitular,
                      TipoFirma: x.TipoFirma,
                      FechaMatricula: new DatePipe('en-CO').transform(x.FechaMatricula, 'yyyy/MM/dd  HH:mm:ss')
                    });
                  });
                }
                    this.Guardarlog(tempAutorizaLog);
                setTimeout(() => { this.ObtenerHistorial(); }, 2000);
                this.contractualOperacionFrom.get('Codigo')?.reset();
              },
              error => {
                this.loading = false;
                const errorMessage = <any>error;
                console.log(errorMessage);
              }
            );
          } else {
            this.notif.onWarning('Advertencia', 'Debe ingresar al menos un autorizado cuando el titular es menor.');
          }          
        } else {
            this.btnActualizarTitulares = false;
            this.dataTitulareslist = this.dataObjetTitulares;
            this.contractualFrom.get('Titulares')?.setValue(this.dataTitulareslist);
            this.loading = true;
            this.ContractualServices.getActualizarTitulares(this.contractualFrom.value).subscribe(
            result => {
              this.loading = false;
              this.Bloquear = false;
              this.BloquearNroTitulo = false;
              this.BloquearNegociacion = false;
              this.BloquearCuotaMes = false;
              this.BloquearValorTotalPlan = false;
              this.bloquearConsultaCuenta = false;
              this.BloquearEstado = false;
              this.BloquearDatoTitular = false;
              this.BloquearAsociado = false;
              this.BloquearSorteo = false;
              this.BloquearFormaPago = false;
              this.BloquearTasa = false;
              this.BloquaerProducto = false;
              this.BloquearBuscar = false;
              this.BloquearPeriodo = false;
              this.BloquearCuentaNegociacion = false;
              this.Bloquearliquidacion = false;
              this.BloquearAsesorExterno = false;
              this.BloquearPuntos = false;
              this.BloquearBontonPuntos = false;
              this.BloquearCuentaOrigen = false;
              this.BloquearNombreDebito = false;
              this.BloquearDatoTitularOpcion = false;
              this.DescriTipoFirma = true;
              this.notif.onSuccess('Exitoso', 'Se adicionó y/o eliminó titular correctamente.');
              this.btnGuardar = true;
              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
              this.btnActualizar = true;
              this.bloquearbtnActalizar = false;
              this.bloquearbtnCalcular = false;
              this.selectEstado = true;
              this.inputSinDecimal = true;
              this.inputEstado = false;
              this.inputCuotaMes = false;
              let tempAutorizaLog: any[] = [];
              if (this.dataTitulareslist.length > 0) {
                this.dataTitulareslist.forEach((x : any) => {
                  if (x.Accion != "DB")
                      tempAutorizaLog.push({
                        Accion: x.Accion,
                        Documento: x.Documento,
                        Nombre: x.Nombre,
                        TipoTitular: x.TipoTitular,
                        TipoFirma: x.TipoFirma
                      });
                });
              }
              if (this.listAutorizadoEliminar.length > 0) {
                this.listAutorizadoEliminar.forEach((x : any) => {
                  tempAutorizaLog.push({
                    Accion: "Eliminar",
                    Documento: x.Documento,
                    Nombre: x.Nombre,
                    TipoTitular: x.TipoTitular,
                    TipoFirma: x.TipoFirma,
                    FechaMatricula: new DatePipe('en-CO').transform(x.FechaMatricula, 'yyyy/MM/dd  HH:mm:ss')
                  });
                });
              }
              this.Guardarlog(tempAutorizaLog);
              setTimeout(() => { this.ObtenerHistorial(); },2000);
              this.contractualOperacionFrom.get('Codigo')?.reset();
            },
            error => {
              this.loading = false;
              const errorMessage = <any>error;
              console.log(errorMessage);
            }
          );

        }
      } else if (this.contractualOperacionFrom.get('Codigo')?.value === '19') {  // Actualizar el asesor externo

        if ((this.AsesorFrom.get('strCodigo')?.value !== this.datoAsesorExterno)
          && (this.AsesorFrom.get('strCodigo')?.value !== this.datoAsesorExterno)) {
          const IdAsesor = this.AsesorFrom.get('strCodigo')?.value;
          const NombreAsesor = this.AsesorFrom.get('strNombre')?.value;
            this.log.IdAsesorExternoActualiza = IdAsesor == null ? 0 : IdAsesor;
            this.log.AsesorExternoActualiza = NombreAsesor == null ? "" : NombreAsesor;
          if (IdAsesor !== null && IdAsesor !== '' && IdAsesor !== undefined &&
            NombreAsesor !== null && NombreAsesor !== '' && NombreAsesor !== undefined) {
            this.dataAsesor = this.AsesorFrom.get('strCodigo')?.value;
            this.contractualFrom.get('IdAsesorExterno')?.setValue(this.dataAsesor);

            this.datoAsesorExterno = +this.AsesorFrom.get('strCodigo')?.value;

            this.loading = true;
            this.ContractualServices.getEditarAsesorExterno(this.contractualFrom.value).subscribe(
              result => {
                this.loading = false;
                this.Bloquear = false;
                this.BloquearNroTitulo = false;
                this.BloquearNegociacion = false;
                this.BloquearCuotaMes = false;
                this.BloquearValorTotalPlan = false;
                this.bloquearConsultaCuenta = false;
                this.BloquearEstado = false;
                this.BloquearDatoTitular = false;
                this.BloquearAsociado = false;
                this.BloquearSorteo = false;
                this.BloquearFormaPago = false;
                this.BloquearTasa = false;
                this.BloquaerProducto = false;
                this.BloquearBuscar = false;
                this.BloquearPeriodo = false;
                this.BloquearCuentaNegociacion = false;
                this.Bloquearliquidacion = false;
                this.BloquearAsesorExterno = false;
                this.BloquearPuntos = false;
                this.BloquearBontonPuntos = false;
                this.BloquearCuentaOrigen = false;
                this.BloquearNombreDebito = false;
                this.notif.onSuccess('Exitoso', 'El cambio de asesor externo se actualizó correctamente.' );
                this.btnGuardar = true;
                this.Guardarlog(this.log);
                this.ObtenerHistorial();
                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                this.btnActualizar = true;
                this.contractualOperacionFrom.get('Codigo')?.reset();
              },
              error => {
                this.loading = false;
                const errorMessage = <any>error;
                console.log(errorMessage);
              });

            this.ObtenerHistorial();
          } else if ((IdAsesor === null || IdAsesor === '' || IdAsesor === undefined) &&
            (NombreAsesor === null || NombreAsesor === '' || NombreAsesor === undefined)) {
            this.dataAsesor = this.AsesorFrom.get('strCodigo')?.value;
            this.contractualFrom.get('IdAsesorExterno')?.setValue(this.dataAsesor);

            this.datoAsesorExterno = +this.AsesorFrom.get('strCodigo')?.value;

            this.loading = true;
            this.ContractualServices.getEditarAsesorExterno(this.contractualFrom.value).subscribe(
              result => {
                this.loading = false;
                this.Bloquear = false;
                this.BloquearNegociacion = false;
                this.BloquearCuotaMes = false;
                this.BloquearValorTotalPlan = false;
                this.bloquearConsultaCuenta = false;
                this.BloquearEstado = false;
                this.BloquearDatoTitular = false;
                this.BloquearAsociado = false;
                this.BloquearSorteo = false;
                this.BloquearFormaPago = false;
                this.BloquearTasa = false;
                this.BloquaerProducto = false;
                this.BloquearBuscar = false;
                this.BloquearPeriodo = false;
                this.BloquearCuentaNegociacion = false;
                this.Bloquearliquidacion = false;
                this.BloquearAsesorExterno = false;
                this.BloquearPuntos = false;
                this.BloquearBontonPuntos = false;
                this.BloquearCuentaOrigen = false;
                this.BloquearNombreDebito = false;
                this.notif.onSuccess('Exitoso', 'El Cambio de asesor externo se actualizó correctamente.');
                this.btnGuardar = true;
                this.Guardarlog(this.log);
                this.ObtenerHistorial();
                this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                this.btnActualizar = true;
                this.contractualOperacionFrom.get('Codigo')?.reset();
              },
              error => {
                this.loading = false;
                const errorMessage = <any>error;
                console.log(errorMessage);
              });
            this.ObtenerHistorial();
          } else {
            this.notif.onWarning('Advertencia', 'Debe seleccionar un asesor válido.');
          }

        } else {
          this.notif.onWarning('Advertencia', 'Debe cambiar asesor externo.');
          this.bloquearbtnActalizar = false;
          this.bloquearbtnCalcular = false;
        }
      } else if (this.contractualOperacionFrom.get('Codigo')?.value === '28') {  // Adicionar puntos
        var TasaEfectivaSin = this.contractualFrom.get('TasaEfectiva')?.value;
        TasaEfectivaSin = TasaEfectivaSin.replace("%", "");
        if (+Number(TasaEfectivaSin) !== this.datoAutorizacionTasa) {
          this.datoAutorizacionTasa = +Number(TasaEfectivaSin);

          const objectComplet = this.AdicionarPuntosFrom.value.AdicionarPunto;
          this.AdicionarPuntosFrom.get('AdicionarPunto')?.setValue(objectComplet.PuntosAdicionales);
            
            this.AdicionarPuntosFrom.get('AdicionarPunto')?.setValue(objectComplet);
            const TasaIncial = +this.datoTasaEfectiva;
            const PuntosAdicionales = +this.AdicionarPuntosFrom.get('AdicionarPunto')?.value.PuntosAdicionales;
            const Suma = ((TasaIncial + PuntosAdicionales).toFixed(4)).toString();
            var TasaEfectivaSin = this.contractualFrom.get('TasaEfectiva')?.value;
            TasaEfectivaSin = TasaEfectivaSin.replace("%", "");
            
            this.log.PuntosAdicionalesActualiza = PuntosAdicionales;
            if (TasaEfectivaSin === Suma) {

              this.loading = true;

              var TasaEfectivaSin = this.contractualFrom.get('TasaEfectiva')?.value;
              TasaEfectivaSin = TasaEfectivaSin.replace("%", "");
              this.contractualFrom.get('TasaEfectiva')?.setValue(Number(TasaEfectivaSin));

              var TasaNominalSin = this.contractualFrom.get('TasaNominal')?.value;
              TasaNominalSin = TasaNominalSin.replace("%", "");
              this.contractualFrom.get('TasaNominal')?.setValue(Number(TasaNominalSin));

              this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
              this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;
              
              this.ContractualServices.getActualizarTasaContractual(this.GuardarContractualConDebito).subscribe(
                result => {
                  this.loading = false;
                  this.Bloquear = false;
                  this.BloquearNroTitulo = false;
                  this.BloquearNegociacion = false;
                  this.BloquearCuotaMes = false;
                  this.BloquearValorTotalPlan = false;
                  this.bloquearConsultaCuenta = false;
                  this.BloquearEstado = false;
                  this.BloquearDatoTitular = false;
                  this.BloquearAsociado = false;
                  this.BloquearSorteo = false;
                  this.BloquearFormaPago = false;
                  this.BloquearTasa = false;
                  this.BloquaerProducto = false;
                  this.BloquearBuscar = false;
                  this.BloquearPeriodo = false;
                  this.BloquearCuentaNegociacion = false;
                  this.Bloquearliquidacion = false;
                  this.BloquearAsesorExterno = false;
                  this.BloquearPuntos = false;
                  this.BloquearBontonPuntos = false;
                  this.BloquearCuentaOrigen = false;
                  this.BloquearNombreDebito = false;
                  this.notif.onSuccess('Exitoso', 'La adición de puntos se actualizó correctamente.');
                  this.btnGuardar = true;
                  this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
                  this.btnActualizar = true;
                  this.selectEstado = true;
                  this.inputSinDecimal = true;
                  this.inputEstado = false;
                  this.inputCuotaMes = false;
                  this.bloquearbtnActalizar = false;
                  this.bloquearbtnCalcular = false;
                  this.btnActualizarTab = true;
                  this.btnCalcularTasa = true;
                  this.BloquearPuntos = false;
                  this.Guardarlog(this.log);
                  this.contractualOperacionFrom.get('Codigo')?.reset();
                  this.ObtenerHistorial();
                  this.itemsDataObejct = [];
                  this.BuscarPorCuenta();
                },
                error => {
                  this.loading = false;
                  const errorMessage = <any>error;
                  console.log(errorMessage);
                }
              );
            } else {
              this.notif.onWarning('Advertencia', 'Tasa incorrecta por favor verificar.');
            }
        } else {
          this.notif.onWarning('Advertencia', 'Debe cambiar tasa.');
          this.bloquearbtnActalizar = false;
          this.bloquearbtnCalcular = false;
        }
      } else if (this.contractualOperacionFrom.get('Codigo')?.value === '44') {  // Actualizar nro titulo
        if (this.contractualFrom.get('NroTitulo')?.value !== null
          && this.contractualFrom.get('NroTitulo')?.value !== undefined
          && this.contractualFrom.get('NroTitulo')?.value !== '') {
          if (this.contractualFrom.get('NroTitulo')?.value !== this.contractualFrom.get('NroTituloAnterior')?.value) {
            this.loading = true;
            this.log.NumeroTituloActualiza = this.contractualFrom.get('NroTitulo')?.value == null ? "" : this.contractualFrom.get('NroTitulo')?.value;
          this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
          this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;
          this.ContractualServices.ActualizarNroTitulo(this.GuardarContractualConDebito).subscribe(
            result => {
              this.loading = false;
              this.Bloquear = false;
              this.BloquearNroTitulo = false;
              this.BloquearNegociacion = false;
              this.BloquearCuotaMes = false;
              this.BloquearValorTotalPlan = false;
              this.bloquearConsultaCuenta = false;
              this.BloquearEstado = false;
              this.BloquearDatoTitular = false;
              this.BloquearAsociado = false;
              this.BloquearSorteo = false;
              this.BloquearFormaPago = false;
              this.BloquearTasa = false;
              this.BloquaerProducto = false;
              this.BloquearBuscar = false;
              this.BloquearPeriodo = false;
              this.BloquearCuentaNegociacion = false;
              this.Bloquearliquidacion = false;
              this.BloquearAsesorExterno = false;
              this.BloquearPuntos = false;
              this.BloquearBontonPuntos = false;
              this.BloquearCuentaOrigen = false;
              this.BloquearNombreDebito = false;
              this.notif.onSuccess('Exitoso', 'El cambio de Nro. título se actualizó correctamente.');
              this.btnGuardar = true;
              this.contractualFrom.get('IdCuenta')?.setValue(result.IdCuenta);
              this.btnActualizar = true;
              this.bloquearbtnActalizar = false;
              this.bloquearbtnCalcular = false;
              this.selectEstado = true;
              this.inputSinDecimal = true;
              this.inputEstado = false;
              this.inputCuotaMes = false;
              this.Guardarlog(this.log);
              this.contractualOperacionFrom.get('Codigo')?.reset();
              this.ObtenerHistorial();
              this.itemsDataObejct = [];
              this.BuscarPorCuenta();
            },
            error => {
              this.loading = false;
              const errorMessage = <any>error;
              console.log(errorMessage);
            }
            );
          } else {
            this.notif.onWarning('Advertencia', 'Debe cambiar Nro. título.');
            this.bloquearbtnActalizar = false;
          }
        } else {
          this.notif.onWarning('Advertencia', 'Debe ingresar Nro. título.');
        }
      }
    } else {
      this.notif.onWarning('Advertencia','Debe buscar una cuenta para realizar esta operación.');
    }
  }
  Observaciones(IdEstado : string) {
    this.ContractualServices.Observaciones(IdEstado).subscribe(
      result => {
        this.dataObservacion = result;
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      }
    );
  }
  GuardarObservaciones() {
    if (this.CambioEstadoFrom.get('IdTipoObservacion')?.value !== null
      && this.CambioEstadoFrom.get('IdTipoObservacion')?.value !== undefined
      && this.CambioEstadoFrom.get('IdTipoObservacion')?.value !== ''
    ) {
      const cuenta = this.contractualFrom.get('IdCuenta')?.value;
      this.CambioEstadoFrom.get('lngCuenta')?.setValue(cuenta);
      this.ContractualServices.GuardarObservacion(this.CambioEstadoFrom.value).subscribe(
        result => {
          this.CambioEstadoFrom.reset();
          this.cambiarEstado();
        },
        error => {
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    } else {
      this.notif.onWarning('Advertencia', 'Debe seleccionar una observación.');
    }
  }
  cambiarEstado() {

    if (this.contractualFrom.get('IdOficina')?.value !== this.datoOficina) {
      this.contractualFrom.get('IdOficina')?.setValue(this.datoOficina);
    }
    if (this.contractualFrom.get('IdProductoCuenta')?.value !== this.datoProducto ||
      this.contractualFrom.get('IdProducto')?.value !== this.datoProducto ) {
      this.contractualFrom.get('IdProductoCuenta')?.setValue(this.datoProducto);
      this.contractualFrom.get('IdProducto')?.setValue(this.datoProducto);
      this.contractualFrom.get('DescripcionProducto')?.setValue(this.datoNombreProducto);
    }
    if (this.contractualFrom.get('IdConsecutivo')?.value !== this.datoConsecutivo) {
      this.contractualFrom.get('IdConsecutivo')?.setValue(this.datoConsecutivo);
    }
    if (this.contractualFrom.get('IdDigito')?.value !== this.datoDigito) {
      this.contractualFrom.get('IdDigito')?.setValue(this.datoDigito);
    }
      this.log.EstadoActualiza = this.resultEstados.filter((x : any) => x.IdEstado == this.contractualFrom.get('IdEstado')?.value)[0].Descripcion;
      if (this.contractualFrom.get('IdEstado')?.value === '20') {        // Bloquear
        this.obtenerIdObseCambioEstado();
        this.datoCambioEstado = +this.contractualFrom.get('IdEstado')?.value;

        this.ContractualServices.getBloquearCuenta(this.contractualFrom.value).subscribe(
          result => {
            if (result.AlertasDto !== null) {
              this.notif.onWarning('Advertencia', result.AlertasDto.Mensaje);
              this.inputEstado = true;
              this.inputCuotaMes = false;
              this.selectEstado = false;
              this.btnCambiarEstado = false;
              this.bloquearbtnCambioEstado = false;
              this.contractualFrom.get('IdEstado')?.setValue(0);
            } else {
              this.notif.onSuccess('Exitoso', 'El cambio estado se realizó correctamente.');
              this.Guardarlog(this.log);
              this.BuscarPorCuenta();
              this.CambioEstadoFrom.reset();
              this.contractualOperacionFrom.get('Codigo')?.reset();
              this.contractualFrom.get('IdObseCambioEstado')?.reset();
            }
          },
          error => {
          const errorMessage = <any>error;
          this.notif.onDanger('Error', errorMessage);
           console.error(errorMessage);
           this.contractualOperacionFrom.get('Codigo')?.reset();
          });
        this.ObtenerHistorial();
        this.btnCambiarEstado = true;
        this.selectEstado = true;
        this.inputEstado = false;
      } else if (this.contractualFrom.get('IdEstado')?.value === '5') {  // Desbloquear
        this.ContractualServices.getDesbloquearCuenta(this.contractualFrom.value).subscribe(
          result => {
            if (result.AlertasDto !== null) {
              this.notif.onWarning('Advertencia', result.AlertasDto.Mensaje);
              this.inputEstado = true;
              this.selectEstado = false;
              this.btnCambiarEstado = false;
              this.bloquearbtnCambioEstado = false;
              this.contractualFrom.get('IdEstado')?.setValue(0);
            } else {
              this.notif.onSuccess('Exitoso', 'El cambio estado se realizó correctamente.');
              this.Guardarlog(this.log);
              this.BuscarPorCuenta();
              this.CambioEstadoFrom.reset();
              this.contractualOperacionFrom.get('Codigo')?.reset();
              this.contractualFrom.get('IdObseCambioEstado')?.reset();
            }
          },
          error => {
            const errorMessage = <any>error;
            this.notif.onDanger('Error', errorMessage);
            console.error(errorMessage);
            this.contractualOperacionFrom.get('Codigo')?.reset();
            });
        this.ObtenerHistorial();
        this.btnCambiarEstado = true;
        this.selectEstado = true;
        this.inputEstado = false;
      } else if (this.contractualFrom.get('IdEstado')?.value === '10') { // Anular
        this.ContractualServices.getAnularCuenta(this.contractualFrom.value).subscribe(
          result => {
            if (result.AlertasDto !== null) {
              this.notif.onWarning('Advertencia', result.AlertasDto.Mensaje);
              this.inputEstado = true;
              this.selectEstado = false;
              this.btnCambiarEstado = false;
              this.bloquearbtnCambioEstado = false;
              this.contractualFrom.get('IdEstado')?.setValue(0);
            } else {
              this.notif.onSuccess('Exitoso', 'El cambio estado se realizó correctamente.');
              this.Guardarlog(this.log);
              this.BuscarPorCuenta();
              this.EliminarDebitoAutomatico();
              this.LiberarTitulo();
              this.LiberarSorteo();
              this.CambioEstadoFrom.reset();
              this.contractualOperacionFrom.get('Codigo')?.reset();
              this.contractualFrom.get('IdObseCambioEstado')?.reset();
            }
          },
          error => {
            const errorMessage = <any>error;
            this.notif.onDanger('Error', errorMessage);
            console.error(errorMessage);
            this.contractualOperacionFrom.get('Codigo')?.reset();
          });
        this.ObtenerHistorial();
        this.btnCambiarEstado = true;
        this.selectEstado = true;
        this.inputEstado = false;
      } else if (this.contractualFrom.get('IdEstado')?.value === '30') { // Embargar
        this.ContractualServices.getEmbargarCuenta(this.contractualFrom.value).subscribe(
          result => {
            if (result.AlertasDto !== null) {
              this.notif.onWarning('Advertencia', result.AlertasDto.Mensaje);
              this.inputEstado = true;
              this.selectEstado = false;
              this.btnCambiarEstado = false;
              this.bloquearbtnCambioEstado = false;
              this.contractualFrom.get('IdEstado')?.setValue(0);
            } else {
              this.notif.onSuccess('Exitoso', 'El cambio estado se realizó correctamente.');
              this.Guardarlog(this.log);
              this.BuscarPorCuenta();
              this.CambioEstadoFrom.reset();
              this.contractualOperacionFrom.get('Codigo')?.reset();
              this.contractualFrom.get('IdObseCambioEstado')?.reset();
            }
          },
          error => {
            const errorMessage = <any>error;
            this.notif.onDanger('Error', errorMessage);
            console.error(errorMessage);
            this.contractualOperacionFrom.get('Codigo')?.reset();
          });
        this.ObtenerHistorial();
        this.btnCambiarEstado = true;
        this.selectEstado = true;
        this.inputEstado = false;
      }
  }
  EliminarDebitoAutomatico() {
    if (this.contractualFrom.get('IdFormaPago')?.value === 1) {
      this.DebitoAutomaticoFrom.get('IdCuentaOrigen')?.setValue(1);
      this.GuardarContractualConDebito.ContractualFrom = this.contractualFrom.value;
      this.GuardarContractualConDebito.DebitoAutomaticoFrom = this.DebitoAutomaticoFrom.value;
      this.ContractualServices.getEliminarDebitoAutomatico(this.GuardarContractualConDebito).subscribe(
        result => {
        },
        error => {
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    }
  }
  LiberarTitulo() {
  this.ContractualServices.ActualizarTitulo(this.contractualFrom.get('NroTitulo')?.value).subscribe(
    result => {
      this.contractualFrom.get('NroTitulo')?.setValue(0);
        },
        error => {
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
  }
  LiberarSorteo() {
    this.ContractualServices.LiberarSorteo(this.contractualFrom.get('Sorteo')?.value, this.contractualFrom.get('IdCuenta')?.value).subscribe(
      result => {
        this.contractualFrom.get('Sorteo')?.setValue(0);
          },
          error => {
            const errorMessage = <any>error;
            console.log(errorMessage);
          }
        );
    }
  obtenerIdObseCambioEstado() {
    this.ContractualServices.obtenerIdObseCambioEstado(this.contractualFrom.get('IdCuenta')?.value).subscribe(
      result => {
        this.contractualFrom.get('IdObseCambioEstado')?.setValue(result.IdObseCambioEstado);
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  CondicionesProducto() {
    this.contractualFrom.get('IdRelacionTipo')?.setValue(this.contractualFrom.get('Clase')?.value);
    this.ContractualServices.getCondicionesProducto(this.contractualFrom.value).subscribe(
      result => {
        if (result !== null) {
          this.ArrayCondiciones = result;
          this.BuscarProducto();
        } else if (result.Mensaje !== undefined || result.Mensaje !== null) {
          this.notif.onWarning('Advertencia', result.Mensaje);
          this.contractualFrom.get('IdProducto')?.reset();
        }
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  ValidarPlazo() {
    if (this.contractualFrom.get('Plazo')?.value !== undefined
    && this.contractualFrom.get('Plazo')?.value !== null) {
      if (JSON.parse(this.contractualFrom.get('Plazo')?.value) >= this.ArrayCondiciones.PlazoMinimo
      && JSON.parse(this.contractualFrom.get('Plazo')?.value) <= this.ArrayCondiciones.PlazoMaximo) {
      this.contractualFrom.get('CuotaMes')?.reset();
      this.contractualFrom.get('ValorPlan')?.reset();

    } else {
      this.notif.onWarning('Advertencia', 'El plazo ingresado no es permitido para este producto.');
      this.contractualFrom.get('CuotaMes')?.reset();
      this.contractualFrom.get('ValorPlan')?.reset();
      this.contractualFrom.get('Plazo')?.reset();
    }
    }
  }
  ValidarTitulo() {
    this.bloquearbtnActalizar = true;
    let data = localStorage.getItem('Data');
    this.dataUser = JSON.parse(window.atob(data == null ? "" : data));
    this.ContractualServices.ValidarTitulo(this.contractualFrom.get('NroTitulo')?.value).subscribe(
      result => {
        if (result !== null) {
          if (result.IdOficina === +this.dataUser.NumeroOficina) {
            if (result.IdEstado === 45) {
            } else {
              this.notif.onWarning('Advertencia', 'El número de título ya fue asignado');
            this.contractualFrom.get('NroTitulo')?.reset();
            }
          } else {
            this.notif.onWarning('Advertencia', 'El número de título tiene otra oficina asignada.');
            this.contractualFrom.get('NroTitulo')?.reset();
          }
        } else {
          this.notif.onWarning('Advertencia', 'El número de título no está asignado.');
          this.contractualFrom.get('NroTitulo')?.reset();
        }
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  // FIN DE ENCABEZADO

  // INICIO TABS
  Periodo() {
    this.ContractualServices.getPeriodo().subscribe(
      result => {
        this.resultPeriodo = result;
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  Indicador() {
    this.ContractualServices.getIndicador().subscribe(
      result => {
        this.resultIndicador = result;
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  Liquidacion() {
    this.ContractualServices.getLiquidacion().subscribe(
      result => {
        this.resultLiquidacion = result;
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  SeleccionLiquidacion() {
    if (this.contractualFrom.get('IdLiquidacion')?.value === '0') {
      this.BloquearCuentaNegociacion = false;
      this.contractualFrom.get('IdCuentaDestino')?.reset();
      this.contractualFrom.get('CuentaDestino')?.reset();
      this.selectCuenta = true;
      this.inputCuenta = false;
      this.bloquearbtnActalizar = true;
      this.resultCuentaNegociacion = undefined
    } else {
      this.BloquearCuentaNegociacion = null;
      this.selectCuenta = false;
      this.inputCuenta = true;
      this.BuscarCuentaNegociacion();
      this.bloquearbtnActalizar = true;
    }
  }
  BuscarCuentaNegociacion() {
    if (this.contractualFrom.get('NumeroDocumento')?.value !== null
      && this.contractualFrom.get('NumeroDocumento')?.value !== undefined
      && this.contractualFrom.get('NumeroDocumento')?.value !== '') {
        this.loading = true;
      this.ContractualServices.getBuscarCuentaDisponible(this.contractualFrom.value).subscribe(
        result => {
          this.loading = false;
          if (result.length >= 1) {
            this.resultCuentaNegociacion = result;
          } else if (result.Mensaje !== undefined || result.Mensaje !== null) {
            this.notif.onWarning('Advertencia', result.Mensaje);
            this.contractualFrom.get('IdLiquidacion')?.setValue('0');
            this.selectCuenta = true;
            this.inputCuenta = false;
            this.bloquearbtnActalizar = true;
          }
        },
        error => {
          this.loading = false;
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    } else {
      this.notif.onWarning('Advertencia', 'Debe ingresar el documento del asociado.',
        );
      this.contractualFrom.get('IdLiquidacion')?.reset();
    }
  }
  BuscarTitularDocumento() {
    if (this.contractualFrom.get('DocumentoTitular')?.value !== null
      && this.contractualFrom.get('DocumentoTitular')?.value !== undefined
      && this.contractualFrom.get('DocumentoTitular')?.value !== '') {
      if (this.contractualFrom.get('NumeroDocumento')?.value !== this.contractualFrom.get('DocumentoTitular')?.value) {
        if (this.dataObjet === undefined) {
          this.loading = true;
          this.ContractualServices.BuscarTitular(this.contractualFrom.get('DocumentoTitular')?.value, '*').subscribe(
            result => {
              this.loading = false;
              if (result === null) {
                this.notif.onWarning('Alerta', 'No se encontró el titular.');
              } else {
                if (result.IdRelacion === 10) {
                  this.notif.onWarning('Alerta', 'El autorizado no puede ser menor.');
                } else {
                  this.contractualFrom.get('DocumentoTitular')?.setValue(result.Documento);
                  this.contractualFrom.get('NombreTitular')?.setValue(result.PrimerApellido + ' ' +
                    result.SegundoApellido + ' ' + result.PrimerNombre + ' ' + result.SegundoNombre);
                  this.BloquearDatoTitular = null;
                }
              }
            },
            error => {
              this.loading = false;
              const errorMessage = <any>error;
              console.log(errorMessage);
            }
          );
        } else {
          this.validar = false;
          const CedulaDigitada = this.contractualFrom.get('DocumentoTitular')?.value;
          this.dataObjetTitulares.forEach(elementB => {
            if (elementB.Documento === CedulaDigitada) {
              this.validar = true;
            }
          });
          if (this.validar) {
            this.notif.onWarning('Advertencia', 'El autorizado ya fue ingresado.');
            this.clearTitulares();
          } else {
            this.loading = true;
            this.ContractualServices.BuscarTitular(this.contractualFrom.get('DocumentoTitular')?.value, '*').subscribe(
              result => {
                this.loading = false;
                if (result === null) {
                  this.notif.onWarning('Alerta', 'No se encontró el titular.');
                } else {
                  if (result.IdRelacion === 10) {
                    this.notif.onWarning('Alerta', 'El autorizado no puede ser menor.');
                  } else {
                    this.BloquearDatoTitular = null;
                    this.contractualFrom.get('DocumentoTitular')?.setValue(result.Documento);
                    this.contractualFrom.get('NombreTitular')?.setValue(result.PrimerApellido + ' ' +
                      result.SegundoApellido + ' ' + result.PrimerNombre + ' ' + result.SegundoNombre);
                  }
                }
              },
              error => {
                this.loading = false;
                const errorMessage = <any>error;
                console.log(errorMessage);
              }
            );
          }
        }
      } else {
        this.notif.onWarning('Alerta', 'El autorizado debe ser diferente al titular.');
        this.clearTitulares();
      }

    }
  }
  BuscarTitularNombre() {
    if (this.contractualFrom.get('NombreTitular')?.value !== null
      && this.contractualFrom.get('NombreTitular')?.value !== undefined
      && this.contractualFrom.get('NombreTitular')?.value !== '') {

      if (this.contractualFrom.get('NumeroDocumento')?.value !== this.contractualFrom.get('DocumentoTitular')?.value) {
        if (this.dataObjet === undefined) {
          this.loading = true;
          this.ContractualServices.BuscarTitular('*', this.contractualFrom.get('NombreTitular')?.value).subscribe(
            result => {
              this.loading = false;
              if (result.length === 0) {
                this.notif.onWarning('Alerta', 'No se encontró el titular.');
              } else if (result.length === 1) {
                if (result[0].IdRelacion === 10) {
                  this.notif.onWarning('Alerta', 'El autorizado no puede ser menor.');
                } else {
                  this.contractualFrom.get('DocumentoTitular')?.setValue(result[0].Documento);
                  this.contractualFrom.get('NombreTitular')?.setValue(result[0].PrimerApellido + ' ' +
                    result[0].SegundoApellido + ' ' + result[0].PrimerNombre + ' ' + result[0].SegundoNombre);
                }
              } else if (result.length > 1) {
                this.resultTitulares = result;
                this.ModalTitulares.nativeElement.click();
                this.contractualFrom.get('NombreTitular')?.reset();
              }
            },
            error => {
              this.loading = false;
              const errorMessage = <any>error;
              console.log(errorMessage);
            }
          );
        } else {
          this.validar = false;
          const CedulaDigitada = this.contractualFrom.get('DocumentoTitular')?.value;
          this.dataObjetTitulares.forEach(elementB => {
            if (elementB.strDocumento === CedulaDigitada) {
              this.validar = true;
            }
          });
          if (this.validar) {
            this.notif.onWarning('Advertencia', 'El autorizado ya fue ingresado.');
            this.clearTitulares();
          } else {
            this.loading = true;
            this.ContractualServices.BuscarTitular('*', this.contractualFrom.get('NombreTitular')?.value).subscribe(
              result => {
                this.loading = false;
                if (result.length === 0) {
                  this.notif.onWarning('Alerta', 'No se encontró el titular.');
                } else if (result.length === 1) {
                  if (result[0].IdRelacion === 10) {
                    this.notif.onWarning('Alerta', 'El autorizado no puede ser menor.');
                  } else {
                    this.bloquearDatosTitulares = null;
                    this.contractualFrom.get('DocumentoTitular')?.setValue(result[0].Documento);
                    this.contractualFrom.get('NombreTitular')?.setValue(result[0].PrimerApellido + ' ' +
                      result[0].SegundoApellido + ' ' + result[0].PrimerNombre + ' ' + result[0].SegundoNombre);
                  }
                } else if (result.length > 1) {
                  this.resultTitulares = result;
                  this.ModalTitulares.nativeElement.click();
                  this.contractualFrom.get('NombreTitular')?.reset();
                }
              },
              error => {
                this.loading = false;
                const errorMessage = <any>error;
                console.log(errorMessage);
              }
            );
          }
        }
      } else {
        this.notif.onWarning('Alerta', 'El autorizado debe ser diferente al titular.');
        this.clearTitulares();
      }
    }
  } 
  btnOpcionesActualizarTitulares : boolean | null = false;
  AgregarTitulares() {
    let Accion: string = "Adicionar";
    let FechaMatricula = formatDate(new Date(), 'yyyy/MM/dd  HH:mm', 'en'); 
    if (this.contractualFrom.get('DocumentoTitular')?.value !== null
      && this.contractualFrom.get('DocumentoTitular')?.value !== undefined
      && this.contractualFrom.get('DocumentoTitular')?.value !== ''
      && this.contractualFrom.get('NombreTitular')?.value !== null
      && this.contractualFrom.get('NombreTitular')?.value !== undefined
      && this.contractualFrom.get('NombreTitular')?.value !== ''
      && this.contractualFrom.get('Tipo')?.value !== null
      && this.contractualFrom.get('Tipo')?.value !== undefined
      && this.contractualFrom.get('Tipo')?.value !== ''
      && this.contractualFrom.get('TipoFirma')?.value !== null
      && this.contractualFrom.get('TipoFirma')?.value !== undefined
      && this.contractualFrom.get('TipoFirma')?.value !== '') {
        
        this.contractualFrom.controls["DocumentoTitular"].enable();
        this.contractualFrom.controls["NombreTitular"].enable();
        this.btnOpcionesActualizarTitulares = false;
        if (this.indexAutorizado !== null) {
  
          let temp: string[] = this.dataObjetTitulares[this.indexAutorizado].TipoFirma.toString().split(':  ');
          if (temp.length == 1) {
            temp.push('')
          }
  
          if (this.dataObjetTitulares[this.indexAutorizado].Documento == this.contractualFrom.get('DocumentoTitular')?.value
            && this.dataObjetTitulares[this.indexAutorizado].Nombre == this.contractualFrom.get('NombreTitular')?.value
            && this.dataObjetTitulares[this.indexAutorizado].TipoTitular == this.contractualFrom.get('Tipo')?.value
            && temp[0] == this.contractualFrom.get('TipoFirma')?.value
            && temp[1].trim() == this.contractualFrom.get('Observacion')?.value.toString().trim()) {
            this.notif.onWarning('Advertencia', ' Debe cambiar el autorizado.');
            return;
          }
          if (this.dataObjetTitulares[this.indexAutorizado].Accion == "DB" || this.dataObjetTitulares[this.indexAutorizado].Accion == "Actualizar") {
            // FechaMatricula = this.dataObjetTitulares[this.indexAutorizado].FechaMatricula;
            Accion = "Actualizar";
          }
            
          this.dataObjetTitulares.splice(this.indexAutorizado, 1);
  
        }
        if (this.contractualFrom.get('Observacion')?.value === null) {
          this.contractualFrom.get('Observacion')?.setValue('');
        }
        if (this.dataObjetTitulares !== undefined) {
  
          var TipoFirmaFinal;
          if (this.contractualFrom.get('TipoFirma')?.value === 'Otro') {
            TipoFirmaFinal = this.contractualFrom.get('TipoFirma')?.value + ':  ' + this.contractualFrom.get('Observacion')?.value
          } else {
            TipoFirmaFinal = this.contractualFrom.get('TipoFirma')?.value;
          }
  
          this.dataObjetTitulares.push({
            'Accion': Accion,
            'Documento': this.contractualFrom.get('DocumentoTitular')?.value,
            'Nombre': this.contractualFrom.get('NombreTitular')?.value,
            'FechaMatricula': FechaMatricula,
            'TipoTitular': this.contractualFrom.get('Tipo')?.value,
            'TipoFirma': TipoFirmaFinal,
          });
          this.indexAutorizado = null;
          this.bloquearBtnActualizarTitular = null;
          this.contractualFrom.get('Tipo')?.setValue(0);
          this.contractualFrom.get('Observacion')?.setValue('');
        } else {
          this.dataObjetTitulares = [];
  
          var TipoFirmaFinal;
          if (this.contractualFrom.get('TipoFirma')?.value === 'Otro') {
            TipoFirmaFinal = this.contractualFrom.get('TipoFirma')?.value + ':  ' + this.contractualFrom.get('Observacion')?.value
          } else {
            TipoFirmaFinal = this.contractualFrom.get('TipoFirma')?.value;
          }
  
          this.dataObjetTitulares.push({
            'Accion': Accion,
            'Documento': this.contractualFrom.get('DocumentoTitular')?.value,
            'Nombre': this.contractualFrom.get('NombreTitular')?.value,
            'FechaMatricula': FechaMatricula,
            'TipoTitular': this.contractualFrom.get('Tipo')?.value,
            'TipoFirma': TipoFirmaFinal,
          });
          this.indexAutorizado = null;
          this.bloquearBtnActualizarTitular = null;
          this.contractualFrom.get('Tipo')?.setValue(0);
          this.contractualFrom.get('Observacion')?.setValue('');
        }
        this.clearTitulares();
        
        
        
    //   if (this.indexAutorizado !== null) {
    //     this.dataObjet.Titulares.splice(this.indexAutorizado, 1);
    //   }
    //   if (this.contractualFrom.get('Observacion')?.value === null) {
    //     this.contractualFrom.get('Observacion')?.setValue(' ');
    //   }
    //   if (this.dataObjet !== undefined) {
    //     this.dataObjet.Titulares.push({
    //       'Documento': this.contractualFrom.get('DocumentoTitular')?.value,
    //       'Nombre': this.contractualFrom.get('NombreTitular')?.value,
    //       'FechaMatricula': new Date(),
    //       'TipoTitular': this.contractualFrom.get('Tipo')?.value,
    //       'TipoFirma': this.contractualFrom.get('TipoFirma')?.value + ':  ' + this.contractualFrom.get('Observacion')?.value,
    //     });
    //     this.indexAutorizado = null;
    //     this.bloquearbtnActalizar = true;
    //     this.contractualFrom.get('Tipo')?.setValue(0);
    //     this.contractualFrom.get('Observacion')?.reset();
    //   } else {
    //     this.dataObjet = {
    //       Titulares: []
    //     };
    //     this.dataObjet.Titulares.push({
    //       'Documento': this.contractualFrom.get('DocumentoTitular')?.value,
    //       'Nombre': this.contractualFrom.get('NombreTitular')?.value,
    //       'FechaMatricula': new Date(),
    //       'TipoTitular': this.contractualFrom.get('Tipo')?.value,
    //       'TipoFirma': this.contractualFrom.get('TipoFirma')?.value + ':  ' + this.contractualFrom.get('Observacion')?.value,
    //     });
    //     this.indexAutorizado = null;
    //     this.bloquearbtnActalizar = true;
    //     this.contractualFrom.get('Tipo')?.setValue(0);
    //     this.contractualFrom.get('Observacion')?.reset();
    //   }
    //   console.log(this.dataObjet.Titulares);
    //   this.clearTitulares();
    } else {
      this.notif.onWarning('Advertencia', 'Los datos están incompletos.');
    }
  }
  BuscarTitularModal(Documento = '*') {
    const Nombre = '*';
    this.loading = true;
    this.ContractualServices.BuscarTitular(Documento, Nombre).subscribe(
      result => {
        this.loading = false;
        if (result === null) {
            this.notif.onWarning('Alerta', 'No se encontró el titular.');
        } else {
        if (result.IdRelacion === 10) {
          this.notif.onWarning('Alerta', 'El autorizado no puede ser menor.');
        } else {
            if (this.contractualFrom.get('NumeroDocumento')?.value !== result.Documento) {
                this.bloquearDatosTitulares = null;
            this.contractualFrom.get('DocumentoTitular')?.setValue(result.Documento);
            this.contractualFrom.get('NombreTitular')?.setValue(result.PrimerApellido + ' ' +
              result.SegundoApellido + ' ' + result.PrimerNombre + ' ' + result.SegundoNombre);
          } else {
            this.notif.onWarning('Alerta', 'El autorizado debe ser diferente al titular.');
            this.clearTitulares();
          } 
        }
      }
      },
      error => {
        this.loading = false;
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  Autorizado() {
    this.contractualFrom.get('Tipo')?.setValue('A');
    }
    listAutorizadoEliminar: any[] = [];
  IndiceAEliminar(index : number) {
      
    if (this.dataObjetTitulares[index].Accion != "Adicionar") {
      this.listAutorizadoEliminar.push(
        {
          Documento: this.dataObjetTitulares[index].Documento,
          Nombre: this.dataObjetTitulares[index].Nombre,
          FechaMatricula: this.dataObjetTitulares[index].FechaMatricula,
          TipoTitular: this.dataObjetTitulares[index].TipoTitular,
          TipoFirma: this.dataObjetTitulares[index].TipoFirma,
        });
    }
      
    this.dataObjetTitulares.splice(index, 1);
    this.bloquearBtnActualizarTitular = null;
    this.contractualFrom.controls["DocumentoTitular"]?.setValue("");
    this.contractualFrom.controls["NombreTitular"]?.setValue("");
    this.contractualFrom.controls["Tipo"]?.setValue("0");
    this.contractualFrom.controls["TipoFirma"]?.setValue("");
    this.contractualFrom.controls["Observacion"]?.setValue("");
    this.indexAutorizado = null;
    this.DescriTipoFirma = true;
    this.bloquearDatosTitulares = false;
    this.bloquearBtnActualizarTitular = null;
  }
  IndiceAEditar(index : number, datos : any) {
    this.contractualFrom.controls["DocumentoTitular"].disable();
    this.contractualFrom.controls["NombreTitular"].disable();
    this.btnOpcionesActualizarTitulares = true;
    this.BloquearDatoTitular = null;
    let arrayTipoFirma: any[];
    this.bloquearDatosTitulares = null;
    this.bloquearBtnActualizarTitular = false;
    this.contractualFrom.get('DocumentoTitular')?.setValue(datos.Documento);
    this.contractualFrom.get('NombreTitular')?.setValue(datos.Nombre);
    this.contractualFrom.get('Tipo')?.setValue('A');
    arrayTipoFirma = datos.TipoFirma.split(': ');

    if (arrayTipoFirma[0] === 'Otro') {
      this.contractualFrom.get('TipoFirma')?.setValue(arrayTipoFirma[0]);
      this.contractualFrom.get('Observacion')?.setValue(arrayTipoFirma[1]);
      this.DescriTipoFirma = false;
    } else {
      this.contractualFrom.get('TipoFirma')?.setValue(arrayTipoFirma[0]);
      this.DescriTipoFirma = true;
    }
    this.indexAutorizado = index;
    this.bloquearBtnActualizarTitular = false;
    this.bloquearbtnCalcular = false;
  }
  TipoFirma() {
    this.ContractualServices.TipoFirma().subscribe(
      result => {
        this.resultTipoFirma = result;
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  FirmaSeleccionada() {
    const data = this.contractualFrom.get('TipoFirma')?.value;
    if (data === 'Otro') {
      this.DescriTipoFirma = false;
      this.contractualFrom.get('Observacion')?.reset();
    } else {
      this.DescriTipoFirma = true;
      this.contractualFrom.get('Observacion')?.reset();
    }
  }
  LimpiarCamposTab(Datos : any) {
    if (Datos === 'DocumentoTitular') {
      this.contractualFrom.get('NombreTitular')?.reset();
    } else if (Datos === 'NombreTitular') {
      this.contractualFrom.get('DocumentoTitular')?.reset();
    } else if (Datos === 'BuscarNombre') {
      this.contractualFrom.get('BuscarDocumento')?.reset();
    } else if (Datos === 'BuscarDocumento') {
      this.contractualFrom.get('BuscarNombre')?.reset();
    } else if (Datos === 'BuscarNombreCuenta') {
      this.contractualFrom.get('BuscarDocumentoCuenta')?.reset();
    } else if (Datos === 'BuscarDocumentoCuenta') {
      this.contractualFrom.get('BuscarNombreCuenta')?.reset();
    }
  }
  ObtenerHistorial() {
    const IdOficina = this.contractualFrom.get('IdOficina')?.value;
    const IdProductoCuenta = this.contractualFrom.get('IdProductoCuenta')?.value;
    const IdConsecutivo = this.contractualFrom.get('IdConsecutivo')?.value;
    const IdDigito = this.contractualFrom.get('IdDigito')?.value;
    this.ContractualServices.ObtenerHistorial
      ({ 'IdOficina': IdOficina, 'IdProductoCuenta': IdProductoCuenta, 'IdConsecutivo': IdConsecutivo, 'IdDigito': IdDigito }).subscribe(
        result => {
            this.dataHistorial = result;
            this.dataHistorial.forEach((element : any) => {
              if (element.Operacion == 10 || element.Operacion == 13 || element.Operacion == 40)
                element.Detalles = "";
              else if (element.Detalles != null && element.Detalles != "") {
                const tempchar: string = '"'
                element.Detalles = element.Detalles.toString().replace(/{/g, "").replace(/}/g, "").replace(/\[/g, "").replace(/\]/g, "");
                element.Detalles = element.Detalles.toString().replace(new RegExp(tempchar, 'g'), '');
                element.Detalles = element.Detalles.toString().replace(new RegExp(',', 'g'), '  ');
              }
            });
        },
        error => {
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
  }
  ValorTotalPlan() {
    if (this.contractualFrom.get('CuotaMes')?.value !== undefined
      && this.contractualFrom.get('CuotaMes')?.value !== null
      && this.contractualFrom.get('CuotaMes')?.value !== 0)  {
      if (this.contractualFrom.get('CuotaMes')?.value >= this.ArrayCondiciones.SdoMinimo
        && this.contractualFrom.get('CuotaMes')?.value <= this.ArrayCondiciones.SdoMaximo) {
        const cuota = +this.contractualFrom.get('CuotaMes')?.value;
        const plazo = +this.contractualFrom.get('Plazo')?.value;
        this.contractualFrom.get('ValorPlan')?.setValue(cuota * plazo);
        this.datoValorTotal = cuota * plazo;
      } else {
        this.notif.onWarning('Advertencia', 'La cuota mes tiene un monto no permitido para este producto.');
        this.contractualFrom.get('ValorPlan')?.reset();
        this.contractualFrom.get('CuotaMes')?.reset();
      }
    }
  }
  ObtenerTasa() {
    if (this.contractualFrom.get('Plazo')?.value !== ''
      && this.contractualFrom.get('Plazo')?.value !== undefined
      && this.contractualFrom.get('Plazo')?.value !== null) {
      this.loading = true;
      this.ContractualServices.ObtenerTasa(this.contractualFrom.value).subscribe(
        result => {
          this.loading = false;
          this.MapearTasa(result);
        },
        error => {
          this.loading = false;
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    }
  }
  MapearTasa(result : any) {
    this.Indicador();
        if (result.TasaEfectiva !== null) {
          const numberNominal = this.returnFormatNum(result.TasaNominal.toFixed(4));
          this.contractualFrom.get('TasaNominal')?.setValue(numberNominal + "%");
          this.datoTasaNominal = +result.TasaNominal;
          const numberEfectiva = this.returnFormatNum(result.TasaEfectiva.toFixed(4));          
          this.contractualFrom.get('TasaEfectiva')?.setValue(numberEfectiva + " %");
          this.datoTasaEfectiva = result.TasaEfectiva.toFixed(6);
          this.contractualFrom.get('IdIndicador')?.setValue(result.IdIndicador);
          this.contractualFrom.get('Puntos')?.setValue(result.Puntos);
        } else {
          if (this.contractualFrom.get('CuotaMes')?.value !== undefined
          && this.contractualFrom.get('CuotaMes')?.value !== null
          && this.contractualFrom.get('CuotaMes')?.value !== 0 ) {
              this.notif.onWarning('Advertencia', 'No existe tasa para el plazo ingresado.');
          }
        }
  }
  SeleccionPuntos() {
    this.bloquearbtnCalcular = true;
    this.contractualFrom.get('TasaEfectiva')?.reset();
    this.contractualFrom.get('TasaEfectiva')?.setValue(this.datoTasaEfectiva + "%");
    this.contractualFrom.get('TasaNominal')?.reset();
    this.contractualFrom.get('TasaNominal')?.setValue(this.datoTasaEfectiva + "%");
  }
  RecalcularTasa() {
    const valor = this.contractualFrom.get('Plazo')?.value;
    if (valor < 0 || valor === null) {
      this.contractualFrom.get('Plazo')?.setValue(0);
    }
    this.contractualFrom.get('TasaNominal')?.reset();
    this.contractualFrom.get('TasaEfectiva')?.reset();
    this.contractualFrom.get('IdIndicador')?.reset();
    this.contractualFrom.get('Puntos')?.reset();
  }
  SaldoTotal() {
    const Canje = +this.contractualFrom.get('Canje')?.value;
    const Efectivo = +this.contractualFrom.get('Efectivo')?.value;
    this.contractualFrom.get('SaldoTotal')?.setValue(Canje + Efectivo);
  }
  SumaPuntos() {
    if (this.AdicionarPuntosFrom.get('AdicionarPunto')?.value !== '--Seleccione--') {
      const Punto = +this.AdicionarPuntosFrom.get('AdicionarPunto')?.value.PuntosAdicionales;
      var TasaEfectivaSin = this.contractualFrom.get('TasaEfectiva')?.value;
      TasaEfectivaSin = TasaEfectivaSin.replace("%","");
      const Tasa = +Number(TasaEfectivaSin);
      this.contractualFrom.get('TasaEfectiva')?.setValue((Punto + Tasa).toFixed(4));
      this.ObtenerTasaNominal();
      this.contractualFrom.get('TasaEfectiva')?.setValue((Punto + Tasa).toFixed(4) + "%");
      this.AdicionarPuntosFrom.get('AdicionarPunto')?.setValue(Punto);
      this.bloquearbtnActalizar = true;
      this.bloquearbtnCalcular = false;
    } else {
      this.notif.onWarning('Advertencia', 'Debe seleccionar puntos a adicionar.');
    }
  }
  ObtenerPuntosAdicionales() {
    this.ContractualServices.ObtenerPuntosAdicionales(this.datoProducto).subscribe(
      result => {
        this.resultPuntosAdicionales = result;
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  ObtenerTasaNominal() {
    this.loading = true;
    const objectComplet = this.AdicionarPuntosFrom.value.AdicionarPunto;
    const puntosAdd = this.AdicionarPuntosFrom.value.AdicionarPunto.PuntosAdicionales;
    this.contractualFrom.get('AdicionarP')?.setValue(puntosAdd);
    var TasaEfectivaSin = this.contractualFrom.get('TasaEfectiva')?.value;
    TasaEfectivaSin = TasaEfectivaSin.replace("%", "");
    this.contractualFrom.get('TasaEfectiva')?.setValue(Number(TasaEfectivaSin));
    this.ContractualServices.getObtenerTasaNominal(this.contractualFrom.value).subscribe(
      result => {
        this.loading = false;
        this.AdicionarPuntosFrom.get('AdicionarPunto')?.setValue(objectComplet);
        const numberNominal = this.returnFormatNum((result.TasaNominal));
        this.contractualFrom.get('TasaNominal')?.setValue(numberNominal + "%");
      },
      error => {
        this.loading = false;
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  // FIN TABS

  // GENERAL
  LimpiarCampos(Datos : any) {
    if (Datos === 'IdAsesor') {
      this.contractualFrom.get('NombreAsesor')?.reset();
    } else if (Datos === 'NombreAsesor') {
      this.contractualFrom.get('IdAsesor')?.reset();
    } else if (Datos === 'IdProducto') {
      this.contractualFrom.get('DescripcionProducto')?.reset();
    } else if (Datos === 'DescripcionProducto') {
      this.contractualFrom.get('IdProducto')?.reset();
    } else if (Datos === 'NumeroDocumento') {
      this.contractualFrom.get('Nombre')?.reset();
    } else if (Datos === 'Nombre') {
      this.contractualFrom.get('NumeroDocumento')?.reset();
    } else if (Datos === 'strCodigo') {
      this.contractualFrom.get('strNombre')?.reset();
    } else if (Datos === 'strNombre') {
      this.contractualFrom.get('strCodigo')?.reset();
    } else if (Datos === 'BuscarDocumento') {
      this.contractualFrom.get('BuscarNombre')?.reset();
    } else if (Datos === 'BuscarNombre') {
      this.contractualFrom.get('BuscarDocumento')?.reset();
    }
  }
  clearFormContractual() {
    $('#select').focus().select();
    this.LimpiarItemSend();
    this.dataObjet = [];
    this.dataObjet = undefined;
    this.dataObservacion = undefined;
    this.itemsDataObejct = [];
    this.resultEstados = undefined;
    this.contractualOperacionFrom.reset();
    this.contractualFrom.reset();
    this.DebitoAutomaticoFrom.reset();
    this.AdicionarPuntosFrom.reset();
    this.AsesorFrom.reset();
    this.AutorizacionFrom.reset();
    this.CambioEstadoFrom.reset();
    this.resultCuentaNegociacion = undefined;
    this.btnGuardar = true;
    this.btnCambiarEstado = true;
    this.btnActualizar = true;
    this.btnActualizarTitulares = false;
    this.dataHistorial = [];
    this.inputEstado = false;
    this.inputCuotaMes = false;
    this.selectEstado = true;
    this.inputSinDecimal = true;
    this.selectCuenta = true;
    this.inputCuenta = false;
    this.BloquearAsociado = false;
    this.BloquearDatoTitular = false;
    this.BloquearFormaPago = false;
    this.BloquearNegociacion = false;
    this.BloquearValorTotalPlan = false;
    this.BloquearCuotaMes = false;
    this.BloquaerProducto = false;
    this.BloquearPeriodo = false;
    this.BloquearAsesorExterno = false;
    this.BloquearCuentaNegociacion = false;
    this.Bloquearliquidacion = false;
    this.BloquearSorteo = false;
    this.MostrasAlertaAsociado = false;
    this.dataHistorial = [];
    this.devolverTab(1);
    this.tab1.nativeElement.click();
    $('#saldos').removeClass('activar');
    $('#saldos').removeClass('active');
    $('#autorizados').removeClass('activar');
    $('#autorizados').removeClass('active');
    $('#historial').removeClass('activar');
    $('#historial').removeClass('active');
    $('#negociacion').addClass('activar');
    $('#negociacion').addClass('active');
  }
  LimpiarItemSend() {
    this.itemsSend = {
      NombrePlan: {},
      Cuenta: {},
      NombreApellidos: {},
      Cedula: {},
      Direccion: {},
      Telefono: {},
      Ciudad: {},
      FechaApertura: {},
      FechaVecimiento: {},
      Plazo: {},
      Cuota: {},
      TipoCuentaDestino: {},
      CuentaAhorros: {},
      Sorteo: {}
    };

    // this.itemsSend.NombrePlan = {};
    // this.itemsSend.Cuenta = {};
    // this.itemsSend.NombreApellidos = {};
    // this.itemsSend.Cedula = {};
    // this.itemsSend.Direccion = {};
    // this.itemsSend.Telefono = {};
    // this.itemsSend.Ciudad = {};
    // this.itemsSend.FechaApertura = {};
    // this.itemsSend.FechaVecimiento = {};
    // this.itemsSend.Plazo = {};
    // this.itemsSend.Cuota = {};
    // this.itemsSend.TipoCuentaDestino = {};
    // this.itemsSend.CuentaAhorros = {};
    // this.itemsSend.Sorteo = {};
  }
  clearFrom() {
    this.itemsDataObejct = [];
    this.dataObjet = undefined;
    this.contractualFrom.reset();
    this.AdicionarPuntosFrom.reset();
    this.AutorizacionFrom.reset();
    this.btnGuardar = true;
    this.btnCambiarEstado = true;
    this.btnActualizar = true;
    this.btnActualizarTitulares = false;
    this.dataHistorial = [];
    this.CambioEstadoFrom.reset();
    this.DebitoAutomaticoFrom.reset();
    this.resultCuentaNegociacion = undefined;
    this.LimpiarItemSend();

  }
  clearCampos() {
    this.contractualFrom.get('NumeroOficina')?.reset();
    this.contractualFrom.get('NombreOficina')?.reset();
    this.contractualFrom.get('NumeroDocumento')?.reset();
    this.contractualFrom.get('Nombre')?.reset();
    this.contractualFrom.get('IdProducto')?.reset();
    this.contractualFrom.get('DescripcionProducto')?.reset();
    this.contractualFrom.get('IdAsesor')?.reset();
    this.contractualFrom.get('NombreAsesor')?.reset();
    this.contractualFrom.get('DescripcionEstado')?.reset();
    this.contractualFrom.get('DescripcionOperacion')?.reset();
    this.contractualFrom.get('IdFormaPago')?.reset();
    this.contractualFrom.get('IdPeriodo')?.reset();
    this.contractualFrom.get('CuotaMes')?.reset();
    this.contractualFrom.get('plazo')?.reset();
    this.contractualFrom.get('ValorPlan')?.reset();
    this.contractualFrom.get('IdIndicador')?.reset();
    this.contractualFrom.get('Puntos')?.reset();
    this.contractualFrom.get('InteresCausado')?.reset();
    this.contractualFrom.get('Retencion')?.reset();
    this.contractualFrom.get('InteresxPagar')?.reset();
    this.contractualFrom.get('SaldoMinimo')?.reset();
    this.contractualFrom.get('InteresLiquidado')?.reset();
    this.contractualFrom.get('SaldoCanje')?.reset();
    this.contractualFrom.get('CuentaDestino')?.reset();
    this.AdicionarPuntosFrom.get('AdicionarPuntos')?.reset();
  }
  clearTitulares() {
    // this.contractualFrom.get('DocumentoTitular')?.reset();
    // this.contractualFrom.get('NombreTitular')?.reset();
    // this.contractualFrom.get('Tipo')?.reset();
    // this.contractualFrom.get('TipoFirma')?.reset();
    // this.contractualFrom.get('Observacion')?.reset();
      
    this.contractualFrom.controls["DocumentoTitular"].enable();
    this.contractualFrom.controls["NombreTitular"].enable();
    this.btnOpcionesActualizarTitulares = false;
    this.contractualFrom.get('DocumentoTitular')?.reset();
    this.contractualFrom.get('NombreTitular')?.reset();
    this.contractualFrom.get('Tipo')?.reset();
    this.contractualFrom.get('TipoFirma')?.reset();
    this.contractualFrom.get('Observacion')?.setValue('');
    this.DescriTipoFirma = true;
    this.bloquearDatosTitulares = false;
  }
    Guardarlog(object: any = null) {
        if (object == null)
            object = this.contractualFrom.value;

    this.loading = true;
    if (this.contractualOperacionFrom.get('Codigo')?.value === '10') {
      this.generalesService.GuardarlogProductos(object, this.contractualOperacionFrom.get('Codigo')?.value,
      this.contractualFrom.get('IdCuenta')?.value, this.contractualFrom.get('LngTercero')?.value, 20, this.contractualFrom.get('NumeroDocumento')?.value).subscribe(
        result => {
          this.loading = false;
        },
        error => {
          this.loading = false;
          const errorMessage = <any>error;
          console.log(errorMessage);
        });
    } else {
      this.generalesService.GuardarlogContractual(object, this.contractualOperacionFrom.get('Codigo')?.value,
        this.contractualFrom.get('IdCuenta')?.value, this.contractualFrom.get('LngTercero')?.value, 20,
        this.contractualFrom.get('NumeroDocumento')?.value,this.contractualFrom.get('IdObseCambioEstado')?.value).subscribe(
        result => {
          this.loading = false;
        },
        error => {
          this.loading = false;
          const errorMessage = <any>error;
          console.log(errorMessage);
        });
    }
  }
  VolverArriba() {
    $('html, body').animate({ scrollTop: 0 }, 'slow');
    return false;
  }
  VolverAbajo() {
    $('html, body').animate({ scrollTop: $(document).height() }, 'slow');
    return false;
  }
  BuscarAsociadoCuentaOrigen() {
    let Documento = '*';
    let Nombre = '*';
    if (this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value !== null
      && this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value !== undefined
      && this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value !== ''
    ) {
      this.DebitoAutomaticoFrom.get('NombreDebito')?.setValue('');
      Documento = this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value;
    } else if (this.DebitoAutomaticoFrom.get('NombreDebito')?.value !== null
      && this.DebitoAutomaticoFrom.get('NombreDebito')?.value !== undefined
      && this.DebitoAutomaticoFrom.get('NombreDebito')?.value !== ''
    ) {
      Nombre = this.DebitoAutomaticoFrom.get('NombreDebito')?.value;
    }
    this.loading = true;
    this.ContractualServices.BuscarAsociadoDebito(Documento, Nombre).subscribe(
      result => {
        this.loading = false;
        if (result.length === 0) {
          this.notif.onWarning('Advertencia', 'No se encontró el asociado.');
          this.resultCuentaDebito = undefined;
        } else if (result.length === 1) {
          this.DebitoAutomaticoFrom.get('DocumentoDebito')?.setValue(result[0].NumeroDocumento);
          this.DebitoAutomaticoFrom.get('NombreDebito')?.setValue(result[0].PrimerApellido + ' ' +
            result[0].SegundoApellido + ' ' + result[0].PrimerNombre + ' ' + result[0].SegundoNombre);
          this.BloquearCuentaOrigen = null;
          this.BuscarCuentaDebito();
        } else if (result.length > 1) {
        } else if (result.Mensaje !== undefined || result.Mensaje !== null) {
          if (result.Mensaje === 'Gerencia de desarrollo') {
            swal.fire({
              title: '<strong>! Advertencia ¡</strong>',
              text: '',
              icon: 'error',
              animation: false,
              html: 'Se encontraron coincidencias en la lista de <b>personas vetadas</b> por favor comuníquese con </b>'
                + result.Mensaje + '.',
              allowOutsideClick: false,
              allowEscapeKey: false
            });
          } else if (result.Mensaje === 'Oficial de cumplimiento') {
            swal.fire({
              title: '<strong>! Advertencia ¡</strong>',
              text: '',
              icon: 'error',
              animation: false,
              html: 'Se encontraron coincidencias en la lista de <b>personas vetadas</b> por favor comuníquese con </b>'
                + result.Mensaje + '.',
              allowOutsideClick: false,
              allowEscapeKey: false
            });
          }
        }
      },
      error => {
        this.loading = false;
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  BuscarCuentaDebito() {
    if (this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value !== null
      && this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value !== undefined
      && this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value !== '') {
        this.loading = true;
      this.ContractualServices.getBuscarCuentaDebito(this.DebitoAutomaticoFrom.value).subscribe(
        result => {
          this.loading = false;
          if (result.length >= 1) {
            this.resultCuentaDebito = result;
            this.DebitoAutomaticoFrom.get('IdOficinaDebito')?.setValue(result[0].IdOficina);
            this.DebitoAutomaticoFrom.get('IdProductoDebito')?.setValue(result[0].IdProducto);
            this.DebitoAutomaticoFrom.get('IdConsecutivoDebito')?.setValue(result[0].IdConsecutivo);
            this.DebitoAutomaticoFrom.get('IdDigitoDebito')?.setValue(result[0].IdDigito);
          } else if (result.Mensaje !== undefined || result.Mensaje !== null) {
            this.notif.onWarning('Advertencia', result.Mensaje);
            this.DebitoAutomaticoFrom.get('DocumentoDebito')?.reset();
            this.DebitoAutomaticoFrom.get('NombreDebito')?.reset();
            this.resultCuentaDebito = undefined;
          }
        },
        error => {
          this.loading = false;
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    }
  }
  GuardarModalDebito() {
    if (this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value !== null
      && this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value !== undefined
      && this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value !== ''
      && this.DebitoAutomaticoFrom.get('NombreDebito')?.value !== null
      && this.DebitoAutomaticoFrom.get('NombreDebito')?.value !== undefined
      && this.DebitoAutomaticoFrom.get('NombreDebito')?.value !== ''
      && this.DebitoAutomaticoFrom.get('IdCuentaOrigen')?.value !== null
      && this.DebitoAutomaticoFrom.get('IdCuentaOrigen')?.value !== undefined
      && this.DebitoAutomaticoFrom.get('IdCuentaOrigen')?.value !== ''
    ) {
      this.CerrarDebito.nativeElement.click();
      this.bloquearbtnActalizar = true;

    } else {
      this.notif.onWarning('Advertencia', 'Debe llenar los datos para guardar el débito.');
      this.bloquearbtnActalizar = false;
      this.bloquearbtnCalcular = false;
    }
  }
  CerrarModalDebito() {
    if (this.DebitoAutomaticoFrom.get('DocumentoDebito')?.value === null
      && this.DebitoAutomaticoFrom.get('NombreDebito')?.value === null
      && this.DebitoAutomaticoFrom.get('IdCuentaOrigen')?.value === null
    ) {
      this.contractualFrom.get('IdFormaPago')?.setValue('0');
      this.DebitoAutomaticoFrom.reset();
      this.bloquearbtnActalizar = false;
      this.bloquearbtnCalcular = false;
    } else {
      swal.fire({
        title: 'Infomacion no se guardó',
        text: '',
        icon: 'warning',
        confirmButtonColor: 'rgb(160,0,87)',
        allowOutsideClick: false,
        allowEscapeKey: false
      });
      this.DebitoAutomaticoFrom.reset();
      this.contractualFrom.get('IdFormaPago')?.setValue('0');
      this.bloquearbtnActalizar = false;
      this.bloquearbtnCalcular = false;
    }
  }
  ÖbtenerConvenio() {
    this.ContractualServices.getObtenerConvenioContractual(this.contractualFrom.value).subscribe(
      result => {
        if (result.length === 1) {
          this.bloquearbtnActalizar = true;
        } else if (result.Mensaje !== undefined || result.Mensaje !== null) {
          this.notif.onWarning('Advertencia', result.Mensaje);
          this.contractualFrom.get('IdFormaPago')?.setValue('0');
        } else {
          this.bloquearbtnActalizar = true;
        }
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  devolverTab(tab : number) {
    switch (tab) {
      case 1:
      this.activaNegociacion = true;
      this.activaSaldos = false;
      this.activaAutorizados = false;
      this.activaHistorial = false;
        break;
      case 2:
      this.activaNegociacion = false;
      this.activaSaldos = true;
      this.activaAutorizados = false;
      this.activaHistorial = false;
        break;
      case 3:
      this.activaNegociacion = false;
      this.activaSaldos = false;
      this.activaAutorizados = true;
      this.activaHistorial = false;
        break;
      case 4:
      this.activaNegociacion = false;
      this.activaSaldos = false;
      this.activaAutorizados = false;
      this.activaHistorial = false;
        break;
      case 5:
      this.activaNegociacion = false;
      this.activaSaldos = false;
      this.activaAutorizados = false;
      this.activaHistorial = true;
        break;
    }
  }
  LimpiaOperacion() {
    this.contractualOperacionFrom.get('Codigo')?.reset();
  }
  CambiarColor(fil : number, producto : number) {
    if (producto === 1) {

      $(".filApo_" + this.ColorAnterior1).css("background", "#FFFFFF");
      $(".filApo_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior1 = fil;
      // limpia sombreado anterior
    }
    if (producto === 2) {

      $(".filAut_" + this.ColorAnterior2).css("background", "#FFFFFF");
      $(".filAut_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior2 = fil;
      // limpia sombreado anterior
    }
  }
  // FIN GENERAL

  ValidateForm() {
    const Codigo = new FormControl('', [Validators.required]);
    const IdProducto = new FormControl('', [Validators.pattern('[0-9]*')]);
    const DescripcionProducto = new FormControl('', [Validators.required]);
    const IdAsesor = new FormControl('', [Validators.required]);
    const NombreAsesor = new FormControl('', [Validators.required]);
    const IdFormaPago = new FormControl('', [Validators.required]);
    const DescripcionFormaPago = new FormControl('', [Validators.required]);
    const DescripcionOperacion = new FormControl('', [Validators.required]);
    const NombreOficina = new FormControl('', [Validators.required]);
    const NumeroOficina = new FormControl('', [Validators.required]);
    const IdEstado = new FormControl('', []);
    const DescripcionEstado = new FormControl('', [Validators.required]);
    const NumeroDocumento = new FormControl('', [Validators.required]);
    const Nombre = new FormControl('', [Validators.required]);
    const Clase = new FormControl('', [Validators.required]);
    const NumeroOficinaAsociado = new FormControl('', [Validators.required]);
    const NombreOficinaAsociado = new FormControl('', [Validators.required]);
    const DocumentoTitular = new FormControl('', [Validators.pattern('[0-9]*')]);
    const NombreTitular = new FormControl('', []);
    const Efectivo = new FormControl('', []);
    const Canje = new FormControl('', []);
    const SaldoInicial = new FormControl('', []);
    const ValorRevalorizacion = new FormControl('', []);
    const CuotaMes = new FormControl('', [Validators.pattern('[0-9]*')]);
    const ValorPlan = new FormControl('', []);
    const InteresCausado = new FormControl('', []);
    const Retencion = new FormControl('', []);
    const InteresxPagar = new FormControl('', []);
    const SaldoMinimo = new FormControl('', []);
    const InteresLiquidado = new FormControl('', []);
    const ValorSorteo = new FormControl('', []);
    const InteresxPuntos = new FormControl('', []);
    const Sorteo = new FormControl('', [Validators.pattern('[0-9]*')]);
    const FechaVencimiento = new FormControl('', []);
    const FechaRevalorizacion = new FormControl('', []);
    const FechaApertura = new FormControl('', []);
    const FechaUltimaTrans = new FormControl('', []);
    const FechaCancelacion = new FormControl('', []);
    const Plazo = new FormControl('', [Validators.required, Validators.pattern('[0-9]*')]);
    const IdDigito = new FormControl('', [Validators.pattern('[0-9]*')]);
    const IdConsecutivo = new FormControl('', [Validators.pattern('[0-9]*')]);
    const IdProductoCuenta = new FormControl('', [Validators.pattern('[0-9]*')]);
    const IdOficina = new FormControl('', [Validators.pattern('[0-9]*')]);
    const Titulares = new FormControl('', []);
    const ObservacionCuenta = new FormControl('', []);
    const ObservacionesCuenta = new FormControl('', []);
    const BuscarDocumento = new FormControl('', [Validators.pattern('[0-9]*')]);
    const BuscarNombre = new FormControl('', []);
    const IdIndicador = new FormControl('', []);
    const Puntos = new FormControl('', []);
    const IdPeriodo = new FormControl('', [Validators.required]);
    const SaldoTotal = new FormControl('', []);
    const IdLiquidacion = new FormControl('', [Validators.required]);
    const BuscarDocumentoCuenta = new FormControl('', []);
    const BuscarNombreCuenta = new FormControl('', []);
    const strCodigo = new FormControl('', [Validators.pattern('[0-9]*')]);
    const strNombre = new FormControl('', []);
    const strTipo = new FormControl('', []);
    const IdCuentaDestino = new FormControl('', []);
    const IdCuenta = new FormControl('', []);
    const IdUsuarioSGF = new FormControl('', []);
    const TasaNominal = new FormControl('', [Validators.required]);
    const TasaEfectiva = new FormControl('', [Validators.required]);
    const CuentaDestino = new FormControl('', []);
    const lngTercero = new FormControl('', []);
    const lngCuenta = new FormControl('', []);
    const Observacion = new FormControl('', []);
    const IdTipoObservacion = new FormControl('', []);
    const IdAsesorExterno = new FormControl('', []);
    const IdRelacionTipo = new FormControl('', []);
    const Usuario = new FormControl('', []);
    const Clave = new FormControl('', []);
    const DocumentoDebito = new FormControl('', []);
    const NombreDebito = new FormControl('', []);
    const IdCuentaOrigen = new FormControl('', []);
    const AdicionarPunto = new FormControl('', []);
    const IdOficinaDebito = new FormControl('', []);
    const IdProductoDebito = new FormControl('', []);
    const IdConsecutivoDebito = new FormControl('', []);
    const IdDigitoDebito = new FormControl('', []);
    const DireccionContractual = new FormControl('', []);
    const TelefonoContractual = new FormControl('', []);
    const CiudadContractual = new FormControl('', []);
    const IdObseCambioEstado = new FormControl('', []);
    const Tipo = new FormControl('', []);
    const TipoFirma = new FormControl('', []);
    const Cuenta = new FormControl('', []);
    const LngTercero = new FormControl('', []);
    const DocumentoAsesor = new FormControl('', []);
    const TipoDocumento = new FormControl('', []);
    const AdicionarP = new FormControl('', []);
    const NroTitulo = new FormControl('', [Validators.required, Validators.pattern('[0-9]*')]);
    const NroTituloAnterior = new FormControl('', []);

    this.contractualFrom = new FormGroup({
      IdProducto: IdProducto,
      DescripcionProducto: DescripcionProducto,
      IdAsesor: IdAsesor,
      NombreAsesor: NombreAsesor,
      IdFormaPago: IdFormaPago,
      DescripcionFormaPago: DescripcionFormaPago,
      DescripcionOperacion: DescripcionOperacion,
      NombreOficina: NombreOficina,
      NumeroOficina: NumeroOficina,
      IdEstado: IdEstado,
      DescripcionEstado: DescripcionEstado,
      NumeroDocumento: NumeroDocumento,
      Nombre: Nombre,
      Clase: Clase,
      NumeroOficinaAsociado: NumeroOficinaAsociado,
      NombreOficinaAsociado: NombreOficinaAsociado,
      Sorteo: Sorteo,
      IdDigito: IdDigito,
      IdConsecutivo: IdConsecutivo,
      IdProductoCuenta: IdProductoCuenta,
      IdOficina: IdOficina,
      BuscarDocumento: BuscarDocumento,
      BuscarNombre: BuscarNombre,
      strCodigo: strCodigo,
      strNombre: strNombre,
      IdCuenta: IdCuenta,
      IdUsuarioSGF: IdUsuarioSGF,
      DocumentoTitular: DocumentoTitular,
      NombreTitular: NombreTitular,
      Efectivo: Efectivo,
      Canje: Canje,
      SaldoInicial: SaldoInicial,
      ValorRevalorizacion: ValorRevalorizacion,
      CuotaMes: CuotaMes,
      ValorPlan: ValorPlan,
      InteresCausado: InteresCausado,
      Retencion: Retencion,
      InteresxPagar: InteresxPagar,
      SaldoMinimo: SaldoMinimo,
      InteresLiquidado: InteresLiquidado,
      ValorSorteo: ValorSorteo,
      InteresxPuntos: InteresxPuntos,
      FechaVencimiento: FechaVencimiento,
      FechaRevalorizacion: FechaRevalorizacion,
      FechaApertura: FechaApertura,
      FechaUltimaTrans: FechaUltimaTrans,
      FechaCancelacion: FechaCancelacion,
      Plazo: Plazo,
      Titulares: Titulares,
      ObservacionCuenta: ObservacionCuenta,
      ObservacionesCuenta: ObservacionesCuenta,
      IdIndicador: IdIndicador,
      Puntos: Puntos,
      IdPeriodo: IdPeriodo,
      SaldoTotal: SaldoTotal,
      IdLiquidacion: IdLiquidacion,
      BuscarDocumentoCuenta: BuscarDocumentoCuenta,
      BuscarNombreCuenta: BuscarNombreCuenta,
      IdCuentaDestino: IdCuentaDestino,
      TasaNominal: TasaNominal,
      TasaEfectiva: TasaEfectiva,
      CuentaDestino: CuentaDestino,
      IdAsesorExterno: IdAsesorExterno,
      IdRelacionTipo: IdRelacionTipo,
      DireccionContractual: DireccionContractual,
      TelefonoContractual: TelefonoContractual,
      CiudadContractual: CiudadContractual,
      IdObseCambioEstado: IdObseCambioEstado,
      Tipo: Tipo,
      TipoFirma: TipoFirma,
      Observacion: Observacion,
      Cuenta: Cuenta,
      LngTercero: LngTercero,
      DocumentoAsesor: DocumentoAsesor,
      TipoDocumento: TipoDocumento,
      AdicionarP: AdicionarP,
      NroTitulo: NroTitulo,
      NroTituloAnterior: NroTituloAnterior

    });
    this.contractualOperacionFrom = new FormGroup({
      Codigo: Codigo,
    });
    this.CambioEstadoFrom = new FormGroup({
      lngTercero: lngTercero,
      lngCuenta: lngCuenta,
      IdTipoObservacion: IdTipoObservacion
    });
    this.AsesorFrom = new FormGroup({
      strCodigo: strCodigo,
      strNombre: strNombre,
      strTipo: strTipo
    });
    this.AutorizacionFrom = new FormGroup({
      Usuario: Usuario,
      Clave: Clave
    });
    this.DebitoAutomaticoFrom = new FormGroup({
      DocumentoDebito: DocumentoDebito,
      NombreDebito: NombreDebito,
      IdCuentaOrigen: IdCuentaOrigen,
      IdConsecutivoDebito: IdConsecutivoDebito,
      IdOficinaDebito: IdOficinaDebito,
      IdProductoDebito: IdProductoDebito,
      IdDigitoDebito: IdDigitoDebito
    });
    this.AdicionarPuntosFrom = new FormGroup({
      AdicionarPunto: AdicionarPunto,
    });
  }
}