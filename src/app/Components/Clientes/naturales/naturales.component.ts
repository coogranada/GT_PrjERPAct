import { FormGroup, Validators, FormControl } from '@angular/forms';
import { Component, OnInit, ViewChild, ElementRef, AfterViewInit, EventEmitter, Output, Compiler, OnDestroy } from '@angular/core';
import { ClientesGetListService } from '../../../Services/Clientes/clientesGetList.service';
import { SafeHtml, DomSanitizer } from '@angular/platform-browser';
import { ClientesModel } from '../../../Models/Clientes/clientes.model';
import { AsociadosModel } from '../../../Models/Clientes/asociados.model';
import { ClientesService } from '../../../Services/Clientes/clientes.service';
import { OperacionesService } from '../../../Services/Maestros/operaciones.service';
import { SegmentosModel } from '../../../Models/Clientes/segmentos.model';
import Swal from 'sweetalert2';
import { formatDate, DatePipe } from '@angular/common';
import { OperacionesModel } from '../../../Models/Maestros/operaciones.model';
import { CambioEstadoModel } from '../../../Models/Clientes/cambioEstado';
import { LogSegurosModel } from '../../../Models/Clientes/logSeguros.model';
import { MarcarDesmarcarPPESModel } from '../../../Models/Clientes/marcadesmarcaPPES.model';
import { ObservacionesService } from '../../../Services/Maestros/observaciones.service';
import moment from 'moment';
import { MotivoRetiroModel, EnvioMotivoModel } from '../../../Models/Clientes/motivoRetiro.model';
import { SolicitudReingresoModel } from '../../../Models/Clientes/solicitudReingreso.model';
import { GeneralesService } from '../../../Services/Productos/generales.service';
import { NgxLoadingComponent, ngxLoadingAnimationTypes } from 'ngx-loading';
import { CambioRelacionModel, CambioTipoDocumentoModel, CambioNombresApellidosModel } from '../../../Models/Clientes/cambioRelacion.model';
import { ModuleValidationService } from '../../../Services/Enviroment/moduleValidation.service';
import { RequiredData } from '../../../Models/Generales/RequiredData.model';
import { SolicitudServiciosComponent } from '../../Formatos-impresion/solicitud-servicios/solicitud-servicios.component';
import { AppComponent } from '../../../app.component';
import { LoginService } from '../../../Services/Login/login.service';
import { Router } from '@angular/router';
import { CuentaModel } from '../../../Models/Productos/cuenta.model';
import { TrasavilidadAsociadoComponent } from './Trasavilidad/trasavilidad-asociado/trasavilidad-asociado.component';
import { RecursosGeneralesService } from '../../../Services/Utilidades/recursosGenerales.service';
import { ContactoModelNatu } from '../../../Models/Clientes/Juridicos/ContactoModel';
import {ocupacionConygue, metodosComoConocio, ActivosAll, TipoContratos, TipoActivos, Cardinales, Divisas, Inmueble, Vias} from '../../../../environments/Maestros.Naturales';
import { OficinasService } from '../../../Services/Maestros/oficinas.service';;
import { NgxToastService } from 'ngx-toast-notifier';

declare var $: any;
const PrimaryWhite = 'rgb(13,165,80)';
const SecondaryGrey = 'rgb(13,165,80,0.7)';
@Component({
  selector: 'app-naturales',
  templateUrl: './naturales.component.html',
  styleUrls: ['./naturales.component.css'],
  providers: [ClientesGetListService, ClientesService, OperacionesService,ObservacionesService, GeneralesService, ModuleValidationService, LoginService,OficinasService],
  standalone : false
})


export class NaturalesComponent implements OnInit, OnDestroy  { 
  //value :any;
  private _colorApi: any;
  public get colorApi(): any {
    return this._colorApi;
  }
  public set colorApi(value: any) {
    this._colorApi = value;
  }
  //#region Declaracion de varaibles
  private CodModulo = 11;
  neverShow = false;
  myModel = true;
  @ViewChild('ngxLoading', { static: false }) ngxLoadingComponent!: NgxLoadingComponent;
  @ViewChild('contactoPpal', { static: true }) private contactoPpal!: ElementRef;
  @ViewChild('tratamientodatos', { static: true }) private tratamientoDatos!: ElementRef;
  @ViewChild('CCdocumento', { static: true }) private CCdocumento!: ElementRef;
  @ViewChild('BuscarAsociados', { static: true }) private BuscarAsociados!: ElementRef;
  @ViewChild('BuscarAsociadosLaboral', { static: true }) private BuscarAsociadosLaboral!: ElementRef;
  @ViewChild('BuscarAsesores', { static: true }) private BuscarAsesores!: ElementRef;
  @ViewChild('BuscarAsesoresPpal', { static: true }) private BuscarAsesoresPpal!: ElementRef;
  @ViewChild('AbrirEmpresa', { static: true }) private AbrirEmpresa!: ElementRef;
  @ViewChild('AbrirEmpresaLaboral', { static: true }) private AbrirEmpresaLaboral!: ElementRef;
  @ViewChild('AbrirEmpresaComerFinanciera', { static: true }) private AbrirEmpresaComerFinanciera!: ElementRef;
  @ViewChild('AbrirEps', { static: true }) private AbrirEps!: ElementRef;
  @ViewChild('AbrirServicios', { static: true }) private abrirServicios!: ElementRef;
  @ViewChild('AbrirRetiro', { static: true }) private abrirRetiro!: ElementRef;
  @ViewChild('AbrirLaboral', { static: true }) private AbrirLaboral!: ElementRef;
  @ViewChild('AbrirCiudadesNaciBasico', { static: true }) private AbrirCiudadesNaciBasico!: ElementRef;
  @ViewChild('AbrirCiudadesExpeBasico', { static: true }) private AbrirCiudadesExpeBasico!: ElementRef;
  @ViewChild('AbrirCiudadesContacto', { static: true }) private AbrirCiudadesContacto!: ElementRef;
  @ViewChild('abrirImpresionServicios', { static: true }) private AbrirImpresionServicios!: ElementRef;
  @ViewChild('AbrirCorrespondencia', { static: true }) private AbrirCorrespondencia!: ElementRef;
  @ViewChild('CerrarCorrespondencia', { static: true }) private CerrarCorrespondencia!: ElementRef;
  @ViewChild('cerrarRetiro', { static: true }) private cerrarRetiro!: ElementRef;
  @ViewChild('botonSiguiente', { static: true }) private botonSiguiente!: ElementRef;
  @ViewChild('botonBasicoSiguiente', { static: true }) private botonBasicoSiguiente!: ElementRef;
  @ViewChild('botonFinancieroSiguiente', { static: true }) private botonFinancieroSiguiente!: ElementRef;
  @ViewChild('botonFinancieroAnterior', { static: true }) private botonFinancieroAnterior!: ElementRef;
  @ViewChild('botonContactoSiguiente', { static: true }) private botonContactoSiguiente!: ElementRef;
  @ViewChild('botonActivosSiguiente', { static: true }) private botonActivosSiguiente!: ElementRef;
  @ViewChild('botonActivosAnterior', { static: true }) private botonActivosAnterior!: ElementRef;
  @ViewChild('botonConyugueSiguiente', { static: true }) private botonConyugueSiguiente!: ElementRef;
  @ViewChild('botonLaboralSiguiente', { static: true }) private botonLaboralSiguiente!: ElementRef;
  @ViewChild('botonLaboralAnterior', { static: true }) private botonLaboralAnterior!: ElementRef;
  @ViewChild('botonReferenciaSiguiente', { static: true }) private botonReferenciaSiguiente!: ElementRef;
  @ViewChild('botonReferenciaAnterior', { static: true }) private botonReferenciaAnterior!: ElementRef;
  @ViewChild('botonEntrevistaSiguiente', { static: true }) private botonEntrevistaSiguiente!: ElementRef;
  @ViewChild('botonHistorial', { static: true }) private botonHistorial!: ElementRef;
  @ViewChild('AnteriorTab', { static: true }) private AnteriorTab!: ElementRef;
  @ViewChild('openSolicitudRetiro', { static: true }) private openSolicitudRetiro!: ElementRef;
  @ViewChild('openSolicitudRetiroReimprimir', { static: true }) private openSolicitudRetiroReimprimir!: ElementRef;
  @ViewChild('openMethodChild', { static: true }) openChildServicio!: SolicitudServiciosComponent;
  @ViewChild('AbrirSolicitudGestion', { static: true }) private AbrirSolicitudGestion!: ElementRef;
  @ViewChild('AppComponent', { static: true}) appComponent!: AppComponent;
  @ViewChild('trasabilidadComponent', { static: false }) TrasavilidadAsociadoComponent!: TrasavilidadAsociadoComponent;
  @ViewChild('AlertaModal', { static: true }) private AlertaModal!: ElementRef;
  @ViewChild('ModalActualizaFecha', { static: true }) private ModalActualizaFecha!: ElementRef;
  @ViewChild('ModalCancelarSolicitud', { static: true }) private ModalCancelarSolicitud!: ElementRef;
  public condicion = false;
  CargarServicios = 0;
  CargarServiciosOn = false;
  arrayNatural = JSON.stringify({
    'Prop1InternoList': [1, 1, 1]
  });
  motivoEnvioJson: any;
  motivoEnvioRetiroJson: any;
  documentoConsultar: any;
  infoMenor: any;
  idTerceroConsulta: any;
  IdSolicitud: any;
  esReimpresion = false;
  public objMotivo = new MotivoRetiroModel();
  public objMotivoEnvio = new EnvioMotivoModel();
  public ColorAnterior1: any;
  public ColorAnterior2: any;
  public ColorAnterior3: any;
  public ColorAnterior4: any;
  public ColorAnterior5: any;
  public ColorAnterior6: any;
  public ColorAnterior7: any;
  public ColorAnterior8: any;
  public ColorAnterior9: any;
  public ColorAnterior10: any;
  public ColorAnterior11: any;
  public ColorAnterior12: any;
  public ColorAnterior13: any;
  public ColorAnterior14: any;
  public ColorAnterior15: any;
  public ColorAnterior16: any;
  public ColorAnterior17: any;

  //#endregion

  OperacionMarcada : any;
  ProEstado: any;
  ProRelacion: any;
  ProIdTutor: any;
  ProNomTutor: any;
  ProTipoD: any;
  ProDocumento: any;
  ProPrimerNombre: any;
  ProSegundoNombre: any;
  ProPrimerApellido: any;
  ProSegundoApellido: any;
  ProIdAsesorE: any;
  ProOficina: any;
  ProAsesor: any;
  ProDescripcionOpe: any;


  //#region  formularios
  public basicosFrom!: FormGroup;
  public basicoSave!: FormGroup;
  public financieroFrom!: FormGroup;
  public contactoForm!: FormGroup;
  public activoForm!: FormGroup;
  public laboralForm!: FormGroup;
  public laboralFormEdit!: FormGroup;
  public referenciaForm!: FormGroup;
  public entrevistaForm!: FormGroup;
  public entrevistaFormSet!: FormGroup;
  public entrevistaSave!: FormGroup;
  public segurosForm!: FormGroup;
  public segurosFormSet!: FormGroup;
  public aseguradosForm!: FormGroup;
  public conyugueForm!: FormGroup;
  public relacionPepsForm!: FormGroup;
  public relacionPepsSave!: FormGroup;
  public financieroSetForm!: FormGroup;
  public financieroSave!: FormGroup;
  public contactoSave!: FormGroup;
  public ContactoFormSet!: FormGroup;
  public activoSave!: FormGroup;
  public ActivoFormSet!: FormGroup;
  public conyugueFormSet!: FormGroup;
  public conyugueSave!: FormGroup;
  public laboralFormSet!: FormGroup;
  public laboralSave!: FormGroup;
  public referenciaFormSet!: FormGroup;
  public referenciaSave!: FormGroup;
  public serviciosFrom!: FormGroup;
  public vetadosFrom!: FormGroup;
  public tratamientoSave!: FormGroup;
  public segurosSave!: FormGroup;
  public tratamientoForm!: FormGroup;
  public coberturaSave!: FormGroup;
  public coberturaForm!: FormGroup;
  public terceroSave!: FormGroup;
  public basicosFormSet!: FormGroup;
  public logSegurosForm!: FormGroup;
  public logSegurosSave!: FormGroup;
  public asesorForm!: FormGroup;
  public BasicosEdit!: FormGroup;
  public segurosEdit!: FormGroup;
  public FormCambioEstado!: FormGroup;
  public patrimonioForm!: FormGroup;
  public fechasForm!: FormGroup;
  public solicitudRetiroForm!: FormGroup;
  public Correspondenciasform!: FormGroup;
  //#endregion

  //#region Variables
  public oficinaVieja: any;
  public objOficinaVieja: any;
  public ApeViejo: any;
  public segApeViejo: any;
  public PriVNomViejo: any;
  public SegNomViejo: any;
  public conyugueViejo = null;
  public MarcoDebito = false;
  public Modulo = this.CodModulo;
  public DocumentoSolicitud : string = "";
  public CuentaSolicitud = new CuentaModel();
  public cambioRelacionModel = new CambioRelacionModel();
  public cambioTipoDocumentoModel = new CambioTipoDocumentoModel();
  public cambioNombresApellidosModel = new CambioNombresApellidosModel();
  public cambioCivil = false;
  public loading = false;
  public ngxLoadingAnimationTypes = ngxLoadingAnimationTypes;
  public primaryColour = PrimaryWhite;
  public secondaryColour = SecondaryGrey;
  public cambioEmpleo = false;
  public blockBtnBasico  : boolean | null = false;
  public mostrarBtn = false;
  public mostrarBtnTercero = false;
  btnTratamientoMarcar = false;
  estadoCivilSeleccionado: any;
  viviendaSeleccionada: any;
  yaIngreso = false;
  tipoCliente: any;
  vlrComercialAnterior = 0;
  mostrarAlertaConvenioMalo = false;
  relacionAnterior: any;
  estadoAnterior: any;
  clienteAnterior: any;
  tipoDocumentoAnterior: any;
  documentoAnterior: any;
  oAsterisco : boolean | null = true;
  btnBuscar = true;
 
  selectValue = 0;
  id: any;
  marcoNo = null;
  operacionEscogida = '';
  operacion: any;
  CedulaAsesor = '';
  NombreAsesor = '';
  CedulaAsesorExt = '';
  NombreAsesorExt = '';
  nombreCambiante = 'Nombre';
  nitCambiante = 'Nit';
  nitCambianteModal = 'Nit';
  EsProveedor = false;
  descripcionNumero = false;
  descripcionNumeroActivo = false;
  validarfianciero = 0;
  antiguedadStr: any;
  bloquearClick : boolean | null = null;
  porqueConsultaGoblal = false;
  mostrarReimprimir = false;
  oculatObligatorio = true;
  MostrarOtroActivo = false;
  oculatObligatorioTercero = true;
  oculatObligatorioTerceroProveedor = true;
  tieneEmpleo = false;
  activedServicio = false;
  activedBasico = false;
  activedFinan = false;
  activedConta = false;
  activedActivo = false;
  activedConyu = false;
  activedLabor = false;
  activeRefe = false;
  activeEntre = false;
  activeSeguro = false;
  activeFecha = false;
  BlockVinculacion : boolean | null = true;
  formBuscarLockedExt : boolean | null = true;
  BloqueoArriendo : boolean | null= true;
  mostrarOficina : boolean | null = false;
  porConsultaglobal : boolean | null = false;
  porConsultaglobalModal : boolean | null = false;
  MostrarEmpresaDescripcion : boolean | null = false;
  MostrarEmpresaBuscar : boolean | null = true;
  btnGuardarOculto: boolean | null  = false;
  siguienteOculto : boolean | null = true;
  btnOcultoBuscar : boolean | null = true;
  btnMarcarEntrevista : boolean | null = false;
  btnTratamiento : boolean | null = false;
  mostrarSolicitud : boolean | null = false;
  variableGlobalTrue: any;
  variableGlobalFalse = null;
  mostrarPorQueCobertura : boolean | null = false;
  mostrarObligacion : boolean | null = false;
  mostrarSoloNumeros : boolean | null = true;
  EnableUpdateContacto : boolean | null = false;
  EnableUpdatePatrimonio : boolean | null = false;
  EnableUpdateConyugue : boolean | null = false;
  EnableUpdateLaboral: boolean | null  = false;
  EnableUpdateReferencia : boolean | null = false;
  EnableUpdateEntrevista : boolean | null = false;
  EnableUpdateSeguros : boolean | null = false;
  infoArrendador : boolean | null = false;
  motrarErrorDeudor : boolean | null = false;
  motrarErrorCredito : boolean | null = false;
  ocultarLaboral : boolean | null = true;
  ocultarLaboralDos : boolean | null = false;
  EditarFrom : boolean | null = false;
  public validar : boolean | null = true;

  MostrarParenFami : boolean | null =  false;
  MostrarParenPers : boolean | null =  false;

  entrePeps = null;
  entreOtraActividad = null;
  entreMonedaExtrangera = null;
  entreCuentaExtrangera = null;
  entreActividaExtrangera = null;
  preguntaPeps = false;
  preguntaOtraActividad = false;
  preguntaMonedaextrangera = false;
  PreguntaActiextrangera = false;
  preguntaCuentaExtragera = false;

  tratamientoConsulta: any;
  fechaCreacion: any;
  fechaModificacion: any;
  fechaRetiro: any;
  empleoAnterior: any;
  estadoCivilAnterior: any;
  viviendaAnterior: any;
  public rangeChanged : any ;
  indexSeguro = null;
  indexFinanciero = null;
  indexContacto = null;
  indexActivo = null;
  indexLaboral : any = null;
  indexReferencia : any = null;
  indexConyugue : any = null;
  dataLocal: any;
  dataGenNit: any;
  dataTercero: any;
  dataEstadoCivil: any;
  dataTipoCliente: any;
  dataTipoDocumento: any;
  dataTipoDocumentoConyugue: any;
  dataCiudad: any;
  dataCiudadExp: any;
  dataPais: any;
  dataDepartamentos:any;
  dataBarrios:any;
  dataCiudadFiltro: any[] = [];
  dataBarrio: any;
  dataTipoVivienda: any;
  dataTipoLocal: any;
  dataTipoEmpleo: any;
  dataTipoOcupacion: any;
  dataMarcas: any;
  dataTipoOcupacionConyugue: any;
  dataMotivoIngreso: any;
  dataNivelEstudio: any;
  dataProfesion: any;
  dataGeneros: any;
  dataActividad: any;
  dataUser: any;
  dataOperaciones: any;
  dataCategoria: any;
  dataConcepto: any;
  dataContacto: any;
  dataConceptoAll: any;
  datatratamientoLog: any[] = [];
  dataRetiroLog: any[] = [];
  dataReingresoLog: any[] = [];
  dataPepsLog: any[] = [];
  selectedItem: any = '';
  inputChanged: any = '';
  dataVias: any;
  dataLetras: any;
  dataCardinal: any;
  dataImuebles: any;
  dataActivos: any;
  dataActivosAll: any;
  dataConyuge: any;
  dataTipoActivos: any;
  dataPeriodos: any;
  dataContratos: any;
  dataParentescos: any;
  dataParentescosChange: any[] = [];
  dataParentescosPeps: any;
  dataReferencias: any;
  dataSeguros: any[] = [];
  dataEstadosSeguro: any;
  dataCargos: any;
  dataPreguntas: any;
  dataOficinas: any;
  dataAsesor: any;
  dataAsesorPapl: any;
  dataEps: any;
  dataEmpresa: any;
  dataCorrespondencia: any;
  infoTutor: any;
  tipoMatricula: any;
  dataProfesionMapper: any;
  dataPreguntasHijas: any[] = [];
  dataPreguntasHijasRes: any[] = [];
  dataPreguntasHijasOther: any[] = [];
  datapreguntasHijasEven: any[] = [];
  DescripcionDireccion : any;
  DescripcionDireccionIds : any;
  public DireccionsSeleccionada: any;
  public PaisMapper: any;
  public DepartMapper: any;
  public CiudadMapper: any;
  public BarrioMapper: any;

  public PaiseCargaInicial: any;
  public DepaCargaInicial: any;  
  public DepaCargaInicialExp: any;
  public DepaCargaInicialNaci: any;
  public CiuCargaInicial: any;

  public PaisMapperAct: any;
  public DepartMapperAct: any;
  public CiudadMapperAct: any;

  public PaisMapperCont: any;
  public DepartMapperCont: any;
  public CiudadMapperCont: any;

  public PaisMapperExp: any;
  public DepartMapperExp: any;
  public CiudadMapperExp: any;

  public PaisMapperNac: any;
  public DepartMapperNac: any;
  public CiudadMapperNac: any;

  public PaisMapperRefe: any;
  public DepartMapperRefe: any;
  public CiudadMapperRefe: any;

  public JuridicoEdit: any;
  public contactoModel = new ContactoModelNatu();
  public contactoModelList: ContactoModelNatu[] = [];

  public dataDepartamentosAll: any;
  public dataCiudadesAll: any;
  public dataPaisesAll: any;
  public dataBarriosAll: any;

  public dataDepartamentoNaci: any;
  public dataCiudadesNaci: any;
  public dataPaisesNaci: any;

  public dataDepartamentoExp: any;
  public dataCiudadesExp: any;
  public dataPaisesExp: any;

  public DireccionSeleccionada : any;
  public Via = '';
  public Numero = '';
  public Letra = '';
  public NumeroDos = '';
  public LetraDos = '';
  public Cardinal = '';
  public CardinalDos = '';
  public NumeroTres = '';
  public inmueble = '';
  public NumeroCuatro = '';
  public Observacion = '';
  public IdVia = '';
  public IdLetra = '';
  public IdLetraDos = '';
  public IdCardinal = '';
  public IdCardinalDos = '';
  public Idinmueble = '';

  inputTipoDocumento = true;
  selectTipoDocumento = false;

  dataDivisas: any;
  dataPaises: any;
  dataConvenio: any;
  dataVetados: any;
  dataMotivos: any;
  dataObservacion: any;
  indexContactos: any;
  LabelHipoPigno = '';
  config2: any = { 'sourceField': ['Nombre'] };
  dataEstado: any;
  dataEmpresas: any;
  dataEmpresasAll: any;
  dataAsociados: any | any[]  | null = null;
  disableForm : boolean | null = true;
  disableFormPA : boolean | null = true;
  disableFormSA : boolean | null = true;
  disableFormPN : boolean | null = true;
  disableFormSN : boolean | null = true;
  disableFormEps : boolean | null = true;
  disableFormCedula : boolean | null = true;
  disableFormPpes : boolean | null = true;
  disableFormPersonas : boolean | null = true;
  disableFormNumHijos : boolean | null = true;
  disbaleFromTutor : boolean | null = true;
  disableFormEstado : boolean | null = true;
  disbaleFromDocumento : boolean | null = true;
  disableFormProfesion : boolean | null = true;
  disableFromTipoDocumento : boolean | null = true;
  disableFromTipoCliente : boolean | null = true;
  disableFormNumeroDocumento : boolean | null = true;
  disbaleOficina : boolean | null = true;
  disableFromPEPS : boolean | null = true;
  disableFormBtnEmpresa : boolean | null = true;
  disablePEPS : boolean | null = true;
  formTutorOculto : boolean | null = false;
  disableNombreTutor : boolean | null = true;
  disableAmaCasa : boolean | null = false;
  disableFormSegmento : boolean | null = true;
  disableLaboralEmpresa : boolean | null = true;
  disableEmail : boolean | null = true;
  disableUbicacion : boolean | null = false;
  disableAddress : boolean | null = true;
  disableDireccion : boolean | null = true;
  disablePhone : boolean | null = true;
  disableCelular : boolean | null = true;
  disableControlsVehiculo = false;
  disableAfavor : boolean | null = true;
  disablePeriodo : boolean | null = null;
  disableConvenio : boolean | null = null;
  disableAsesor : boolean | null = true;
  disableAsesorPpal : boolean | null = true;
  disablePersonasACargo : boolean | null = true;
  disableMetodo : boolean | null = true;
  disablePagoConvenio : boolean | null = true;
  disablePagoConvenioInput : boolean | null = true;
  disableDetalleOcupa : boolean | null = true;
  disableClean : boolean | null = true;
  disableTabServicio : boolean | null = false;
  disableTabBasico : boolean | null = false;
  disableTabFinanciero : boolean | null = false;
  disableTabContacto : boolean | null = false;
  disableTabActivo : boolean | null = false;
  disableTabConyugue : boolean | null = false;
  disableTabLaboral : boolean | null = false;
  disableTabReferencia : boolean | null = false;
  disableTabEntrevista : boolean | null = false;
  disableTabSeguro : boolean | null = false;

  ocultarDireccion : boolean | null = true;
  ocultarDireccionEdit : boolean | null = true;
  ocultarDireccionEditActivo : boolean | null = true;
  ocultardireccionActivo : boolean | null = true;
  direccionEdit: any;
  direccionEditActivo: any;
  OcultarSeguro : boolean | null = true;
  descripcionObligatoria : boolean | null = false;
  serviciosOcultos : boolean | null = true;
  formBuscarLocked : boolean | null = null;
  formBuscarLockedCreacion : boolean | null = false;
  bloquearCampoDir : boolean | null = null;
  bloquearCampoDirActivo : boolean | null = null;
  formLockedPersonNatura : boolean | null = null;
  BlockFecha : boolean | null = null;
  formPasivoLocked : boolean | null = true;
  formLockedHipoPigno : boolean | null = true;
  formBuscarLockedPpal : boolean | null = null;
  formLockedReconocimiento : boolean | null = null;
  formLockedRecursos : boolean | null = null;
  formEditarLocked : boolean | null = null;
  formBuscarLockedConyugue : boolean | null = null;
  BlockMonto : boolean | null = null;
  BlockEstado : boolean | null = null;
  Blockseguro : boolean | null = null;
  BlockCategoria : boolean | null = null;
  BlockTipoContacto : boolean | null = null;
  BlockActivo : boolean | null = null;
  BlockReferencia : boolean | null = null;
  BlockServicios : boolean | null = true;
  BlockServiciosInput : boolean | null = null;
  BlockDeudor : boolean | null = null;
  BlockInputService : boolean | null = null;
  BlockInputs : boolean | null = true;
  blockTratamiento : boolean | null = true;
  blockTratamientoFecha : boolean | null = true;
  blockDebitoAtomatico : boolean | null = true;
  blockRefeBtn : boolean | null = false;
  bloquearFecha : boolean | null = true;
  AsessorNecesario : boolean | null = true;
  AsessorNecesarioMarca : boolean | null = null;
  DescriObservacion : boolean | null = true;
  ObservacionRetiro : boolean | null = false;
  MostrarErrorCelular : boolean | null = false;
  MostrarErrorContacto : boolean | null = false;
  MostrarFechaTratamiento : boolean | null = false;
  mostrarCobertura : boolean | null = false;
  mostarErrorMotivoDescripcion : boolean | null = false;
  validarSegmentacion = false;
  direccionArray: string | null = "";
  via: string = "";
  numero: string = "";
  letra: string = "";
  numeroDos: string = "";
  letraDos: string = "";
  cardi: string = "";
  cardiDos: string = "";
  numeroTres: string = "";
  complement: string = "";
  imuebles: string = "";
  numeroCuatro: string = "";
  MostrarAsesorExterno :boolean | null = false;
  ocultarEditar :boolean | null= true;
  refFamiliar :boolean | null= false;
  refComercial :boolean | null = false;
  refFinanciera :boolean | null= false;
  disbaleBusqueda :boolean | null = true;
  DescripcionBtn = 'Siguiente';
  DescripcionBtnTratamiento = 'Guardar';
  MILISENGUNDOS_POR_DIA = 1000 * 60 * 60 * 24;
  DigitosContacto = 0;
  moduloLocal = 11;
  private operacionesModel: OperacionesModel;
  private LogSeguroModel: any;
  public BasicoBlock = true;
  public FinancieroBlock = true;
  public ContactoBlock = true;
  public ActivoBlock = true;
  public ConyugueBlock = true;
  public LaboralBlock = true;
  public ReferenciaBlock = true;
  public EntrevistaBlock = true;
  public SeguroBlock = true;
  fechaCreacionNatural: any;
  public RetiradoBloqueado: any;

  public bloqDepartaExp : boolean | null = true;
  public bloqCiudadExp : boolean | null = true;
  public bloqDeparta : boolean | null = true;
  public bloqDepartaCont : boolean | null = true;
  public bloqDepartaRef : boolean | null = true;
  public bloqDepartaAct : boolean | null = true;
  public bloqCiudadAct : boolean | null = true;
  public bloqCiudadRef : boolean | null = true;
  public bloqCiudad : boolean | null = true;
  public bloqBarrio : boolean | null = true;
  public bloqCorrespondencia : boolean | null = true;
  //#endregion

  //#region variables Entrevista
  DesbloquearRespuesta2 : boolean | null= true;
  DesbloquearRespuesta6 : boolean | null = true;
  DesbloquearRespuesta14: boolean | null= true;
  DesbloquearRespuesta17 : boolean | null= true;

  mostrarFemiliaresPeps : boolean | null = false;
  BloquearPreguntasPeps : boolean | null = true;
  BloquearPreguntas : boolean | null = true;
  validoPregunta1 : boolean | null = false;
  validoPregunta2 : boolean | null = false;
  validoPregunta5 : boolean | null = false;
  validoPregunta6 : boolean | null = false;
  validoPregunta14 : boolean | null = false;
  validoPregunta17 : boolean | null = false;
  validoPregunta28 : boolean | null = false;
  dataParentescoEntrevista: any;
  dataParentescoCargo: any;
  entrevistaValidada : boolean | null = true;
  //#endregion

  //#region items Array
  public itemsEgresos: any[] = [];
  public itemsIngresos: any[] = [];
  public itemsContacto: any[] = [];
  public itemsPropiedad: any[] = [];
  public itemsVehiculo: any[] = [];
  public itemsOtros: any[] = [];
  public itemsLaboral: any[] = [];
  public itemsLaboralesConsultados: any[] = [];
  public itemsLaboralEdit: any[] = [];
  public itemsFamiliaPersonal: any[] = [];
  public itemsFinancieraComercial: any[] = [];
  public itemRelacionPeps: any[] = [];
  public allItemsForm: any[] = [];
  public allItemsFormBasico: any[] = [];
  public allItemsFormContacto: any[] = [];
  public allItemsFormFinanciero: any[] = [];
  public allItemsFormActivo: any[] = [];
  public allItemsFormActivos: any[] = [];
  public allItemsFormLaboral: any[] = [];
  public allItemsFormLaboralEdit: any[] = [];
  public allItemsFormRefencia: any[] = [];
  public allItemsFormSeguro: any[] = [];
  public allItemsFormLogSeguro: any[] = [];
  public itemsLogSeguro: any[] = [];
  public itemsSeguro: any[] = [];
  public itemsSeguroEdit: any[] = [];
  public itemsAsegurado: any[] = [];
  public itemsConyugue: any[] = [];
  public itemConyugueConsultado: any[] = [];
  public allItemEntrevista: any[] = [];
  public allItemFormEntrevista: any[] = [];
  public allItemFormInterno: any[] = [];
  public allItemsPeps: any[] = [];
  public acomuladorIngresos = 0;
  public acomuladorCostos = 0;
  public acomuladorIngresosOpe = 0;
  public acomuladorEgresos = 0;
  public acomuladorOperacional = 0;
  public totalActivos = 0;
  public totalPatrimonio = 0;
  public segmentosModel = new SegmentosModel();
  compareUndefined = undefined;
  ocupacionesConyugue: any;
  metodosConocio: any;
  public allItemsFormSave : any[] = [];
  
  public allItemsFormSaves = {
    asociadosNaturalesDto: {},
    tercerosDto: {},
    financieroDto: {} as any,
    contactoDto: {},
    activoDto: {},
    conyugueDto: {} as any,
    laboralDto: {} as any,
    referenciaDto: {},
    entrevistaDto: {},
    listaDePeps: {},
    segurosDto: {},
    tratamientoDto: {},
    cooberturaDto: {},
    logSegurosDto: {},
    userWork: ''
  };
  public itemWorkManagerInsert = {};
  public allItemsEditNatural = {
    asociadosNaturalesDto: {},
    tercerosDto: {},
    financieroDto: {}
  };
  // public InfoTutorSeleccionado = {
  //   DocumentoTutor : []
  // };
  public InfoTutorSeleccionado: { DocumentoTutor: any[] } = {
    DocumentoTutor: []
  };
  public InfoMenorRegistrado = {
    InfoMenorData: {}
  };


  public resultNacionalidad : any;
  
  //#endregion
  @Output() emitGetTrasabilidad: EventEmitter<any> = new EventEmitter<any>();

  
  @Output() activosAllEmit = new EventEmitter();
  @Output() cargosEmit = new EventEmitter();
  @Output() categoriasEmit = new EventEmitter();
  @Output() divisasEmit = new EventEmitter();
  @Output() estadoSeguroEmit = new EventEmitter();
  @Output() segurosEmit = new EventEmitter();
  @Output() tipoActivoEmit = new EventEmitter();
  @Output() paisesEmit = new EventEmitter();
  @Output() conceptoAllEmit = new EventEmitter();
  @Output() referenciasEmit = new EventEmitter();
  @Output() OcupaConyugueEmit = new EventEmitter();
  @Output() tipoDocConyugueEmit = new EventEmitter();
  @Output() oficinasEmit = new EventEmitter();
  private DataRequired = new RequiredData();
  public DatosUsuario : any;

  
  //#region Constructor
  constructor(private clientesGetListService: ClientesGetListService,
    private _sanitizer: DomSanitizer,
    private notif: NgxToastService,
    private clientesService: ClientesService,
    private operacionesService: OperacionesService,
    private observacionesService: ObservacionesService,
    private generalesService: GeneralesService,
     private recursosGeneralesService: RecursosGeneralesService,
    private moduleValidationService: ModuleValidationService,
    private loginService: LoginService,
    private router: Router,
    private _compiler: Compiler,
    private oficinasService: OficinasService
   ) {
    // OperacionesPermitidasNaturales
    let data : string | null = localStorage.getItem('Data');
    const resulStore = JSON.parse(window.atob(data == null ? "" : data));
    const arrayExample = [{
      'IdModulo': this.moduloLocal,
      'IdUsuario': resulStore.IdUsuario,
      'IdPerfil': resulStore.UsuarioPerfil
    }];
    if(this.dataOperaciones === null || this.dataOperaciones === undefined || this.dataOperaciones.length === 0){
      this.operacionesService.OperacionesPermitidasNaturales(arrayExample[0]).subscribe(
        result => {
          this.dataOperaciones = result;
          this.loading = false;
        },
        error => {
          this.notif.onDanger('Error', error);
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    }
    this.operacionesModel = new OperacionesModel();
    this.LogSeguroModel = new LogSegurosModel();
    this.dataGeneros = this.DataRequired.GeneroData;
    this.dataEstadoCivil = this.DataRequired.EstadoCivilData;
    this.dataNivelEstudio = this.DataRequired.NivelEstudioData;
    this.dataTipoVivienda = this.DataRequired.TipoViviendaData;
    this.dataTipoLocal = this.DataRequired.TipoLocalData;
    this.dataTipoCliente = this.DataRequired.RelacionData;
    this.dataReferencias = this.DataRequired.ReferenciaData;
    this.dataCategoria = this.DataRequired.CategoriasData;
    this.dataTipoActivos = TipoActivos;
    this.dataContratos = TipoContratos;
    this.dataActivosAll = ActivosAll;
    this.ocupacionesConyugue = ocupacionConygue;
    this.metodosConocio = metodosComoConocio;
    this.dataCardinal = Cardinales;
    this.dataDivisas = Divisas;
    this.dataImuebles = Inmueble;
  }
  //#endregion

 

  ngOnInit() {
    this._compiler.clearCache();

    this.NoPermitirTab();

    this.GetPaisesList();
    // this.GetImuebles();

    this.GetMarcar();//false
    this.GetConceptosaAll();// false

    this.GetMotivoIngreso();
    this.GetProfesion();// false

    this.GetPeriodosPago() ;
    this.GetParentescos(); //false

    this.GetParentescosChange(); //false
    this.GetParentescosPeps(); //false

    this.GetTipoContacto(); // false
    this.GetOficinas(); // false

    let data : string | null = localStorage.getItem('Data');
    this.DatosUsuario = JSON.parse(window.atob(data == null ? "" : data));
    // console.log(this.appComponent);
    this.loading = true;
    // this.moduleValidationService.ValidatePermissionsModule(this.CodModulo);

    $('html, body').animate({ scrollTop: 0 }, 'slow');

    localStorage.removeItem('estadoSeleccionado');
    localStorage.removeItem('tipoEmpleoSeleccionado');
    this.blockTratamiento = true;
    this.blockTratamientoFecha = true;

    $('#operaJquery').focus().select();
    $(document).on('click', '#Crear', function () {
      $('#ModalDatosLaborales').modal('show');
    });

    $(document).on('click', '#agregar_nombres', function () {
        $('#ModalAgregarNombre').modal('show');
    });
    $(document).on('click', '#agregar_nombres_edit', function () {
      $('#ModalAgregarNombreEdit').modal('show');
    });
    
    this.VeredaCapitaliceContac();
    this.EntrevistaCapitalice();
    $('#financieroTab').addClass('disableTab');
    $('#contactoTab').addClass('disableTab');
    $('#activoTab').addClass('disableTab');
    $('#conyugueTab').addClass('disableTab');
    $('#laboralTab').addClass('disableTab');
    $('#referenciaTab').addClass('disableTab');
    $('#entrevistaTab').addClass('disableTab');
    $('#seguroTab').addClass('disableTab');
    $('#fechasTab').addClass('disableTab');
    this.activedBasico = true;
    //#region Inicializaciones
    /* Validadores */
    this.validateBasicos();
    this.ValidateFinancieros();
    this.validateContactos();
    this.validateActivos();
    this.validateConyugue();

    this.validateReferencia();
    this.validateEntrevista();
    this.validateSeguros();
    this.validateLaboral();
    this.validateLaboralEdit();
    this.validateAsegurados();
    this.validateRelacionPEPS();
    this.validateServicios();
    this.FormVetados();
    this.validateTerceroBasico();
    this.validateLogSeguro();
    this.validateAsesorExterno();
    this.ValidateFormCambioEstado();
    this.validateSolicituRetiro();
    this.ValidateCorrespondencia();
    this.GetNacionalidad();
 
    /* Motodos */

    this.segurosForm.get('tratamiento')?.setValue(true);
    this.segurosForm.get('debitoAuto')?.setValue(true);
    this.basicosFrom.get('numHijos')?.setValue(0);
    this.basicosFrom.get('numHijosEstudian')?.setValue(0);
    this.laboralForm.get('NumPersonasCargo')?.setValue(0);
    this.patrimonioForm.get('tlPasivo')?.setValue(0);
    //#endregion
    // this.loading = false;
    this.selectAutomaticoDropEntrevista();

    this.loginService.GetSesionXUsuario(this.DatosUsuario.IdUsuario).subscribe(
      result => {
        if (!result.Estado) {
          this.router.navigateByUrl('/Login');
          localStorage.clear();
        }
      }
    );
  }
  ngOnDestroy() {

  }
  
 
  //#region Carga de Maestros
   GetSeguros() {
    // const dataSeguros = [];
    // this.clientesGetListService.GetSeguros().subscribe(
    //   result => {
    //     result.forEach(element => {
    //       if (element.Clase !== 20) {
    //         dataSeguros.push(element);
    //       }
    //     });
        let seguro : string | null = localStorage.getItem('seguros');
        this.dataSeguros = JSON.parse(window.atob(seguro == null ? "" : seguro));
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }

  GetEstadosSeguro() {
    // this.clientesGetListService.GetEstadosSeguro().subscribe(
    //   result => {
      let seguro : string | null = localStorage.getItem('estadoSeguro');
      this.dataEstadosSeguro = JSON.parse(window.atob(seguro == null ? "" : seguro));
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }

  GetCargos() {
    // this.clientesGetListService.GetCargos().subscribe(
    //   result => {
        let cargo : string | null = localStorage.getItem('cargos');
        this.dataCargos = JSON.parse(window.atob(cargo == null ? "" : cargo));
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }

  GetTipoDocumentoConyugue() {
    const dataDocConyugue : any[] = [];
    this.clientesGetListService.GetTipoDocumento().subscribe(
      result => {
        result.forEach((element : any) => {
          if (element.Clase !== 3 ) {
            dataDocConyugue.push(element);
          }
        });
        this.dataTipoDocumentoConyugue = dataDocConyugue;
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      }
    );
  }

  GetTipoEmpleo() {
    // this.clientesGetListService.GetTipoEmpleo().subscribe(
    //   result => {
        let empleo : string | null = localStorage.getItem('empleo');
        this.dataTipoEmpleo = JSON.parse(window.atob(empleo == null ? "" : empleo));
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }

  EjecutarMetodosMaestros() {
    if (this.dataSeguros === null || this.dataSeguros === undefined || this.dataSeguros.length === 0) {
      this.GetSeguros(); //false
    }
    if (this.dataEstadosSeguro === null || this.dataEstadosSeguro === undefined || this.dataEstadosSeguro === '') {
      this.GetEstadosSeguro(); //false
    }
    if (this.dataTipoDocumentoConyugue === null || this.dataTipoDocumentoConyugue === undefined || this.dataTipoDocumentoConyugue === '') {
      this.GetTipoDocumentoConyugue();
    }
    if (this.dataCargos === null || this.dataCargos === undefined || this.dataCargos === '') {
      this.GetCargos();//false
    }
    if (this.dataTipoEmpleo === null || this.dataTipoEmpleo === undefined || this.dataTipoEmpleo === '') {
      this.GetTipoEmpleo();
    }
    if ( this.dataVias === null || this.dataVias === undefined || this.dataVias === '') {
      this.GetVias();//false
    }
	if (this.dataLetras === null || this.dataLetras === undefined || this.dataLetras === '') {
      this.GetLetra();//false
    }
  }
  //#endregion

  //#region Validaciones y reglas
   GetVias() {
    // this.clientesGetListService.GetVias().subscribe(
    //   result => {
        // this.viasEmit.emit(result);
     this.dataVias = Vias;
      // JSON.parse(window.atob(localStorage.getItem('via')));
        
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }
   GetLetra() {
    // this.clientesGetListService.GetLetras().subscribe(
    //   result => {
        // this.letraEmit.emit(result);
        let letras : string | null = localStorage.getItem('letras');
        this.dataLetras = JSON.parse(window.atob(letras == null ? "" : letras));
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }

  GetMarcar() {
  //   this.clientesGetListService.GetMarcas().subscribe(
  //     result => {
        // this.marcaEmit.emit(result);
        let marca : string | null = localStorage.getItem('marca');
        this.dataMarcas = JSON.parse(window.atob(marca == null ? "" : marca));
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }
  
  GetConceptosaAll() {
    // this.clientesGetListService.GetConceptosAll().subscribe(
    //   result => {
        // this.ConceptosAllEmit.emit(result);
        let conceptos : string | null = localStorage.getItem('conceptos');
        this.dataConceptoAll = JSON.parse(window.atob(conceptos == null ? "" : conceptos));
       
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }

  GetMotivoIngreso() {
    this.clientesGetListService.GetMotivoIngreso().subscribe(
      result => {
        // this.MotivosIngresoEmit.emit(result);
        this.dataMotivoIngreso  = result;
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      }
    );
  }

   GetProfesion() {
    // this.clientesGetListService.GetProfesion().subscribe(
    //   result => {
        // this.profesionesEmit.emit(result);
         let profesion : string | null = localStorage.getItem('profesion');
         this.dataProfesion = JSON.parse(window.atob(profesion == null ? "" : profesion));
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }

  GetPeriodosPago() {
    // this.clientesGetListService.GetPeriodosPago().subscribe(
    //   result => {
        // this.periodosPagoEmit.emit(result);
        let periodo : string | null = localStorage.getItem('periodo');
        this.dataPeriodos = JSON.parse(window.atob(periodo == null ? "" : periodo));
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }

  GetParentescos() {
    // this.clientesGetListService.GetParentescos().subscribe(
    //   result => {
        // this.parentescosEmit.emit(result);
        let parentesco : string | null = localStorage.getItem('parentesco');
        this.dataParentescos = JSON.parse(window.atob(parentesco == null ? "" : parentesco));
        this.dataParentescos.splice(10, 1);
        this.dataParentescos.splice(16, 1);
        this.dataParentescos.splice(16, 1);
        this.dataParentescos.splice(17, 1);
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }

  GetParentescosChange() {
    // this.clientesGetListService.GetParentescos().subscribe(
    //   result => {
        // this.parentescosChangeEmit.emit(result);
        let parentescoChange : string | null = localStorage.getItem('parentescoChange');
        this.dataParentescosChange = JSON.parse(window.atob(parentescoChange == null ? "" : parentescoChange));
        this.dataParentescosChange.splice(0, 10)
        this.dataParentescosChange.splice(1, 7);
        this.dataParentescosChange.splice(2, 1);
        this.dataParentescosChange.splice(3, 1);
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }

   GetParentescosPeps() {
    // this.clientesGetListService.GetParentescosPeps().subscribe(
    //   result => {
        // this.parentescosPepsEmit.emit(result);
        let parentescoPeps : string | null = localStorage.getItem('parentescoPeps');
        this.dataParentescosPeps = JSON.parse(window.atob(parentescoPeps == null ? "" : parentescoPeps));
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }

  GetTipoContacto() {
    // this.clientesGetListService.GetTipoContacto().subscribe(
    //   result => {
        // this.tipoContactoEmit.emit(result);
        let contacto : string | null = localStorage.getItem('contacto');
        this.dataContacto = JSON.parse(window.atob(contacto == null ? "" : contacto));
        this.dataContacto.splice(6, 1);
        this.dataContacto.splice(6, 1);
    //   },
    //   error => {
    //     const errorMessage = <any>error;
    //     this.notif.onDanger('Error', errorMessage);
    //     console.error(errorMessage);
    //   }
    // );
  }
  
  GetNacionalidad() {
    this.clientesGetListService.getNacionalidad().subscribe(
      result => {
        this.resultNacionalidad = result;
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }

   GetOficinas() {
    // this.oficinasService.getOficinas().subscribe(
    //   result => {
        // this.oficinasEmit.emit(result);
        let oficinas : string | null = localStorage.getItem('oficinas');
        this.dataOficinas = JSON.parse(window.atob(oficinas == null ? "" : oficinas));
      // },
      // error => {
      //   this.notif.onDanger('Error', error);
      //   console.error(error);
      // });
  }

  CargarTrasabilidad() {
    this.condicion = true;
     localStorage.setItem('trasabilidad', window.btoa(JSON.stringify(this.basicosFrom.get('numeroDocumento')?.value)));
  }

  ReserTrasabilidad() {
    this.condicion = false;
  }

  validarSeleccion(campo : any) {
    if (campo.value === null || campo.value == undefined) {
        this.notif.onWarning('Advertencia', 'Debe seleccionar una actividad economica válida.');
        this.basicosFrom.get('actividad')?.reset();
    } else if (campo.value.idActividad === null || campo.value.idActividad == undefined) { 
        this.notif.onWarning('Advertencia', 'Debe seleccionar una actividad economica válida.');
        this.basicosFrom.get('actividad')?.reset();
    }
    console.log(this.basicosFrom.get('actividad')?.value);
    console.log('campo: ' + campo);
  }

  validarSelectsTipoDocumento() {
    this.blockBtnBasico = false;
    const select = this.basicosFrom.get('tipoDocumento')?.value;
    const tipoCliente = +this.basicosFrom.get('tipoCliente')?.value;
    const tipoDocu = +this.basicosFrom.get('tipoDocumento')?.value;
    if (select === '') {
      this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de documento válido.');
      this.basicosFrom.get('tipoDocumento')?.reset();
    } else {
      if (tipoCliente === 15 && (tipoDocu === 4 || tipoDocu === 5 || tipoDocu === 7)) {
        this.basicosFrom.get('fechaNacimiento')?.reset();
      }
      if (tipoDocu === 9) {
        this.basicosFrom.controls['numeroDocumento'].setErrors(null);
        this.basicosFrom.controls['numeroDocumento'].clearValidators();
        this.basicosFrom.controls['numeroDocumento'].setValidators(null);

        this.basicosFrom.controls['numeroDocumento'].setValidators([Validators.required, Validators.pattern('[A-Za-z0-9]+')]);
        this.mostrarSoloNumeros = false;
        this.basicosFrom.get('numeroDocumento')?.reset();
        this.tipoDocumentoAnterior = tipoDocu;

      } else {
        this.basicosFrom.controls['numeroDocumento'].setValidators([Validators.required, Validators.minLength(3),
          Validators.maxLength(15), Validators.pattern('^[0-9]*')]);
        this.mostrarSoloNumeros = true;
        if (this.tipoDocumentoAnterior === 9 && tipoDocu !== 9) {
          this.basicosFrom.get('numeroDocumento')?.reset();
        }
      }
    }
  }
  validarSelectsBasico(nombreCampo : string) {
    const select = this.basicosFrom.get('' + nombreCampo + '')?.value;
    if (select === '') {
      this.notif.onWarning('Advertencia', 'Debe seleccionar una opción válida.');
      this.basicosFrom.get('' + nombreCampo + '')?.reset();
    }
  }
  devolverTab(tab : number) {
    switch (tab) {
      case 1:
        this.activedBasico = true;
        this.activedFinan = false;
        this.activedConta = false;
        this.activedActivo = false;
        this.activedConyu = false;
        this.activedLabor = false;
        this.activeRefe = false;
        this.activeEntre = false;
        this.activeSeguro = false;
        this.activeFecha = false;
        break;
      case 2:
        this.activedBasico = false;
        this.activedFinan = true;
        this.activedConta = false;
        this.activedActivo = false;
        this.activedConyu = false;
        this.activedLabor = false;
        this.activeRefe = false;
        this.activeEntre = false;
        this.activeSeguro = false;
        this.activeFecha = false;
        break;
      case 3:
        this.activedBasico = false;
        this.activedFinan = false;
        this.activedConta = true;
        this.activedActivo = false;
        this.activedConyu = false;
        this.activedLabor = false;
        this.activeRefe = false;
        this.activeEntre = false;
        this.activeSeguro = false;
        this.activeFecha = false;
        break;
      case 4:
        this.activedBasico = false;
        this.activedFinan = false;
        this.activedConta = false;
        this.activedActivo = true;
        this.activedConyu = false;
        this.activedLabor = false;
        this.activeRefe = false;
        this.activeEntre = false;
        this.activeSeguro = false;
        this.activeFecha = false;
        break;
      case 5:
        this.activedBasico = false;
        this.activedFinan = false;
        this.activedConta = false;
        this.activedActivo = false;
        this.activedConyu = true;
        this.activedLabor = false;
        this.activeRefe = false;
        this.activeEntre = false;
        this.activeSeguro = false;
        this.activeFecha = false;
        break;
      case 6:
        this.activedBasico = false;
        this.activedFinan = false;
        this.activedConta = false;
        this.activedActivo = false;
        this.activedConyu = false;
        this.activedLabor = true;
        this.activeRefe = false;
        this.activeEntre = false;
        this.activeSeguro = false;
        this.activeFecha = false;
        break;
      case 7:
        this.activedBasico = false;
        this.activedFinan = false;
        this.activedConta = false;
        this.activedActivo = false;
        this.activedConyu = false;
        this.activedLabor = false;
        this.activeRefe = true;
        this.activeEntre = false;
        this.activeSeguro = false;
        this.activeFecha = false;
        break;
      case 8:
        this.activedBasico = false;
        this.activedFinan = false;
        this.activedConta = false;
        this.activedActivo = false;
        this.activedConyu = false;
        this.activedLabor = false;
        this.activeRefe = false;
        this.activeEntre = true;
        this.activeSeguro = false;
        this.activeFecha = false;
        break;
      case 9:
        this.activedBasico = false;
        this.activedFinan = false;
        this.activedConta = false;
        this.activedActivo = false;
        this.activedConyu = false;
        this.activedLabor = false;
        this.activeRefe = false;
        this.activeEntre = false;
        this.activeSeguro = true;
        this.activeFecha = false;
        break;
      case 10:
        this.activedBasico = false;
        this.activedFinan = false;
        this.activedConta = false;
        this.activedActivo = false;
        this.activedConyu = false;
        this.activedLabor = false;
        this.activeRefe = false;
        this.activeEntre = false;
        this.activeSeguro = false;
        this.activeFecha = true;
        break;
    }
  }
  VolverArriba() {
    $('html, body').animate({ scrollTop: 0 }, 'slow');
    return false;
  }
  VolverAbajo() {
    $('html, body').animate({ scrollTop: $(document).height() }, 'slow');
    return false;
  }
  valorForm() {
    this.formTutorOculto = false;
    this.disableForm = true;
    this.disableAmaCasa = false;
    this.disableFormEstado = true;
    this.disbaleFromDocumento = true;
  }
  validarTipoOperacion() {
    localStorage.setItem('IdModuloActivo', window.btoa(JSON.stringify(this.CodModulo)));
    this.operacion = '';
    this.esReimpresion = false;
    this.MostrarFechaTratamiento = false;
    this.vetadosFrom.get('documeto')?.setValue(this.basicosFrom.get('DocumentoBusqueda')?.value);
    this.vetadosFrom.get('strNombreCompleto')?.setValue('');
    const results = this.basicosFrom.get('operacion')?.value;
    let data : string | null = localStorage.getItem('Data');
    const resultPerfil = JSON.parse(window.atob(data == null ? "" : data));
    this.operacionesModel.idOperacion = results;
    this.operacionesModel.idPerfil = resultPerfil.idPerfilUsuario;
    let IdModuloActivo : string | null = localStorage.getItem('IdModuloActivo')
    this.operacionesModel.idModulo = +JSON.parse(window.atob(IdModuloActivo == null ? "" : IdModuloActivo));
    this.mostrarPorQueCobertura = false;
    this.solicitudRetiroForm.reset();
    if (results === '5') { // Creacion
      this.LimpiaVariablesAlerta();
      this.EjecutarMetodosMaestros();
      this.NombresCapitaliceBasico();
      this.btnBuscar = true;
      this.totalActivos = 0;
      this.totalPatrimonio = 0;
      this.acomuladorEgresos = 0;
      this.botonSiguiente.nativeElement.click();
      this.devolverTab(1);
      this.removeActiveTab();
      this.dataMotivoIngreso.splice(11, 1);
      this.operacionesService.ObtenerEstadosXOperacionesData(this.operacionesModel).subscribe(
        result => {
          this.dataEstado = result;
          this.dataEstado.forEach((elementEstado : any) => {
            if (elementEstado.IdEstado === +this.operacionesModel.idOperacion) {
              this.basicosFrom.get('estado')?.setValue(elementEstado.IdEstado);
            }
          });
        },
        error => {
          this.notif.onDanger('Error', error);
          console.error('validarTipoOperacion - ' + error);
        }
      );
      this.infoArrendador = false;
      this.viviendaAnterior = null;
      this.ocultarDireccionEditActivo = true;
      this.infoTutor = [];
      this.formPasivoLocked = null;
      this.btnMarcarEntrevista = false;
      this.btnTratamientoMarcar = false;
      this.btnTratamiento = false;
      this.tratamientoDatos.nativeElement.click();
      this.btnGuardarOculto = false;
      this.siguienteOculto = false;
      this.btnOcultoBuscar = true;
      this.mostrarBtnTercero = false;
      this.operacionEscogida = '/Creacion';
      let data : string | null = localStorage.getItem('Data');
      this.dataLocal = JSON.parse(window.atob(data == null ? "" : data));
      this.cleanAdrees();
      this.NombreAsesor = this.dataLocal.Nombre;
      this.CedulaAsesor = this.dataLocal.IdAsesor;
      this.NombreAsesorExt = '';
      this.CedulaAsesorExt = '';
      this.BlockTipoContacto = null;
      this.BlockActivo = null;
      this.BlockReferencia = null;
      this.disbaleBusqueda = true;
      this.itemsLogSeguro = [];
      this.dataActivos = [];
      this.itemsEgresos = [];
      this.itemsIngresos = [];
      this.itemsContacto = [];
      this.dataConyuge = [];
      this.itemsEgresos = [];
      this.itemsContacto = [];
      this.itemsPropiedad = [];
      this.itemsVehiculo = [];
      this.itemsOtros = [];
      this.itemsConyugue = [];
      this.itemsLaboral = [];
      this.itemsFamiliaPersonal = [];
      this.itemsFinancieraComercial = [];
      this.itemRelacionPeps = [];
      this.itemsSeguro = [];
      this.itemsAsegurado = [];
      this.allItemsFormLogSeguro = [];
      
      this.allItemsFormSaves = {
        asociadosNaturalesDto: {},
        tercerosDto: {},
        financieroDto: {},
        contactoDto: {},
        activoDto: {},
        conyugueDto: {},
        laboralDto: {},
        referenciaDto: {},
        entrevistaDto: {},
        listaDePeps: {},
        segurosDto: {},
        tratamientoDto: {},
        cooberturaDto: {},
        logSegurosDto: {},
        userWork: ''
      };

      this.allItemsFormSaves.asociadosNaturalesDto = {};
      this.allItemsFormSaves.tercerosDto = {};
      this.allItemsFormSaves.financieroDto = {};
      this.allItemsFormSaves.contactoDto = {};
      this.allItemsFormSaves.activoDto = {};
      this.allItemsFormSaves.conyugueDto = {};
      this.allItemsFormSaves.laboralDto = {};
      this.allItemsFormSaves.referenciaDto = {};
      this.allItemsFormSaves.entrevistaDto = {};
      this.allItemsFormSaves.listaDePeps = {};
      this.allItemsFormSaves.segurosDto = {};
      this.allItemsFormSaves.tratamientoDto = {};
      this.allItemsFormSaves.logSegurosDto = {};
      this.allItemsFormSaves.userWork = '';
      this.allItemEntrevista = [];
      this.DescripcionBtn = 'Siguiente';
      this.ResetAllForm();
      this.ResetItemForm();
      this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
      this.disableFormPA = null;
      this.disableFormSA = null;
      this.disableFormPN = null;
      this.disableFormSN = null;
      this.disableFormEstado = true;
      this.disbaleFromDocumento = null;
      this.disableForm = null;
      this.disableFormEps = true;
      this.disableFormBtnEmpresa = null;
      this.disableFormCedula = null;
      this.disableFormProfesion = null;
      this.disbaleFromTutor = null;
      this.disableFormPersonas = null;
      this.disableFromPEPS = true;
      this.disableFormNumHijos = null;
      this.disableFromTipoDocumento = null;
      this.disableFromTipoCliente = null;
      this.disableFormNumeroDocumento = null;
      this.disbaleOficina = null;
      this.disableAmaCasa = false;
      this.disablePersonasACargo = true;
      this.disableClean = false;
      this.formTutorOculto = false;
      this.formBuscarLocked = null;
      this.bloquearCampoDir = null;
      this.bloquearCampoDirActivo = null;
      this.formLockedPersonNatura = null;
      this.BlockFecha = null;
      this.formBuscarLockedConyugue = null;
      this.BlockCategoria = null;
      this.formEditarLocked = true;
      this.formBuscarLockedPpal = null;
      this.formLockedHipoPigno = true;
      this.disableMetodo = true;
      this.MostrarAsesorExterno = false;
      this.mostrarOficina = false;
      this.MostrarFechaTratamiento = false;
      this.BlockMonto = null;
      this.BlockEstado = null;
      this.Blockseguro = null;
      this.blockRefeBtn = true;
      this.disablePEPS = true;
      this.formLockedReconocimiento = true;
      this.formLockedRecursos = true;
      this.MarcarNoPreguntas();
      this.FormCambioEstado.reset();
      localStorage.removeItem('TerceroNatura');
      this.basicosFrom.get('numHijos')?.setValue(0);
      this.basicosFrom.get('numHijosEstudian')?.setValue(0);
      this.laboralForm.get('NumPersonasCargo')?.setValue(0);
      $('#basicoTab').addClass('disableTab');
      $('#financieroTab').addClass('disableTab');
      $('#contactoTab').addClass('disableTab');
      $('#activoTab').addClass('disableTab');
      $('#conyugueTab').addClass('disableTab');
      $('#laboralTab').addClass('disableTab');
      $('#referenciaTab').addClass('disableTab');
      $('#entrevistaTab').addClass('disableTab');
      $('#seguroTab').addClass('disableTab');
      $('#fechasTab').addClass('disableTab');
      this.oculatObligatorioTercero = true;
      this.oculatObligatorioTerceroProveedor = true;
      this.contactoForm.get('Vias')?.reset();
      this.contactoForm.get('Letra')?.reset();
      this.contactoForm.get('LetraDos')?.reset();
      this.contactoForm.get('Cardi')?.reset();
      this.contactoForm.get('CardiDos')?.reset();
      this.contactoForm.get('Imuebles')?.reset();

      localStorage.removeItem('DataService');
      this.selectAutomaticoDropEntrevista();
      this.PreCargarPais();

      this.segurosForm.get('tratamiento')?.setValue(true);
      this.segurosForm.get('debitoAuto')?.setValue(true);
      this.basicosFrom.controls['fechaNacimiento'].setValidators([Validators.required]);
      this.basicosFrom.controls['fechaNacimiento'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['fechaNacimiento'].updateValueAndValidity();

      this.basicosFrom.controls['ciudadNacimiento'].setValidators([Validators.required]);
      this.basicosFrom.controls['ciudadNacimiento'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['ciudadNacimiento'].updateValueAndValidity();

      this.basicosFrom.controls['departNacimiento'].setValidators([Validators.required]);
      this.basicosFrom.controls['departNacimiento'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['departNacimiento'].updateValueAndValidity();

      this.basicosFrom.controls['paisNacimiento'].setValidators([Validators.required]);
      this.basicosFrom.controls['paisNacimiento'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['paisNacimiento'].updateValueAndValidity();

      this.basicosFrom.controls['fechaExpedicion'].setValidators([Validators.required]);
      this.basicosFrom.controls['fechaExpedicion'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['fechaExpedicion'].updateValueAndValidity();

      this.basicosFrom.controls['ciudadExpedicion'].setValidators([Validators.required]);
      this.basicosFrom.controls['ciudadExpedicion'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['ciudadExpedicion'].updateValueAndValidity();

      this.basicosFrom.controls['departExpedicion'].setValidators([Validators.required]);
      this.basicosFrom.controls['departExpedicion'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['departExpedicion'].updateValueAndValidity();

      this.basicosFrom.controls['paisExpedicion'].setValidators([Validators.required]);
      this.basicosFrom.controls['paisExpedicion'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['paisExpedicion'].updateValueAndValidity();

      this.basicosFrom.controls['genero'].setValidators([Validators.required]);
      this.basicosFrom.controls['genero'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['genero'].updateValueAndValidity();

      this.basicosFrom.controls['nivelEstudio'].setValidators([Validators.required]);
      this.basicosFrom.controls['nivelEstudio'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['nivelEstudio'].updateValueAndValidity();

    } else if (results === '2') { // Buscar
      this.EjecutarMetodosMaestros();
      this.LimpiaVariablesAlerta();
      this.condicion = false;
      this.btnBuscar = false;
      this.clientesGetListService.GetTipoDocumento().subscribe(
        result => {
          this.dataTipoDocumento = result;
        });
      this.infoArrendador = false;
      this.viviendaAnterior = null;
      this.ocultarDireccionEditActivo = true;
      this.DesmarcarNoPreguntas();
      this.totalActivos = 0;
      this.botonSiguiente.nativeElement.click();
      this.operacionEscogida = '/Buscar';
      this.btnMarcarEntrevista = false;
      this.btnGuardarOculto = false;
      this.siguienteOculto = true;
      this.btnTratamientoMarcar = false;
      this.btnOcultoBuscar = false;
      this.btnTratamiento = false;
      this.NombreAsesor = '';
      this.CedulaAsesor = '';
      this.NombreAsesorExt = '';
      this.CedulaAsesorExt = '';
      this.MostrarAsesorExterno = false;
      this.disableFormCedula = true;
      this.formPasivoLocked = true;
      this.disableMetodo = true;
      this.disbaleBusqueda = null;
      this.disableFromPEPS = true;
      this.disableFormNumHijos = true;
      this.itemsLogSeguro = [];
      this.dataActivos = [];
      this.itemsEgresos = [];
      this.itemsIngresos = [];
      this.itemsContacto = [];
      this.dataConyuge = [];
      this.itemsLogSeguro = [];
      this.formBuscarLocked = true;
      this.bloquearCampoDir = true;
      this.bloquearCampoDirActivo = true;
      this.formLockedPersonNatura = true;
      this.BlockFecha = true;
      this.mostrarBtnTercero = false;
      this.formBuscarLockedConyugue = true;
      this.formBuscarLockedPpal = true;
      this.formLockedHipoPigno = true;
      this.BlockCategoria = true;
      this.blockRefeBtn = false;
      this.formEditarLocked = true;
      this.DescripcionBtn = 'Siguiente';
      this.acomuladorEgresos = 0;
      this.ResetAllForm();
      this.ResetItemForm();
      this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
      this.disableFormEstado = true;
      this.disbaleFromDocumento = null;
      this.disableForm = true;
      this.disableFormPA = true;
      this.disableFormSA = true;
      this.disableFormPN = true;
      this.disableFormSN = true;
      this.disableFormEps = true;
      this.disableFormBtnEmpresa = true;
      this.disbaleFromTutor = true;
      this.disableFormPersonas = true;
      this.disableFromTipoDocumento = true;
      this.disableFromTipoCliente = true;
      this.disableFormNumeroDocumento = true;
      this.disbaleOficina = true;
      this.disableFormProfesion = true;
      this.disableClean = true;
      this.disableAsesor = true;
      this.disableAsesorPpal = true;
      this.formTutorOculto = false;
      this.BlockTipoContacto = true;
      this.BlockActivo = true;
      this.BlockReferencia = true;
      this.blockTratamiento = true;
      this.blockTratamientoFecha = true;
      this.blockDebitoAtomatico = true;
      this.mostrarOficina = false;
      this.MostrarFechaTratamiento = false;
      this.objMotivoEnvio = new EnvioMotivoModel();
      this.FormCambioEstado.reset();
      this.disablePeriodo = true;
      this.Blockseguro = true;
      this.BlockMonto = true;
      this.BlockEstado = true;
      this.AsessorNecesario = true;
      this.disablePEPS = true;
      this.formLockedReconocimiento = true;
      this.formLockedRecursos = true;
      this.bloqDepartaExp = true;
      this.bloqCiudadExp = true;
      this.bloqDeparta = true;
      this.bloqDepartaCont = true;
      this.bloqDepartaRef = true;
      this.bloqDepartaAct = null;
      this.bloqCiudad = true;
      this.bloqCiudadAct = true;
      this.bloqCiudadRef = true;
      this.bloqBarrio = true;
      this.cleanAdrees();
      localStorage.removeItem('TerceroNatura');
      this.basicosFrom.get('estado')?.setValue(0);
      this.VolverArriba();
      this.removeActiveTab();
      this.devolverTab(1);
      $('#basicoTab').removeClass('disableTab');
      $('#financieroTab').removeClass('disableTab');
      $('#contactoTab').removeClass('disableTab');
      $('#activoTab').removeClass('disableTab');
      $('#conyugueTab').removeClass('disableTab');
      $('#laboralTab').removeClass('disableTab');
      $('#referenciaTab').removeClass('disableTab');
      $('#entrevistaTab').removeClass('disableTab');
      $('#seguroTab').removeClass('disableTab');
      this.oculatObligatorioTercero = true;
      this.oculatObligatorioTerceroProveedor = true;
      this.basicosFrom.controls['metodo'].setValidators(Validators.required);
      this.basicosFrom.controls['metodo'].setErrors(Validators.required);
      this.basicosFrom.controls['NombreDrop'].setValidators(Validators.required);
      this.basicosFrom.controls['NombreDrop'].setErrors(Validators.required);
      this.basicosFrom.controls['numHijos'].setValidators([Validators.required]);
      this.basicosFrom.controls['numHijos'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['numHijosEstudian'].setValidators(Validators.required);
      this.basicosFrom.controls['numHijosEstudian'].setErrors({ 'incorrect': true });
      localStorage.removeItem('DataService');
      this.DesbloquearRespuesta2 = true;
      this.DesbloquearRespuesta6 = true;
      this.DesbloquearRespuesta14 = true;
      this.DesbloquearRespuesta17 = true;
      this.mostrarFemiliaresPeps = false;
      this.BloquearPreguntasPeps = true;
      this.BloquearPreguntas = true;
    } else if (results === '1') { // Editar  
      if (this.basicosFrom.get('tipoEmpleo')?.value === 0) {
        $('#SelectTipoEmpleo').focus().select();
      }
      if (this.OperacionMarcada !== undefined) {        
        // Valida que la operacion seleccionada si tenga un cambio
        this.ValidaCambioCampo();        
      }
      if (this.OperacionMarcada === undefined) {
        // entra a la operacion por primer vez
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "" : data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.botonSiguiente.nativeElement.click();
          this.operacionEscogida = '/Editar';
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          this.DescripcionBtn = 'Editar';
          this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia', 'Debe buscar un asociado para realizar esta operación.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.disableForm = true;
            this.btnBuscar = true;
            this.SoloBloquearForm();
            this.ResetAllForm();
          } else {
            const codigoAsesor = this.asesorForm.get('strCodigo')?.value;

            if (codigoAsesor !== '' && codigoAsesor !== null && codigoAsesor !== undefined) {
              this.MostrarAsesorExterno = true;
            } else {
              this.MostrarAsesorExterno = false;
            }
            if (this.basicosFrom.get('ciudadNacimiento')?.value !== null) {
              this.bloqDeparta = null;
              this.bloqCiudad = null;
            }
            if (this.basicosFrom.get('ciudadExpedicion')?.value !== null) {
              this.bloqDepartaExp = null;
              this.bloqCiudadExp = null;
            }
            this.contactoForm.get('Vias')?.setValue(0);
            this.contactoForm.get('Letra')?.setValue(0);
            this.contactoForm.get('LetraDos')?.setValue(0);
            this.contactoForm.get('Cardi')?.setValue(0);
            this.contactoForm.get('CardiDos')?.setValue(0);
            this.contactoForm.get('Imuebles')?.setValue(0);
            this.AsessorNecesario = true;
            this.DescripcionBtn = 'Siguiente';
            this.MostrarFechaTratamiento = false;
            this.btnTratamientoMarcar = false;
            this.btnMarcarEntrevista = false;
            this.btnTratamiento = false;
            this.formBuscarLocked = null;
            this.bloquearCampoDir = null;
            this.bloquearCampoDirActivo = null;
            this.formLockedPersonNatura = null;
            this.disableAsesor = true;
            this.disableAsesorPpal = true;
            this.mostrarBtnTercero = true;
            this.formBuscarLockedConyugue = null;
            this.BlockCategoria = null;
            this.blockRefeBtn = true;
            this.formEditarLocked = null;
            this.disbaleFromTutor = null;
            this.disableForm = null;
            this.disableFormEps = true;
            this.disableFormBtnEmpresa = null;
            this.disableFormNumHijos = null;
            this.BlockTipoContacto = null;
            this.formPasivoLocked = null;
            this.BlockActivo = null;
            this.BlockReferencia = null;
            if (this.basicosFrom.get('tipoCliente')?.value === 15) {
              this.Blockseguro = true;
              this.BlockMonto = true;
              this.BlockEstado = true;
              this.BlockFecha = true;
              this.tipoCliente = +this.basicosFrom.get('tipoCliente')?.value;
              this.btnGuardarOculto = true;
              this.mostrarBtnTercero = false;
              this.mostrarBtn = true;
              this.siguienteOculto = true;
              this.btnOcultoBuscar = true;
            } else {
              this.Blockseguro = null;
              this.BlockMonto = null;
              this.BlockEstado = null;
              this.BlockFecha = null;
              this.tipoCliente = +this.basicosFrom.get('tipoCliente')?.value;
              this.btnGuardarOculto = true;
              this.mostrarBtn = true;
              this.siguienteOculto = true;
              this.mostrarBtnTercero = true;
              this.btnOcultoBuscar = true;
            }
            this.disbaleBusqueda = true;
            this.disableFromPEPS = true;
            this.disableFromTipoDocumento = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disbaleOficina = true;
            if (+this.basicosFrom.get('nivelEstudio')?.value === 5 || +this.basicosFrom.get('nivelEstudio')?.value === 20 ||
              +this.basicosFrom.get('nivelEstudio')?.value === 10 || +this.basicosFrom.get('nivelEstudio')?.value === 45) {
              this.disableFormProfesion = true;
            } else {
              this.disableFormProfesion = null;
            }
            this.mostrarOficina = false;
            this.blockTratamiento = true;
            this.blockTratamientoFecha = true;
            this.blockDebitoAtomatico = true;
            this.disableFormPersonas = null;
            this.disableClean = false;
            this.disableFormEstado = true;
            this.disablePeriodo = null;
            this.disablePEPS = true;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.BloquearPreguntas = true;
            this.BloquearPreguntasPeps = true;
            this.FormCambioEstado.reset();
            this.devolverTab(1);
            this.removeActiveTab();
            $('#basicoTab').removeClass('disableTab');
            $('#financieroTab').addClass('disableTab');
            $('#contactoTab').removeClass('disableTab');
            $('#activoTab').removeClass('disableTab');
            $('#conyugueTab').removeClass('disableTab');
            $('#laboralTab').removeClass('disableTab');
            $('#referenciaTab').removeClass('disableTab');
            $('#entrevistaTab').removeClass('disableTab');
            $('#seguroTab').removeClass('disableTab');
            $('#fechasTab').addClass('disableTab');
            this.laboralForm.get('NumPersonasCargo')?.setValue(0);
            if (this.entrevistaForm.controls["RPregunta2Si"].value === true) {
              this.DesbloquearRespuesta2 = null;
            } else {
              this.DesbloquearRespuesta2 = true;
            }
            if (this.entrevistaForm.controls["RPregunta6Si"].value === true) {
              this.DesbloquearRespuesta6 = null;
            } else {
              this.DesbloquearRespuesta6 = true;
            }
            if (this.entrevistaForm.controls["RPregunta14Si"].value === true) {
              this.DesbloquearRespuesta14 = null;
            } else {
              this.DesbloquearRespuesta14 = true;
            }
            if (this.entrevistaForm.controls["RPregunta17Si"].value === true) {
              this.DesbloquearRespuesta17 = null;
            } else {
              this.DesbloquearRespuesta17 = true;
            }
            this.AddValidatorSegunOperacion();
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede editar en la oficina administración');
        }
      }        
    } else if (results === '9') { // Cambio de estado
      if (this.OperacionMarcada !== undefined) {
        this.ValidaCambioCampo();        
      }
      if (this.OperacionMarcada === undefined) {
        // entra a la operacion normal
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "" :data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.botonSiguiente.nativeElement.click();
          this.ProEstado = this.basicosFrom.get('estado')?.value;
          this.OperacionMarcada = '9';
          this.ProDescripcionOpe = 'Cambiar estado';
          this.btnBuscar = true;
          this.devolverTab(1);
          this.removeActiveTab();
          this.operacionEscogida = '/Cambio de estado';
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.disableForm = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disableFromTipoDocumento = true;
            this.disableFormProfesion = true;
            this.mostrarOficina = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.disableFormNumHijos = true;
            this.ResetAllForm();
            this.SoloBloquearForm();
          } else {
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              resultValida => {
                if (resultValida.length > 0 && results !== '5' && results !== '2') {
                  this.notif.onWarning('Advertencia','El asociado se encuentra vetado, no puede realizar esta operación.');
                  this.basicosFrom.get('operacion')?.reset();
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                  this.disableForm = true;
                } else {
                  const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                  if (fechaTabRetiro !== null && fechaTabRetiro !== undefined && this.RetiradoBloqueado !== 0) {
                    this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.',
                      );
                    this.basicosFrom.get('operacion')?.reset();
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                    this.SoloBloquearForm();
                  } else {
                    //#region cambio de estado
                    this.disableFormEstado = null;
                    this.AutoMaticFocusInput();
                    $('#estadoNatural').prop('disabled', false);
                    $('#estadoNatural').focus();
                    this.EstadosPorOperaciones();
                    this.MostrarFechaTratamiento = false;
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = false;
                    this.btnMarcarEntrevista = false;
                    this.btnOcultoBuscar = false;
                    this.btnTratamiento = false;
                    this.disableFormCedula = true;
                    this.btnTratamientoMarcar = false;
                    this.itemsLogSeguro = [];
                    this.dataActivos = [];
                    this.itemsEgresos = [];
                    this.itemsIngresos = [];
                    this.itemsContacto = [];
                    this.dataConyuge = [];
                    this.mostrarOficina = false;
                    this.formBuscarLocked = true;
                    this.bloquearCampoDir = true;
                    this.bloquearCampoDirActivo = true;
                    this.formLockedPersonNatura = true;
                    this.formLockedPersonNatura = true;
                    this.BlockFecha = true;
                    this.formLockedHipoPigno = true;
                    this.formBuscarLockedConyugue = true;
                    this.BlockCategoria = true;
                    this.formEditarLocked = true;
                    this.DescripcionBtn = 'Cambiar estado';
                    this.disableAmaCasa = false;
                    this.disablePersonasACargo = true;
                    this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
                    this.disableFormPA = true;
                    this.disableFormSA = true;
                    this.disableFormPN = true;
                    this.disableFormSN = true;
                    this.disableForm = true;
                    this.disableFormEps = true;
                    this.disableFormBtnEmpresa = true;
                    this.disableFormNumHijos = true;
                    this.disbaleFromDocumento = null;
                    this.disbaleFromTutor = true;
                    this.disableFormPersonas = true;
                    this.disableAsesor = true;
                    this.disableAsesorPpal = true;
                    this.disbaleBusqueda = true;
                    this.BlockTipoContacto = true;
                    this.BlockActivo = true;
                    this.disableClean = true;
                    this.blockBtnBasico = true;
                    this.BlockReferencia = true;
                    this.formBuscarLockedPpal = true;
                    this.disableFromTipoDocumento = true;
                    this.disableFromTipoCliente = true;
                    this.disableFormNumeroDocumento = true;
                    this.disbaleOficina = true;
                    this.blockTratamiento = true;
                    this.blockRefeBtn = false;
                    this.blockTratamientoFecha = true;
                    this.blockDebitoAtomatico = true;
                    this.disablePeriodo = true;
                    this.Blockseguro = true;
                    this.BlockMonto = true;
                    this.BlockEstado = true;
                    this.AsessorNecesario = true;
                    this.disablePEPS = true;
                    this.formLockedReconocimiento = true;
                    this.formLockedRecursos = true;
                    this.bloqCiudad = true;
                    this.bloqDeparta = true;
                    this.bloqDepartaExp = true;
                    this.FormCambioEstado.reset();
                    $('#basicoTab').addClass('disableTab');
                    $('#financieroTab').addClass('disableTab');
                    $('#contactoTab').addClass('disableTab');
                    $('#activoTab').addClass('disableTab');
                    $('#conyugueTab').addClass('disableTab');
                    $('#laboralTab').addClass('disableTab');
                    $('#referenciaTab').addClass('disableTab');
                    $('#entrevistaTab').addClass('disableTab');
                    $('#seguroTab').addClass('disableTab');
                    $('#fechasTab').addClass('disableTab');
                    this.oculatObligatorioTercero = true;
                    this.oculatObligatorioTerceroProveedor = true;
                    this.basicosFrom.controls['metodo'].setValidators(Validators.required);
                    this.basicosFrom.controls['metodo'].setErrors(Validators.required);
                    this.basicosFrom.controls['NombreDrop'].setValidators(Validators.required);
                    this.basicosFrom.controls['NombreDrop'].setErrors(Validators.required);
                    this.basicosFrom.controls['numHijos'].setValidators([Validators.required]);
                    this.basicosFrom.controls['numHijos'].setErrors({ 'incorrect': true });
                    this.basicosFrom.controls['numHijosEstudian'].setValidators([Validators.required]);
                    this.basicosFrom.controls['numHijosEstudian'].setErrors({ 'incorrect': true });
                    this.DesbloquearRespuesta2 = true;
                    this.DesbloquearRespuesta6 = true;
                    this.DesbloquearRespuesta14 = true;
                    this.DesbloquearRespuesta17 = true;
                    this.mostrarFemiliaresPeps = false;
                    this.BloquearPreguntasPeps = true;
                    this.BloquearPreguntas = true;
                    //#endregion
                  }
                }
              });
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede cambiar estado en la oficina administración');
        }

      }
    } else if (results === '7') { // Marcacion PPES
      if (this.OperacionMarcada !== undefined) {
        this.ValidaCambioCampo();        
      }
      if (this.OperacionMarcada === undefined) {
        // continua la operacion normal
        this.blockBtnBasico = false;
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "" :data));
        if (resultPerfil.NumeroOficina !== '3') {
          // valida que no este ya marcada
        if (this.basicosFrom.get('publica')?.value !== true) {
            // proceso normal
            this.operacionEscogida = '/Marcación PEPS';
            const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
            if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
              this.notif.onWarning('Advertencia', 'Debe buscar un asociado para realizar esta operación.',
                );
              this.basicosFrom.get('operacion')?.reset();
              this.btnGuardarOculto = false;
              this.siguienteOculto = true;
              this.disableForm = true;
              this.btnBuscar = true;
              this.formBuscarLocked = true;
              this.bloquearCampoDir = true;
              this.bloquearCampoDirActivo = true;
              this.formLockedPersonNatura = true;
              this.disableFromTipoCliente = true;
              this.disableFormNumeroDocumento = true;
              this.disableFromTipoDocumento = true;
              this.disableFormProfesion = true;
              this.mostrarOficina = false;
              this.disableFormPA = true;
              this.disableFormSA = true;
              this.disableFormPN = true;
              this.disableFormSN = true;
              this.disableFormNumHijos = true;
              this.ResetAllForm();
              this.SoloBloquearForm();
            } else {
              this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
                resultValida => {
                  if (resultValida.length > 0 && results !== '5' && results !== '2') {
                    this.notif.onWarning('Advertencia',
                      'El asociado se encuentra vetado, no puede realizar esta operación.',
                      );
                    this.basicosFrom.get('operacion')?.reset();
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                    this.disableForm = true;
                  } else {
                    const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                    if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                      this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.');
                      this.basicosFrom.get('operacion')?.reset();
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = true;
                      this.SoloBloquearForm();
                    } else {
                      //#region  Marcacion
                      this.botonReferenciaSiguiente.nativeElement.click();
                      this.devolverTab(8);
                      this.removeActiveTab();
                      this.VolverAbajo();
                      this.formLockedReconocimiento = null;
                      this.BloquearPreguntasPeps = null;
                      this.BloquearPreguntas = true;
                      this.formLockedRecursos = null;
                      this.btnMarcarEntrevista = true;
                      this.MostrarFechaTratamiento = false;
                      this.disableFormCedula = true;
                      this.btnOcultoBuscar = false;
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = false;
                      this.btnTratamiento = false;
                      this.formBuscarLockedPpal = true;
                      this.formBuscarLockedConyugue = true;
                      this.formBuscarLocked = true;
                      this.formBuscarLocked = true;
                      this.bloquearCampoDir = true;
                      this.bloquearCampoDirActivo = true;
                      this.formLockedPersonNatura = true;
                      this.BlockFecha = true;
                      this.formLockedHipoPigno = true;
                      this.BlockCategoria = true;
                      this.disableFromPEPS = null;
                      this.disableFromTipoDocumento = true;
                      this.disableFromTipoCliente = true;
                      this.disableFormNumeroDocumento = true;
                      this.disbaleOficina = true;
                      this.AsessorNecesario = true;
                      this.DescripcionBtn = 'Marcar';
                      this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
                      this.disableFormEstado = true;
                      this.disbaleFromDocumento = null;
                      this.disableForm = true;
                      this.disableFormPA = true;
                      this.disableFormSA = true;
                      this.disableFormPN = true;
                      this.disableFormSN = true;
                      this.disableFormEps = true;
                      this.disableFormBtnEmpresa = true;
                      this.disableFormNumHijos = true;
                      this.disbaleFromTutor = true;
                      this.disableFormPersonas = true;
                      this.disableClean = true;
                      this.disableAsesor = true;
                      this.disableAsesorPpal = true;
                      this.BlockTipoContacto = true;
                      this.BlockActivo = true;
                      this.blockRefeBtn = false;
                      this.BlockReferencia = true;
                      this.blockTratamiento = true;
                      this.blockTratamientoFecha = true;
                      this.blockDebitoAtomatico = true;
                      this.mostrarOficina = true;
                      this.disbaleBusqueda = true;
                      this.disablePeriodo = true;
                      this.Blockseguro = true;
                      this.BlockMonto = true;
                      this.BlockEstado = true;
                      this.disablePEPS = true;
                      this.bloqCiudad = true;
                      this.bloqDeparta = true;
                      this.bloqDepartaExp = true;
                      $('#basicoTab').addClass('disableTab');
                      $('#financieroTab').addClass('disableTab');
                      $('#contactoTab').addClass('disableTab');
                      $('#activoTab').addClass('disableTab');
                      $('#conyugueTab').addClass('disableTab');
                      $('#laboralTab').addClass('disableTab');
                      $('#referenciaTab').addClass('disableTab');
                      $('#entrevistaTab').addClass('disableTab');
                      $('#seguroTab').addClass('disableTab');
                      $('#fechasTab').addClass('disableTab');
                      this.entrevistaForm.get('RPregunta20Si')?.setValue(true);
                      this.entrevistaForm.get('RPregunta20No')?.setValue(false);
                      //#endregion
                    }
                  }
                });
            }
          } else {
            this.notif.onWarning('Advertencia', 'El asociado ya está marcado.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;

          }

        } else {
          this.notif.onWarning('Advertencia', 'No se puede marcar como PEPS en la oficina administración');
        }

      }  
    } else if (results === '8') { // Desmarcacion PPES
      if (this.OperacionMarcada !== undefined) {
        this.ValidaCambioCampo();        
      }
      if (this.OperacionMarcada === undefined) {
        // continua la operacion normal
        this.blockBtnBasico = false;
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          // valida que no este ya marcada
          if (this.basicosFrom.get('publica')?.value !== false) {
            // proceso normal
            this.botonSiguiente.nativeElement.click();
            this.btnBuscar = true;
            this.devolverTab(1);
            this.VolverAbajo();
            this.removeActiveTab();
            this.operacionEscogida = '/Desmarcación PEPS';
            const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
            if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
              this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
              this.basicosFrom.get('operacion')?.reset();
              this.btnGuardarOculto = false;
              this.siguienteOculto = false;
              this.disableForm = true;
              this.formBuscarLocked = true;
              this.bloquearCampoDir = true;
              this.bloquearCampoDirActivo = true;
              this.formLockedPersonNatura = true;
              this.disableFromTipoCliente = true;
              this.disableFormNumeroDocumento = true;
              this.disableFromTipoDocumento = true;
              this.disableFormProfesion = true;
              this.mostrarOficina = false;
              this.disableFormPA = true;
              this.disableFormSA = true;
              this.disableFormPN = true;
              this.disableFormSN = true;
              this.disableFormNumHijos = true;
              this.ResetAllForm();
              this.SoloBloquearForm();
            } else {
              this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
                resultValida => {
                  if (resultValida.length > 0 && results !== '5' && results !== '2') {
                    this.notif.onWarning('Advertencia','El asociado se encuentra vetado, no puede realizar esta operación.');
                    this.basicosFrom.get('operacion')?.reset();
                    this.disableForm = true;
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                  } else {
                    const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                    if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                      this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.');
                      this.basicosFrom.get('operacion')?.reset();
                      this.SoloBloquearForm();
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = true;
                    } else {
                      //#region Marcacion
                      this.btnTratamientoMarcar = false;
                      this.btnMarcarEntrevista = false;
                      this.MostrarFechaTratamiento = false;
                      this.BlockActivo = true;
                      this.BlockTipoContacto = true;
                      this.BlockReferencia = true;
                      this.blockTratamiento = true;
                      this.blockTratamientoFecha = true;
                      this.blockDebitoAtomatico = true;
                      this.disableFormCedula = true;
                      this.formBuscarLocked = true;
                      this.bloquearCampoDir = true;
                      this.bloquearCampoDirActivo = true;
                      this.BlockFecha = true;
                      this.formBuscarLockedPpal = true;
                      this.formLockedHipoPigno = true;
                      this.formBuscarLockedConyugue = true;
                      this.BlockCategoria = true;
                      this.formBuscarLocked = true;
                      this.formLockedPersonNatura = true;
                      this.disableFromPEPS = null;
                      this.disableFromTipoDocumento = true;
                      this.disableFromTipoCliente = true;
                      this.disableFormNumeroDocumento = true;
                      this.disbaleOficina = true;
                      this.DescripcionBtn = 'Desmarcar';
                      this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
                      this.disableFormPA = true;
                      this.disableFormSA = true;
                      this.disableFormPN = true;
                      this.disableFormSN = true;
                      this.AsessorNecesario = true;
                      this.disableFormEstado = true;
                      this.disbaleFromDocumento = null;
                      this.disableForm = true;
                      this.disableFormEps = true;
                      this.disableFormBtnEmpresa = true;
                      this.disableFormNumHijos = true;
                      this.disbaleFromTutor = true;
                      this.disableFormPersonas = true;
                      this.disableClean = true;
                      this.disableAsesor = true;
                      this.disableAsesorPpal = true;
                      this.disablePeriodo = true;
                      this.Blockseguro = true;
                      this.BlockMonto = true;
                      this.BlockEstado = true;
                      this.blockRefeBtn = false;
                      this.mostrarOficina = true;
                      this.btnOcultoBuscar = false;
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = false;
                      this.btnTratamiento = false;
                      this.disbaleBusqueda = true;
                      this.disablePEPS = true;
                      this.formLockedReconocimiento = true;
                      this.formLockedRecursos = true;
                      this.bloqCiudad = true;
                      this.bloqDeparta = true;
                      this.bloqDepartaExp = true;
                      $('#basicoTab').addClass('disableTab');
                      $('#financieroTab').addClass('disableTab');
                      $('#contactoTab').addClass('disableTab');
                      $('#activoTab').addClass('disableTab');
                      $('#conyugueTab').addClass('disableTab');
                      $('#laboralTab').addClass('disableTab');
                      $('#referenciaTab').addClass('disableTab');
                      $('#entrevistaTab').addClass('disableTab');
                      $('#seguroTab').addClass('disableTab');
                      $('#fechasTab').addClass('disableTab');
                      //#endregion
                    }
                  }
                });
            }
          } else {
            this.notif.onWarning('Advertencia', 'El asociado ya está desmarcado.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
          }

        } else {
          this.notif.onWarning('Advertencia', 'No se puede desmarcar PEPS en la oficina administración');
        }

      }
    } else if (results === '3') { // Imprimir afiliacion
      if (this.OperacionMarcada !== undefined) {
        this.ValidaCambioCampo();        
      }
      if (this.OperacionMarcada === undefined) {
        // continua la operacion normal
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.botonSiguiente.nativeElement.click();
          this.OperacionMarcada = undefined;
          this.ProDescripcionOpe = ' '
          this.btnTratamiento = false;
          this.devolverTab(1);
          this.removeActiveTab();
          this.disableAsesor = true;
          this.disableAsesorPpal = true;
          this.disbaleBusqueda = true;
          this.mostrarSolicitud = true;
          this.disableFromPEPS = true;
          this.disableClean = true;
          this.AsessorNecesario = true;
          this.disablePEPS = true;
          this.disableFormPA = true;
          this.disableFormSA = true;
          this.disableFormPN = true;
          this.disableFormSN = true;
          this.btnMarcarEntrevista = false;
          this.formLockedHipoPigno = true;
          this.BlockFecha = true;
          localStorage.removeItem('DataService');
          this.operacionEscogida = '/Imprimir afiliación';
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.disableForm = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disableFromTipoDocumento = true;
            this.disableFormProfesion = true;
            this.mostrarOficina = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.disableFormNumHijos = true;
            this.blockRefeBtn = false;
            this.BlockFecha = true;
            this.ResetAllForm();
            this.SoloBloquearForm();
          } else {
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              resultValida => {
                if (resultValida.length > 0 && results !== '5' && results !== '2') {
                  this.notif.onWarning('Advertencia',
                    'El asociado se encuentra vetado, no puede realizar esta operación.',
                    );
                  this.basicosFrom.get('operacion')?.reset();
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                  this.disableForm = true;
                } else {
                  this.esReimpresion = true;
                  this.CargarServicios = 1;
                  this.CargarServiciosOn = true;
                  this.BlockVinculacion = null;
                  this.serviciosFrom.reset();
                  // se utiliza para saber si se realiza una vinculacion una actualizacion y un credito en la impresion
                  localStorage.setItem('Credito', 'true');
                  localStorage.setItem('Vinculacion', 'false');
                  localStorage.setItem('Actualizacion', 'true');
                  let dataobj : string | null = localStorage.getItem('Data');
                  const data = JSON.parse(window.atob(dataobj == null ? "": dataobj));
                  this.serviciosFrom.get('servicioSolicitado')?.setValue(3);
                  this.serviciosFrom.get('operacionSeleccionada')?.setValue('imprimir');
                  this.serviciosFrom.get('Oficina')?.setValue(data.Oficina);
                  this.serviciosFrom.get('Asesor')?.setValue(data.Nombre);
                  this.basicosFrom.get('operacion')?.reset();
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                  this.BlockServicios = true;
                  this.blockRefeBtn = false;
                  this.abrirServicios.nativeElement.click();
                  this.DesbloquearRespuesta2 = true;
                  this.DesbloquearRespuesta6 = true;
                  this.DesbloquearRespuesta14 = true;
                  this.DesbloquearRespuesta17 = true;
                  this.mostrarFemiliaresPeps = false;
                  this.BloquearPreguntasPeps = true;
                  this.BloquearPreguntas = true;
                  this.btnMarcarEntrevista = false;
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                  this.btnTratamientoMarcar = false;
                  this.btnOcultoBuscar = false;
                  this.btnTratamiento = false;
                  this.MostrarAsesorExterno = false;
                  this.disableFormCedula = true;
                  this.formPasivoLocked = true;
                  this.disableMetodo = true;
                  this.disbaleBusqueda = null;
                  this.disableFromPEPS = true;
                  this.disableFormNumHijos = true;
                  this.formBuscarLocked = true;
                  this.bloquearCampoDir = true;
                  this.bloquearCampoDirActivo = true;
                  this.formLockedPersonNatura = true;
                  this.BlockFecha = true;
                  this.mostrarBtnTercero = false;
                  this.formBuscarLockedConyugue = true;
                  this.formBuscarLockedPpal = true;
                  this.formLockedHipoPigno = true;
                  this.BlockCategoria = true;
                  this.blockRefeBtn = false;
                  this.formEditarLocked = true;
                  this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
                  this.operacion = this.basicosFrom.get('operacion')?.value;
                  this.disableFormEstado = true;
                  this.disbaleFromDocumento = null;
                  this.disableForm = true;
                  this.disableFormPA = true;
                  this.disableFormSA = true;
                  this.disableFormPN = true;
                  this.disableFormSN = true;
                  this.disableFormEps = true;
                  this.disableFormBtnEmpresa = true;
                  this.disbaleFromTutor = true;
                  this.disableFormPersonas = true;
                  this.disableFromTipoDocumento = true;
                  this.disableFromTipoCliente = true;
                  this.disableFormNumeroDocumento = true;
                  this.disbaleOficina = true;
                  this.disableFormProfesion = true;
                  this.disableClean = true;
                  this.disableAsesor = true;
                  this.disableAsesorPpal = true;
                  this.formTutorOculto = false;
                  this.BlockTipoContacto = true;
                  this.BlockActivo = true;
                  this.BlockReferencia = true;
                  this.blockTratamiento = true;
                  this.blockTratamientoFecha = true;
                  this.blockDebitoAtomatico = true;
                  this.mostrarOficina = false;
                  this.MostrarFechaTratamiento = false;
                  this.disablePeriodo = true;
                  this.Blockseguro = true;
                  this.BlockMonto = true;
                  this.BlockEstado = true;
                  this.AsessorNecesario = true;
                  this.disablePEPS = true;
                  this.formLockedReconocimiento = true;
                  this.formLockedRecursos = true;
                  this.bloqCiudad = true;
                  this.bloqDeparta = true;
                  this.bloqDepartaExp = true;
                  $('#basicoTab').removeClass('disableTab');
                  $('#financieroTab').removeClass('disableTab');
                  $('#contactoTab').removeClass('disableTab');
                  $('#activoTab').removeClass('disableTab');
                  $('#conyugueTab').removeClass('disableTab');
                  $('#laboralTab').removeClass('disableTab');
                  $('#referenciaTab').removeClass('disableTab');
                  $('#entrevistaTab').removeClass('disableTab');
                  $('#seguroTab').removeClass('disableTab');
                  this.oculatObligatorioTercero = true;
                  this.oculatObligatorioTerceroProveedor = true;
                  this.DesbloquearRespuesta2 = true;
                  this.DesbloquearRespuesta6 = true;
                  this.DesbloquearRespuesta14 = true;
                  this.DesbloquearRespuesta17 = true;
                  this.mostrarFemiliaresPeps = false;
                }
              });
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede imprimir la afiliación en la oficina administración');
        }


      }
    } else if (results === '14') { // Marcar tratamiento de datos
      if (this.OperacionMarcada !== undefined) {
        this.ValidaCambioCampo();       
      }
      if (this.OperacionMarcada === undefined) {
        // continua operacion normal
        this.blockBtnBasico = false;
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.operacionEscogida = '/Marcar tratamiento de datos';
          this.btnBuscar = true;
          this.DescripcionBtnTratamiento = 'Marcar';
          if (!this.tratamientoConsulta) {
            const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
            if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
              this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
              this.basicosFrom.get('operacion')?.reset();
              this.btnGuardarOculto = false;
              this.siguienteOculto = true;
              this.disableForm = true;
              this.formBuscarLocked = true;
              this.bloquearCampoDir = true;
              this.bloquearCampoDirActivo = true;
              this.formLockedPersonNatura = true;
              this.disableFromTipoCliente = true;
              this.disableFormNumeroDocumento = true;
              this.disableFromTipoDocumento = true;
              this.disableFormProfesion = true;
              this.mostrarOficina = false;
              this.disableFormPA = true;
              this.disableFormSA = true;
              this.disableFormPN = true;
              this.disableFormSN = true;
              this.disableFormNumHijos = true;
              this.blockRefeBtn = false;
              this.ResetAllForm();
              this.SoloBloquearForm();
            } else {
              this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
                resultValida => {
                  if (resultValida.length > 0 && results !== '5' && results !== '2') {
                    this.notif.onWarning('Advertencia',
                      'El asociado se encuentra vetado, no puede realizar esta operación.',
                      );
                    this.basicosFrom.get('operacion')?.reset();
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                    this.disableForm = true;
                  } else {
                    const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                    if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                      this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.',
                        );
                      this.basicosFrom.get('operacion')?.reset();
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = true;
                      this.SoloBloquearForm();
                    } else {
                      //#region Tratamiento
                      this.removeActiveTab();
                      this.botonReferenciaSiguiente.nativeElement.click();
                      this.devolverTab(8);
                      this.VolverAbajo();
                      this.btnMarcarEntrevista = false;
                      this.btnTratamiento = true;
                      this.disableFormPA = true;
                      this.disableFormSA = true;
                      this.disableFormPN = true;
                      this.formLockedHipoPigno = true;
                      this.disableFormSN = true;
                      this.AsessorNecesario = true;
                      this.disableFromPEPS = true;
                      this.disbaleBusqueda = true;
                      this.disableClean = true;
                      this.disableAsesor = true;
                      this.disableAsesorPpal = true;
                      this.MostrarFechaTratamiento = true;
                      this.operacionEscogida = '/Marcar tratamiento de datos';
                      this.blockTratamiento = true;
                      this.blockTratamientoFecha = null;
                      this.blockDebitoAtomatico = true;
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = false;
                      this.btnOcultoBuscar = false;
                      this.blockRefeBtn = false;
                      this.formBuscarLockedPpal = true;
                      this.formBuscarLockedConyugue = true;
                      this.formBuscarLocked = true;
                      this.bloquearCampoDir = true;
                      this.bloquearCampoDirActivo = true;
                      this.formLockedPersonNatura = true;
                      this.BlockFecha = true;
                      this.disableTabSeguro = true;
                      this.disableFormNumHijos = true;
                      this.disablePEPS = true;
                      this.formLockedReconocimiento = true;
                      this.formLockedRecursos = true;
                      this.bloqCiudad = true;
                      this.bloqDeparta = true;
                      this.bloqDepartaExp = true;
                      this.blockBtnBasico = true;
                      $('#basicoTab').addClass('disableTab');
                      $('#financieroTab').addClass('disableTab');
                      $('#contactoTab').addClass('disableTab');
                      $('#activoTab').addClass('disableTab');
                      $('#conyugueTab').addClass('disableTab');
                      $('#laboralTab').addClass('disableTab');
                      $('#referenciaTab').addClass('disableTab');
                      $('#entrevistaTab').removeClass('disableTab');
                      $('#seguroTab').addClass('disableTab');
                      $('#fechasTab').addClass('disableTab');
                      this.oculatObligatorioTercero = true;
                      this.oculatObligatorioTerceroProveedor = true;
                      this.DesbloquearRespuesta2 = true;
                      this.DesbloquearRespuesta6 = true;
                      this.DesbloquearRespuesta14 = true;
                      this.DesbloquearRespuesta17 = true;
                      this.mostrarFemiliaresPeps = false;
                      //#endregion
                    }
                  }
                });
            }
          } else {
            this.bloquearFormularios();
            this.notif.onWarning('Advertencia', 'El tratamiento de datos ya se encuentra marcado.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.btnOcultoBuscar = false;
            this.siguienteOculto = true;
            this.blockRefeBtn = false;
            this.btnMarcarEntrevista = false;
            this.btnTratamiento = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.formLockedHipoPigno = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.AsessorNecesario = true;
            this.disableFromPEPS = true;
            this.disbaleBusqueda = true;
            this.disableClean = true;
            this.MostrarFechaTratamiento = true;
            this.operacionEscogida = '/Marcar tratamiento de datos';
            this.blockTratamiento = true;
            this.blockTratamientoFecha = null;
            this.blockDebitoAtomatico = true;
            this.formBuscarLockedPpal = true;
            this.formBuscarLockedConyugue = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.BlockFecha = true;
            this.disableTabSeguro = true;
            this.disableFormNumHijos = true;
            this.disablePEPS = true;
            this.formLockedReconocimiento = true;
            this.formLockedRecursos = true;
            this.disableAsesor = true;
            this.disableAsesorPpal = true;
            $('#basicoTab').removeClass('disableTab');
            $('#financieroTab').removeClass('disableTab');
            $('#contactoTab').removeClass('disableTab');
            $('#activoTab').removeClass('disableTab');
            $('#conyugueTab').removeClass('disableTab');
            $('#laboralTab').removeClass('disableTab');
            $('#referenciaTab').removeClass('disableTab');
            $('#entrevistaTab').removeClass('disableTab');
            $('#seguroTab').removeClass('disableTab');
            $('#fechasTab').addClass('disableTab');
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede marcar el tratamiento de datos en la oficina administración');
        }

      }
    } else if (results === '15') { // Solicitud Retiro
      if (this.OperacionMarcada !== undefined) {
        this.ValidaCambioCampo();        
      }
      if (this.OperacionMarcada === undefined) {
        // Continua la operacion normal
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.operacionEscogida = '/Solicitud retiro';
          this.btnBuscar = true;
          this.AsessorNecesario = true;
          this.disableFromPEPS = true;
          this.disableClean = true;
          this.disablePEPS = true;
          this.disableFormPA = true;
          this.disableFormSA = true;
          this.disableFormPN = true;
          this.disableFormSN = true;
          this.disableAsesor = true;
          this.disableAsesorPpal = true;
          this.btnMarcarEntrevista = false;
          this.btnTratamiento = false;
          this.btnGuardarOculto = false;
          this.mostrarBtn = true;
          this.siguienteOculto = false;
          this.formLockedReconocimiento = true;
          this.formLockedRecursos = true;
          this.blockRefeBtn = false;
          this.formLockedHipoPigno = true;
          this.BlockFecha = true;
          this.oculatObligatorioTercero = true;
          this.oculatObligatorioTerceroProveedor = true;
          this.DesbloquearRespuesta2 = true;
          this.DesbloquearRespuesta6 = true;
          this.DesbloquearRespuesta14 = true;
          this.DesbloquearRespuesta17 = true;
          this.mostrarFemiliaresPeps = false;
          this.operacionesModel.idOperacion = results;
          this.operacionesModel.idPerfil = resultPerfil.idPerfilUsuario;
          let IdModuloActivo : string | null = localStorage.getItem('IdModuloActivo');
          this.operacionesModel.idModulo = +JSON.parse(window.atob(IdModuloActivo == null ? "" : IdModuloActivo));
          this.bloquearTodo();
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia',
              'Debe buscar un asociado para realizar esta operación.',
              );
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.disableForm = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disableFromTipoDocumento = true;
            this.disableFormProfesion = true;
            this.mostrarOficina = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.disableFormNumHijos = true;
            this.bloqCiudad = true;
            this.bloqDeparta = true;
            this.bloqDepartaExp = true;
            this.ResetAllForm();
            this.SoloBloquearForm();
          } else {
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              resultValida => {
                if (resultValida.length > 0 && results !== '5' && results !== '2') {
                  this.notif.onWarning('Advertencia',
                    'El asociado se encuentra vetado, no puede realizar esta operación.',
                    );
                  this.basicosFrom.get('operacion')?.reset();
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                  this.disableForm = true;
                } else {
                  this.DescripcionBtn = 'Siguiente';
                  const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                  const tercero = Number(localStorage.getItem('TerceroNatura'));
                  this.clientesService.GetDateRetiro(tercero).subscribe(
                    result => {
                      if (result === null && fechaTabRetiro === null) {
                        this.solicitudRetiroForm.reset();
                        this.GetMotivosRetiro();
                      } else {
                        if (fechaTabRetiro !== null) {
                          this.notif.onWarning('Advertencia','Esta operación no se puede realizar, el asociado se encuentra retirado.');
                          this.basicosFrom.get('operacion')?.reset();
                          this.btnGuardarOculto = false;
                          this.siguienteOculto = true;
                          this.solicitudRetiroForm.get('idMotivo')?.reset();
                          this.bloquearFormularios();
                        } else {
                          this.notif.onWarning('Advertencia','El asociado ya tiene una solicitud de retiro.');
                          this.solicitudRetiroForm.get('idMotivo')?.reset();
                        }
                        this.mostrarReimprimir = true;
                        this.objMotivoEnvio.CiudadExpedicion = this.objMotivoEnvio.CiudadExpedicion;
                        this.objMotivoEnvio.Direccion = this.objMotivoEnvio.Direccion;
                        this.objMotivoEnvio.Documento = this.objMotivoEnvio.Documento;
                        this.objMotivoEnvio.Email = this.objMotivoEnvio.Email;
                        this.objMotivoEnvio.Empresa = this.objMotivoEnvio.Empresa;
                        this.objMotivoEnvio.IdMotivo = this.objMotivoEnvio.IdMotivo;
                        this.objMotivoEnvio.Motivo = this.objMotivoEnvio.Motivo;
                        this.objMotivoEnvio.Nombre = this.objMotivoEnvio.Nombre;
                        this.objMotivoEnvio.NombreAsesor = this.objMotivoEnvio.NombreAsesor;
                        this.objMotivoEnvio.Otro = this.objMotivoEnvio.Otro;
                        this.objMotivoEnvio.Telefono = this.objMotivoEnvio.Telefono;
                        this.objMotivoEnvio.TelefonoEmpresa = this.objMotivoEnvio.TelefonoEmpresa;
                        this.disbaleBusqueda = true;
                        this.motivoEnvioRetiroJson = JSON.stringify(this.objMotivoEnvio);
                        this.removeActiveTab();
                        this.devolverTab(10);
                        this.botonHistorial.nativeElement.click();
                        this.basicosFrom.get('operacion')?.reset();
                        this.btnGuardarOculto = false;
                        this.siguienteOculto = true;
                      }
                    });
                }
              });
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede solicitar retiro en la oficina administración');
        }

      }     

    } else if (results === '16') { // Solicitud Reingreso
      if (this.OperacionMarcada !== undefined) {
        this.ValidaCambioCampo();        
      }
      if (this.OperacionMarcada === undefined) {
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.operacionEscogida = '/Reingreso';
          this.btnBuscar = true;
          this.disbaleBusqueda = true;
          this.disableFromPEPS = true;
          this.AsessorNecesario = true;
          this.disableClean = true;
          this.disablePEPS = true;
          this.disableFormPA = true;
          this.disableFormSA = true;
          this.disableFormPN = true;
          this.disableFormSN = true;
          this.disableAsesor = true;
          this.disableAsesorPpal = true;
          this.btnTratamiento = false;
          this.btnGuardarOculto = false;
          this.siguienteOculto = false;
          this.btnMarcarEntrevista = false;
          this.formLockedReconocimiento = true;
          this.formLockedRecursos = true;
          this.blockRefeBtn = false;
          this.BlockFecha = true;
          this.formLockedHipoPigno = true;
          this.oculatObligatorioTercero = true;
          this.oculatObligatorioTerceroProveedor = true;
          this.DesbloquearRespuesta2 = true;
          this.DesbloquearRespuesta6 = true;
          this.DesbloquearRespuesta14 = true;
          this.DesbloquearRespuesta17 = true;
          this.mostrarFemiliaresPeps = false;
          this.bloqCiudad = true;
          this.bloqDeparta = true;
          this.bloqDepartaExp = true;
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia',
              'Debe buscar un asociado para realizar esta operación.',
              );
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.disableForm = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disableFromTipoDocumento = true;
            this.disableFormProfesion = true;
            this.mostrarOficina = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.disableFormNumHijos = true;
            this.ResetAllForm();
            this.SoloBloquearForm();
          } else {
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              resultValida => {
                if (resultValida.length > 0 && results !== '5' && results !== '2') {
                  this.notif.onWarning('Advertencia','El asociado se encuentra vetado, no puede realizar esta operación.');
                  this.basicosFrom.get('operacion')?.reset();
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                  this.disableForm = true;
                } else {
                  const relacion = this.basicosFrom.get('tipoCliente')?.value;
                  if (+relacion !== 15) {
                    if (this.RetiradoBloqueado === 0) { // DUDA POR QUE POR ESTO NO  DEJA HACER REINTEGRO
                      this.DescripcionBtn = 'Siguiente';
                      const tercero = Number(localStorage.getItem('TerceroNatura'));
                      this.clientesService.GetDateReingreso(tercero).subscribe(
                        result => {
                          if (result === null) { // valida si el asociado ya tiene una solicitud de reingreso
                            const fechaSolRetiro = this.fechasForm.get('fechaTabSoliciudRetiro')?.value;
                            const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                            const estadoAsociado = this.basicosFrom.get('estado')?.value;
                            if (result === null && fechaSolRetiro === null && fechaTabRetiro === null) {
                              this.notif.onWarning('Advertencia',
                                'Validar, el asociado no tiene registrada fecha de Retiro',
                                );
                              this.basicosFrom.get('operacion')?.reset();
                              this.btnGuardarOculto = false;
                              this.siguienteOculto = true;
                            } else {
                              if (fechaTabRetiro !== null) { // valida que la fecha de  retiro tenga el tiempo que es
                                const fechaActual = formatDate(new Date(), 'yyyy-MM-dd hh:mm:ss', 'en');
                                const fecha1 = moment(fechaTabRetiro, 'YYYY-MM-DD');
                                const fecha2 = moment(fechaActual, 'YYYY-MM-DD');
                                const diff = fecha2.diff(fecha1, 'months', true);
                                if (diff >= 6) {
                                  Swal.fire({
                                    title: 'Advertencia',
                                    text: '',
                                    html: '¿ Desea realizar el reingreso ? ',
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonText: 'Si',
                                    cancelButtonText: 'No',
                                    confirmButtonColor: 'rgb(13,165,80)',
                                    cancelButtonColor: 'rgb(160,0,87)',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false
                                    // tslint:disable-next-line:no-shadowed-variable
                                  }).then((results) => {
                                    if (results.value) {
                                      this.setDataSolicitudReingreso();
                                    } else {
                                      this.basicosFrom.get('operacion')?.reset();
                                      this.disbaleBusqueda = true;
                                      this.btnGuardarOculto = false;
                                      this.siguienteOculto = true;
                                    }
                                  });
                                } else {
                                  this.notif.onWarning('Advertencia',
                                    'No cumple con el tiempo establecido por la Cooperativa para realizar el reingreso.',
                                    );
                                  this.basicosFrom.get('operacion')?.reset();
                                  this.btnGuardarOculto = false;
                                  this.siguienteOculto = true;
                                }
                              } else {
                                this.notif.onWarning('Advertencia',
                                  'El asociado no tiene fecha de retiro.',
                                  );
                                this.basicosFrom.get('operacion')?.reset();
                                this.disbaleBusqueda = true;
                                this.btnGuardarOculto = false;
                                this.siguienteOculto = true;
                              }
                            }
                          } else {
                            this.notif.onWarning('Advertencia','El asociado ya tiene una solicitud de reingreso.');
                            this.basicosFrom.get('operacion')?.reset();
                            this.disbaleBusqueda = true;
                            this.btnGuardarOculto = false;
                            this.siguienteOculto = true;
                          }
                        });
                    } else {
                      this.notif.onWarning('Advertencia','El asociado se encuentra bloqueado, no puede realizar esta operación.');
                      this.basicosFrom.get('operacion')?.reset();
                      this.disableForm = true;
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = true;
                    }
                  } else {
                    const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                    if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                      this.notif.onWarning('Advertencia', 'La operación Reingreso es para asociados.');
                      this.basicosFrom.get('operacion')?.reset();
                      this.SoloBloquearForm();
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = true;
                    } else {
                      this.notif.onWarning('Advertencia','No se puede realizar el reingreso.');
                      this.basicosFrom.get('operacion')?.reset();
                      this.disbaleBusqueda = true;
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = true;
                    }
                  }
                }
              });
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede solicitar reingreso en la oficina administración');
        }
      }

    } else if (results === '4') { // Cambio de relacion
      if (this.OperacionMarcada !== undefined) {
        this.ValidaCambioCampo();        
      }
      if (this.OperacionMarcada === undefined) {
        // continua proceso normal
        if (this.basicosFrom.get('estado')?.value !== 55) {
          let data : string | null = localStorage.getItem('Data');
          const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
          if (resultPerfil.NumeroOficina !== '3') {
            this.btnBuscar = true;
            this.botonSiguiente.nativeElement.click();
            this.ProRelacion = this.basicosFrom.get('tipoCliente')?.value;
            if (this.ProRelacion === 10) {
              this.ProIdTutor = this.basicosFrom.get('IdentificacionTutor')?.value;
              this.ProNomTutor = this.basicosFrom.get('NombreTutor')?.value;
            }
            this.OperacionMarcada = '4';
            this.ProDescripcionOpe = 'Cambiar relación';
            this.blockBtnBasico = true;
            this.devolverTab(1);
            this.removeActiveTab();
            this.operacionEscogida = '/Cambiar relación';
            const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
            if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
              this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
              this.basicosFrom.get('operacion')?.reset();
              this.btnGuardarOculto = false;
              this.siguienteOculto = true;
              this.disableForm = true;
              this.formBuscarLocked = true;
              this.bloquearCampoDir = true;
              this.bloquearCampoDirActivo = true;
              this.formLockedPersonNatura = true;
              this.disableFromTipoCliente = true;
              this.disableFormNumeroDocumento = true;
              this.disableFromTipoDocumento = true;
              this.disableFormProfesion = true;
              this.mostrarOficina = false;
              this.disableFormPA = true;
              this.disableFormSA = true;
              this.disableFormPN = true;
              this.disableFormSN = true;
              this.disableFormNumHijos = true;
              this.blockRefeBtn = false;
              this.bloqCiudad = true;
              this.bloqDeparta = true;
              this.bloqDepartaExp = true;
              this.ResetAllForm();
              this.SoloBloquearForm();
            } else {
              this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
                resultValida => {
                  if (resultValida.length > 0 && results !== '5' && results !== '2') {
                    this.notif.onWarning('Advertencia','El asociado se encuentra vetado, no puede realizar esta operación.');
                    this.basicosFrom.get('operacion')?.reset();
                    this.disableForm = true;
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                  } else {
                    const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                    if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined && this.RetiradoBloqueado !== 0)) {
                      this.notif.onWarning('Advertencia', 'El asociado se encuentra bloqueado, no puede realizar esta operación.',);
                      this.basicosFrom.get('operacion')?.reset();
                      this.SoloBloquearForm();
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = true;
                    } else {
                      //#region Cambio relacion
                      const codigoAsesor = this.asesorForm.get('strCodigo')?.value;
                      if (codigoAsesor !== '' && codigoAsesor !== null && codigoAsesor !== undefined) {
                        this.MostrarAsesorExterno = true;
                      } else {
                        this.MostrarAsesorExterno = false;
                      }
                      this.formLockedHipoPigno = true;
                      this.btnMarcarEntrevista = false;
                      this.disableFromTipoCliente = null;
                      this.disbaleFromTutor = null;
                      this.AsessorNecesario = true;
                      this.DescripcionBtn = 'Cambiar';
                      this.MostrarFechaTratamiento = false;
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = false;
                      this.btnOcultoBuscar = true;
                      this.btnTratamiento = false;
                      this.formBuscarLocked = true;
                      this.bloquearCampoDir = true;
                      this.bloquearCampoDirActivo = true;
                      this.formLockedPersonNatura = true;
                      this.BlockFecha = true;
                      this.formBuscarLockedConyugue = true;
                      this.BlockCategoria = true;
                      this.formEditarLocked = true;
                      this.blockRefeBtn = false;
                      this.disableForm = true;
                      this.disableFormEps = true;
                      this.disableFormBtnEmpresa = true;
                      this.disableFormNumHijos = true;
                      this.BlockTipoContacto = true;
                      this.BlockActivo = true;
                      this.BlockReferencia = true;
                      this.Blockseguro = true;
                      this.BlockMonto = true;
                      this.BlockEstado = true;
                      this.disableFormPA = true;
                      this.disableFormSA = true;
                      this.disableFormPN = true;
                      this.disableFormSN = true;
                      this.disbaleBusqueda = true;
                      this.disableFromPEPS = true;
                      this.disableFromTipoDocumento = true;
                      this.disableFormNumeroDocumento = true;
                      this.disableFormProfesion = true;
                      this.mostrarOficina = false;
                      this.blockTratamiento = true;
                      this.blockTratamientoFecha = true;
                      this.blockDebitoAtomatico = true;
                      this.disableFormPersonas = true;
                      this.disableClean = false;
                      this.disableFormEstado = true;
                      this.disablePeriodo = true;
                      this.disablePEPS = true;
                      this.disableAsesor = true;
                      this.disableAsesorPpal = true;
                      this.formLockedReconocimiento = true;
                      this.formLockedRecursos = true;
                      $('#basicoTab').removeClass('disableTab');
                      $('#financieroTab').addClass('disableTab');
                      $('#contactoTab').addClass('disableTab');
                      $('#activoTab').addClass('disableTab');
                      $('#conyugueTab').addClass('disableTab');
                      $('#laboralTab').addClass('disableTab');
                      $('#referenciaTab').addClass('disableTab');
                      $('#entrevistaTab').addClass('disableTab');
                      $('#seguroTab').addClass('disableTab');
                      $('#fechasTab').addClass('disableTab');
                      this.oculatObligatorioTercero = true;
                      this.oculatObligatorioTerceroProveedor = true;
                      this.DesbloquearRespuesta2 = true;
                      this.DesbloquearRespuesta6 = true;
                      this.DesbloquearRespuesta14 = true;
                      this.DesbloquearRespuesta17 = true;
                      this.mostrarFemiliaresPeps = false;
                      //#endregion
                    }
                  }
                });
            }
          } else {
            this.notif.onWarning('Advertencia', 'No se puede cambiar relación en la oficina administración');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede cambiar relación a un asociado retirado');
          this.basicosFrom.get('operacion')?.reset();
          this.btnGuardarOculto = false;
          this.siguienteOculto = true;
        }
      }     
    } else if (results === '17') { // Cambio tipo y documento
      if (this.OperacionMarcada !== undefined) {
        this.ValidaCambioCampo();        
      }
      if (this.OperacionMarcada === undefined) {
        // continua la operacion normal 
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.ProTipoD = this.basicosFrom.get('tipoDocumento')?.value;
          this.ProDocumento = this.basicosFrom.get('numeroDocumento')?.value;
          this.OperacionMarcada = '17';
          this.ProDescripcionOpe = 'Cambio tipo y número de documento';
          this.operacionEscogida = '/Cambio tipo y número de documento';
          this.btnBuscar = true;
          this.blockBtnBasico = true;
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.disableForm = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disableFromTipoDocumento = true;
            this.disableFormProfesion = true;
            this.mostrarOficina = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.disableFormNumHijos = true;
            this.blockRefeBtn = false;
            this.bloqCiudad = true;
            this.bloqDeparta = true;
            this.bloqDepartaExp = true;
            this.ResetAllForm();
            this.SoloBloquearForm();
          } else {
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              resultValida => {
                if (resultValida.length > 0 && results !== '5' && results !== '2') {
                  this.notif.onWarning('Advertencia',
                    'El asociado se encuentra vetado, no puede realizar esta operación.',
                    );
                  this.basicosFrom.get('operacion')?.reset();
                  this.disableForm = true;
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                } else {
                  const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                  if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                    this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.',
                      );
                    this.basicosFrom.get('operacion')?.reset();
                    this.SoloBloquearForm();
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                  } else {
                    //#region Cambio tipo y documento
                    this.btnMarcarEntrevista = false;
                    this.botonSiguiente.nativeElement.click();
                    this.devolverTab(1);
                    this.removeActiveTab();
                    this.operacionEscogida = '/Cambio de Tipo de documento';
                    this.disableFromTipoDocumento = null;
                    this.DescripcionBtn = 'Cambiar';
                    this.disableFromTipoCliente = true;
                    this.AsessorNecesario = true;
                    this.MostrarFechaTratamiento = false;
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = false;
                    this.btnOcultoBuscar = true;
                    this.btnTratamiento = false;
                    this.formBuscarLocked = true;
                    this.bloquearCampoDir = true;
                    this.bloquearCampoDirActivo = true;
                    this.formLockedPersonNatura = true;
                    this.BlockFecha = true;
                    this.formLockedHipoPigno = true;
                    this.formBuscarLockedConyugue = true;
                    this.BlockCategoria = true;
                    this.formEditarLocked = true;
                    this.disbaleFromTutor = true;
                    this.disableForm = true;
                    this.disableFormPA = true;
                    this.disableFormSA = true;
                    this.disableFormPN = true;
                    this.disableFormSN = true;
                    this.disableFormEps = true;
                    this.disableAsesor = true;
                    this.disableAsesorPpal = true;
                    this.disableFormBtnEmpresa = true;
                    this.disableFormNumHijos = true;
                    this.BlockTipoContacto = true;
                    this.BlockActivo = true;
                    this.BlockReferencia = true;
                    this.Blockseguro = true;
                    this.BlockMonto = true;
                    this.BlockEstado = true;
                    this.disbaleBusqueda = true;
                    this.disableFromPEPS = true;
                    this.disableFormNumeroDocumento = null;
                    this.disbaleOficina = true;
                    this.disableFormProfesion = true;
                    this.mostrarOficina = false;
                    this.blockTratamiento = true;
                    this.blockTratamientoFecha = true;
                    this.blockDebitoAtomatico = true;
                    this.disableFormPersonas = true;
                    this.disableClean = false;
                    this.disableFormEstado = true;
                    this.disablePeriodo = true;
                    this.disablePEPS = true;
                    this.blockRefeBtn = false;
                    this.formLockedReconocimiento = true;
                    this.formLockedRecursos = true;
                    $('#basicoTab').removeClass('disableTab');
                    $('#financieroTab').addClass('disableTab');
                    $('#contactoTab').addClass('disableTab');
                    $('#activoTab').addClass('disableTab');
                    $('#conyugueTab').addClass('disableTab');
                    $('#laboralTab').addClass('disableTab');
                    $('#referenciaTab').addClass('disableTab');
                    $('#entrevistaTab').addClass('disableTab');
                    $('#seguroTab').addClass('disableTab');
                    $('#fechasTab').addClass('disableTab');
                    this.oculatObligatorioTercero = true;
                    this.oculatObligatorioTerceroProveedor = true;
                    this.DesbloquearRespuesta2 = true;
                    this.DesbloquearRespuesta6 = true;
                    this.DesbloquearRespuesta14 = true;
                    this.DesbloquearRespuesta17 = true;
                    this.mostrarFemiliaresPeps = false;
                    const cliente = +this.basicosFrom.value.tipoCliente;
                    this.clientesGetListService.GetTipoDocumento().subscribe(
                      result => {
                        this.dataTipoDocumento = result;
                        if (cliente === 10) {
                          this.dataTipoDocumento.splice(-6, 1);
                          this.dataTipoDocumento.splice(0, 3);
                          this.dataTipoDocumento.splice(2, 1);
                        } else if (cliente === 5) {
                          this.dataTipoDocumento.splice(2, 1);
                          this.dataTipoDocumento.splice(2, 1);
                          this.dataTipoDocumento.splice(2, 1);
                          this.dataTipoDocumento.splice(2, 1);
                          this.dataTipoDocumento.splice(2, 1);
                        } else if (cliente === 15) {
                          this.dataTipoDocumento.splice(-6, 1);
                          this.dataTipoDocumento.splice(2, 1);
                          this.dataTipoDocumento.splice(2, 1);
                        } else {
                          this.dataTipoDocumento = [];
                        }
                      });
                    //#endregion
                  }
                }
              });
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede cambiar el tipo y número de documento en la oficina administración');
        }
      }
    } else if (results === '18') { // Cambio nombre y apellidos
      if (this.OperacionMarcada !== undefined) {
        this.ValidaCambioCampo();       
      }
      if (this.OperacionMarcada === undefined) {
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.ProPrimerNombre = this.basicosFrom.get('primerNombre')?.value;
          this.ProSegundoNombre = this.basicosFrom.get('segundoNombre')?.value;
          this.ProPrimerApellido = this.basicosFrom.get('primerApellido')?.value;
          this.ProSegundoApellido = this.basicosFrom.get('segundoApellido')?.value;
          this.OperacionMarcada = '18';
          this.ProDescripcionOpe = 'Cambiar nombres y apellidos';
          this.btnBuscar = true;
          this.operacionEscogida = '/Cambiar nombres y apellidos';
          this.blockBtnBasico = true;
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.disableForm = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disableFromTipoDocumento = true;
            this.disableFormProfesion = true;
            this.mostrarOficina = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.blockRefeBtn = false;
            this.disableFormNumHijos = true;
            this.ResetAllForm();
            this.SoloBloquearForm();
          } else {
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              resultValida => {
                if (resultValida.length > 0 && results !== '5' && results !== '2') {
                  this.notif.onWarning('Advertencia',
                    'El asociado se encuentra vetado, no puede realizar esta operación.',
                    );
                  this.basicosFrom.get('operacion')?.reset();
                  this.disableForm = true;
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                } else {
                  const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                  if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                    this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.');
                    this.basicosFrom.get('operacion')?.reset();
                    this.SoloBloquearForm();
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                  } else {
                    //#region  cambio nombres
                    this.botonSiguiente.nativeElement.click();
                    this.devolverTab(1);
                    this.removeActiveTab();
                    this.operacionEscogida = '/Cambiar nombres y apellidos';
                    this.disableFormPA = null;
                    this.disableFormSA = null;
                    this.disableFormPN = null;
                    this.disableFormSN = null;
                    this.DescripcionBtn = 'Cambiar';
                    this.btnMarcarEntrevista = false;
                    this.disableFromTipoDocumento = true;
                    this.disableFromTipoCliente = true;
                    this.AsessorNecesario = true;
                    this.formLockedHipoPigno = true;
                    this.MostrarFechaTratamiento = false;
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = false;
                    this.btnOcultoBuscar = true;
                    this.btnTratamiento = false;
                    this.formBuscarLocked = true;
                    this.bloquearCampoDir = true;
                    this.bloquearCampoDirActivo = true;
                    this.formLockedPersonNatura = true;
                    this.BlockFecha = true;
                    this.formBuscarLockedConyugue = true;
                    this.BlockCategoria = true;
                    this.blockRefeBtn = false;
                    this.formEditarLocked = true;
                    this.disbaleFromTutor = true;
                    this.disableForm = true;
                    this.disableFormEps = true;
                    this.disableFormBtnEmpresa = true;
                    this.disableFormNumHijos = true;
                    this.BlockTipoContacto = true;
                    this.BlockActivo = true;
                    this.BlockReferencia = true;
                    this.Blockseguro = true;
                    this.BlockMonto = true;
                    this.BlockEstado = true;
                    this.disbaleBusqueda = true;
                    this.disableFromPEPS = true;
                    this.disableFormNumeroDocumento = true;
                    this.disbaleOficina = true;
                    this.disableFormProfesion = true;
                    this.mostrarOficina = false;
                    this.blockTratamiento = true;
                    this.blockTratamientoFecha = true;
                    this.blockDebitoAtomatico = true;
                    this.disableFormPersonas = true;
                    this.disableClean = false;
                    this.disableFormEstado = true;
                    this.disablePeriodo = true;
                    this.disablePEPS = true;
                    this.disableAsesor = true;
                    this.disableAsesorPpal = true;
                    this.formLockedReconocimiento = true;
                    this.formLockedRecursos = true;
                    this.bloqCiudad = true;
                    this.bloqDeparta = true;
                    this.bloqDepartaExp = true;
                    $('#basicoTab').removeClass('disableTab');
                    $('#financieroTab').addClass('disableTab');
                    $('#contactoTab').addClass('disableTab');
                    $('#activoTab').addClass('disableTab');
                    $('#conyugueTab').addClass('disableTab');
                    $('#laboralTab').addClass('disableTab');
                    $('#referenciaTab').addClass('disableTab');
                    $('#entrevistaTab').addClass('disableTab');
                    $('#seguroTab').addClass('disableTab');
                    $('#fechasTab').addClass('disableTab');
                    this.oculatObligatorioTercero = true;
                    this.oculatObligatorioTerceroProveedor = true;
                    this.DesbloquearRespuesta2 = true;
                    this.DesbloquearRespuesta6 = true;
                    this.DesbloquearRespuesta14 = true;
                    this.DesbloquearRespuesta17 = true;
                    this.mostrarFemiliaresPeps = false;
                    //#endregion
                  }
                }
              });
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede cambiar nombres y apellidos en la oficina administración');
        }
      }     
    } else if (results === '19') { // Editar asesor externo
      if (this.OperacionMarcada !== undefined) {
        // Valida que la operacion seleccionada si tenga un cambio y genera alerta
        this.ValidaCambioCampo(); 
      }
      if (this.OperacionMarcada === undefined){
        // continua la operacion normal
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.ProIdAsesorE = this.asesorForm.get('strCodigo')?.value;
          this.OperacionMarcada = '19';
          this.ProDescripcionOpe = 'Cambiar asesor externo';
          this.operacionEscogida = '/Cambiar asesor externo';
          this.btnBuscar = true;
          this.blockBtnBasico = true;
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.disableForm = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disableFromTipoDocumento = true;
            this.disableFormProfesion = true;
            this.mostrarOficina = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.disableFormNumHijos = true;
            this.blockRefeBtn = false;
            this.ResetAllForm();
            this.SoloBloquearForm();
          } else {
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              resultValida => {
                if (resultValida.length > 0 && results !== '5' && results !== '2') {
                  this.notif.onWarning('Advertencia','El asociado se encuentra vetado, no puede realizar esta operación.');
                  this.basicosFrom.get('operacion')?.reset();
                  this.disableForm = true;
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                } else {
                  const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                  if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                    this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.');
                    this.basicosFrom.get('operacion')?.reset();
                    this.SoloBloquearForm();
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                  } else {
                    //#region Editar asesor externo
                    this.operacionEscogida = '/Cambiar asesor externo';
                    this.MostrarAsesorExterno = true;
                    this.disableAsesor = null;
                    this.disableAsesorPpal = true;
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = false;
                    this.DescripcionBtn = 'Actualizar';
                    this.MostrarFechaTratamiento = false;
                    this.disableFormCedula = true;
                    this.btnMarcarEntrevista = false;
                    this.btnOcultoBuscar = false;
                    this.btnTratamiento = false;
                    this.formBuscarLockedPpal = true;
                    this.formLockedPersonNatura = true;
                    this.formLockedHipoPigno = true;
                    this.formBuscarLockedConyugue = true;
                    this.formBuscarLocked = true;
                    this.BlockFecha = true;
                    this.formBuscarLocked = true;
                    this.bloquearCampoDir = true;
                    this.bloquearCampoDirActivo = true;
                    this.BlockCategoria = true;
                    this.blockRefeBtn = false;
                    this.disableFromPEPS = null;
                    this.disableFromTipoDocumento = true;
                    this.disableFromTipoCliente = true;
                    this.disableFormNumeroDocumento = true;
                    this.disbaleOficina = true;
                    this.AsessorNecesario = true;
                    this.DescripcionBtn = 'Actualizar';
                    this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
                    this.disableFormEstado = true;
                    this.disbaleFromDocumento = null;
                    this.disableForm = true;
                    this.disableFormPA = true;
                    this.disableFormSA = true;
                    this.disableFormPN = true;
                    this.disableFormSN = true;
                    this.disableFormEps = true;
                    this.disableFormBtnEmpresa = true;
                    this.disableFormNumHijos = true;
                    this.disbaleFromTutor = true;
                    this.disableFormPersonas = true;
                    this.disableClean = true;
                    this.BlockTipoContacto = true;
                    this.BlockActivo = true;
                    this.BlockReferencia = true;
                    this.blockTratamiento = true;
                    this.blockTratamientoFecha = true;
                    this.blockDebitoAtomatico = true;
                    this.mostrarOficina = true;
                    this.disbaleBusqueda = true;
                    this.disablePeriodo = true;
                    this.Blockseguro = true;
                    this.BlockMonto = true;
                    this.BlockEstado = true;
                    this.disablePEPS = true;
                    this.formLockedReconocimiento = true;
                    this.formLockedRecursos = true;
                    this.bloqCiudad = true;
                    this.bloqDeparta = true;
                    this.bloqDepartaExp = true;
                    $('#basicoTab').addClass('disableTab');
                    $('#financieroTab').addClass('disableTab');
                    $('#contactoTab').addClass('disableTab');
                    $('#activoTab').addClass('disableTab');
                    $('#conyugueTab').addClass('disableTab');
                    $('#laboralTab').addClass('disableTab');
                    $('#referenciaTab').addClass('disableTab');
                    $('#entrevistaTab').addClass('disableTab');
                    $('#seguroTab').addClass('disableTab');
                    $('#fechasTab').addClass('disableTab');
                    this.VolverAbajo();
                    this.removeActiveTab();
                    this.devolverTab(1);
                    this.botonSiguiente.nativeElement.click();
                    this.oculatObligatorioTercero = true;
                    this.oculatObligatorioTerceroProveedor = true;
                    this.DesbloquearRespuesta2 = true;
                    this.DesbloquearRespuesta6 = true;
                    this.DesbloquearRespuesta14 = true;
                    this.DesbloquearRespuesta17 = true;
                    this.mostrarFemiliaresPeps = false;
                    //#endregion
                  }
                }
              });
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede cambiar el asesor externo en la oficina administración');
        }
      }
    } else if (results === '6') { // Cambiar fecha de actualización
      if (this.OperacionMarcada !== undefined) {
        // Valida que la operacion seleccionada si tenga un cambio
        this.ValidaCambioCampo();        
      }
      if (this.OperacionMarcada === undefined) {
        // continua la operacion normal 
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.operacionEscogida = '/Cambiar fecha de actualizacón';
          this.btnBuscar = true;
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.disableForm = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disableFromTipoDocumento = true;
            this.disableFormProfesion = true;
            this.mostrarOficina = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.disableFormNumHijos = true;
            this.blockRefeBtn = false;
            this.ResetAllForm();
            this.SoloBloquearForm();
          } else {
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              resultValida => {
                if (resultValida.length > 0 && results !== '5' && results !== '2') {
                  this.notif.onWarning('Advertencia',
                    'El asociado se encuentra vetado, no puede realizar esta operación.',
                    );
                  this.basicosFrom.get('operacion')?.reset();
                  this.disableForm = true;
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                } else {
                  const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                  if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                    this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.',
                      );
                    this.basicosFrom.get('operacion')?.reset();
                    this.SoloBloquearForm();
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                  } else {
                    //#region cambiar fecha act
                    this.operacionEscogida = '/Cambiar fecha de actualización';
                    this.btnGuardarOculto = true;
                    this.siguienteOculto = false;
                    this.MostrarFechaTratamiento = false;
                    this.disableFormCedula = true;
                    this.btnOcultoBuscar = false;
                    this.btnTratamiento = false;
                    this.btnMarcarEntrevista = false;
                    this.formBuscarLockedPpal = true;
                    this.formBuscarLockedConyugue = true;
                    this.formBuscarLocked = true;
                    this.BlockFecha = true;
                    this.formLockedPersonNatura = true;
                    this.formLockedHipoPigno = true;
                    this.formBuscarLocked = true;
                    this.bloquearCampoDir = true;
                    this.bloquearCampoDirActivo = true;
                    this.BlockCategoria = true;
                    this.disableFromPEPS = null;
                    this.disableFromTipoDocumento = true;
                    this.disableFromTipoCliente = true;
                    this.disableFormNumeroDocumento = true;
                    this.disbaleOficina = true;
                    this.AsessorNecesario = true;
                    this.DescripcionBtn = 'Actualizar';
                    this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
                    this.disableFormEstado = true;
                    this.disbaleFromDocumento = null;
                    this.disableForm = true;
                    this.disableFormPA = true;
                    this.disableFormSA = true;
                    this.disableFormPN = true;
                    this.disableFormSN = true;
                    this.disableFormEps = true;
                    this.disableFormBtnEmpresa = true;
                    this.disableFormNumHijos = true;
                    this.disbaleFromTutor = true;
                    this.disableFormPersonas = true;
                    this.disableClean = true;
                    this.BlockTipoContacto = true;
                    this.BlockActivo = true;
                    this.BlockReferencia = true;
                    this.blockTratamiento = true;
                    this.blockTratamientoFecha = true;
                    this.blockDebitoAtomatico = true;
                    this.blockRefeBtn = false;
                    this.mostrarOficina = true;
                    this.disbaleBusqueda = true;
                    this.disablePeriodo = true;
                    this.Blockseguro = true;
                    this.BlockMonto = true;
                    this.BlockEstado = true;
                    this.disablePEPS = true;
                    this.disableAsesor = true;
                    this.disableAsesorPpal = true;
                    this.formLockedReconocimiento = true;
                    this.formLockedRecursos = true;
                    this.bloqCiudad = true;
                    this.bloqDeparta = true;
                    this.bloqDepartaExp = true;
                    $('#basicoTab').addClass('disableTab');
                    $('#financieroTab').addClass('disableTab');
                    $('#contactoTab').addClass('disableTab');
                    $('#activoTab').addClass('disableTab');
                    $('#conyugueTab').addClass('disableTab');
                    $('#laboralTab').addClass('disableTab');
                    $('#referenciaTab').addClass('disableTab');
                    $('#entrevistaTab').addClass('disableTab');
                    $('#seguroTab').addClass('disableTab');
                    $('#fechasTab').addClass('disableTab');
                    this.oculatObligatorioTercero = true;
                    this.oculatObligatorioTerceroProveedor = true;
                    this.DesbloquearRespuesta2 = true;
                    this.DesbloquearRespuesta6 = true;
                    this.DesbloquearRespuesta14 = true;
                    this.DesbloquearRespuesta17 = true;
                    this.mostrarFemiliaresPeps = false;
                    this.ModalActualizaFecha.nativeElement.click();                    
                    //#endregion
                  }
                }
              });
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede cambiar la fecha de actualización en la oficina administración');
        }
      }
    } else if (results === '20') { // Editar oficina
      if (this.OperacionMarcada !== undefined) {
        // Valida que la operacion seleccionada si tenga un cambio
        this.ValidaCambioCampo();       
      }
      if (this.OperacionMarcada === undefined) {
        // continua el proceso normal 
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.ProOficina = this.basicosFrom.get('oficina')?.value;
          this.OperacionMarcada = '20';
          this.ProDescripcionOpe = 'Cambiar oficina';
          this.operacionEscogida = '/Cambiar oficina';
          this.btnBuscar = true;
          this.blockBtnBasico = true;
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.disableForm = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disableFromTipoDocumento = true;
            this.disableFormProfesion = true;
            this.mostrarOficina = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.disableFormNumHijos = true;
            this.blockRefeBtn = false;
            this.ResetAllForm();
            this.SoloBloquearForm();
          } else {
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              resultValida => {
                if (resultValida.length > 0 && results !== '5' && results !== '2') {
                  this.notif.onWarning('Advertencia',
                    'El asociado se encuentra vetado, no puede realizar esta operación.');
                  this.basicosFrom.get('operacion')?.reset();
                  this.disableForm = true;
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                } else {
                  const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                  if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                    this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.');
                    this.basicosFrom.get('operacion')?.reset();
                    this.SoloBloquearForm();
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                  } else {
                    //#region  Editar oficina
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = false;
                    this.mostrarOficina = true;
                    this.disbaleOficina = null;
                    this.operacionEscogida = '/Editar oficina';
                    this.MostrarFechaTratamiento = false;
                    this.disableFormCedula = true;
                    this.btnOcultoBuscar = false;
                    this.btnMarcarEntrevista = false;
                    this.btnTratamiento = false;
                    this.formBuscarLockedPpal = true;
                    this.formBuscarLockedConyugue = true;
                    this.formBuscarLocked = true;
                    this.formLockedHipoPigno = true;
                    this.formBuscarLocked = true;
                    this.bloquearCampoDir = true;
                    this.bloquearCampoDirActivo = true;
                    this.formLockedPersonNatura = true;
                    this.BlockFecha = true;
                    this.BlockCategoria = true;
                    this.disableFromPEPS = null;
                    this.disableFromTipoDocumento = true;
                    this.disableFromTipoCliente = true;
                    this.disableFormNumeroDocumento = true;
                    this.AsessorNecesario = true;
                    this.DescripcionBtn = 'Cambiar';
                    this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
                    this.disableFormEstado = true;
                    this.disbaleFromDocumento = null;
                    this.disableForm = true;
                    this.disableFormPA = true;
                    this.disableFormSA = true;
                    this.disableFormPN = true;
                    this.disableFormSN = true;
                    this.disableFormEps = true;
                    this.disableAsesor = true;
                    this.disableAsesorPpal = true;
                    this.disableFormBtnEmpresa = true;
                    this.disableFormNumHijos = true;
                    this.disbaleFromTutor = true;
                    this.disableFormPersonas = true;
                    this.disableClean = true;
                    this.BlockTipoContacto = true;
                    this.BlockActivo = true;
                    this.BlockReferencia = true;
                    this.blockTratamiento = true;
                    this.blockTratamientoFecha = true;
                    this.blockDebitoAtomatico = true;
                    this.disbaleBusqueda = true;
                    this.disablePeriodo = true;
                    this.Blockseguro = true;
                    this.blockRefeBtn = false;
                    this.BlockMonto = true;
                    this.BlockEstado = true;
                    this.disablePEPS = true;
                    this.formLockedReconocimiento = true;
                    this.formLockedRecursos = true;
                    this.bloqCiudad = true;
                    this.bloqDeparta = true;
                    this.bloqDepartaExp = true;
                    $('#basicoTab').addClass('disableTab');
                    $('#financieroTab').addClass('disableTab');
                    $('#contactoTab').addClass('disableTab');
                    $('#activoTab').addClass('disableTab');
                    $('#conyugueTab').addClass('disableTab');
                    $('#laboralTab').addClass('disableTab');
                    $('#referenciaTab').addClass('disableTab');
                    $('#entrevistaTab').addClass('disableTab');
                    $('#seguroTab').addClass('disableTab');
                    $('#fechasTab').addClass('disableTab');
                    this.oculatObligatorioTercero = true;
                    this.oculatObligatorioTerceroProveedor = true;
                    this.DesbloquearRespuesta2 = true;
                    this.DesbloquearRespuesta6 = true;
                    this.DesbloquearRespuesta14 = true;
                    this.DesbloquearRespuesta17 = true;
                    this.mostrarFemiliaresPeps = false;
                    this.removeActiveTab();
                    this.devolverTab(1);
                    this.botonSiguiente.nativeElement.click();
                    //#endregion
                  }
                }
              });
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede editar la oficina en la oficina administración');
        }
      }
    } else if (results === '22') { // Desmarcar tratamiento de datos
      if (this.OperacionMarcada !== undefined) {
        // Valida que la operacion seleccionada si tenga un cambio
        this.ValidaCambioCampo();        
      }
      if (this.OperacionMarcada === undefined) {
        // continua operacion normal
        this.blockBtnBasico = false;
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.btnBuscar = true;
          this.operacionEscogida = '/Desmarcar tratamiento de datos';
          this.DescripcionBtnTratamiento = 'Desmarcar';
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.disableForm = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disableFromTipoDocumento = true;
            this.disableFormProfesion = true;
            this.mostrarOficina = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.disableFormNumHijos = true;
            this.blockRefeBtn = false;
            this.ResetAllForm();
            this.SoloBloquearForm();
          } else {
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              resultValida => {
                if (resultValida.length > 0 && results !== '5' && results !== '2') {
                  this.notif.onWarning('Advertencia',
                    'El asociado se encuentra vetado, no puede realizar esta operación.');
                  this.basicosFrom.get('operacion')?.reset();
                  this.disableForm = true;
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                } else {
                  const resulVa = this.ValidarVetadosDocumentoBusquedaAlert();
                  if (!resulVa) {
                    if (this.tratamientoConsulta) {
                      const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                      if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                        this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.');
                        this.basicosFrom.get('operacion')?.reset();
                        this.btnGuardarOculto = false;
                        this.siguienteOculto = true;
                        this.SoloBloquearForm();
                      } else {
                        //#region Tratamiento
                        this.botonReferenciaSiguiente.nativeElement.click();
                        this.devolverTab(8);
                        this.removeActiveTab();
                        this.VolverAbajo();
                        this.btnMarcarEntrevista = false;
                        this.btnTratamiento = true;
                        this.disableFormPA = true;
                        this.disableFormSA = true;
                        this.disableFormPN = true;
                        this.disableFormSN = true;
                        this.AsessorNecesario = true;
                        this.disableFromPEPS = true;
                        this.formLockedHipoPigno = true;
                        this.disbaleBusqueda = true;
                        this.disableClean = true;
                        this.MostrarFechaTratamiento = true;
                        this.operacionEscogida = '/Desmarcar tratamiento de datos';
                        this.blockTratamiento = true;
                        this.blockTratamientoFecha = null;
                        this.blockDebitoAtomatico = true;
                        this.blockRefeBtn = false;
                        this.btnGuardarOculto = false;
                        this.siguienteOculto = false;
                        this.btnOcultoBuscar = false;
                        this.formBuscarLockedPpal = true;
                        this.formBuscarLockedConyugue = true;
                        this.formBuscarLocked = true;
                        this.bloquearCampoDir = true;
                        this.bloquearCampoDirActivo = true;
                        this.formLockedPersonNatura = true;
                        this.BlockFecha = true;
                        this.disableTabSeguro = true;
                        this.disableFormNumHijos = true;
                        this.disablePEPS = true;
                        this.formLockedReconocimiento = true;
                        this.disableAsesor = true;
                        this.disableAsesorPpal = true;
                        this.formLockedRecursos = true;
                        this.formBuscarLocked = false;
                        this.bloqCiudad = true;
                        this.bloqDeparta = true;
                        this.bloqDepartaExp = true;
                        $('#basicoTab').addClass('disableTab');
                        $('#financieroTab').addClass('disableTab');
                        $('#contactoTab').addClass('disableTab');
                        $('#activoTab').addClass('disableTab');
                        $('#conyugueTab').addClass('disableTab');
                        $('#laboralTab').addClass('disableTab');
                        $('#referenciaTab').addClass('disableTab');
                        $('#entrevistaTab').removeClass('disableTab');
                        $('#seguroTab').addClass('disableTab');
                        $('#fechasTab').addClass('disableTab');
                        this.oculatObligatorioTercero = true;
                        this.oculatObligatorioTerceroProveedor = true;
                        this.DesbloquearRespuesta2 = true;
                        this.DesbloquearRespuesta6 = true;
                        this.DesbloquearRespuesta14 = true;
                        this.DesbloquearRespuesta17 = true;
                        this.mostrarFemiliaresPeps = false;
                        //#endregion
                      }
                    } else {
                      const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                      if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                        this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.');
                        this.basicosFrom.get('operacion')?.reset();
                        this.SoloBloquearForm();
                        this.btnGuardarOculto = false;
                        this.siguienteOculto = true;
                      } else {
                        this.bloquearFormularios();
                        this.notif.onWarning('Advertencia', 'El tratamiento de datos ya se encuentra desmarcado.',);
                        this.basicosFrom.get('operacion')?.reset();
                        this.btnGuardarOculto = false;
                        this.btnOcultoBuscar = false;
                        this.siguienteOculto = true;
                        this.blockRefeBtn = false;
                        this.btnMarcarEntrevista = false;
                        this.btnTratamiento = false;
                        this.disableFormPA = true;
                        this.disableFormSA = true;
                        this.formLockedHipoPigno = true;
                        this.disableFormPN = true;
                        this.disableFormSN = true;
                        this.AsessorNecesario = true;
                        this.disableFromPEPS = true;
                        this.disbaleBusqueda = true;
                        this.disableClean = true;
                        this.MostrarFechaTratamiento = true;
                        this.operacionEscogida = '/Desmarcar tratamiento de datos';
                        this.blockTratamiento = true;
                        this.blockTratamientoFecha = null;
                        this.blockDebitoAtomatico = true;
                        this.formBuscarLockedPpal = true;
                        this.formBuscarLockedConyugue = true;
                        this.formBuscarLocked = true;
                        this.bloquearCampoDir = true;
                        this.bloquearCampoDirActivo = true;
                        this.formLockedPersonNatura = true;
                        this.BlockFecha = true;
                        this.disableTabSeguro = true;
                        this.disableFormNumHijos = true;
                        this.disablePEPS = true;
                        this.formLockedReconocimiento = true;
                        this.formLockedRecursos = true;
                        this.disableAsesor = true;
                        this.disableAsesorPpal = true;
                        $('#basicoTab').removeClass('disableTab');
                        $('#financieroTab').removeClass('disableTab');
                        $('#contactoTab').removeClass('disableTab');
                        $('#activoTab').removeClass('disableTab');
                        $('#conyugueTab').removeClass('disableTab');
                        $('#laboralTab').removeClass('disableTab');
                        $('#referenciaTab').removeClass('disableTab');
                        $('#entrevistaTab').removeClass('disableTab');
                        $('#seguroTab').removeClass('disableTab');
                        $('#fechasTab').addClass('disableTab');
                        this.oculatObligatorioTercero = true;
                        this.oculatObligatorioTerceroProveedor = true;
                        this.DesbloquearRespuesta2 = true;
                        this.DesbloquearRespuesta6 = true;
                        this.DesbloquearRespuesta14 = true;
                        this.DesbloquearRespuesta17 = true;
                        this.mostrarFemiliaresPeps = false;
                      }
                    }
                  } else {
                    this.notif.onWarning('Advertencia',
                      'El asociado se encuentra vetado, no puede realizar esta operación.');
                    this.basicosFrom.get('operacion')?.reset();
                    this.disableForm = true;
                    this.SoloBloquearForm();
                    this.ResetAllForm();
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                  }
                }
              });
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede desmarcar el tratamiento de datos en la oficina administración');
        }
      }    
    } else if (results === '24') { // Cancelar solicitud de retiro
      if (this.OperacionMarcada !== undefined) {
        // Valida que la operacion seleccionada si tenga un cambio
        this.ValidaCambioCampo();        
      }
      if (this.OperacionMarcada === undefined) {
        // continua operacion normal
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.btnBuscar = true;
          this.operacionEscogida = '/Cancelar solicitud de retiro';
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.disableForm = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disableFromTipoDocumento = true;
            this.disableFormProfesion = true;
            this.mostrarOficina = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.disableFormNumHijos = true;
            this.blockRefeBtn = false;
            this.ResetAllForm();
            this.SoloBloquearForm();
          } else {            
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              resultValida => {
                if (resultValida.length > 0 && results !== '5' && results !== '2') {
                  this.notif.onWarning('Advertencia','El asociado se encuentra vetado, no puede realizar esta operación.');
                  this.basicosFrom.get('operacion')?.reset();
                  this.disableForm = true;
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                } else {
                  const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                  if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                    this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.');
                    this.basicosFrom.get('operacion')?.reset();
                    this.SoloBloquearForm();
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                  } else {
                    const fechaTabSolRetiro = this.fechasForm.get('fechaTabSoliciudRetiro')?.value;
                    if ((fechaTabSolRetiro === null || fechaTabSolRetiro === undefined)) {
                      this.notif.onWarning('Advertencia', 'No hay una solicitud de retiro.');
                      this.basicosFrom.get('operacion')?.reset();
                      this.SoloBloquearForm();
                      this.botonSiguiente.nativeElement.click();
                      this.devolverTab(1);
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = true;
                    } else {
                      //#region  cancelar solicitud
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = false;
                      this.mostrarOficina = true;
                      this.disbaleOficina = true;
                      this.operacionEscogida = '/Cancelar solicitud de retiro';
                      this.MostrarFechaTratamiento = false;
                      this.disableFormCedula = true;
                      this.btnOcultoBuscar = false;
                      this.btnMarcarEntrevista = false;
                      this.btnTratamiento = false;
                      this.formBuscarLockedPpal = true;
                      this.formLockedHipoPigno = true;
                      this.formBuscarLockedConyugue = true;
                      this.formBuscarLocked = true;
                      this.BlockFecha = true;
                      this.formBuscarLocked = true;
                      this.bloquearCampoDir = true;
                      this.bloquearCampoDirActivo = true;
                      this.formLockedPersonNatura = true;
                      this.BlockCategoria = true;
                      this.disableFromPEPS = null;
                      this.disableFromTipoDocumento = true;
                      this.disableFromTipoCliente = true;
                      this.disableFormNumeroDocumento = true;
                      this.AsessorNecesario = true;
                      this.DescripcionBtn = 'Cancelar';
                      this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
                      this.disableFormEstado = true;
                      this.disbaleFromDocumento = null;
                      this.disableForm = true;
                      this.disableFormPA = true;
                      this.disableFormSA = true;
                      this.disableFormPN = true;
                      this.disableFormSN = true;
                      this.disableFormEps = true;
                      this.disableAsesor = true;
                      this.disableAsesorPpal = true;
                      this.disableFormBtnEmpresa = true;
                      this.disableFormNumHijos = true;
                      this.disbaleFromTutor = true;
                      this.disableFormPersonas = true;
                      this.disableClean = true;
                      this.BlockTipoContacto = true;
                      this.BlockActivo = true;
                      this.BlockReferencia = true;
                      this.blockTratamiento = true;
                      this.blockTratamientoFecha = true;
                      this.blockDebitoAtomatico = true;
                      this.disbaleBusqueda = true;
                      this.disablePeriodo = true;
                      this.Blockseguro = true;
                      this.blockRefeBtn = false;
                      this.BlockMonto = true;
                      this.BlockEstado = true;
                      this.disablePEPS = true;
                      this.formLockedReconocimiento = true;
                      this.formLockedRecursos = true;
                      this.bloqCiudad = true;
                      this.bloqDeparta = true;
                      this.bloqDepartaExp = true;
                      // $('#basicoTab').addClass('disableTab');
                      // $('#financieroTab').addClass('disableTab');
                      // $('#contactoTab').addClass('disableTab');
                      // $('#activoTab').addClass('disableTab');
                      // $('#conyugueTab').addClass('disableTab');
                      // $('#laboralTab').addClass('disableTab');
                      // $('#referenciaTab').addClass('disableTab');
                      // $('#entrevistaTab').addClass('disableTab');
                      // $('#seguroTab').addClass('disableTab');
                      // $('#fechasTab').addClass('disableTab');
                      this.oculatObligatorioTercero = true;
                      this.oculatObligatorioTerceroProveedor = true;
                      this.DesbloquearRespuesta2 = true;
                      this.DesbloquearRespuesta6 = true;
                      this.DesbloquearRespuesta14 = true;
                      this.DesbloquearRespuesta17 = true;
                      this.mostrarFemiliaresPeps = false;
                      this.ModalCancelarSolicitud.nativeElement.click();  
                     
                      //#endregion
                    }
                  }
                }
              });
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede cancelar la solicitud de retiro en la oficina administración');
        }
      }
    } else if (results === '26') { // Cambiar asesor
      if (this.OperacionMarcada !== undefined) {
        // Valida que la operacion seleccionada si tenga un cambio
        this.ValidaCambioCampo();       
      }
      if (this.OperacionMarcada === undefined) {
        // continua operacion normal
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        if (resultPerfil.NumeroOficina !== '3') {
          this.ProAsesor = this.CedulaAsesor;
          this.OperacionMarcada = '26';
          this.ProDescripcionOpe = 'Cambiar asesor';
          this.btnBuscar = true;
          this.operacionEscogida = '/Cambiar asesor';
          this.blockBtnBasico = true;
          const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
          if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
            this.notif.onWarning('Advertencia', 'Debe buscar un asociado para realizar esta operación.');
            this.basicosFrom.get('operacion')?.reset();
            this.disableForm = true;
            this.formBuscarLocked = true;
            this.bloquearCampoDir = true;
            this.bloquearCampoDirActivo = true;
            this.formLockedPersonNatura = true;
            this.disableFromTipoCliente = true;
            this.disableFormNumeroDocumento = true;
            this.disableFromTipoDocumento = true;
            this.disableFormProfesion = true;
            this.mostrarOficina = false;
            this.disableFormPA = true;
            this.disableFormSA = true;
            this.disableFormPN = true;
            this.disableFormSN = true;
            this.disableFormNumHijos = true;
            this.blockRefeBtn = false;
            this.ResetAllForm();
            this.SoloBloquearForm();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
          } else {
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              resultValida => {
                if (resultValida.length > 0 && results !== '5' && results !== '2') {
                  this.notif.onWarning('Advertencia', 'El asociado se encuentra vetado, no puede realizar esta operación.');
                  this.basicosFrom.get('operacion')?.reset();
                  this.disableForm = true;
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                } else {
                  const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                  if ((fechaTabRetiro !== null && fechaTabRetiro !== undefined)) {
                    this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.');
                    this.basicosFrom.get('operacion')?.reset();
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = true;
                    this.SoloBloquearForm();
                  } else {
                    //#region Editar asesor
                    this.operacionEscogida = '/Cambiar asesor';
                    this.MostrarAsesorExterno = true;
                    this.disableAsesor = true;
                    this.disableAsesorPpal = null;
                    this.btnGuardarOculto = false;
                    this.siguienteOculto = false;
                    this.DescripcionBtn = 'Actualizar';
                    this.MostrarFechaTratamiento = false;
                    this.disableFormCedula = true;
                    this.btnMarcarEntrevista = false;
                    this.btnOcultoBuscar = false;
                    this.btnTratamiento = false;
                    this.formBuscarLockedPpal = true;
                    this.formLockedPersonNatura = true;
                    this.formLockedHipoPigno = true;
                    this.formBuscarLockedConyugue = true;
                    this.formBuscarLocked = true;
                    this.BlockFecha = true;
                    this.formBuscarLocked = true;
                    this.bloquearCampoDir = true;
                    this.bloquearCampoDirActivo = true;
                    this.BlockCategoria = true;
                    this.blockRefeBtn = false;
                    this.disableFromPEPS = null;
                    this.disableFromTipoDocumento = true;
                    this.disableFromTipoCliente = true;
                    this.disableFormNumeroDocumento = true;
                    this.disbaleOficina = true;
                    this.AsessorNecesario = true;
                    this.DescripcionBtn = 'Actualizar';
                    this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
                    this.disableFormEstado = true;
                    this.disbaleFromDocumento = null;
                    this.disableForm = true;
                    this.disableFormPA = true;
                    this.disableFormSA = true;
                    this.disableFormPN = true;
                    this.disableFormSN = true;
                    this.disableFormEps = true;
                    this.disableFormBtnEmpresa = true;
                    this.disableFormNumHijos = true;
                    this.disbaleFromTutor = true;
                    this.disableFormPersonas = true;
                    this.disableClean = true;
                    this.BlockTipoContacto = true;
                    this.BlockActivo = true;
                    this.BlockReferencia = true;
                    this.blockTratamiento = true;
                    this.blockTratamientoFecha = true;
                    this.blockDebitoAtomatico = true;
                    this.mostrarOficina = true;
                    this.disbaleBusqueda = true;
                    this.disablePeriodo = true;
                    this.Blockseguro = true;
                    this.BlockMonto = true;
                    this.BlockEstado = true;
                    this.disablePEPS = true;
                    this.formLockedReconocimiento = true;
                    this.formLockedRecursos = true;
                    this.bloqCiudad = true;
                    this.bloqDeparta = true;
                    this.bloqDepartaExp = true;
                    $('#basicoTab').addClass('disableTab');
                    $('#financieroTab').addClass('disableTab');
                    $('#contactoTab').addClass('disableTab');
                    $('#activoTab').addClass('disableTab');
                    $('#conyugueTab').addClass('disableTab');
                    $('#laboralTab').addClass('disableTab');
                    $('#referenciaTab').addClass('disableTab');
                    $('#entrevistaTab').addClass('disableTab');
                    $('#seguroTab').addClass('disableTab');
                    $('#fechasTab').addClass('disableTab');
                    this.oculatObligatorioTercero = true;
                    this.oculatObligatorioTerceroProveedor = true;
                    this.DesbloquearRespuesta2 = true;
                    this.DesbloquearRespuesta6 = true;
                    this.DesbloquearRespuesta14 = true;
                    this.DesbloquearRespuesta17 = true;
                    this.mostrarFemiliaresPeps = false;
                    this.VolverAbajo();
                    this.removeActiveTab();
                    this.devolverTab(1);
                    this.botonSiguiente.nativeElement.click();
                    //#endregion
                  }
                }
              });
          }
        } else {
          this.notif.onWarning('Advertencia', 'No se puede cambiar el asesor en la oficina administración');
        }
      }
    } else if (results === '23') { // Gestion operaciones
      if (resultPerfil.NumeroOficina !== '3') {
        this.btnBuscar = true;
        this.botonSiguiente.nativeElement.click();
        this.devolverTab(1);
        this.removeActiveTab();
        this.operacionEscogida = '/Cambio de estado';
        const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
        if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
          this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
          this.basicosFrom.get('operacion')?.reset();
          this.btnGuardarOculto = false;
          this.siguienteOculto = true;
          this.disableForm = true;
          this.formBuscarLocked = true;
          this.bloquearCampoDir = true;
          this.bloquearCampoDirActivo = true;
          this.formLockedPersonNatura = true;
          this.disableFromTipoCliente = true;
          this.disableFormNumeroDocumento = true;
          this.disableFromTipoDocumento = true;
          this.disableFormProfesion = true;
          this.mostrarOficina = false;
          this.disableFormPA = true;
          this.disableFormSA = true;
          this.disableFormPN = true;
          this.disableFormSN = true;
          this.disableFormNumHijos = true;
          this.ResetAllForm();
          this.SoloBloquearForm();
        } else {
          this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
            resultValida => {
              if (resultValida.length > 0 && results !== '5' && results !== '2') {
                this.notif.onWarning('Advertencia','El asociado se encuentra vetado, no puede realizar esta operación.');
                this.basicosFrom.get('operacion')?.reset();
                this.btnGuardarOculto = false;
                this.siguienteOculto = true;
                this.disableForm = true;
              } else {
                const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                if (fechaTabRetiro !== null && fechaTabRetiro !== undefined && this.RetiradoBloqueado !== 0) {
                  this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.');
                  this.basicosFrom.get('operacion')?.reset();
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                  this.SoloBloquearForm();
                } else {
                  this.SolicitarGestion();
                }
              }
            });
        }
      } else {
        this.notif.onWarning('Advertencia', 'No se puede cambiar estado en la oficina administración');
      }
    } else if (results === '47') { // Activar documento bloqueado
      if (resultPerfil.NumeroOficina !== '3') {
        this.btnBuscar = true;
        this.botonSiguiente.nativeElement.click();
        this.devolverTab(1);
        this.removeActiveTab();
        this.operacionEscogida = '/Activar documento bloqueado';
        const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
        if (strNumeroDocumento === '' || strNumeroDocumento === null || strNumeroDocumento === undefined) {
          this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
          this.basicosFrom.get('operacion')?.reset();
          this.btnGuardarOculto = false;
          this.siguienteOculto = true;
          this.disableForm = true;
          this.formBuscarLocked = true;
          this.bloquearCampoDir = true;
          this.bloquearCampoDirActivo = true;
          this.formLockedPersonNatura = true;
          this.disableFromTipoCliente = true;
          this.disableFormNumeroDocumento = true;
          this.disableFromTipoDocumento = true;
          this.disableFormProfesion = true;
          this.mostrarOficina = false;
          this.disableFormPA = true;
          this.disableFormSA = true;
          this.disableFormPN = true;
          this.disableFormSN = true;
          this.disableFormNumHijos = true;
          this.ResetAllForm();
          this.SoloBloquearForm();
        } else {
          this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
            resultValida => {
              if (resultValida.length > 0 && results !== '5' && results !== '2') {
                this.notif.onWarning('Advertencia','El asociado se encuentra vetado, no puede realizar esta operación.');
                this.basicosFrom.get('operacion')?.reset();
                this.disableForm = true;
                this.btnGuardarOculto = false;
                this.siguienteOculto = true;
              } else {
                // const fechaTabRetiro = this.fechasForm.get('fechaTabRetiro')?.value;
                // if (fechaTabRetiro !== null && fechaTabRetiro !== undefined && this.RetiradoBloqueado !== 0) {
                //   this.notif.onWarning('Advertencia', 'Esta operación no se puede realizar, el asociado se encuentra retirado.',
                //     );
                //   this.basicosFrom.get('operacion')?.reset();
                //   this.SoloBloquearForm();
                // } else {
                //#region cambio de estado
                this.disableFormEstado = null;
                this.AutoMaticFocusInput();
                $('#estadoNatural').prop('disabled', false);
                $('#estadoNatural').focus();
                this.EstadosPorOperaciones();
                this.MostrarFechaTratamiento = false;
                this.btnGuardarOculto = false;
                this.siguienteOculto = false;
                this.btnMarcarEntrevista = false;
                this.btnOcultoBuscar = false;
                this.btnTratamiento = false;
                this.disableFormCedula = true;
                this.btnTratamientoMarcar = false;
                this.itemsLogSeguro = [];
                this.dataActivos = [];
                this.itemsEgresos = [];
                this.itemsIngresos = [];
                this.itemsContacto = [];
                this.dataConyuge = [];
                this.mostrarOficina = false;
                this.formBuscarLocked = true;
                this.bloquearCampoDir = true;
                this.bloquearCampoDirActivo = true;
                this.formLockedPersonNatura = true;
                this.formLockedPersonNatura = true;
                this.BlockFecha = true;
                this.formLockedHipoPigno = true;
                this.formBuscarLockedConyugue = true;
                this.BlockCategoria = true;
                this.formEditarLocked = true;
                this.DescripcionBtn = 'Cambiar estado';
                this.disableAmaCasa = false;
                this.disablePersonasACargo = true;
                this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
                this.disableFormPA = true;
                this.disableFormSA = true;
                this.disableFormPN = true;
                this.disableFormSN = true;
                this.disableForm = true;
                this.disableFormEps = true;
                this.disableFormBtnEmpresa = true;
                this.disableFormNumHijos = true;
                this.disbaleFromDocumento = null;
                this.disbaleFromTutor = true;
                this.disableFormPersonas = true;
                this.disableAsesor = true;
                this.disableAsesorPpal = true;
                this.disbaleBusqueda = true;
                this.BlockTipoContacto = true;
                this.BlockActivo = true;
                this.disableClean = true;
                this.BlockReferencia = true;
                this.formBuscarLockedPpal = true;
                this.disableFromTipoDocumento = true;
                this.disableFromTipoCliente = true;
                this.disableFormNumeroDocumento = true;
                this.disbaleOficina = true;
                this.blockTratamiento = true;
                this.blockRefeBtn = false;
                this.blockTratamientoFecha = true;
                this.blockDebitoAtomatico = true;
                this.disablePeriodo = true;
                this.Blockseguro = true;
                this.BlockMonto = true;
                this.BlockEstado = true;
                this.AsessorNecesario = true;
                this.disablePEPS = true;
                this.formLockedReconocimiento = true;
                this.formLockedRecursos = true;
                this.FormCambioEstado.reset();
                this.bloqCiudad = true;
                this.bloqDeparta = true;
                this.bloqDepartaExp = true;
                $('#basicoTab').addClass('disableTab');
                $('#financieroTab').addClass('disableTab');
                $('#contactoTab').addClass('disableTab');
                $('#activoTab').addClass('disableTab');
                $('#conyugueTab').addClass('disableTab');
                $('#laboralTab').addClass('disableTab');
                $('#referenciaTab').addClass('disableTab');
                $('#entrevistaTab').addClass('disableTab');
                $('#seguroTab').addClass('disableTab');
                $('#fechasTab').addClass('disableTab');
                this.oculatObligatorioTercero = true;
                this.oculatObligatorioTerceroProveedor = true;
                this.basicosFrom.controls['metodo'].setValidators(Validators.required);
                this.basicosFrom.controls['metodo'].setErrors(Validators.required);
                this.basicosFrom.controls['NombreDrop'].setValidators(Validators.required);
                this.basicosFrom.controls['NombreDrop'].setErrors(Validators.required);
                this.basicosFrom.controls['numHijos'].setValidators([Validators.required]);
                this.basicosFrom.controls['numHijos'].setErrors({ 'incorrect': true });
                this.basicosFrom.controls['numHijosEstudian'].setValidators([Validators.required]);
                this.basicosFrom.controls['numHijosEstudian'].setErrors({ 'incorrect': true });
                this.DesbloquearRespuesta2 = true;
                this.DesbloquearRespuesta6 = true;
                this.DesbloquearRespuesta14 = true;
                this.DesbloquearRespuesta17 = true;
                this.mostrarFemiliaresPeps = false;
                this.BloquearPreguntasPeps = true;
                this.BloquearPreguntas = true;
                //#endregion
                // }
              }
            });
        }
      } else {
        this.notif.onWarning('Advertencia', 'No se puede cambiar estado en la oficina administración');
      }
    } else if (results === '116') { // Cambiar regimen tributario
      if(!this.basicosFrom.get('numeroDocumento')?.value) {
        this.notif.onWarning('Advertencia','Debe buscar un asociado para realizar esta operación.');
        this.basicosFrom.get('operacion')?.reset();
        return;
      }

      const idTercero = this.basicosFrom.get('IdTerceroPrincipal')?.value;
      this.clientesService.CambiarRegimenTributario(idTercero)
        .subscribe(result => {
          if(result === true) {
            this.notif.onSuccess('Exitoso', 'El regimen tributario se cambió correctamente.');
            this.basicosFrom.get('operacion')?.reset();
            this.GuardarLog(this.allItemsFormSaves, 116, 0, idTercero, 11);
            this.BuscarNaturalesAll(this.basicosFrom.get('numeroDocumento')?.value);
          }
        });
    
    } else {
      this.NombreAsesor = '';
      this.CedulaAsesor = '';
      this.NombreAsesorExt = '';
      this.CedulaAsesorExt = '';
      $('#basicoTab').addClass('disableTab');
      $('#financieroTab').addClass('disableTab');
      $('#contactoTab').addClass('disableTab');
      $('#activoTab').addClass('disableTab');
      $('#conyugueTab').addClass('disableTab');
      $('#laboralTab').addClass('disableTab');
      $('#referenciaTab').addClass('disableTab');
      $('#entrevistaTab').addClass('disableTab');
      $('#seguroTab').addClass('disableTab');
      $('#fechasTab').addClass('disableTab');
      this.BlockTipoContacto = true;
      this.btnOcultoBuscar = true;
      this.disableFormCedula = true;
      this.mostrarOficina = false;
      this.itemsLogSeguro = [];
      this.BlockCategoria = null;
      this.formBuscarLocked = null;
      this.bloquearCampoDir = true;
      this.bloquearCampoDirActivo = true;
      this.formLockedPersonNatura = null;
      this.BlockFecha = null;
      this.formBuscarLockedConyugue = null;
      this.formBuscarLockedPpal = true;
      this.btnTratamiento = false;
      this.DescripcionBtn = 'Siguiente';
      this.ResetAllForm();
      this.ResetItemForm();
      this.disableForm = true;
      this.disbaleFromDocumento = true;
      this.disableFormEstado = true;
      this.disableFormNumHijos = true;
      this.disbaleFromTutor = true;
      this.disableFormPersonas = true;
      this.disableAmaCasa = false;
      this.disablePersonasACargo = true;
      this.formTutorOculto = false;
      this.disableFormProfesion = true;
      this.disableAsesor = true;
      this.disbaleBusqueda = true;
      this.blockRefeBtn = false;
      this.bloqCiudad = true;
      this.bloqDeparta = true;
      this.bloqDepartaExp = true;
      localStorage.removeItem('TerceroNatura');
      this.notif.onWarning('Advertencia', 'Esta operación no está habilitada.');
      this.operacionEscogida = '';
    }
  }
  LimpiaVariablesAlerta() {
    this.ProIdTutor = '0';
    this.ProNomTutor = '0';
    this.ProEstado = '0';
    this.ProRelacion = '0';
    this.ProTipoD = '0';
    this.ProDocumento = '0';
    this.ProPrimerNombre = '0';
    this.ProPrimerApellido = '0';
    this.ProSegundoApellido = '0';
    this.ProSegundoNombre = '0';
    this.ProIdAsesorE = '0';
    this.ProOficina = '0';
    this.ProAsesor = '0';
    this.ProDescripcionOpe = ' ';
    this.OperacionMarcada = undefined;
  }
  ValidaCambioCampo() {
    if (this.OperacionMarcada !== undefined) {
      if (this.OperacionMarcada === '9') {          // Cambio estado
        if (this.ProEstado === this.basicosFrom.get('estado')?.value) {
          this.OperacionMarcada = undefined;
          this.ProEstado = '0';
          this.ProDescripcionOpe = ' ';
        }
      } else if (this.OperacionMarcada === '4') {   // Cambio relacion
        if (this.ProRelacion === this.basicosFrom.get('tipoCliente')?.value) {
          this.OperacionMarcada = undefined;
          this.ProRelacion = '0';
          this.ProDescripcionOpe = ' ';
        }
      } else if (this.OperacionMarcada === '17') {  // Tipo Documento - numero documento
        if (this.ProTipoD === this.basicosFrom.get('tipoDocumento')?.value) {
          if (this.ProDocumento === this.basicosFrom.get('numeroDocumento')?.value) {
            this.OperacionMarcada = undefined;
            this.ProTipoD = '0';
            this.ProDocumento = '0';
            this.ProDescripcionOpe = ' ';
          }
        }
      } else if (this.OperacionMarcada === '18') {  // Nombre Apellidos
        if (this.ProPrimerNombre === this.basicosFrom.get('primerNombre')?.value) {
          if (this.ProSegundoNombre === this.basicosFrom.get('segundoNombre')?.value) {
            if (this.ProPrimerApellido === this.basicosFrom.get('primerApellido')?.value) {
              if (this.ProSegundoApellido === this.basicosFrom.get('segundoApellido')?.value) {
                this.OperacionMarcada = undefined;
                this.ProPrimerNombre = '0';
                this.ProPrimerApellido = '0';
                this.ProSegundoApellido = '0';
                this.ProDescripcionOpe = ' ';
              }
            }
          }
        }
      } else if (this.OperacionMarcada === '19') {  // Asesor externo
        if (this.ProIdAsesorE === this.asesorForm.get('strCodigo')?.value) {
          this.OperacionMarcada = undefined;
          this.ProIdAsesorE = '0';
          this.ProDescripcionOpe = ' ';
        }

      } else if (this.OperacionMarcada === '20') {  // Cambiar oficina
        if (this.ProOficina === this.basicosFrom.get('oficina')?.value) {
          this.OperacionMarcada = undefined;
          this.ProOficina = '0';
          this.ProDescripcionOpe = ' ';
        }
      } else if (this.OperacionMarcada === '26') {  // Asesor
        if (this.asesorForm.get('strCodigoAse')?.value === null) {
          if (+this.CedulaAsesor === 2) {
            this.asesorForm.get('strCodigoAse')?.setValue(2);
          }
        }
        if (this.ProAsesor === this.asesorForm.get('strCodigoAse')?.value) {
          this.OperacionMarcada = undefined;
          this.ProAsesor = '0';
          this.ProDescripcionOpe = ' ';
        }
      } else {
        this.OperacionMarcada = undefined;
      }
    } 
    if (this.OperacionMarcada !== undefined) {
      this.AlertaModal.nativeElement.click();
    }
  }
  ContinuaProceso() {  
    // Regresa el campo como estaba inicalmente y la operacion marcada
    if (this.OperacionMarcada === '9') {
      this.basicosFrom.get('estado')?.setValue(this.ProEstado);
    } else if (this.OperacionMarcada === '4') {
      this.basicosFrom.get('tipoCliente')?.setValue(this.ProRelacion);
      if (this.ProRelacion === 10) {
        this.basicosFrom.get('IdentificacionTutor')?.setValue(this.ProIdTutor);
        this.basicosFrom.get('NombreTutor')?.setValue(this.ProNomTutor);
        this.formTutorOculto = true;
      } else {
        this.formTutorOculto = false;
      }
    } else if (this.OperacionMarcada === '17') {
      this.basicosFrom.get('tipoDocumento')?.setValue(this.ProTipoD);
      this.basicosFrom.get('numeroDocumento')?.setValue(this.ProDocumento);
    } else if (this.OperacionMarcada === '18') {
      this.basicosFrom.get('primerNombre')?.setValue(this.ProPrimerNombre);
      this.basicosFrom.get('segundoNombre')?.setValue(this.ProSegundoNombre);
      this.basicosFrom.get('segundoApellido')?.setValue(this.ProSegundoApellido);
      this.basicosFrom.get('primerApellido')?.setValue(this.ProPrimerApellido);
    } else if (this.OperacionMarcada === '19') {
      this.asesorForm.get('strCodigo')?.setValue(this.ProIdAsesorE);
      this.GetAsesorExternoCodigo();
    } else if (this.OperacionMarcada === '20') {
      this.basicosFrom.get('oficina')?.setValue(this.ProOficina);
    } else if (this.OperacionMarcada === '26') {
      this.asesorForm.get('strCodigoAse')?.setValue(this.ProAsesor);
      this.GetAsesorCodigo();
    } else {
      this.OperacionMarcada = undefined;
    } 
    // Limpia Variables
    this.LimpiaVariablesAlerta();
     // Continua con la operacion marcada
    this.validarTipoOperacion();    

  }
  RegresaOperacion() {
    // regresa a la operacion anterior como  estaba antes
    if (this.OperacionMarcada === '9') {
      this.basicosFrom.get('operacion')?.setValue('9');
      this.basicosFrom.get('estado')?.setValue(this.ProEstado);
    } else if (this.OperacionMarcada === '4') {
      this.basicosFrom.get('operacion')?.setValue('4');
      this.basicosFrom.get('tipoCliente')?.setValue(this.ProRelacion);
      if (this.ProRelacion === 10) {
        this.basicosFrom.get('IdentificacionTutor')?.setValue(this.ProIdTutor);
        this.basicosFrom.get('NombreTutor')?.setValue(this.ProNomTutor);
        this.formTutorOculto = true;
      } else {
        this.formTutorOculto = false;
      }
    } else if (this.OperacionMarcada === '17') {
      this.basicosFrom.get('operacion')?.setValue('17');
      this.basicosFrom.get('tipoDocumento')?.setValue(this.ProTipoD);
      this.basicosFrom.get('numeroDocumento')?.setValue(this.ProDocumento);
    } else if (this.OperacionMarcada === '18') {
      this.basicosFrom.get('operacion')?.setValue('18');
      this.basicosFrom.get('primerNombre')?.setValue(this.ProPrimerNombre);
      this.basicosFrom.get('segundoNombre')?.setValue(this.ProSegundoNombre);
      this.basicosFrom.get('segundoApellido')?.setValue(this.ProSegundoApellido);
      this.basicosFrom.get('primerApellido')?.setValue(this.ProPrimerApellido);
    } else if (this.OperacionMarcada === '19') {
      this.basicosFrom.get('operacion')?.setValue('19');
      this.asesorForm.get('strCodigo')?.setValue(this.ProIdAsesorE);
      this.GetAsesorExternoCodigo();
    } else if (this.OperacionMarcada === '20') {
      this.basicosFrom.get('operacion')?.setValue('20');
      this.basicosFrom.get('oficina')?.setValue(this.ProOficina);
    } else if (this.OperacionMarcada === '26') {
      this.basicosFrom.get('operacion')?.setValue('26');
      this.asesorForm.get('strCodigoAse')?.setValue(this.ProAsesor);
      this.GetAsesorCodigo();    
    }
    //Valida nuevamente la operacion 
    this.validarTipoOperacion();
  }
  ActualizarFecha() {
    this.GuardarLog('Tercer al que Actualizan - ' + localStorage.getItem('TerceroNatura'), 6, 0, Number(localStorage.getItem('TerceroNatura')),11);
    let TerceroNatura : string | null = localStorage.getItem('TerceroNatura');
    this.clientesService.EditarFechaModificacion(TerceroNatura).subscribe(
      resultFecha => {
        if (resultFecha) {
          this.notif.onSuccess('Exitoso','La fecha de actualización se cambió correctamente.');
          this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
          this.basicosFrom.get('operacion')?.reset();
          this.botonSiguiente.nativeElement.click();
          this.devolverTab(1);
          this.removeActiveTab();
          this.BuscarNaturalesAll(this.DocumentoSolicitud);
        } else {
          this.notif.onDanger('Error','La fecha de actualización no se cambió correctamente.');
          this.basicosFrom.get('operacion')?.reset();
        }
      });
  }
  elseActualizarFecha() {
    this.basicosFrom.get('operacion')?.reset();
  }
  CancelarSolictudRetiro() {
    this.GuardarLog(localStorage.getItem('TerceroNatura'), 24, 0, Number(localStorage.getItem('TerceroNatura')),11);
    let dataobj : string | null = localStorage.getItem('Data');
    const data = JSON.parse(window.atob(dataobj == null ? "": dataobj));
    this.clientesService.CancelarSolicitudRetiro(localStorage.getItem('TerceroNatura'), data.lngTercero,
      formatDate(new Date(), 'yyyy/MM/dd HH:mm:ss', 'en')).subscribe(
        resultFecha => {
          if (resultFecha) {
            this.notif.onSuccess('Exitoso','La solicitud de retiro se canceló correctamente.');
            this.basicosFrom.get('operacion')?.reset();
            this.botonSiguiente.nativeElement.click();
            this.devolverTab(1);
            this.removeActiveTabBasico();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.GetRetirosLog(this.basicosFrom.get('IdTerceroPrincipal')?.value);
            this.fechasForm.get('fechaTabSoliciudRetiro')?.reset();
          } else {
            this.notif.onDanger('Error','La solicitud de retiro no se canceló correctamente.');
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
          }
        }
      );
  }
  elseCancelarSolictudRetiro() {
    this.basicosFrom.get('operacion')?.reset();
    $('#basicoTab').removeClass('disableTab');
    $('#financieroTab').removeClass('disableTab');
    $('#contactoTab').removeClass('disableTab');
    $('#activoTab').removeClass('disableTab');
    $('#conyugueTab').removeClass('disableTab');
    $('#laboralTab').removeClass('disableTab');
    $('#referenciaTab').removeClass('disableTab');
    $('#entrevistaTab').removeClass('disableTab');
    $('#seguroTab').removeClass('disableTab');
    $('#fechasTab').removeClass('disableTab');
  }
  ActivaBotonCambiar() {
    this.blockBtnBasico = false;
  }
  AutoMaticFocusInput(){
  }
  AddValidatorSegunOperacion() {
    if (this.basicosFrom.value.tipoCliente === 10) { // Menor de edad
      this.basicosFrom.controls['metodo'].setValidators([Validators.required]);
      this.basicosFrom.controls['metodo'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['metodo'].updateValueAndValidity();

      this.basicosFrom.controls['NombreDrop'].setValidators([Validators.required]);
      this.basicosFrom.controls['NombreDrop'].setErrors({ 'incorrect': true });

       this.basicosFrom.controls['NombreDrop'].updateValueAndValidity();

      this.basicosFrom.controls['numHijos'].setValidators([Validators.required]);
      this.basicosFrom.controls['numHijos'].setErrors({ 'incorrect': true });

      this.basicosFrom.controls['numHijos'].updateValueAndValidity();

      this.basicosFrom.controls['numHijosEstudian'].setValidators([Validators.required]);
      this.basicosFrom.controls['numHijosEstudian'].setErrors({ 'incorrect': true });

      this.basicosFrom.controls['numHijosEstudian'].updateValueAndValidity();

      this.basicosFrom.controls['motivoIngreso'].setValidators([Validators.required]);
      this.basicosFrom.controls['motivoIngreso'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['motivoIngreso'].updateValueAndValidity();

      this.basicosFrom.controls['estadoCivil'].setValidators([Validators.required]);
      this.basicosFrom.controls['estadoCivil'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['estadoCivil'].updateValueAndValidity();

      this.basicosFrom.controls['estrato'].setValidators([Validators.required]);
      this.basicosFrom.controls['estrato'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['estrato'].updateValueAndValidity();

      this.basicosFrom.controls['viveDesde'].setValidators([Validators.required]);
      this.basicosFrom.controls['viveDesde'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['viveDesde'].updateValueAndValidity();

      this.basicosFrom.controls['tipoVivienda'].setValidators([Validators.required]);
      this.basicosFrom.controls['tipoVivienda'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['tipoVivienda'].updateValueAndValidity();

      this.basicosFrom.controls['fechaNacimiento'].setValidators([Validators.required]);
      this.basicosFrom.controls['fechaNacimiento'].setErrors({ 'incorrect': true });
       this.basicosFrom.controls['fechaNacimiento'].updateValueAndValidity();

      this.basicosFrom.controls['ciudadNacimiento'].setValidators([Validators.required]);
      this.basicosFrom.controls['ciudadNacimiento'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['ciudadNacimiento'].updateValueAndValidity();

      this.basicosFrom.controls['fechaExpedicion'].setValidators([Validators.required]);
      this.basicosFrom.controls['fechaExpedicion'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['fechaExpedicion'].updateValueAndValidity();

      this.basicosFrom.controls['ciudadExpedicion'].setValidators([Validators.required]);
      this.basicosFrom.controls['ciudadExpedicion'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['ciudadExpedicion'].updateValueAndValidity();

      this.basicosFrom.controls['genero'].setValidators([Validators.required]);
      this.basicosFrom.controls['genero'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['genero'].updateValueAndValidity();

      this.basicosFrom.controls['nivelEstudio'].setValidators([Validators.required]);
      this.basicosFrom.controls['nivelEstudio'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['nivelEstudio'].updateValueAndValidity();
    } else if (this.basicosFrom.value.tipoCliente === 5) { // Asociado
      this.basicosFrom.controls['metodo'].setValidators([Validators.required]);
      this.basicosFrom.controls['metodo'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['metodo'].updateValueAndValidity();

      this.basicosFrom.controls['NombreDrop'].setValidators([Validators.required]);
      this.basicosFrom.controls['NombreDrop'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['NombreDrop'].updateValueAndValidity();

      this.basicosFrom.controls['numHijos'].setValidators([Validators.required]);
      this.basicosFrom.controls['numHijos'].setErrors({ 'incorrect': true });

      this.basicosFrom.controls['numHijos'].updateValueAndValidity();


      this.basicosFrom.controls['numHijosEstudian'].setValidators([Validators.required]);
      this.basicosFrom.controls['numHijosEstudian'].setErrors({ 'incorrect': true });


      this.basicosFrom.controls['numHijosEstudian'].updateValueAndValidity();


      this.basicosFrom.controls['motivoIngreso'].setValidators([Validators.required]);
      this.basicosFrom.controls['motivoIngreso'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['motivoIngreso'].updateValueAndValidity();

      this.basicosFrom.controls['estadoCivil'].setValidators([Validators.required]);
      this.basicosFrom.controls['estadoCivil'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['estadoCivil'].updateValueAndValidity();

      this.basicosFrom.controls['estrato'].setValidators([Validators.required]);
      this.basicosFrom.controls['estrato'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['estrato'].updateValueAndValidity();

      this.basicosFrom.controls['viveDesde'].setValidators([Validators.required]);
      this.basicosFrom.controls['viveDesde'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['viveDesde'].updateValueAndValidity();

      this.basicosFrom.controls['tipoVivienda'].setValidators([Validators.required]);
      this.basicosFrom.controls['tipoVivienda'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['tipoVivienda'].updateValueAndValidity();

      this.basicosFrom.controls['fechaNacimiento'].setValidators([Validators.required]);
      this.basicosFrom.controls['fechaNacimiento'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['fechaNacimiento'].updateValueAndValidity();

      this.basicosFrom.controls['ciudadNacimiento'].setValidators([Validators.required]);
      this.basicosFrom.controls['ciudadNacimiento'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['ciudadNacimiento'].updateValueAndValidity();

      this.basicosFrom.controls['fechaExpedicion'].setValidators([Validators.required]);
      this.basicosFrom.controls['fechaExpedicion'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['fechaExpedicion'].updateValueAndValidity();

      this.basicosFrom.controls['ciudadExpedicion'].setValidators([Validators.required]);
      this.basicosFrom.controls['ciudadExpedicion'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['ciudadExpedicion'].updateValueAndValidity();

      this.basicosFrom.controls['genero'].setValidators([Validators.required]);
      this.basicosFrom.controls['genero'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['genero'].updateValueAndValidity();

      this.basicosFrom.controls['nivelEstudio'].setValidators([Validators.required]);
      this.basicosFrom.controls['nivelEstudio'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['nivelEstudio'].updateValueAndValidity();
    } else if (this.basicosFrom.value.tipoCliente === 15) { // Tercero
      this.basicosFrom.controls['Nombre'].setValue('');
      this.basicosFrom.controls['metodo'].setValidators(null);
      this.basicosFrom.controls['metodo'].setErrors(null);
      this.basicosFrom.controls['NombreDrop'].setValidators(null);
      this.basicosFrom.controls['NombreDrop'].setErrors(null);
      this.basicosFrom.controls['numHijos'].setValidators(null);
      this.basicosFrom.controls['numHijos'].setErrors(null);
      this.basicosFrom.controls['numHijosEstudian'].setValidators(null);
      this.basicosFrom.controls['numHijosEstudian'].setErrors(null);

      this.basicosFrom.controls['motivoIngreso'].setValidators(null);
      this.basicosFrom.controls['motivoIngreso'].setErrors(null);
      this.basicosFrom.controls['estadoCivil'].setValidators(null);
      this.basicosFrom.controls['estadoCivil'].setErrors(null);
      this.basicosFrom.controls['Nombre'].setValidators(null);
      this.basicosFrom.controls['Nombre'].setErrors(null);
      this.basicosFrom.controls['estrato'].setValidators(null);
      this.basicosFrom.controls['estrato'].setErrors(null);
      this.basicosFrom.controls['viveDesde'].setValidators(null);
      this.basicosFrom.controls['viveDesde'].setErrors(null);
      this.basicosFrom.controls['tipoVivienda'].setValidators(null);
      this.basicosFrom.controls['tipoVivienda'].setErrors(null);
    }
  }
  SolicitarGestion() {
    this.CuentaSolicitud = new CuentaModel();
    this.CuentaSolicitud = {
      IdOficina: 0,
      IdProducto: 0,
      IdConsecutivo: 0,
      IdDigito: 0
    };
    this.AbrirSolicitudGestion.nativeElement.click();
  }

  removeActiveTab() {
    $('#financieroTab').removeClass('activar');
    $('#financieroTab').removeClass('active');
    $('#contactoTab').removeClass('activar');
    $('#contactoTab').removeClass('active');
    $('#activoTab').removeClass('activar');
    $('#activoTab').removeClass('active');
    $('#conyugueTab').removeClass('activar');
    $('#conyugueTab').removeClass('active');
    $('#laboralTab').removeClass('activar');
    $('#laboralTab').removeClass('active');
    $('#referenciaTab').removeClass('activar');
    $('#referenciaTab').removeClass('active');
    $('#entrevistaTab').removeClass('activar');
    $('#entrevistaTab').removeClass('active');
    $('#seguroTab').removeClass('activar');
    $('#seguroTab').removeClass('active');
    $('#fechasTab').removeClass('activar');
    $('#fechasTab').removeClass('active');
  }

  removeActiveTabBasico() {
    $('#basicoTab').removeClass('activar');
    $('#basicoTab').removeClass('active');
    $('#financieroTab').removeClass('activar');
    $('#financieroTab').removeClass('active');
    $('#contactoTab').removeClass('activar');
    $('#contactoTab').removeClass('active');
    $('#activoTab').removeClass('activar');
    $('#activoTab').removeClass('active');
    $('#conyugueTab').removeClass('activar');
    $('#conyugueTab').removeClass('active');
    $('#laboralTab').removeClass('activar');
    $('#laboralTab').removeClass('active');
    $('#referenciaTab').removeClass('activar');
    $('#referenciaTab').removeClass('active');
    $('#entrevistaTab').removeClass('activar');
    $('#entrevistaTab').removeClass('active');
    $('#seguroTab').removeClass('activar');
    $('#seguroTab').removeClass('active');
    $('#fechasTab').removeClass('activar');
    $('#fechasTab').removeClass('active');
  }

  setFocusDocumento() {
    this.CCdocumento.nativeElement.focus();
  }

  ResetAllForm() {
    this.basicosFrom.reset();
    this.financieroFrom.reset();
    this.contactoForm.reset();
    this.activoForm.reset();
    this.conyugueForm.reset();
    this.laboralForm.reset();
    this.entrevistaForm.reset();
    this.segurosForm.reset();
    this.referenciaForm.reset();
    this.coberturaForm.reset();
    this.fechasForm.reset();
    this.solicitudRetiroForm.reset();
    this.relacionPepsForm.reset();
    this.FormCambioEstado.reset();
    this.asesorForm.reset();
    this.patrimonioForm.reset();
    this.tratamientoForm.reset();
    this.terceroSave.reset();
    this.itemsLogSeguro = [];
    this.dataActivos = [];
    this.itemsEgresos = [];
    this.itemsIngresos = [];
    this.itemsContacto = [];
    this.dataConyuge = [];
    this.itemsAsegurado = [];
    this.itemsConyugue = [];
    this.itemsFamiliaPersonal = [];
    this.itemsFinancieraComercial = [];
    this.itemsPropiedad = [];
    this.itemsVehiculo = [];
    this.itemRelacionPeps = [];
    this.itemsSeguro = [];
    this.dataPepsLog = [];
    this.dataRetiroLog = [];
    this.dataReingresoLog = [];
    this.datatratamientoLog = [];
    this.allItemEntrevista = [];
    this.allItemFormEntrevista = [];
    this.allItemsFormSaves = {
      asociadosNaturalesDto: {},
      tercerosDto: {},
      financieroDto: {},
      contactoDto: {},
      activoDto: {},
      conyugueDto: {},
      laboralDto: {},
      referenciaDto: {},
      entrevistaDto: {},
      listaDePeps: {},
      segurosDto: {},
      tratamientoDto: {},
      cooberturaDto: {},
      logSegurosDto: {},
      userWork: ''
    };
  }

  ResetAllFormBusqueda() {
    this.ResetBasicosForm();
    this.financieroFrom.reset();
    this.contactoForm.reset();
    this.activoForm.reset();
    this.conyugueForm.reset();
    this.laboralForm.reset();
    this.entrevistaForm.reset();
    this.segurosForm.reset();
    this.referenciaForm.reset();
    this.coberturaForm.reset();
    this.fechasForm.reset();
    this.solicitudRetiroForm.reset();
    this.relacionPepsForm.reset();
    this.FormCambioEstado.reset();
    this.asesorForm.reset();
    this.patrimonioForm.reset();
    this.tratamientoForm.reset();
    this.terceroSave.reset();
    this.itemsLogSeguro = [];
    this.dataActivos = [];
    this.itemsEgresos = [];
    this.itemsIngresos = [];
    this.itemsContacto = [];
    this.dataConyuge = [];
    this.itemsAsegurado = [];
    this.itemsConyugue = [];
    this.itemsFamiliaPersonal = [];
    this.itemsFinancieraComercial = [];
    this.itemsPropiedad = [];
    this.itemsVehiculo = [];
    this.itemRelacionPeps = [];
    this.itemsSeguro = [];
    this.dataPepsLog = [];
    this.dataRetiroLog = [];
    this.dataReingresoLog = [];
    this.datatratamientoLog = [];
    this.allItemEntrevista = [];
    this.allItemFormEntrevista = [];
    this.allItemsFormSaves = {
      asociadosNaturalesDto: {},
      tercerosDto: {},
      financieroDto: {},
      contactoDto: {},
      activoDto: {},
      conyugueDto: {},
      laboralDto: {},
      referenciaDto: {},
      entrevistaDto: {},
      listaDePeps: {},
      segurosDto: {},
      tratamientoDto: {},
      cooberturaDto: {},
      logSegurosDto: {},
      userWork: ''
    };
  }
  ResetBasicosForm(){
    this.basicosFrom.get('paisNacimiento')?.reset();
    this.basicosFrom.get('departNacimiento')?.reset();
    this.basicosFrom.get('departExpedicion')?.reset();
    this.basicosFrom.get('telefonoArrendador')?.reset();
    this.basicosFrom.get('oficina')?.reset();
    this.basicosFrom.get('otroPor')?.reset();
    this.basicosFrom.get('metodo')?.reset();
    this.basicosFrom.get('amaCasa')?.reset();
    this.basicosFrom.get('setSegmento')?.reset();
    this.basicosFrom.get('segmento')?.reset();
    this.basicosFrom.get('profesion')?.reset();
    this.basicosFrom.get('actividad')?.reset();
    this.basicosFrom.get('numeroPersonasCargo')?.reset();
    this.basicosFrom.get('personasCargo')?.reset();
    this.basicosFrom.get('publica')?.reset();
    this.basicosFrom.get('motivoIngreso')?.reset();
    this.basicosFrom.get('tipoOcupacion')?.reset();
    this.basicosFrom.get('nivelEstudio')?.reset();
    this.basicosFrom.get('tipoEmpleo')?.reset();
    this.basicosFrom.get('numHijosEstudian')?.reset();
    this.basicosFrom.get('numHijos')?.reset();
    this.basicosFrom.get('viveDesde')?.reset();
    this.basicosFrom.get('tipoVivienda')?.reset();
    this.basicosFrom.get('IdNacionalidad')?.reset();
    this.basicosFrom.get('estrato')?.reset();
    this.basicosFrom.get('estadoCivil')?.reset();
    this.basicosFrom.get('genero')?.reset();
    this.basicosFrom.get('estado')?.reset();
    this.basicosFrom.get('segundoNombre')?.reset();
    this.basicosFrom.get('primerApellido')?.reset();
    this.basicosFrom.get('primerNombre')?.reset();
    this.basicosFrom.get('segundoApellido')?.reset();
    this.basicosFrom.get('ciudadNacimiento')?.reset();
    this.basicosFrom.get('fechaNacimiento')?.reset();
    this.basicosFrom.get('ciudadExpedicion')?.reset();
    this.basicosFrom.get('fechaExpedicion')?.reset();
    this.basicosFrom.get('IdentificacionTutor')?.reset();
    this.basicosFrom.get('NombreTutor')?.reset();
    this.basicosFrom.get('NombreDrop')?.reset();
    this.basicosFrom.get('NIT')?.reset();
    this.basicosFrom.get('Nombre')?.reset();
    this.basicosFrom.get('tipoDocumento')?.reset();
    this.basicosFrom.get('numeroDocumento')?.reset();
    this.basicosFrom.get('tipoCliente')?.reset();
    this.basicosFrom.get('operacion')?.reset();
    this.basicosFrom.get('NombreBusqueda')?.reset();
    this.basicosFrom.get('idNatural')?.reset();
  }
  ResetOperation() {
    this.solicitudRetiroForm.get('idMotivo')?.setValue('0');
    this.solicitudRetiroForm.get('ObservacionMotivo')?.reset();
    this.basicosFrom.get('operacion')?.reset();
    this.mostrarBtn = false;
    this.ObservacionRetiro = false;
    this.mostarErrorMotivoDescripcion = false;
  }
  ResetItemForm() {
    this.itemsIngresos = [];
    this.itemsEgresos = [];
    this.itemsContacto = [];
    this.itemsPropiedad = [];
    this.itemsVehiculo = [];
    this.itemsOtros = [];
    this.itemsConyugue = [];
    this.itemsLaboral = [];
    this.itemsFamiliaPersonal = [];
    this.itemsFinancieraComercial = [];
    this.itemRelacionPeps = [];
    this.itemsSeguro = [];
    this.itemsAsegurado = [];
  }
  EstadosPorOperaciones() {
    this.operacionesService.ObtenerEstadosXOperacionesData(this.operacionesModel).subscribe(
      result => {
        this.dataEstado = result;
      },
      error => {
        this.notif.onDanger('Error', error);
        console.error('validarTipoOperacion - ' + error);
      });
  }
  validarMetodo() {
    const results = this.basicosFrom.get('metodo')?.value;
    if (results === '7' || results === '6') {
      this.disableMetodo = false;
      this.basicosFrom.controls['otroPor'].setValidators([Validators.required]);
    } else {
      this.disableMetodo = true;
      this.basicosFrom.get('otroPor')?.clearValidators();
      this.basicosFrom.controls['otroPor'].setErrors(null);
      this.basicosFrom.controls['otroPor'].setValidators(null);
      this.basicosFrom.get('otroPor')?.reset();
    }
  }
  ValidarGenero() {
    if (this.basicosFrom.get('genero')?.value === '0') {
      this.disableAmaCasa = true;
    } else {
      this.basicosFrom.get('amaCasa')?.setValue(false);
      this.disableAmaCasa = false;
    }
  }
  validarTipoCliente() {
    this.blockBtnBasico = false;
    this.AsessorNecesario = true;
    const operacion = this.basicosFrom.get('operacion')?.value;
    this.clientesGetListService.GetTipoDocumento().subscribe(
      result => {
        this.dataTipoDocumento = result;
        let data : string | null = localStorage.getItem('Data');
        const DataUserLog = JSON.parse(window.atob(data == null ? "": data));
        if (this.basicosFrom.value.tipoCliente === '10') { // Menor de edad
          this.segurosForm.get('tratamiento')?.setValue(true);
          this.segurosForm.get('debitoAuto')?.setValue(true);
          if (DataUserLog.NumeroOficina !== '3') {
            this.blockTratamiento = true;
            this.blockDebitoAtomatico = true;
            if (operacion === '4') { // valido que la operacion sea cambio de relacion y no limpio las fechas
              this.desbloquearFormBuscar();
              this.MostrarAsesorExterno = true;
              this.formTutorOculto = true;
              this.EsProveedor = false;
              this.basicosFrom.get('IdentificacionTutor')?.reset();
              this.basicosFrom.get('NombreTutor')?.reset();
              this.dataAsociados = null;
              this.oculatObligatorioTercero = true;
              this.oculatObligatorioTerceroProveedor = true;
              this.basicosFrom.controls['metodo'].setValidators([Validators.required]);
              this.basicosFrom.controls['metodo'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['metodo'].updateValueAndValidity();
              this.basicosFrom.controls['NombreDrop'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['NombreDrop'].setValidators([Validators.required]);
              this.basicosFrom.controls['NombreDrop'].updateValueAndValidity();
              this.basicosFrom.controls['numHijos'].setValidators([Validators.required]);
              this.basicosFrom.controls['numHijos'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['numHijos'].updateValueAndValidity();
              this.basicosFrom.controls['numHijosEstudian'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['numHijosEstudian'].setValidators([Validators.required]);
              this.basicosFrom.controls['numHijosEstudian'].updateValueAndValidity();
              this.basicosFrom.controls['motivoIngreso'].setValidators([Validators.required]);
              this.basicosFrom.controls['motivoIngreso'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['motivoIngreso'].updateValueAndValidity();
              this.basicosFrom.controls['estadoCivil'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['estadoCivil'].setValidators([Validators.required]);
              this.basicosFrom.controls['estadoCivil'].updateValueAndValidity();
              this.basicosFrom.controls['estrato'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['estrato'].setValidators([Validators.required]);
              this.basicosFrom.controls['estrato'].updateValueAndValidity();
              this.basicosFrom.controls['viveDesde'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['viveDesde'].setValidators([Validators.required]);
              this.basicosFrom.controls['viveDesde'].updateValueAndValidity();
              this.basicosFrom.controls['tipoVivienda'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['tipoVivienda'].setValidators([Validators.required]);
              this.basicosFrom.controls['tipoVivienda'].updateValueAndValidity();
              this.basicosFrom.controls['fechaNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['fechaNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['fechaNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['ciudadNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['ciudadNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['ciudadNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['departNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['departNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['departNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['paisNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['paisNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['paisNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['fechaExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['fechaExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['fechaExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['ciudadExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['ciudadExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['ciudadExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['departExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['departExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['departExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['paisExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['paisExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['paisExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['genero'].setValidators([Validators.required]);
              this.basicosFrom.controls['genero'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['genero'].updateValueAndValidity();
              this.basicosFrom.controls['nivelEstudio'].setValidators([Validators.required]);
              this.basicosFrom.controls['nivelEstudio'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['nivelEstudio'].updateValueAndValidity();
              this.basicosFrom.get('numHijos')?.setValue(0);
              this.basicosFrom.get('numHijosEstudian')?.setValue(0);
            } else {
              this.desbloquearFormBuscar();
              this.MostrarAsesorExterno = true;
              this.formTutorOculto = true;
              this.dataTipoDocumento.splice(-6, 1);
              this.dataTipoDocumento.splice(0, 3);
              this.dataTipoDocumento.splice(2, 1);
              this.basicosFrom.get('tipoDocumento')?.reset();
              this.validarMayorMenorEdad();
              this.basicosFrom.controls['IdentificacionTutor'].setValidators([Validators.required, Validators.pattern('^[0-9]*')]);
              this.basicosFrom.controls['IdentificacionTutor'].setErrors({ 'incorrect': true });
              this.basicosFrom.get('fechaExpedicion')?.reset();
              this.basicosFrom.get('fechaNacimiento')?.reset();
              this.EsProveedor = false;
              this.oculatObligatorioTercero = true;
              this.oculatObligatorioTerceroProveedor = true;
              this.basicosFrom.controls['metodo'].setValidators([Validators.required]);
              this.basicosFrom.controls['metodo'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['metodo'].updateValueAndValidity();
              this.basicosFrom.controls['NombreDrop'].setValidators([Validators.required]);
              this.basicosFrom.controls['NombreDrop'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['NombreDrop'].updateValueAndValidity();
              this.basicosFrom.controls['numHijos'].setValidators([Validators.required]);
              this.basicosFrom.controls['numHijos'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['numHijosEstudian'].setValidators([Validators.required]);
              this.basicosFrom.controls['numHijosEstudian'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['motivoIngreso'].setValidators([Validators.required]);
              this.basicosFrom.controls['motivoIngreso'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['motivoIngreso'].updateValueAndValidity();
              this.basicosFrom.controls['estadoCivil'].setValidators([Validators.required]);
              this.basicosFrom.controls['estadoCivil'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['estadoCivil'].updateValueAndValidity();
              this.basicosFrom.controls['estrato'].setValidators([Validators.required]);
              this.basicosFrom.controls['estrato'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['estrato'].updateValueAndValidity();
              this.basicosFrom.controls['viveDesde'].setValidators([Validators.required]);
              this.basicosFrom.controls['viveDesde'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['viveDesde'].updateValueAndValidity();
              this.basicosFrom.controls['tipoVivienda'].setValidators([Validators.required]);
              this.basicosFrom.controls['tipoVivienda'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['tipoVivienda'].updateValueAndValidity();
              this.basicosFrom.controls['fechaNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['fechaNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['fechaNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['ciudadNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['ciudadNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['ciudadNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['departNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['departNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['departNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['paisNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['paisNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['paisNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['fechaExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['fechaExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['fechaExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['ciudadExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['ciudadExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['ciudadExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['departExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['departExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['departExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['paisExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['paisExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['paisExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['genero'].setValidators([Validators.required]);
              this.basicosFrom.controls['genero'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['genero'].updateValueAndValidity();
              this.basicosFrom.controls['nivelEstudio'].setValidators([Validators.required]);
              this.basicosFrom.controls['nivelEstudio'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['nivelEstudio'].updateValueAndValidity();
              this.basicosFrom.get('numHijos')?.setValue(0);
              this.basicosFrom.get('numHijosEstudian')?.setValue(0);
              this.segurosForm.get('tratamiento')?.setValue(true);
              this.segurosForm.get('debitoAuto')?.setValue(true);
            }            
          } else { // mensaje de validacion
             this.desbloquearFormBuscar();
            this.NombreAsesor = '';
            this.CedulaAsesor = '';
            this.NombreAsesorExt = '';
            this.CedulaAsesorExt = '';
            $('#basicoTab').addClass('disableTab');
            $('#financieroTab').addClass('disableTab');
            $('#contactoTab').addClass('disableTab');
            $('#activoTab').addClass('disableTab');
            $('#conyugueTab').addClass('disableTab');
            $('#laboralTab').addClass('disableTab');
            $('#referenciaTab').addClass('disableTab');
            $('#entrevistaTab').addClass('disableTab');
            $('#seguroTab').addClass('disableTab');
            this.BlockTipoContacto = true;
            this.disableFormCedula = true;
            this.itemsLogSeguro = [];
            this.BlockCategoria = null;
            this.formBuscarLocked = null;
            this.DescripcionBtn = 'Siguiente';
            this.ResetAllForm();
            this.ResetItemForm();
            this.disableForm = true;
            this.disbaleFromDocumento = true;
            this.disableFormEstado = true;
            this.disbaleFromTutor = true;
            this.disableFormPersonas = true;
            this.disableAmaCasa = false;
            this.disablePersonasACargo = true;
            this.formTutorOculto = false;
            this.oculatObligatorioTercero = true;
            this.oculatObligatorioTerceroProveedor = true;
            this.basicosFrom.controls['metodo'].setErrors(Validators.required);
            this.basicosFrom.controls['NombreDrop'].setErrors(Validators.required);
            this.basicosFrom.controls['numHijos'].setErrors([Validators.required]);
            this.basicosFrom.controls['numHijosEstudian'].setErrors([Validators.required]);
            this.basicosFrom.controls['motivoIngreso'].setErrors(Validators.required);
            this.basicosFrom.controls['estadoCivil'].setErrors(Validators.required);
            this.basicosFrom.controls['estrato'].setErrors(Validators.required);
            this.basicosFrom.controls['viveDesde'].setErrors(Validators.required);
            this.basicosFrom.controls['tipoVivienda'].setErrors(Validators.required);
            this.notif.onWarning('Advertencia', 'No se puede crear asociado en la oficina administración');
            this.BloquearFormBuscar();
          }
        } else if (this.basicosFrom.value.tipoCliente === '5') { // Asociado
          this.segurosForm.get('tratamiento')?.setValue(true);
          this.segurosForm.get('debitoAuto')?.setValue(true);
          if (DataUserLog.NumeroOficina === '3') { // mensaje de validacion oficina admin
            this.NombreAsesor = '';
            this.CedulaAsesor = '';
            this.NombreAsesorExt = '';
            this.CedulaAsesorExt = '';
            $('#basicoTab').addClass('disableTab');
            $('#financieroTab').addClass('disableTab');
            $('#contactoTab').addClass('disableTab');
            $('#activoTab').addClass('disableTab');
            $('#conyugueTab').addClass('disableTab');
            $('#laboralTab').addClass('disableTab');
            $('#referenciaTab').addClass('disableTab');
            $('#entrevistaTab').addClass('disableTab');
            $('#seguroTab').addClass('disableTab');
            this.BlockTipoContacto = true;
            this.disableFormCedula = true;
            this.itemsLogSeguro = [];
            this.BlockCategoria = null;
            this.blockTratamiento = true;
            this.blockDebitoAtomatico = true;
            this.formBuscarLocked = null;
            this.DescripcionBtn = 'Siguiente';
            this.ResetAllForm();
            this.ResetItemForm();
            this.disableForm = true;
            this.disbaleFromDocumento = true;
            this.disableFormEstado = true;
            this.disbaleFromTutor = true;
            this.disableFormPersonas = true;
            this.disableAmaCasa = false;
            this.disablePersonasACargo = true;
            this.formTutorOculto = false;
            this.oculatObligatorio = true;
            this.oculatObligatorioTercero = true;
            this.oculatObligatorioTerceroProveedor = true;
            this.basicosFrom.controls['metodo'].setErrors([Validators.required]);
            this.basicosFrom.controls['NombreDrop'].setErrors([Validators.required]);
            this.basicosFrom.controls['numHijos'].setErrors([Validators.required]);
            this.basicosFrom.controls['numHijosEstudian'].setErrors([Validators.required]);
            this.basicosFrom.controls['motivoIngreso'].setErrors([Validators.required]);
            this.basicosFrom.controls['estadoCivil'].setErrors([Validators.required]);
            this.basicosFrom.controls['estrato'].setErrors([Validators.required]);
            this.basicosFrom.controls['viveDesde'].setErrors([Validators.required]);
            this.basicosFrom.controls['tipoVivienda'].setErrors([Validators.required]);
            this.notif.onWarning('Advertencia', 'No se puede crear asociado en la oficina administración');
            this.basicosFrom.get('IdentificacionTutor')?.clearValidators();
            this.basicosFrom.controls['IdentificacionTutor'].setErrors(null);
            this.basicosFrom.controls['IdentificacionTutor'].setValidators(null);
            this.BloquearFormBuscar();
          } else {
            if (operacion === '4') { // valido que si el tipo de operacion es cambio de relacion no reset a las fechas
              this.desbloquearFormBuscar();
              this.EsProveedor = false;
              this.blockTratamiento = true;
              this.blockDebitoAtomatico = true;
              this.MostrarAsesorExterno = true;
              this.basicosFrom.get('IdentificacionTutor')?.reset();
              this.basicosFrom.get('NombreTutor')?.reset();
              this.dataAsociados = null;
              this.formTutorOculto = false;
              this.oculatObligatorioTercero = true;
              this.oculatObligatorioTerceroProveedor = true;
              this.basicosFrom.controls['metodo'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['metodo'].setValidators([Validators.required]);
              this.basicosFrom.controls['metodo'].updateValueAndValidity();
              this.basicosFrom.controls['NombreDrop'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['NombreDrop'].setValidators([Validators.required]);
              this.basicosFrom.controls['NombreDrop'].updateValueAndValidity();
              this.basicosFrom.controls['numHijos'].setValidators([Validators.required]);
              this.basicosFrom.controls['numHijos'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['numHijos'].updateValueAndValidity();
              this.basicosFrom.controls['numHijosEstudian'].setValidators([Validators.required]);
              this.basicosFrom.controls['numHijosEstudian'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['numHijosEstudian'].updateValueAndValidity();
              this.basicosFrom.controls['motivoIngreso'].setValidators([Validators.required]);
              this.basicosFrom.controls['motivoIngreso'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['motivoIngreso'].updateValueAndValidity();
              this.basicosFrom.controls['estadoCivil'].setValidators([Validators.required]);
              this.basicosFrom.controls['estadoCivil'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['estadoCivil'].updateValueAndValidity();
              this.basicosFrom.controls['estrato'].setValidators([Validators.required]);
              this.basicosFrom.controls['estrato'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['estrato'].updateValueAndValidity();
              this.basicosFrom.controls['viveDesde'].setValidators([Validators.required]);
              this.basicosFrom.controls['viveDesde'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['viveDesde'].updateValueAndValidity();
              this.basicosFrom.controls['tipoVivienda'].setValidators([Validators.required]);
              this.basicosFrom.controls['tipoVivienda'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['tipoVivienda'].updateValueAndValidity();
              this.basicosFrom.controls['fechaNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['fechaNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['fechaNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['ciudadNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['ciudadNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['ciudadNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['departNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['departNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['departNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['paisNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['paisNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['paisNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['fechaExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['fechaExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['fechaExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['ciudadExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['ciudadExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['ciudadExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['departExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['departExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['departExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['paisExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['paisExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['paisExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['genero'].setValidators([Validators.required]);
              this.basicosFrom.controls['genero'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['genero'].updateValueAndValidity();
              this.basicosFrom.controls['nivelEstudio'].setValidators([Validators.required]);
              this.basicosFrom.controls['nivelEstudio'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['nivelEstudio'].updateValueAndValidity();
              this.basicosFrom.get('IdentificacionTutor')?.clearValidators();
              this.basicosFrom.controls['IdentificacionTutor'].setErrors(null);
              this.basicosFrom.controls['IdentificacionTutor'].setValidators(null);
            } else {
              this.BlockDeudor = null;
              this.BlockInputService = null;
              this.EsProveedor = false;
              this.desbloquearFormBuscar();
              this.basicosFrom.controls['metodo'].setValidators([Validators.required]);
              this.basicosFrom.controls['metodo'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['metodo'].updateValueAndValidity();
              this.basicosFrom.controls['NombreDrop'].setValidators([Validators.required]);
              this.basicosFrom.controls['NombreDrop'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['NombreDrop'].updateValueAndValidity();
              this.basicosFrom.controls['numHijos'].setValidators([Validators.required]);
              this.basicosFrom.controls['numHijos'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['numHijosEstudian'].setValidators([Validators.required]);
              this.basicosFrom.controls['numHijosEstudian'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['motivoIngreso'].setValidators([Validators.required]);
              this.basicosFrom.controls['motivoIngreso'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['motivoIngreso'].updateValueAndValidity();
              this.basicosFrom.controls['estadoCivil'].setValidators([Validators.required]);
              this.basicosFrom.controls['estadoCivil'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['estadoCivil'].updateValueAndValidity();
              this.basicosFrom.controls['estrato'].setValidators([Validators.required]);
              this.basicosFrom.controls['estrato'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['estrato'].updateValueAndValidity();
              this.basicosFrom.controls['viveDesde'].setValidators([Validators.required]);
              this.basicosFrom.controls['viveDesde'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['viveDesde'].updateValueAndValidity();
              this.basicosFrom.controls['tipoVivienda'].setValidators([Validators.required]);
              this.basicosFrom.controls['tipoVivienda'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['tipoVivienda'].updateValueAndValidity();
              this.basicosFrom.get('numHijos')?.setValue(0);
              this.basicosFrom.get('numHijosEstudian')?.setValue(0);
              this.basicosFrom.get('IdentificacionTutor')?.clearValidators();
              this.basicosFrom.controls['IdentificacionTutor'].setErrors(null);
              this.basicosFrom.controls['IdentificacionTutor'].setValidators(null);
              this.basicosFrom.controls['fechaNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['fechaNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['fechaNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['ciudadNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['ciudadNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['ciudadNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['departNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['departNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['departNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['paisNacimiento'].setValidators([Validators.required]);
              this.basicosFrom.controls['paisNacimiento'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['paisNacimiento'].updateValueAndValidity();
              this.basicosFrom.controls['fechaExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['fechaExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['fechaExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['ciudadExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['ciudadExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['ciudadExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['departExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['departExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['departExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['paisExpedicion'].setValidators([Validators.required]);
              this.basicosFrom.controls['paisExpedicion'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['paisExpedicion'].updateValueAndValidity();
              this.basicosFrom.controls['genero'].setValidators([Validators.required]);
              this.basicosFrom.controls['genero'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['genero'].updateValueAndValidity();
              this.basicosFrom.controls['nivelEstudio'].setValidators([Validators.required]);
              this.basicosFrom.controls['nivelEstudio'].setErrors({ 'incorrect': true });
              this.basicosFrom.controls['nivelEstudio'].updateValueAndValidity();
              this.basicosFrom.get('IdentificacionTutor')?.reset();
              this.basicosFrom.get('NombreTutor')?.reset();
              this.dataTipoDocumento.splice(2, 1);
              this.dataTipoDocumento.splice(2, 1);
              this.dataTipoDocumento.splice(2, 1);
              this.dataTipoDocumento.splice(2, 1);
              this.dataTipoDocumento.splice(2, 1);
              this.basicosFrom.get('tipoDocumento')?.reset();
              this.blockTratamiento = true;
              this.blockDebitoAtomatico = true;
              this.MostrarAsesorExterno = true;
              this.basicosFrom.get('fechaExpedicion')?.reset();
              this.basicosFrom.get('fechaNacimiento')?.reset();
              this.formTutorOculto = false;
              this.oculatObligatorioTercero = true;
              this.oculatObligatorioTerceroProveedor = true;
              this.segurosForm.get('tratamiento')?.setValue(true);
              this.segurosForm.get('debitoAuto')?.setValue(true);
            }            
          }
        } else if (this.basicosFrom.value.tipoCliente === '15') { // Tercero
          this.BlockDeudor = null;
          this.BlockInputService = null;
          this.segurosForm.get('tratamiento')?.setValue(true);
          this.segurosForm.get('debitoAuto')?.setValue(false);
          this.dataTipoDocumento.splice(-6, 1);
          this.dataTipoDocumento.splice(2, 1);
          this.dataTipoDocumento.splice(2, 1);
          this.EsProveedor = true;
          this.oculatObligatorioTercero = false;
          this.oculatObligatorioTerceroProveedor = true;
          this.basicosFrom.controls['Nombre'].setValue('');
          this.basicosFrom.controls['metodo'].setValidators(null);
          this.basicosFrom.controls['metodo'].setErrors(null);
          this.basicosFrom.controls['NombreDrop'].setValidators(null);
          this.basicosFrom.controls['NombreDrop'].setErrors(null);
          this.basicosFrom.controls['numHijos'].setValidators(null);
          this.basicosFrom.controls['numHijos'].setErrors(null);
          this.basicosFrom.controls['numHijosEstudian'].setValidators(null);
          this.basicosFrom.controls['numHijosEstudian'].setErrors(null);
          this.basicosFrom.controls['motivoIngreso'].setValidators(null);
          this.basicosFrom.controls['motivoIngreso'].setErrors(null);
          this.basicosFrom.controls['estadoCivil'].setValidators(null);
          this.basicosFrom.controls['estadoCivil'].setErrors(null);
          this.basicosFrom.controls['Nombre'].setValidators(null);
          this.basicosFrom.controls['Nombre'].setErrors(null);
          this.basicosFrom.controls['estrato'].setValidators(null);
          this.basicosFrom.controls['estrato'].setErrors(null);
          this.basicosFrom.controls['viveDesde'].setValidators(null);
          this.basicosFrom.controls['viveDesde'].setErrors(null);
          this.basicosFrom.controls['tipoVivienda'].setValidators(null);
          this.basicosFrom.controls['tipoVivienda'].setErrors(null);
          this.blockTratamiento = true;
          this.blockDebitoAtomatico = true;
          this.MostrarAsesorExterno = false;
          this.formTutorOculto = false;
          this.basicosFrom.get('IdentificacionTutor')?.clearValidators();
          this.basicosFrom.controls['IdentificacionTutor'].setErrors(null);
          this.basicosFrom.controls['IdentificacionTutor'].setValidators(null);
          this.basicosFrom.get('IdentificacionTutor')?.reset();
          this.basicosFrom.get('NombreTutor')?.reset();
          this.desbloquearFormBuscar();
          let perfiles : string | null = localStorage.getItem('profiles');
          const resultProfiles = JSON.parse(window.atob(perfiles == null ? "" : perfiles));
          // se quito restriccion de oficina de administracion
            resultProfiles.forEach((element : any) => {
              if (element.IdPerfil === 68) {
                 Swal.fire({
                  title: 'Advertencia',
                  text: '',
                   html: '¿ El tercero a crear es para convenios ? ',
                  icon: 'warning',
                  showCancelButton: true,
                  confirmButtonText: 'Si',
                  cancelButtonText: 'No',
                  confirmButtonColor: 'rgb(13,165,80)',
                  cancelButtonColor: 'rgb(160,0,87)',
                  allowOutsideClick: false,
                  allowEscapeKey: false
                  // tslint:disable-next-line:no-shadowed-variable
                }).then((results) => {

                  if (results.value) {
                    // aqui quitar las validaciones de los campos fechas y ciudades
                    this.EsProveedor = true;
                    this.EliminarValidadoresProveedores();

                  } else {
                    this.EsProveedor = true;

                    this.AgregarValidadoresProveedor();
                  }
                });
              }
          });
          
        } else {
          this.blockTratamiento = null;
          this.MostrarAsesorExterno = true;
          this.basicosFrom.get('fechaExpedicion')?.reset();
          this.basicosFrom.get('fechaNacimiento')?.reset();
          this.formTutorOculto = false;
          this.oculatObligatorioTercero = false;
          this.oculatObligatorioTerceroProveedor = false;
          this.EsProveedor = false;
        }
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.log(errorMessage);
      });
  }
  private EliminarValidadoresProveedores() {
    this.oculatObligatorioTerceroProveedor = false;
    this.basicosFrom.controls['fechaNacimiento'].setValidators(null);
    this.basicosFrom.controls['fechaNacimiento'].setErrors(null);
    this.basicosFrom.controls['ciudadNacimiento'].setValidators(null);
    this.basicosFrom.controls['ciudadNacimiento'].setErrors(null);
    this.basicosFrom.controls['departNacimiento'].setValidators(null);
    this.basicosFrom.controls['departNacimiento'].setErrors(null);
    this.basicosFrom.controls['paisNacimiento'].setValidators(null);
    this.basicosFrom.controls['paisNacimiento'].setErrors(null);
    this.basicosFrom.controls['fechaExpedicion'].setValidators(null);
    this.basicosFrom.controls['fechaExpedicion'].setErrors(null);
    this.basicosFrom.controls['ciudadExpedicion'].setValidators(null);
    this.basicosFrom.controls['ciudadExpedicion'].setErrors(null);
    this.basicosFrom.controls['departExpedicion'].setValidators(null);
    this.basicosFrom.controls['departExpedicion'].setErrors(null);
    this.basicosFrom.controls['paisExpedicion'].setValidators(null);
    this.basicosFrom.controls['paisExpedicion'].setErrors(null);
    this.basicosFrom.controls['genero'].setValidators(null);
    this.basicosFrom.controls['genero'].setErrors(null);
    this.basicosFrom.controls['nivelEstudio'].setValidators(null);
    this.basicosFrom.controls['nivelEstudio'].setErrors(null);
    this.basicosFrom.controls['metodo'].setValidators(null);
    this.basicosFrom.controls['metodo'].setErrors(null);
    this.basicosFrom.controls['NombreDrop'].setValidators(null);
    this.basicosFrom.controls['NombreDrop'].setErrors(null);
  }
  private AgregarValidadoresProveedor() {
    this.oculatObligatorioTerceroProveedor = true;
    this.basicosFrom.controls['fechaNacimiento'].setValidators([Validators.required]);
    this.basicosFrom.controls['fechaNacimiento'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['fechaNacimiento'].updateValueAndValidity();
    this.basicosFrom.controls['ciudadNacimiento'].setValidators([Validators.required]);
    this.basicosFrom.controls['ciudadNacimiento'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['ciudadNacimiento'].updateValueAndValidity();
    this.basicosFrom.controls['departNacimiento'].setValidators([Validators.required]);
    this.basicosFrom.controls['departNacimiento'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['departNacimiento'].updateValueAndValidity();
    this.basicosFrom.controls['paisNacimiento'].setValidators([Validators.required]);
    this.basicosFrom.controls['paisNacimiento'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['paisNacimiento'].updateValueAndValidity();
    this.basicosFrom.controls['fechaExpedicion'].setValidators([Validators.required]);
    this.basicosFrom.controls['fechaExpedicion'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['fechaExpedicion'].updateValueAndValidity();
    this.basicosFrom.controls['ciudadExpedicion'].setValidators([Validators.required]);
    this.basicosFrom.controls['ciudadExpedicion'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['ciudadExpedicion'].updateValueAndValidity();
    this.basicosFrom.controls['departExpedicion'].setValidators([Validators.required]);
    this.basicosFrom.controls['departExpedicion'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['departExpedicion'].updateValueAndValidity();
    this.basicosFrom.controls['paisExpedicion'].setValidators([Validators.required]);
    this.basicosFrom.controls['paisExpedicion'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['paisExpedicion'].updateValueAndValidity();
    this.basicosFrom.controls['genero'].setValidators([Validators.required]);
    this.basicosFrom.controls['genero'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['genero'].updateValueAndValidity();
    this.basicosFrom.controls['nivelEstudio'].setValidators([Validators.required]);
    this.basicosFrom.controls['nivelEstudio'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['nivelEstudio'].updateValueAndValidity();
    // this.basicosFrom.controls['metodo'].setValidators(null);
    // this.basicosFrom.controls['metodo'].setErrors(null);
    this.basicosFrom.controls['NombreDrop'].setValidators(null);
    this.basicosFrom.controls['NombreDrop'].setErrors(null);
  }

  desbloquearFormBuscar() {
    const operacion = +this.basicosFrom.get('operacion')?.value;
    const tipoCliente = +this.basicosFrom.value.tipoCliente;
    if (operacion === 5) {
      if (tipoCliente === 15) {
        this.BlockEstado = true;
        this.Blockseguro = true;
        this.BlockMonto = true;
        this.BlockFecha = true;
        this.btnGuardarOculto = false;
        this.btnOcultoBuscar = true;
        this.mostrarBtnTercero = false;
        this.siguienteOculto = false;
        this.mostrarBtn = false;
      } else {
        this.segurosForm.reset();
        this.BlockEstado = null;
        this.Blockseguro = null;
        this.BlockMonto = null;
        this.BlockFecha = null;
        this.btnGuardarOculto = false;
        this.btnOcultoBuscar = true;
        this.mostrarBtnTercero = true;
        this.segurosForm.get('tratamiento')?.setValue(true);
        this.segurosForm.get('debitoAuto')?.setValue(true);
      }
    } else if (operacion === 1) {
      if (tipoCliente === 15) {
        this.BlockEstado = true;
        this.Blockseguro = true;
        this.BlockMonto = true;
        this.BlockFecha = true;
        this.btnGuardarOculto = false;
        this.btnOcultoBuscar = true;
        this.mostrarBtnTercero = false;
        this.siguienteOculto = false;
        this.mostrarBtn = true;
        this.blockTratamiento = false;
      } else {
        this.segurosForm.reset();
        this.BlockEstado = null;
        this.Blockseguro = null;
        this.BlockMonto = null;
        this.BlockFecha = null;
        this.btnGuardarOculto = false;
        this.btnOcultoBuscar = true;
        this.mostrarBtnTercero = true;
        this.blockTratamiento = true;
        this.btnOcultoBuscar = true;
        this.segurosForm.get('tratamiento')?.setValue(true);
        this.segurosForm.get('debitoAuto')?.setValue(true);
      }
    }
  }

  validarMayorMenorEdad() {
    if (this.basicosFrom.get('fechaNacimiento')?.value !== null
      && this.basicosFrom.get('fechaNacimiento')?.value !== undefined
      && this.basicosFrom.get('fechaNacimiento')?.value !== ' ') {
      
      const fechaNacimiento = this.basicosFrom.get('fechaNacimiento')?.value;
      const fechaExpedicion = this.basicosFrom.get('fechaExpedicion')?.value;
      const fechaActual = new Date();
      const expedicion = new Date(fechaExpedicion);
      const tipoCliente = +this.basicosFrom.get('tipoCliente')?.value;
      const tipoDocumen = +this.basicosFrom.get('tipoDocumento')?.value;
      if (fechaNacimiento !== null && fechaNacimiento !== '' && fechaNacimiento !== undefined) {
        if (expedicion < fechaActual) {
          if (fechaExpedicion != null) {
            if (tipoCliente === 10) {
              const restaFechas = this.diferenciaEntreDiasEnDias(fechaExpedicion, fechaNacimiento);
              if (restaFechas < 0) {
                this.notif.onWarning('Advertencia','La fecha de expedición del documento no es válida.');
                this.basicosFrom.get('fechaExpedicion')?.reset();
              }
            } else {
              const validacionFechas = this.ValidacionFechasExpdi(fechaExpedicion, fechaNacimiento);
              if (!validacionFechas && tipoCliente !== 10 && tipoDocumen !== 4 &&
                tipoDocumen !== 7 && tipoDocumen !== 5) {
                this.notif.onWarning('Advertencia','La fecha de expedición del documento no es válida.');
                this.basicosFrom.get('fechaExpedicion')?.reset();
              } else if (validacionFechas && tipoCliente === 10) {
                this.notif.onWarning('Advertencia', 'La fecha de expedición del documento no es válida.');
                this.basicosFrom.get('fechaExpedicion')?.reset();
              } else if (tipoCliente === 15 && (tipoDocumen === 4 || tipoDocumen === 7 || tipoDocumen === 5)) {
                if (moment(fechaExpedicion).format('YYYY-MM-DD') < moment(fechaNacimiento).format('YYYY-MM-DD')) {
                  this.notif.onWarning('Advertencia','La fecha de expedición del documento no es válida.');
                  this.basicosFrom.get('fechaExpedicion')?.reset();
                }
              }
            }
          }
        } else {
          this.notif.onWarning('Advertencia','La fecha de expedición no puede ser mayor a la fecha actual.');
          this.basicosFrom.get('fechaExpedicion')?.reset();
        }
      }
    } else {
      this.notif.onWarning('Advertencia','La fecha de nacimieto se debe ingresar primero.');
      this.basicosFrom.get('fechaExpedicion')?.reset();
    } 
  }
  validarMenorEdad() {
    const fechaNacimiento = this.basicosFrom.get('fechaNacimiento')?.value;
    const yearNacimiento = new Date(fechaNacimiento).getFullYear();
    // valida año  
    if (yearNacimiento >= 1900) {
      const fechaActual = new Date();
      const fechaActualFormat = moment(new Date()).format();
      const fechas = moment(fechaNacimiento).format();
      const nacimiento = moment(fechaNacimiento).format();
      const tipoCliente = +this.basicosFrom.get('tipoCliente')?.value;
      const tipoDocumento = +this.basicosFrom.get('tipoDocumento')?.value;
      if (fechaActualFormat > fechas) {
        if (fechaNacimiento != null) {
          const validacionFechas = this.ValidacionFechas(fechaActualFormat, nacimiento);
          if (validacionFechas && tipoCliente === 10) {
            this.notif.onWarning('Advertencia','La fecha de nacimiento no es válida.');
            this.basicosFrom.get('fechaNacimiento')?.reset();
          } else if (!validacionFechas && tipoCliente === 5) {
            this.notif.onWarning('Advertencia','La fecha de nacimiento no es válida.');
            this.basicosFrom.get('fechaNacimiento')?.reset();
          } else if (validacionFechas && tipoCliente === 15 && (tipoDocumento === 4 || tipoDocumento === 5 || tipoDocumento === 7)) {
            this.notif.onWarning('Advertencia','La fecha de nacimiento no es válida.');
            this.basicosFrom.get('fechaNacimiento')?.reset();
          } else if (!validacionFechas && tipoCliente === 15 && tipoDocumento !== 4 && tipoDocumento !== 5 && tipoDocumento !== 7) {
            this.notif.onWarning('Advertencia','La fecha de nacimiento no es válida.');
            this.basicosFrom.get('fechaNacimiento')?.reset();
          }
        }
      } else {
        this.notif.onWarning('Advertencia','La fecha de nacimiento no puede ser mayor a la fecha actual.');
        this.basicosFrom.get('fechaNacimiento')?.reset();
      }
    } else {
      this.notif.onWarning('Advertencia','La fecha de nacimiento no es válida.',);
      this.basicosFrom.get('fechaNacimiento')?.reset();
    }    
  }
  validarFechaVivieDesde() {
    const viveDesde = this.basicosFrom.get('viveDesde')?.value;
    const nacimiento = this.basicosFrom.get('fechaNacimiento')?.value;
    const fechaActual = new Date();
    const viveDesdeFormat = new Date(viveDesde);
    const restaFechas = this.diferenciaEntreDiasEnDias(viveDesde, nacimiento);
    if (viveDesdeFormat < fechaActual) {
      if (restaFechas < 0) {
        this.notif.onWarning('Advertencia','La fecha vive desde no puede ser menor a la fecha de nacimiento.');
        this.basicosFrom.get('viveDesde')?.reset();
      }
    } else {
      this.notif.onWarning('Advertencia','La fecha ingresada no puede ser mayor a la fecha de actual.');
      this.basicosFrom.get('viveDesde')?.reset();
    }
  }
  validarFechaTratamiento() {
    this.blockBtnBasico = false;
    const fechaTratamiento = this.segurosForm.get('fechaTrataManual')?.value;
    const fechaTrata = new Date(fechaTratamiento);
    const fechaCreaMo = moment(new Date(this.fechaCreacion), 'YYYY-MM-DD').format('YYYY-MM-DD');
    const fechaCrea = new Date(fechaCreaMo);
    const fechaActual = new Date();
    if (fechaTratamiento !== null) {
      if (fechaTrata < fechaActual) {
        if (fechaTrata < fechaCrea) {
          this.notif.onWarning('Advertencia','La fecha no puede ser menor a la fecha de creación.');
          this.segurosForm.get('fechaTrataManual')?.reset();
        }
      } else {
        this.notif.onWarning('Advertencia','La fecha no puede ser mayor a la fecha de actual.');
        this.segurosForm.get('fechaTrataManual')?.reset();
      }
    } else {
      this.segurosForm.get('fechaTrataManual')?.reset();
    }
  }
  diferenciaEntreDiasEnDias(a : any, b : any) {
    const utc1 = Date.UTC(new Date(a).getFullYear(), new Date(a).getMonth(), new Date(a).getDate());
    const utc2 = Date.UTC(new Date(b).getFullYear(), new Date(b).getMonth(), new Date(b).getDate());
    return Math.floor((utc1 - utc2) / this.MILISENGUNDOS_POR_DIA);
  }
  ValidacionFechas(actual : any, ingresado : any) {
    const diaActual = new Date(actual);
    const diaActualF = diaActual.getDate();
    const mesActual = new Date(actual);
    const mesActualF = mesActual.getMonth() + 1;
    const anoActual = new Date(actual).getFullYear();
    const diaIngresado = new Date(ingresado);
    const diaIngresadoF = diaIngresado.getDate();
    const mesIngresado = new Date(ingresado);
    const mesIngresadoF = mesIngresado.getMonth() + 1;
    const anoIngresado = new Date(ingresado).getFullYear();
    if ((anoActual - anoIngresado) === 18) { // valida que los años sean iguales a 18
      if (mesActualF === mesIngresadoF) { // valida que el mes actual sea igual al mes ingresado
        if (diaIngresadoF === diaActualF) { // valido que el dia sea igual que el actual
          return true; // mayor
        } else if (diaIngresadoF > diaActualF) { // valida que el dia ingresado sea mayor al actual
          return false; // menor
        } else {
          return true; // mayor
        }
      } else if (mesIngresadoF > mesActualF) { // valida que el mes ingresado sea menor que el actual
        return false; // menor
      } else {
        return true; // mayor
      }
    } else if ((anoActual - anoIngresado) > 18) { // valida si el año ingresado es mayor que 18 muestre el ensaje y si no deje seguir
      return true; // mayor
    } else {
      return false; // menor
    }
  }
  ValidacionFechasExpdi(expedi :any, ingresado : any) {
    const diaExpedi = new Date(expedi);
    const diaExpediF = diaExpedi.getDate();
    const mesExpedi = new Date(expedi);
    const mesExpediF = mesExpedi.getMonth() + 1;
    const anoExpedi = new Date(expedi).getFullYear();
    // const anoActualF = anoActual.getFullYear();
    const diaIngresado = new Date(ingresado);
    const diaIngresadoF = diaIngresado.getDate();
    const mesIngresado = new Date(ingresado);
    const mesIngresadoF = mesIngresado.getMonth() + 1;
    const anoIngresado = new Date(ingresado).getFullYear();
    if ((anoExpedi - anoIngresado) === 18) { // valida que los años sean iguales a 18
      if (mesExpediF === mesIngresadoF) { // valida que el mes actual sea igual al mes ingresado
        if (diaIngresadoF === diaExpediF) { // valido que el dia sea igual que el actual
          return true; // mayor
        } else if (diaIngresadoF > diaExpediF) { // valida que el dia ingresado sea mayor al actual
          return false; // menor
        } else {
          return true; // mayor
        }
      } else if (mesIngresadoF > mesExpediF) { // valida que el mes ingresado sea menor que el actual
        return false; // menor
      } else {
        return true; // mayor
      }
    } else if ((anoExpedi - anoIngresado) > 18) { // valida si el año ingresado es mayor que 18 muestre el ensaje y si no deje seguir
      return true; // mayor
    } else {
      return false; // menor
    }
  }
  BuscarNatural() {
    if (this.basicosFrom.get('DocumentoBusqueda')?.value !== null
      && this.basicosFrom.get('DocumentoBusqueda')?.value !== undefined) {
      this.validarDocumentoNuevoAsociado();
    } else if (this.basicosFrom.get('NombreBusqueda')?.value !== null
      && this.basicosFrom.get('NombreBusqueda')?.value !== undefined) {
      this.BuscarNaturalAllName();
    }
  }
  validarDocumentoNuevoAsociado() {
    const objAsociados = new AsociadosModel();
    objAsociados.strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
    if (objAsociados.strNumeroDocumento !== '' && objAsociados.strNumeroDocumento !== null &&
      objAsociados.strNumeroDocumento !== undefined) {
      this.ValidarVetadosDocumentoBusqueda();
      this.BuscarNaturalesAll(objAsociados.strNumeroDocumento);
    }
  }
  validarDocumnetoCreacionNatural() {
    this.blockBtnBasico = false;
    if (+this.basicosFrom.get('tipoDocumento')?.value !== 9) {
      const NumDocumento = this.basicosFrom.get('numeroDocumento')?.value;
      if (/^([0-9])*$/.test(NumDocumento)) {
        const operacion = +this.basicosFrom.get('operacion')?.value;
        const tipoDocu = +this.basicosFrom.get('tipoDocumento')?.value;
        if (operacion !== 17) {
          if (tipoDocu !== 0) {
            const valor = (this.basicosFrom.get('numeroDocumento')?.value).toString();
            const valorBusqueda = Number(this.basicosFrom.get('DocumentoBusqueda')?.value).toString();
            const tipoCli = +this.basicosFrom.get('tipoCliente')?.value;
            if (valor !== valorBusqueda) {
              if (valor !== '0' && valor !== 'NaN' && valor !== '') {
                this.basicosFrom.get('numeroDocumento')?.setValue(valor);
                const objAsociados = new AsociadosModel();
                objAsociados.strNumeroDocumento = this.basicosFrom.get('numeroDocumento')?.value;
                this.ValidarVetadosDocumento();
                if ((operacion === 17 || operacion === 5) && objAsociados.strNumeroDocumento !== this.documentoAnterior) {
                  this.clientesGetListService.GetGenNits(objAsociados.strNumeroDocumento).subscribe(
                    resultGenNit => {
                      this.clientesGetListService.GetTerceros(objAsociados.strNumeroDocumento).subscribe(
                        result => {
                          if (result !== null || resultGenNit) {
                            this.yaIngreso = false;
                            this.notif.onWarning('Advertencia', 'El asociado ya fue ingresado.');
                            this.itemsLogSeguro = [];
                            this.dataActivos = [];
                            this.itemsEgresos = [];
                            this.itemsIngresos = [];
                            this.itemsContacto = [];
                            this.dataConyuge = [];
                            this.itemsLogSeguro = [];
                            if (tipoCli === 10) {
                              this.formTutorOculto = true;
                            } else {
                              this.formTutorOculto = false;
                            }
                            this.basicosFrom.get('numeroDocumento')?.reset();
                            this.VolverArriba();
                          } else {
                            this.yaIngreso = true;
                          }
                        });
                    },
                    error => {
                      const errorMessage = <any>error;
                      this.notif.onDanger('Error', error);
                      console.log(errorMessage);
                    });
                } else {
                  this.yaIngreso = true;
                }
              } else {
                this.basicosFrom.get('numeroDocumento')?.reset();
              }
            } else {
              const valorNormal = this.basicosFrom.get('numeroDocumento')?.value;
              if (valorNormal !== '0' && valorNormal !== 'NaN' && valorNormal !== '') {
                this.basicosFrom.get('numeroDocumento')?.setValue(valorNormal);
                const objAsociados = new AsociadosModel();
                objAsociados.strNumeroDocumento = this.basicosFrom.get('numeroDocumento')?.value;
                this.ValidarVetadosDocumento();
                if ((operacion === 17 || operacion === 5) && objAsociados.strNumeroDocumento !== this.documentoAnterior) {
                  this.clientesGetListService.GetGenNits(objAsociados.strNumeroDocumento).subscribe(
                    resultGenNit => {
                      this.clientesGetListService.GetTerceros(objAsociados.strNumeroDocumento).subscribe(
                        result => {
                          if (result !== null || resultGenNit) {
                            this.yaIngreso = false;
                            this.notif.onWarning('Advertencia', 'El asociado ya fue ingresado.');
                            this.itemsLogSeguro = [];
                            this.dataActivos = [];
                            this.itemsEgresos = [];
                            this.itemsIngresos = [];
                            this.itemsContacto = [];
                            this.dataConyuge = [];
                            this.itemsLogSeguro = [];
                            if (tipoCli === 10) {
                              this.formTutorOculto = true;
                            } else {
                              this.formTutorOculto = false;
                            }
                            this.basicosFrom.get('numeroDocumento')?.reset();
                            this.VolverArriba();
                          } else {
                            this.yaIngreso = true;
                          }
                        });
                    },
                    error => {
                      const errorMessage = <any>error;
                      this.notif.onDanger('Error', error);
                      console.log(errorMessage);
                    });
                } else {
                  this.yaIngreso = true;
                }
              } else {
                this.basicosFrom.get('numeroDocumento')?.reset();
              }
            }
          } else {
            this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de documento valido.');
            this.basicosFrom.get('tipoDocumento')?.reset();
          }
          return this.yaIngreso;
        } 
      
      } else {
        this.notif.onWarning('Advertencia', 'El tipo de documento seleccionado no permite letras.');
        this.basicosFrom.get('numeroDocumento')?.reset();
      }
    } else {
      const operacion = +this.basicosFrom.get('operacion')?.value;
      const tipoDocu = +this.basicosFrom.get('tipoDocumento')?.value;
      if (operacion !== 17) {
        if (tipoDocu !== 0) {
          const valor = (this.basicosFrom.get('numeroDocumento')?.value).toString();
          const valorBusqueda = Number(this.basicosFrom.get('DocumentoBusqueda')?.value).toString();
          const tipoCli = +this.basicosFrom.get('tipoCliente')?.value;
          if (valor !== valorBusqueda) {
            if (valor !== '0' && valor !== 'NaN' && valor !== '') {
              this.basicosFrom.get('numeroDocumento')?.setValue(valor);
              const objAsociados = new AsociadosModel();
              objAsociados.strNumeroDocumento = this.basicosFrom.get('numeroDocumento')?.value;
              this.ValidarVetadosDocumento();
              if ((operacion === 17 || operacion === 5) && objAsociados.strNumeroDocumento !== this.documentoAnterior) {
                this.clientesGetListService.GetGenNits(objAsociados.strNumeroDocumento).subscribe(
                  resultGenNit => {
                    this.clientesGetListService.GetTerceros(objAsociados.strNumeroDocumento).subscribe(
                      result => {
                        if (result !== null || resultGenNit) {
                          this.yaIngreso = false;
                          this.notif.onWarning('Advertencia', 'El asociado ya fue ingresado.');
                          this.itemsLogSeguro = [];
                          this.dataActivos = [];
                          this.itemsEgresos = [];
                          this.itemsIngresos = [];
                          this.itemsContacto = [];
                          this.dataConyuge = [];
                          this.itemsLogSeguro = [];
                          if (tipoCli === 10) {
                            this.formTutorOculto = true;
                          } else {
                            this.formTutorOculto = false;
                          }
                          this.basicosFrom.get('numeroDocumento')?.reset();
                          this.VolverArriba();
                        } else {
                          this.yaIngreso = true;
                        }
                      });
                  },
                  error => {
                    const errorMessage = <any>error;
                    this.notif.onDanger('Error', error);
                    console.log(errorMessage);
                  });
              } else {
                this.yaIngreso = true;
              }
            } else {
              this.basicosFrom.get('numeroDocumento')?.reset();
            }
          } else {
            const valorNormal = this.basicosFrom.get('numeroDocumento')?.value;
            if (valorNormal !== '0' && valorNormal !== 'NaN' && valorNormal !== '') {
              this.basicosFrom.get('numeroDocumento')?.setValue(valorNormal);
              const objAsociados = new AsociadosModel();
              objAsociados.strNumeroDocumento = this.basicosFrom.get('numeroDocumento')?.value;
              this.ValidarVetadosDocumento();
              if ((operacion === 17 || operacion === 5) && objAsociados.strNumeroDocumento !== this.documentoAnterior) {
                this.clientesGetListService.GetGenNits(objAsociados.strNumeroDocumento).subscribe(
                  resultGenNit => {
                    this.clientesGetListService.GetTerceros(objAsociados.strNumeroDocumento).subscribe(
                      result => {
                        if (result !== null || resultGenNit) {
                          this.yaIngreso = false;
                          this.notif.onWarning('Advertencia', 'El asociado ya fue ingresado.');
                          this.itemsLogSeguro = [];
                          this.dataActivos = [];
                          this.itemsEgresos = [];
                          this.itemsIngresos = [];
                          this.itemsContacto = [];
                          this.dataConyuge = [];
                          this.itemsLogSeguro = [];
                          if (tipoCli === 10) {
                            this.formTutorOculto = true;
                          } else {
                            this.formTutorOculto = false;
                          }
                          this.basicosFrom.get('numeroDocumento')?.reset();
                          this.VolverArriba();
                        } else {
                          this.yaIngreso = true;
                        }
                      });
                  },
                  error => {
                    const errorMessage = <any>error;
                    this.notif.onDanger('Error', error);
                    console.log(errorMessage);
                  });
              } else {
                this.yaIngreso = true;
              }
            } else {
              this.basicosFrom.get('numeroDocumento')?.reset();
            }
          }
        } else {
          this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de documento valido.');
          this.basicosFrom.get('tipoDocumento')?.reset();
        }
        return this.yaIngreso;
      } 
    }
    return 0;
  }
   validarDocumnetoCambioNatural() : boolean {
     this.bloquearClick = false;
    const operacion = +this.basicosFrom.get('operacion')?.value;
    const tipoDocu = +this.basicosFrom.get('tipoDocumento')?.value;
    if (tipoDocu !== 0) {
      const valor = Number(this.basicosFrom.get('numeroDocumento')?.value).toString();
      const valorBusqueda = Number(this.basicosFrom.get('DocumentoBusqueda')?.value).toString();
      const tipoCli = +this.basicosFrom.get('tipoCliente')?.value;
      if (valor !== valorBusqueda) {
        if (valor !== '0' && valor !== 'NaN' && valor !== '') {
          this.basicosFrom.get('numeroDocumento')?.setValue(valor);
          const objAsociados = new AsociadosModel();
          objAsociados.strNumeroDocumento = this.basicosFrom.get('numeroDocumento')?.value;
          this.ValidarVetadosDocumento();
          if (operacion === 17 && objAsociados.strNumeroDocumento !== this.documentoAnterior) {
            this.clientesGetListService.GetGenNits(objAsociados.strNumeroDocumento).subscribe(
              resultGenNit => {
                this.clientesGetListService.GetTerceros(objAsociados.strNumeroDocumento).subscribe(
                  result => {
                    if (result !== null || resultGenNit) {
                      this.yaIngreso = false;
                      this.notif.onWarning('Advertencia', 'El asociado ya fue ingresado.');
                      this.itemsLogSeguro = [];
                      this.dataActivos = [];
                      this.itemsEgresos = [];
                      this.itemsIngresos = [];
                      this.itemsContacto = [];
                      this.dataConyuge = [];
                      this.itemsLogSeguro = [];
                      if (tipoCli === 10) {
                        this.formTutorOculto = true;
                      } else {
                        this.formTutorOculto = false;
                      }
                      this.basicosFrom.get('numeroDocumento')?.reset();
                      this.VolverArriba();
                    } else {
                      this.yaIngreso = true;
                    }
                  });
              },
              error => {
                const errorMessage = <any>error;
                this.notif.onDanger('Error', error);
                console.log(errorMessage);
              });
            } else {
               this.yaIngreso = true;
            }
        } else {
          this.basicosFrom.get('numeroDocumento')?.reset();
        }
      } else {
        const valorNormal = this.basicosFrom.get('numeroDocumento')?.value;
        if (valorNormal !== '0' && valorNormal !== 'NaN' && valorNormal !== '') {
          this.basicosFrom.get('numeroDocumento')?.setValue(valorNormal);
          const objAsociados = new AsociadosModel();
          objAsociados.strNumeroDocumento = this.basicosFrom.get('numeroDocumento')?.value;
          this.ValidarVetadosDocumento();
          if (operacion === 17 && objAsociados.strNumeroDocumento !== this.documentoAnterior) {
            this.clientesGetListService.GetGenNits(objAsociados.strNumeroDocumento).subscribe(
              resultGenNit => {
                this.clientesGetListService.GetTerceros(objAsociados.strNumeroDocumento).subscribe(
                  result => {
                    if (result !== null || resultGenNit) {
                      this.yaIngreso = false;
                      this.notif.onWarning('Advertencia', 'El asociado ya fue ingresado.');
                      this.itemsLogSeguro = [];
                      this.dataActivos = [];
                      this.itemsEgresos = [];
                      this.itemsIngresos = [];
                      this.itemsContacto = [];
                      this.dataConyuge = [];
                      this.itemsLogSeguro = [];
                      if (tipoCli === 10) {
                        this.formTutorOculto = true;
                      } else {
                        this.formTutorOculto = false;
                      }
                      this.basicosFrom.get('numeroDocumento')?.reset();
                      this.VolverArriba();
                    } else {
                      this.yaIngreso = true;
                    }
                  });
              },
              error => {
                const errorMessage = <any>error;
                this.notif.onDanger('Error', error);
                console.log(errorMessage);
              });
          } else {
             this.yaIngreso = true;
          }
        } else {
          this.basicosFrom.get('numeroDocumento')?.reset();
        }
      }
    } else {
       this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de documento valido.');
    }
    return this.yaIngreso;
  }
  validarNivelEstudio() {
    const select = this.basicosFrom.get('nivelEstudio')?.value;
    if (select === '') {
      this.notif.onWarning('Advertencia', 'Debe seleccionar un nivel de estudio válido.');
      this.basicosFrom.get('nivelEstudio')?.reset();
    } else {
      const valorForm = this.basicosFrom.value;
      if (valorForm.nivelEstudio === '5' || valorForm.nivelEstudio === '20' ||
        valorForm.nivelEstudio === '45' || valorForm.nivelEstudio === '10') {
        this.basicosFrom.get('profesion')?.reset();
        this.disableFormProfesion = true;
      } else {
        this.disableFormProfesion = null;
      }
    }
  }
  validarEstadoCivil() {
    const operacion = this.basicosFrom.get('operacion')?.value;
    if (operacion === '1') {
      const estadoCivil = +this.basicosFrom.get('estadoCivil')?.value;
      if (this.estadoCivilAnterior === 5 && estadoCivil !== 5) {
        // aqui eliminar los registros de conyugue
        Swal.fire({ // Se preguunta si necesita asesor externo
          title: 'Advertencia',
          text: '',
          html: '! Se realizo un cambio en el estado civil se eliminaran los registros del conyugue ! ',
          icon: 'warning',
          showCancelButton: false,
          confirmButtonText: 'Entiendo',
          confirmButtonColor: 'rgb(13,165,80)',
          cancelButtonColor: 'rgb(160,0,87)',
          allowOutsideClick: false,
          allowEscapeKey: false
          // tslint:disable-next-line:no-shadowed-variable
        }).then((results) => {
          if (results.value) {
            this.cambioCivil = true;
          }
        });
      } else {
        this.cambioCivil = false;
      }
    } else if (operacion === '5') {
      const estadoSeleccionado = localStorage.getItem('estadoSeleccionado');
      if (estadoSeleccionado === null || estadoSeleccionado === undefined) {
        localStorage.setItem('estadoSeleccionado', this.basicosFrom.get('estadoCivil')?.value);
      } else {
        const estadoEscogido = +this.basicosFrom.get('estadoCivil')?.value;
        if (+estadoSeleccionado !== estadoEscogido) {
          if (estadoEscogido !== 5 && this.itemsConyugue.length > 0) {
            // aqui eliminar los registros de conyugue
            Swal.fire({ // Se preguunta si necesita asesor externo
              title: 'Advertencia',
              text: '',
              html: '! Se realizo un cambio en el estado civil se eliminaran los registros del conyugue ! ',
              icon: 'warning',
              showCancelButton: false,
              confirmButtonText: 'Entiendo',
              confirmButtonColor: 'rgb(13,165,80)',
              cancelButtonColor: 'rgb(160,0,87)',
              allowOutsideClick: false,
              allowEscapeKey: false
              // tslint:disable-next-line:no-shadowed-variable
            }).then((results : any) => {
              this.itemsConyugue = [];
              this.allItemsFormSaves.conyugueDto = [];
              localStorage.setItem('estadoSeleccionado', this.basicosFrom.get('estadoCivil')?.value);
              if (results.value) {
                this.cambioCivil = true;
              }
            });
          }
        } else {
          localStorage.setItem('estadoSeleccionado', this.basicosFrom.get('estadoCivil')?.value);
          this.cambioCivil = false;
        }
      }
    }
  }
  autocompleListFormatter = (data: any): SafeHtml => {
    const html = `<span>${data.Nombre}</span>`;
    return this._sanitizer.bypassSecurityTrustHtml(html);
  }
  ResetForm() {
    this.itemsLogSeguro = [];
    this.dataActivos = [];
    this.itemsEgresos = [];
    this.itemsIngresos = [];
    this.itemsContacto = [];
    this.dataConyuge = [];
    this.ResetAllForm();
    this.ResetItemForm();
    this.formBuscarLocked = null;
    this.disbaleFromDocumento = true;
    this.disableFormEstado = true;
    this.disableForm = true;
    this.formTutorOculto = false;
    localStorage.removeItem('TerceroNatura');
    this.MostrarAsesorExterno = false;
    this.asesorForm.reset();
    this.basicosFrom.reset();
    this.basicosFrom.get('numHijos')?.setValue(0);
    this.basicosFrom.get('numHijosEstudian')?.setValue(0);
    this.laboralForm.get('NumPersonasCargo')?.setValue(0);
  }

  validarTipoContacto() {
    if (this.itemsContacto === undefined) {
    const tipoCont = this.contactoForm.get('TipoContacto')?.value;
    this.cleanAdrees();
    if (tipoCont !== '') {
      switch (this.contactoForm.get('TipoContacto')?.value.Id) {
        case 1: // Direccion
          this.disableEmail = true;
          this.disableDireccion = false;
          this.disableCelular = true;
          this.disablePhone = true;
          this.ocultarDireccion = false;
          this.ocultarDireccionEdit = true;
          this.disableUbicacion = false;
          this.formBuscarLockedPpal = null;
          this.AgregarValidacionesDireccion();
          this.EliminarValidacionesEmail();
          this.EliminarValidacionesTelefonos();
          this.ElimnarValidacionesCelular();
          this.PreCargarPais();
          break;
        case 2: // Direccion laboral
          this.disableEmail = true;
          this.disableDireccion = false;
          this.disableCelular = true;
          this.disablePhone = true;
          this.ocultarDireccion = false;
          this.ocultarDireccionEdit = true;
          this.disableUbicacion = false;
          this.formBuscarLockedPpal = null;
          this.AgregarValidacionesDireccion();
          this.EliminarValidacionesEmail();
          this.EliminarValidacionesTelefonos();
          this.ElimnarValidacionesCelular();
          this.PreCargarPais();
          break;
        case 3: // Email
          this.disableEmail = false;
          this.disableDireccion = true;
          this.disableCelular = true;
          this.disablePhone = true;
          this.ocultarDireccion = true;
          this.ocultarDireccionEdit = true;
          this.disableUbicacion = true;
          this.contactoForm.get('Ciudad')?.setValue(null);
          this.formBuscarLockedPpal = null;
          this.AgregarValidacionesEmail();
          this.EliminarValidacionesDireccion();
          this.EliminarValidacionesTelefonos();
          this.ElimnarValidacionesCelular();
          break;
        case 4: // telefono residencia
          this.DigitosContacto = 7;
          this.contactoForm.get('NumeroUno')?.reset();
          this.disableEmail = true;
          this.disableDireccion = true;
          this.disableCelular = true;
          this.disablePhone = false;
          this.ocultarDireccion = true;
          this.ocultarDireccionEdit = true;
          this.disableUbicacion = true;
          this.contactoForm.get('Ciudad')?.setValue(null);
          this.formBuscarLockedPpal = true;
          this.AgregarValidacionesTelefonos();
          this.EliminarValidacionesDireccion();
          this.EliminarValidacionesEmail();
          this.ElimnarValidacionesCelular();
          break;
        case 5: // telefono laboral
          this.DigitosContacto = 7;
          this.contactoForm.get('NumeroUno')?.reset();
          this.disableEmail = true;
          this.disableDireccion = true;
          this.disableCelular = true;
          this.disablePhone = false;
          this.ocultarDireccion = true;
          this.ocultarDireccionEdit = true;
          this.disableUbicacion = true;
          this.contactoForm.get('Ciudad')?.setValue(null);
          this.formBuscarLockedPpal = true;
          this.AgregarValidacionesTelefonos();
          this.EliminarValidacionesDireccion();
          this.EliminarValidacionesEmail();
          this.ElimnarValidacionesCelular();
          break;
        case 6: // Celular
          this.DigitosContacto = 10;
          this.contactoForm.get('NumeroUno')?.reset();
          this.disableEmail = true;
          this.disableDireccion = true;
          this.disablePhone = true;
          this.disableCelular = false;
          this.ocultarDireccion = true;
          this.ocultarDireccionEdit = true;
          this.disableUbicacion = true;
          this.contactoForm.get('Ciudad')?.setValue(null);
          this.formBuscarLockedPpal = null;
          this.AgregarValidacionesCelular();
          this.EliminarValidacionesDireccion();
          this.EliminarValidacionesEmail();
          this.EliminarValidacionesTelefonos();
          break;
        default:
          break;
      }
    } else {
      this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de contacto válido.');
      this.contactoForm.get('IdTipoContacto')?.reset();
    }
    } else {
      this.validar = false;
      const TipoContacto = this.contactoForm.get('TipoContacto')?.value;
      this.itemsContacto.forEach(elementContacto => {
        if (elementContacto.TipoContacto.Nombre === TipoContacto.Nombre) {
        this.validar = true;
        }
      });
      if (this.validar) {
        if (this.contactoForm.get('TipoContacto')?.value.Id ===6) {
          this.DigitosContacto = 10;
          this.contactoForm.get('NumeroUno')?.reset();
          this.disableEmail = true;
          this.disableDireccion = true;
          this.disablePhone = true;
          this.disableCelular = false;
          this.ocultarDireccion = true;
          this.ocultarDireccionEdit = true;
          this.disableUbicacion = true;
          this.contactoForm.get('Ciudad')?.setValue(null);
          this.formBuscarLockedPpal = null;
          this.AgregarValidacionesCelular();
          this.EliminarValidacionesDireccion();
          this.EliminarValidacionesEmail();
          this.EliminarValidacionesTelefonos();
        } else {
          this.notif.onWarning('Advertencia', 'El tipo de contacto ya existe.');
          this.contactoForm.get('TipoContacto')?.reset();
        }
        
      } else {
        const tipoCont = this.contactoForm.get('TipoContacto')?.value;
        this.cleanAdrees();
        if (tipoCont !== '') {
          switch (this.contactoForm.get('TipoContacto')?.value.Id) {
            case 1: // Direccion
              this.disableEmail = true;
              this.disableDireccion = false;
              this.disableCelular = true;
              this.disablePhone = true;
              this.ocultarDireccion = false;
              this.ocultarDireccionEdit = true;
              this.disableUbicacion = false;
              this.formBuscarLockedPpal = null;
              this.AgregarValidacionesDireccion();
              this.EliminarValidacionesEmail();
              this.EliminarValidacionesTelefonos();
              this.ElimnarValidacionesCelular();
              this.PreCargarPais();
              break;
            case 2: // Direccion laboral
              this.disableEmail = true;
              this.disableDireccion = false;
              this.disableCelular = true;
              this.disablePhone = true;
              this.ocultarDireccion = false;
              this.ocultarDireccionEdit = true;
              this.disableUbicacion = false;
              this.formBuscarLockedPpal = null;
              this.AgregarValidacionesDireccion();
              this.EliminarValidacionesEmail();
              this.EliminarValidacionesTelefonos();
              this.ElimnarValidacionesCelular();
              this.PreCargarPais();
              break;
            case 3: // Email
              this.disableEmail = false;
              this.disableDireccion = true;
              this.disableCelular = true;
              this.disablePhone = true;
              this.ocultarDireccion = true;
              this.ocultarDireccionEdit = true;
              this.disableUbicacion = true;
              this.contactoForm.get('Ciudad')?.setValue(null);
              this.formBuscarLockedPpal = null;
              this.AgregarValidacionesEmail();
              this.EliminarValidacionesDireccion();
              this.EliminarValidacionesTelefonos();
              this.ElimnarValidacionesCelular();
              break;
            case 4: // telefono residencia
              this.DigitosContacto = 7;
              this.contactoForm.get('NumeroUno')?.reset();
              this.disableEmail = true;
              this.disableDireccion = true;
              this.disableCelular = true;
              this.disablePhone = false;
              this.ocultarDireccion = true;
              this.ocultarDireccionEdit = true;
              this.disableUbicacion = true;
              this.contactoForm.get('Ciudad')?.setValue(null);
              this.formBuscarLockedPpal = true;
              this.AgregarValidacionesTelefonos();
              this.EliminarValidacionesDireccion();
              this.EliminarValidacionesEmail();
              this.ElimnarValidacionesCelular();
              break;
            case 5: // telefono laboral
              this.DigitosContacto = 7;
              this.contactoForm.get('NumeroUno')?.reset();
              this.disableEmail = true;
              this.disableDireccion = true;
              this.disableCelular = true;
              this.disablePhone = false;
              this.ocultarDireccion = true;
              this.ocultarDireccionEdit = true;
              this.disableUbicacion = true;
              this.contactoForm.get('Ciudad')?.setValue(null);
              this.formBuscarLockedPpal = true;
              this.AgregarValidacionesTelefonos();
              this.EliminarValidacionesDireccion();
              this.EliminarValidacionesEmail();
              this.ElimnarValidacionesCelular();
              break;
            case 6: // Celular
              this.DigitosContacto = 10;
              this.contactoForm.get('NumeroUno')?.reset();
              this.disableEmail = true;
              this.disableDireccion = true;
              this.disablePhone = true;
              this.disableCelular = false;
              this.ocultarDireccion = true;
              this.ocultarDireccionEdit = true;
              this.disableUbicacion = true;
              this.contactoForm.get('Ciudad')?.setValue(null);
              this.formBuscarLockedPpal = null;
              this.AgregarValidacionesCelular();
              this.EliminarValidacionesDireccion();
              this.EliminarValidacionesEmail();
              this.EliminarValidacionesTelefonos();
              break;
            default:
              break;
          }
        } else {
          this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de contacto válido.');
          this.contactoForm.get('IdTipoContacto')?.reset();
        }
      }
    }
  }
  validarFechaIngreso() {
    const fecha = this.laboralForm.get('fechaIngreso')?.value;
    const fechaNac = this.basicosFrom.get('fechaNacimiento')?.value;
    const fechaEnviada = new Date(fecha);
    const fechaNacimiento = new Date(fechaNac);
    const fechaAcutal = new Date();
    if (fechaEnviada > fechaAcutal) {
      this.laboralForm.get('fechaIngreso')?.reset();
      this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser mayor a la fecha actual.');
    } else if (fechaEnviada < fechaNacimiento) {
      this.laboralForm.get('fechaIngreso')?.reset();
      this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser menor que la fecha de nacimiento.');
    }
  }
  validarFechaIngresoEdit() {
    const fecha = this.laboralFormEdit.get('fechaIngreso')?.value;
    const fechaNac = this.basicosFrom.get('fechaNacimiento')?.value;
    const fechaEnviada = new Date(fecha);
    const fechaNacimiento = new Date(fechaNac);
    const fechaAcutal = new Date();
    if (fechaEnviada > fechaAcutal) {
      this.laboralFormEdit.get('fechaIngreso')?.reset();
      this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser mayor a la fecha actual.');
    } else if (fechaEnviada < fechaNacimiento) {
      this.laboralFormEdit.get('fechaIngreso')?.reset();
      this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser menor que la fecha de nacimiento.');
    }
  }
  validarFechaRpstaAseguradora() {
    const operacion = this.basicosFrom.get('operacion')?.value;
    if (operacion === '5') { // valida la fecha cuando se crea que no sea mayo a la fecha del sistema ni menor a la fecha del sisitema
      const fecha = this.segurosForm.get('fechaAsegurado')?.value;
      const fechaActual = new Date();
      if (fecha > moment(fechaActual).format('YYYY-MM-DD') ) {
        this.laboralForm.get('fechaIngreso')?.reset();
        this.notif.onWarning('Advertencia', 'La fecha respuesta aseguradora no puede ser mayor a la fecha actual.');
        this.segurosForm.get('fechaAsegurado')?.reset();
      } else if (fecha < moment(fechaActual).format('YYYY-MM-DD') ) {
        this.laboralForm.get('fechaIngreso')?.reset();
        this.notif.onWarning('Advertencia', 'La fecha respuesta aseguradora no puede ser menor a la fecha actual.');
        this.segurosForm.get('fechaAsegurado')?.reset();
      }
    } else {
      const fecha = this.segurosForm.get('fechaAsegurado')?.value;
      const fechaCrea = this.fechasForm.get('fechaTabCreacion')?.value;
      const fechaActual = new Date();
      if (fecha > moment(fechaActual).format('YYYY-MM-DD')) {
        this.laboralForm.get('fechaIngreso')?.reset();
        this.notif.onWarning('Advertencia', 'La fecha respuesta aseguradora no puede ser mayor a la fecha actual.');
        this.segurosForm.get('fechaAsegurado')?.reset();
      } else if (moment(fecha).format('YYYY-MM-DD') < moment(fechaCrea).format('YYYY-MM-DD') ) {
        this.laboralForm.get('fechaIngreso')?.reset();
        this.notif.onWarning('Advertencia', 'La fecha respuesta aseguradora no puede ser menor que la fecha de creación.');
        this.segurosForm.get('fechaAsegurado')?.reset();
      }
    }
  }
  limpiarFormularios(sendFrom : any) {
    sendFrom.reset();
    this.BlockReferencia = null;
    this.BlockCategoria = null;
    this.BlockActivo = null;
    this.ocultarDireccionEdit = true;
    this.direccionEdit = '';
    this.direccionEditActivo = '';
    this.via = '';
    this.numero = '';
    this.letra = '';
    this.numeroDos = '';
    this.letraDos = '';
    this.cardi = '';
    this.cardiDos = '';
    this.numeroTres = '';
    this.imuebles = '';
    this.numeroCuatro = '';
    this.Via = '';
    this.Numero = '';
    this.Letra = '';
    this.NumeroDos = '';
    this.LetraDos = '';
    this.Cardinal = '';
    this.CardinalDos = '';
    this.NumeroTres = '';
    this.inmueble = '';
    this.NumeroCuatro = '';
    this.Observacion = '';
    this.DescripcionDireccionIds = '';
    this.ocultarDireccion = true;
    this.ocultarEditar = true;
    this.direccionArray = null;
    this.BlockTipoContacto = null;
    this.formBuscarLockedPpal = null;
    this.indexActivo = null;
    this.indexContacto = null;
    this.indexContactos = null;
    this.indexConyugue = null;
    this.indexLaboral = null;
    this.indexFinanciero = null;
    this.indexReferencia = null;
    this.indexSeguro = null;
    this.formBuscarLockedConyugue = null;
    this.ocultarDireccionEditActivo = true;
    this.ocultardireccionActivo = true;
    this.disableAfavor = true;
    this.formLockedHipoPigno = true;
    this.formLockedPersonNatura = null;
    this.dataCiudad = [];
  }
  validarTipoReferencia() {
    this.loading = true;
    const referen = this.referenciaForm.get('idTipoReferencia')?.value;
    this.referenciaForm.controls['TelefonoEmpresaPersonal'].setValidators(null);
    this.referenciaForm.controls['TelefonoEmpresaPersonal'].setErrors(null);
    this.referenciaForm.controls['TelefonoEmpresaPersonal'].clearValidators();
    this.referenciaForm.controls['extEmpresarial'].setValidators(null);
    this.referenciaForm.controls['extEmpresarial'].setErrors(null);
    this.referenciaForm.controls['extEmpresarial'].clearValidators();
    if (referen !== '0') {
      if (referen.Nombre === 'Familiar' || referen.Nombre === 'Personal') {
        if (referen.Nombre === 'Familiar') {
          this.MostrarParenFami = true;
          this.MostrarParenPers = false;
        } else {
          this.MostrarParenPers = true;
          this.MostrarParenFami = false;
        }
        this.addValidatosFamiliarPersonal();
        this.removerValidatorComercial();
        this.removerValidatorFinanciera();
        this.refFamiliar = true;
        this.refComercial = false;
        this.refFinanciera = false;
        this.referenciaForm.get('IdParentesco')?.reset();
        this.referenciaForm.get('PrimerApellido')?.reset();
        this.referenciaForm.get('PrimerNombre')?.reset();
        this.referenciaForm.get('SegundoApellido')?.reset();
        this.referenciaForm.get('SegundoNombre')?.reset();
        this.referenciaForm.get('TelefonoContactos')?.reset();
        this.referenciaForm.get('TelefonoEmpresaPersonal')?.reset();
        this.referenciaForm.get('extEmpresarial')?.reset();
        this.referenciaForm.get('celular')?.reset();
        this.referenciaForm.get('IdCiudadR')?.reset();
        // this.NombresCapitaliceRefe();
        this.loading = false;
        this.PreCargarPais();
      } else if (referen.Nombre === 'Comercial') {
        this.addVaidatorsComercial();
        this.removerValidatorFamiliarPersonal();
        this.removerValidatorFinanciera();
        this.refComercial = true;
        this.refFamiliar = false;
        this.refFinanciera = false;
        this.referenciaForm.get('DescripcionEmpresa')?.reset();
        this.referenciaForm.get('TelefonoEmpresas')?.reset();
        this.referenciaForm.get('CiudadComercial')?.reset();
        this.referenciaForm.get('ServicioProductoComercial')?.reset();
        this.loading = false;
        this.PreCargarPais();
      } else if (referen.Nombre === 'Financiera') {
        this.addValidatorsFinanciera();
        this.removerValidatorFamiliarPersonal();
        this.removerValidatorComercial();
        this.refFinanciera = true;
        this.refComercial = false;
        this.refFamiliar = false;
        this.referenciaForm.get('DescripcionEmpresa')?.reset();
        this.referenciaForm.get('TelefonoFinanciera')?.reset();
        this.referenciaForm.get('IdOficinaR')?.reset();
        this.referenciaForm.get('ServicioProductoFinanciera')?.reset();
        this.referenciaForm.get('NumeroProductoFinanciera')?.reset();
        this.loading = false;
        this.PreCargarPais();
      } else {
        this.removerValidatorFamiliarPersonal();
        this.referenciaForm.reset();
        this.refFamiliar = true;
        this.refFinanciera = false;
        this.refComercial = false;
        this.loading = false;
      }
    } else {
      this.referenciaForm.get('idTipoReferencia')?.reset();
      this.notif.onWarning('Advertencia', 'Debe seleccionar una referencia válida.');
      this.removerValidatorFamiliarPersonal();
      this.removerValidatorComercial();
      this.removerValidatorFinanciera();
      this.loading = false;
    }
  }
  removerValidatorFamiliarPersonal() {
    this.referenciaForm.controls['IdParentesco'].setErrors(null);
    this.referenciaForm.controls['IdParentesco'].clearValidators();
    this.referenciaForm.controls['IdParentesco'].setValidators(null);
    this.referenciaForm.controls['PrimerApellido'].setErrors(null);
    this.referenciaForm.controls['PrimerApellido'].clearValidators();
    this.referenciaForm.controls['PrimerApellido'].setValidators(null);
    this.referenciaForm.controls['PrimerNombre'].setErrors(null);
    this.referenciaForm.controls['PrimerNombre'].clearValidators();
    this.referenciaForm.controls['PrimerNombre'].setValidators(null);
    this.referenciaForm.controls['SegundoApellido'].setErrors(null);
    this.referenciaForm.controls['SegundoApellido'].clearValidators();
    this.referenciaForm.controls['SegundoApellido'].setValidators(null);
    this.referenciaForm.controls['SegundoNombre'].setErrors(null);
    this.referenciaForm.controls['SegundoNombre'].clearValidators();
    this.referenciaForm.controls['SegundoNombre'].setValidators(null);
    this.referenciaForm.controls['TelefonoContactos'].setErrors(null);
    this.referenciaForm.controls['TelefonoContactos'].clearValidators();
    this.referenciaForm.controls['TelefonoContactos'].setValidators(null);
    this.referenciaForm.controls['TelefonoEmpresaPersonal'].setErrors(null);
    this.referenciaForm.controls['TelefonoEmpresaPersonal'].clearValidators();
    this.referenciaForm.controls['TelefonoEmpresaPersonal'].setValidators(null);
    this.referenciaForm.controls['extEmpresarial'].setErrors(null);
    this.referenciaForm.controls['extEmpresarial'].clearValidators();
    this.referenciaForm.controls['extEmpresarial'].setValidators(null);
    this.referenciaForm.controls['celular'].setErrors(null);
    this.referenciaForm.controls['celular'].clearValidators();
    this.referenciaForm.controls['celular'].setValidators(null);
    this.referenciaForm.controls['IdCiudadR'].setErrors(null);
    this.referenciaForm.controls['IdCiudadR'].clearValidators();
    this.referenciaForm.controls['IdCiudadR'].setValidators(null);
    this.referenciaForm.controls['Ciudad'].setErrors(null);
    this.referenciaForm.controls['Ciudad'].clearValidators();
    this.referenciaForm.controls['Ciudad'].setValidators(null);
    this.referenciaForm.controls['Departamento'].setErrors(null);
    this.referenciaForm.controls['Departamento'].clearValidators();
    this.referenciaForm.controls['Departamento'].setValidators(null);
    this.referenciaForm.controls['Pais'].setErrors(null);
    this.referenciaForm.controls['Pais'].clearValidators();
    this.referenciaForm.controls['Pais'].setValidators(null);

  }

  removerValidatorComercial() {
    this.referenciaForm.controls['DescripcionEmpresa'].setErrors(null);
    this.referenciaForm.controls['DescripcionEmpresa'].clearValidators();
    this.referenciaForm.controls['DescripcionEmpresa'].setValidators(null);
    this.referenciaForm.controls['TelefonoEmpresas'].setErrors(null);
    this.referenciaForm.controls['TelefonoEmpresas'].clearValidators();
    this.referenciaForm.controls['TelefonoEmpresas'].setValidators(null);
    this.referenciaForm.controls['CiudadComercial'].setErrors(null);
    this.referenciaForm.controls['CiudadComercial'].clearValidators();
    this.referenciaForm.controls['CiudadComercial'].setValidators(null);
     this.referenciaForm.controls['Ciudad'].setErrors(null);
    this.referenciaForm.controls['Ciudad'].clearValidators();
    this.referenciaForm.controls['Ciudad'].setValidators(null);
    this.referenciaForm.controls['Departamento'].setErrors(null);
    this.referenciaForm.controls['Departamento'].clearValidators();
    this.referenciaForm.controls['Departamento'].setValidators(null);
    this.referenciaForm.controls['Pais'].setErrors(null);
    this.referenciaForm.controls['Pais'].clearValidators();
    this.referenciaForm.controls['Pais'].setValidators(null);
  }

  removerValidatorFinanciera() {
    this.referenciaForm.controls['DescripcionEmpresaR'].setErrors(null);
    this.referenciaForm.controls['DescripcionEmpresaR'].clearValidators();
    this.referenciaForm.controls['DescripcionEmpresaR'].setValidators(null);
    this.referenciaForm.controls['TelefonoFinanciera'].setErrors(null);
    this.referenciaForm.controls['TelefonoFinanciera'].clearValidators();
    this.referenciaForm.controls['TelefonoFinanciera'].setValidators(null);
    this.referenciaForm.controls['IdOficinaR'].setErrors(null);
    this.referenciaForm.controls['IdOficinaR'].clearValidators();
    this.referenciaForm.controls['IdOficinaR'].setValidators(null);
    this.referenciaForm.controls['Ciudad'].setErrors(null);
    this.referenciaForm.controls['Ciudad'].clearValidators();
    this.referenciaForm.controls['Ciudad'].setValidators(null);
    this.referenciaForm.controls['Departamento'].setErrors(null);
    this.referenciaForm.controls['Departamento'].clearValidators();
    this.referenciaForm.controls['Departamento'].setValidators(null);
    this.referenciaForm.controls['Pais'].setErrors(null);
    this.referenciaForm.controls['Pais'].clearValidators();
    this.referenciaForm.controls['Pais'].setValidators(null);
    this.referenciaForm.controls['NumeroProductoFinanciera'].setErrors(null);
    this.referenciaForm.controls['NumeroProductoFinanciera'].clearValidators();
    this.referenciaForm.controls['NumeroProductoFinanciera'].setValidators(null);
  }
  addValidatosFamiliarPersonal() {
    this.referenciaForm.controls['IdParentesco'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['IdParentesco'].setValidators([Validators.required]);
    // this.referenciaForm.controls['IdCiudadR'].setErrors({ 'incorrect': true });
    // this.referenciaForm.controls['IdCiudadR'].setValidators([Validators.required]);
    this.referenciaForm.controls['Ciudad'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['Ciudad'].setValidators([Validators.required]);
    this.referenciaForm.controls['Departamento'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['Departamento'].setValidators([Validators.required]);
    this.referenciaForm.controls['Pais'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['Pais'].setValidators([Validators.required]);
    this.referenciaForm.controls['PrimerApellido'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['PrimerApellido'].setValidators([Validators.required, Validators.pattern('[a-zA-ZñÑ ]*')]);
    this.referenciaForm.controls['PrimerNombre'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['PrimerNombre'].setValidators([Validators.required, Validators.pattern('[a-zA-ZñÑ ]*')]);
    this.referenciaForm.controls['SegundoApellido'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['SegundoApellido'].setValidators([Validators.pattern('[a-zA-ZñÑ ]*')]);
    this.referenciaForm.controls['SegundoNombre'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['SegundoNombre'].setValidators([Validators.pattern('[a-zA-ZñÑ ]*')]);
    this.referenciaForm.controls['TelefonoContactos'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['TelefonoContactos'].setValidators([Validators.minLength(7), Validators.pattern('^[0-9]*')]);
    this.referenciaForm.controls['TelefonoEmpresaPersonal'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['TelefonoEmpresaPersonal'].setValidators([Validators.pattern('^[0-9]*')]);
    this.referenciaForm.controls['extEmpresarial'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['extEmpresarial'].setValidators([Validators.pattern('^[0-9]*')]);
    this.referenciaForm.controls['celular'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['celular'].setValidators([Validators.minLength(10), Validators.pattern('^[0-9]*')]);
  }

  addVaidatorsComercial() {
    this.referenciaForm.controls['DescripcionEmpresa'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['DescripcionEmpresa'].setValidators([Validators.required]);
    this.referenciaForm.controls['TelefonoEmpresas'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['TelefonoEmpresas'].setValidators([Validators.minLength(7), Validators.pattern('^[0-9]*')]);
    // this.referenciaForm.controls['CiudadComercial'].setErrors({ 'incorrect': true });
    // this.referenciaForm.controls['CiudadComercial'].setValidators([Validators.required]);
      this.referenciaForm.controls['Ciudad'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['Ciudad'].setValidators([Validators.required]);
    this.referenciaForm.controls['Departamento'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['Departamento'].setValidators([Validators.required]);
    this.referenciaForm.controls['Pais'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['Pais'].setValidators([Validators.required]);
  }
  addValidatorsFinanciera() {
    this.referenciaForm.controls['DescripcionEmpresaR'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['DescripcionEmpresaR'].setValidators([Validators.required]);
    this.referenciaForm.controls['TelefonoFinanciera'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['TelefonoFinanciera'].setValidators([Validators.minLength(7), Validators.pattern('^[0-9]*')]);
    // this.referenciaForm.controls['IdOficinaR'].setErrors({ 'incorrect': true });
    // this.referenciaForm.controls['IdOficinaR'].setValidators([Validators.required]);
    this.referenciaForm.controls['Ciudad'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['Ciudad'].setValidators([Validators.required]);
    this.referenciaForm.controls['Departamento'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['Departamento'].setValidators([Validators.required]);
    this.referenciaForm.controls['Pais'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['Pais'].setValidators([Validators.required]);
    this.referenciaForm.controls['NumeroProductoFinanciera'].setErrors({ 'incorrect': true });
    this.referenciaForm.controls['NumeroProductoFinanciera'].setValidators([Validators.pattern('^[0-9]*')]);
  }
  ValidarVetadosDocumento() {
    let mensaje = '';
    this.vetadosFrom.get('documeto')?.setValue(this.basicosFrom.get('numeroDocumento')?.value);
    this.vetadosFrom.get('strNombreCompleto')?.setValue('');
    this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
      result => {
        if (result.length > 0) {
          if (result[0].blnExterno) {
            mensaje = ' comuniquese con el Oficial de cumplimiento';
          } else {
            mensaje = ' comuniquese con Gerencia de desarrollo';
          }
          this.basicosFrom.get('numeroDocumento')?.reset();
          Swal.fire({
            icon: 'error',
            title: '<strong>! Advertencia ¡</strong>',
            html: 'Se encontraron coincidencias en la lista de <b>personas vetadas</b>, por favor ' + mensaje,
            animation: false,
            //customClass: 'animated tada',
            allowOutsideClick: false,
            allowEscapeKey: false,
            confirmButtonText: 'Ok',
            confirmButtonColor: 'rgb(160, 0, 87)'
          }).then((results : any) => {
            
          });
        }
      },
      error => {
        this.notif.onDanger('Error', error);
        console.log('ValidarVetados - ' + error);
      });
  }
  ValidarVetadosDocumentoBusqueda() {
    let mensaje = '';
    this.vetadosFrom.get('documeto')?.setValue(this.basicosFrom.get('DocumentoBusqueda')?.value);
    this.vetadosFrom.get('strNombreCompleto')?.setValue('');
    this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
      result => {
        if (result.length > 0) {
          if (result[0].blnExterno) {
            mensaje = ' comuniquese con el Oficial de cumplimiento';
          } else {
            mensaje = ' comuniquese con Gerencia de desarrollo';
          }
          this.basicosFrom.get('operacion')?.reset();
          Swal.fire({
            icon: 'error',
            title: '<strong>! Advertencia ¡</strong>',
            html: 'Se encontraron coincidencias en la lista de <b>personas vetadas</b>, por favor ' + mensaje,
            animation: false,
            //customClass: 'animated tada',
            allowOutsideClick: false,
            allowEscapeKey: false,
            confirmButtonText: 'Ok',
            confirmButtonColor: 'rgb(160, 0, 87)'
          }).then((results : any) => {

          });;
        }
      },
      error => {
        this.notif.onDanger('Error', error);
        console.log('ValidarVetados - ' + error);
      });
  }
  ValidarVetadosDocumentoBusquedaAlert(): boolean {
    this.vetadosFrom.get('documeto')?.setValue(this.basicosFrom.get('DocumentoBusqueda')?.value);
    this.vetadosFrom.get('strNombreCompleto')?.setValue('');
    let VRetorno = false;
    this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
      result => {
        if (result.length > 0) {
          this.basicosFrom.get('operacion')?.reset();
          VRetorno = true;
        } else {
          VRetorno = false;
        }
      },
      error => {
        this.notif.onDanger('Error', error);
        console.log('ValidarVetados - ' + error);
      });
    return VRetorno;
  }
  ValidarVetadosDocumentoConyugue() {
    const docuCony = this.conyugueForm.get('NumeroDocumento')?.value;
    const docBasic = this.basicosFrom.get('numeroDocumento')?.value;
    if (docuCony !== docBasic) {
      let mensaje = '';
      this.vetadosFrom.get('documeto')?.setValue(this.conyugueForm.get('NumeroDocumento')?.value);
      this.vetadosFrom.get('strNombreCompleto')?.setValue('');
      this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
        result => {
          if (result.length > 0) {
            if (result[0].blnExterno) {
              mensaje = ' comuníquese con el Oficial de cumplimiento.';
            } else {
              mensaje = ' comuníquese con Gerencia de desarrollo.';
            }
            this.conyugueForm.reset();
            Swal.fire<any>({
              icon: 'error',
              title: '<strong>! Advertencia ¡</strong>',
              html: 'Se encontraron coincidencias en la lista de <b>personas vetadas</b>, por favor ' + mensaje,
              animation: false,
              //customClass: 'animated tada',
              allowOutsideClick: false,
              allowEscapeKey: false,
              confirmButtonText: 'Ok',
              confirmButtonColor: 'rgb(160, 0, 87)'
            }).then((x : any ) => {});
            this.formBuscarLockedConyugue = null;
          } else {
            this.ConsultarConyugueCedula(this.conyugueForm.get('NumeroDocumento')?.value);
          }
        },
        error => {
          this.notif.onDanger('Error', error);
          console.log('ValidarVetados - ' + error);
        });
    } else {
      this.notif.onWarning('Advertencia', 'El conyugue debe ser diferente al asociado.',
        );
      this.conyugueForm.get('NumeroDocumento')?.reset();
      this.conyugueForm.get('PrimerApellidoC')?.reset();
      this.conyugueForm.get('SegundoApellidoC')?.reset();
      this.conyugueForm.get('PrimerNombreC')?.reset();
      this.conyugueForm.get('SegundoNombreC')?.reset();
      this.formBuscarLockedConyugue = null;
    }
  }
  limpiarConyugue() {
    this.conyugueForm.get('TipoDocumento')?.reset();
    this.conyugueForm.get('PrimerApellidoC')?.reset();
    this.conyugueForm.get('SegundoApellidoC')?.reset();
    this.conyugueForm.get('PrimerNombreC')?.reset();
    this.conyugueForm.get('SegundoNombreC')?.reset();
    this.formBuscarLockedConyugue = null;
  }
  ValidarVetadosNombre() {
    const lentghCampo = $('#priNom').val();
    if (lentghCampo.length > 0) {
      if ($('#priNom').val().trim() === '') {
        this.notif.onWarning('Advertencia', 'Debe ingresar un valor válido para el primer nombre.');
        this.basicosFrom.get('primerNombre')?.reset();
      } else {
        let mensaje = '';
        const primerNombre = this.basicosFrom.get('primerNombre')?.value;
        if (primerNombre !== undefined && primerNombre !== null && primerNombre !== '') {
          this.vetadosFrom.get('documeto')?.setValue('');
          let NombreCompleto: any;
          if (this.basicosFrom.get('primerNombre')?.value === null) {
            this.basicosFrom.get('primerNombre')?.setValue('');
          }
          if (this.basicosFrom.get('primerApellido')?.value === null) {
            this.basicosFrom.get('primerApellido')?.setValue('');
          }
          if (this.basicosFrom.get('segundoNombre')?.value === null) {
            this.basicosFrom.get('segundoNombre')?.setValue('');
          }
          if (this.basicosFrom.get('segundoApellido')?.value === null) {
            this.basicosFrom.get('segundoApellido')?.setValue('');
          }
          if (this.basicosFrom.get('segundoNombre')?.value === '') {
            NombreCompleto =
              this.basicosFrom.get('primerApellido')?.value +
              this.basicosFrom.get('segundoApellido')?.value +
              this.basicosFrom.get('primerNombre')?.value;
          } else {
            NombreCompleto =
              this.basicosFrom.get('primerApellido')?.value + this.basicosFrom.get('segundoApellido')?.value +
              this.basicosFrom.get('primerNombre')?.value + this.basicosFrom.get('segundoNombre')?.value;
          }
          if (NombreCompleto !== '  ') {
            this.vetadosFrom.get('strNombreCompleto')?.setValue(NombreCompleto);
            this.clientesService.ValidarVetados(this.vetadosFrom.value).subscribe(
              result => {
                if (result.length > 0) {
                  if (result[0].blnExterno) {
                    mensaje = ' comuniquese con el Oficial de cumplimiento';
                  } else {
                    mensaje = ' comuniquese con Gerencia de desarrollo';
                  }
                  this.basicosFrom.get('primerApellido')?.reset(); this.basicosFrom.get('segundoApellido')?.reset();
                  this.basicosFrom.get('primerNombre')?.reset(); this.basicosFrom.get('segundoNombre')?.reset();
                  Swal.fire({
                    icon: 'error',
                    title: '<strong>! Advertencia ¡</strong>',
                    html: 'Se encontraron coincidencias en la lista de <b>personas vetadas</b>, por favor ' + mensaje,
                    animation: false,
                    text: '',
                    //customClass: 'animated tada',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    confirmButtonText: 'Ok',
                    confirmButtonColor: 'rgb(160, 0, 87)'
                  }).then((results : any) => {});
                }
              },
              error => {
                this.notif.onDanger('Error', error);
                console.log('ValidarVetados - ' + error);
              });
          }
        }
      }
    }
  }
  validarValorCampo(campoJquery : string, campoAngular : string) {
    const lentghCampo = $('#' + campoJquery + '').val();
    if (lentghCampo.length > 0) {
      if ($('#' + campoJquery + '').val().trim() === '') {
        this.notif.onWarning('Advertencia', 'El campo no puede contener espacios.');
        this.basicosFrom.get('' + campoAngular + '')?.reset();
      }
    }
  }
  validarValorCampoForm(campoJquery : string, campoAngular : string) {
    const lentghCampo = $('#' + campoJquery + '').val();
    if (lentghCampo.length > 0) {
      if ($('#' + campoJquery + '').val().trim() === '') {
        this.notif.onWarning('Advertencia', 'El campo no puede contener espacios.');
        this.referenciaForm.get('' + campoAngular + '')?.reset();
      }
    }
  }
  validarSelectConvenio() {
    const conve = this.laboralForm.get('convenio')?.value;
    if (conve === '') {
      this.mostrarAlertaConvenioMalo = true;
    } else {
      this.mostrarAlertaConvenioMalo = false;
    }
  }
  validarSelectConvenioEdit() {
    const conve = this.laboralFormEdit.get('convenio')?.value;
    if (conve === '') {
      this.mostrarAlertaConvenioMalo = true;
    } else {
      this.mostrarAlertaConvenioMalo = false;
    }
  }
  validarSelectEstado() {
    const tipoOcupacion = this.basicosFrom.get('estado')?.value;
    this.blockBtnBasico = null;
    if (tipoOcupacion === '0') {
      this.notif.onWarning('Advertencia', 'Debe seleccionar un estado válido.');
      this.basicosFrom.get('estado')?.reset();
    }
  }
  validarSelectActivo() {
    const activo = this.activoForm.get('activo')?.value;
    if (activo === '0') {
      this.notif.onWarning('Advertencia', 'Debe seleccionar un activo válido.');
      this.activoForm.get('activo')?.reset();
    }
  }
  validarSelectParentesco() {
    const parentesco = this.referenciaForm.get('IdParentesco')?.value;
    const estadoLocal = Number(localStorage.getItem('estadoSeleccionado'));
    const referencia = this.referenciaForm.get('idTipoReferencia')?.value;
    if (parentesco.Clase === 10 && estadoLocal === 25) {
      this.referenciaForm.get('IdParentesco')?.reset();
      this.notif.onWarning('Advertencia','El parentesco no concuerda con el estado civil seleccionado.');
    }
    if (parentesco.Clase === 105 && referencia.Id === 2) {
      this.referenciaForm.get('IdParentesco')?.reset();
      this.notif.onWarning('Advertencia','El parentesco no concuerda con el tipo de referencia seleccionada.');
    }
    if (parentesco === '') {
      this.notif.onWarning('Advertencia', 'Debe seleccionar un parentesco válido.');
      this.referenciaForm.get('IdParentesco')?.reset();
    }
  }
  validarSelectConyugue() {
    const conyugueTipo = this.conyugueForm.get('TipoDocumento')?.value;
    if (conyugueTipo === '') {
      this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de documento válido.');
      this.conyugueForm.get('TipoDocumento')?.reset();
    }
  }
  limpiarNombre(campo : string) {
    this.basicosFrom.get(campo)?.reset();
  }
  addClass(id: any) {
    if (id) {
      id = id;
    } else {
      id = id;
    }
  }
  cerrarModalCambioEstado() {
    this.FormCambioEstado.reset();
  }
  enabledForms() {
    this.btnGuardarOculto = false;
    this.btnOcultoBuscar = false;
    this.btnTratamiento = false;
    // this.NombreAsesor = '';
    // this.CedulaAsesor = '';
    this.NombreAsesorExt = '';
    this.CedulaAsesorExt = '';
    this.MostrarAsesorExterno = false;
    this.disableFormCedula = true;
    this.disableMetodo = true;
    this.disbaleBusqueda = null;
    this.disableFromPEPS = true;
    this.disableFormNumHijos = true;
    this.itemsLogSeguro = [];
    this.dataActivos = [];
    this.itemsEgresos = [];
    this.itemsIngresos = [];
    this.itemsContacto = [];
    this.dataConyuge = [];
    this.itemsLogSeguro = [];
    this.formBuscarLocked = true;
    this.formBuscarLockedPpal = true;
    this.BlockCategoria = true;
    this.formEditarLocked = true;
    this.DescripcionBtn = 'Siguiente';
    this.ResetAllForm();
    this.ResetItemForm();
    this.basicosFrom.get('operacion')?.setValue(this.operacionesModel.idOperacion);
    this.disableFormEstado = true;
    this.disbaleFromDocumento = null;
    this.disableForm = true;
    this.disableFormPA = true;
    this.disableFormSA = true;
    this.disableFormPN = true;
    this.disableFormSN = true;
    this.disableFormEps = true;
    this.disableFormBtnEmpresa = true;
    this.disbaleFromTutor = true;
    this.disableFormPersonas = true;
    this.disableFromTipoDocumento = true;
    this.disableFromTipoCliente = true;
    this.disableFormNumeroDocumento = true;
    this.disbaleOficina = true;
    this.disableFormProfesion = true;
    this.disableClean = true;
    this.formTutorOculto = false;
    this.BlockTipoContacto = true;
    this.BlockActivo = true;
    this.BlockReferencia = true;
    this.blockTratamiento = true;
    this.blockDebitoAtomatico = true;
    this.mostrarOficina = false;
    this.MostrarFechaTratamiento = false;
    this.objMotivoEnvio = new EnvioMotivoModel();
    this.FormCambioEstado.reset();
    this.disablePeriodo = true;
    this.Blockseguro = true;
    this.BlockMonto = true;
    this.BlockEstado = true;
    this.AsessorNecesario = true;
    this.disablePEPS = true;
    localStorage.removeItem('TerceroNatura');
    this.basicosFrom.get('estado')?.setValue(0);
    $('#basicoTab').removeClass('disableTab');
    $('#financieroTab').removeClass('disableTab');
    $('#contactoTab').removeClass('disableTab');
    $('#activoTab').removeClass('disableTab');
    $('#conyugueTab').removeClass('disableTab');
    $('#laboralTab').removeClass('disableTab');
    $('#referenciaTab').removeClass('disableTab');
    $('#entrevistaTab').removeClass('disableTab');
    $('#seguroTab').removeClass('disableTab');
    this.oculatObligatorioTercero = true;
    this.oculatObligatorioTerceroProveedor = true;
    this.basicosFrom.controls['metodo'].setValidators(Validators.required);
    this.basicosFrom.controls['metodo'].setErrors(Validators.required);
    this.basicosFrom.controls['NombreDrop'].setValidators(Validators.required);
    this.basicosFrom.controls['NombreDrop'].setErrors(Validators.required);
    this.basicosFrom.controls['numHijos'].setValidators(Validators.required);
    this.basicosFrom.controls['numHijos'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['numHijosEstudian'].setValidators(Validators.required);
    this.basicosFrom.controls['numHijosEstudian'].setErrors({ 'incorrect': true });
    localStorage.removeItem('DataService');
  }
  MarcarNoPreguntas() {
    this.entrevistaForm.get('RPregunta20Si')?.setValue(false);
    this.entrevistaForm.get('RPregunta20No')?.setValue(true);
    this.entrevistaForm.get('RPregunta21Si')?.setValue(false);
    this.entrevistaForm.get('RPregunta21No')?.setValue(true);
    this.entrevistaForm.get('RPregunta22Si')?.setValue(false);
    this.entrevistaForm.get('RPregunta22No')?.setValue(true);
    this.entrevistaForm.get('RPregunta23Si')?.setValue(false);
    this.entrevistaForm.get('RPregunta23No')?.setValue(true);
    this.entrevistaForm.get('RPregunta26Si')?.setValue(false);
    this.entrevistaForm.get('RPregunta26No')?.setValue(true);
  }
  DesmarcarNoPreguntas() {
    this.entrevistaForm.reset();
  }
  bloquearFormularios() {
    const tipoCliente = +this.basicosFrom.get('tipoCliente')?.value;
    this.removeActiveTab();
    this.devolverTab(1);
    this.botonSiguiente.nativeElement.click();
    this.operacionEscogida = '/';
    this.btnMarcarEntrevista = false;
    this.btnGuardarOculto = false;
    this.btnOcultoBuscar = false;
    this.btnTratamiento = false;
    // this.NombreAsesor = '';
    // this.CedulaAsesor = '';
    this.NombreAsesorExt = '';
    this.CedulaAsesorExt = '';
    this.MostrarAsesorExterno = false;
    this.disableFormCedula = true;
    this.disableMetodo = true;
    this.disableFromPEPS = true;
    this.disableFormNumHijos = true;
    this.formBuscarLocked = true;
    this.formBuscarLockedConyugue = true;
    this.formBuscarLockedPpal = true;
    this.BlockCategoria = true;
    this.formEditarLocked = true;
    this.disableFormEstado = true;
    this.disbaleFromDocumento = null;
    this.disableForm = true;
    this.disableFormPA = true;
    this.disableFormSA = true;
    this.disableFormPN = true;
    this.disableFormSN = true;
    this.disableFormEps = true;
    this.disableFormBtnEmpresa = true;
    this.disbaleFromTutor = true;
    this.disableFormPersonas = true;
    this.disableFromTipoDocumento = true;
    this.disableFromTipoCliente = true;
    this.disableFormNumeroDocumento = true;
    this.disbaleOficina = true;
    this.disableFormProfesion = true;
    this.disableClean = true;
    if (tipoCliente === 10) {
      this.formTutorOculto = true;
    } else {
      this.formTutorOculto = false;
    }
    this.BlockTipoContacto = true;
    this.BlockActivo = true;
    this.BlockReferencia = true;
    this.blockTratamiento = true;
    this.blockTratamientoFecha = true;
    this.blockDebitoAtomatico = true;
    this.mostrarOficina = false;
    this.MostrarFechaTratamiento = false;
    this.objMotivoEnvio = new EnvioMotivoModel();
    this.FormCambioEstado.reset();
    this.disablePeriodo = true;
    this.Blockseguro = true;
    this.BlockMonto = true;
    this.BlockEstado = true;
    this.AsessorNecesario = true;
    this.disablePEPS = true;
    this.formLockedReconocimiento = true;
    this.formLockedRecursos = true;
    $('#basicoTab').addClass('disableTab');
    $('#financieroTab').addClass('disableTab');
    $('#contactoTab').addClass('disableTab');
    $('#activoTab').addClass('disableTab');
    $('#conyugueTab').addClass('disableTab');
    $('#laboralTab').addClass('disableTab');
    $('#referenciaTab').addClass('disableTab');
    $('#entrevistaTab').addClass('disableTab');
    $('#seguroTab').addClass('disableTab');
    localStorage.removeItem('DataService');
    this.VolverArriba();
  }
  bloquearTodo() {
    const tipoCliente = +this.basicosFrom.get('tipoCliente')?.value;
    this.removeActiveTab();
    this.devolverTab(1);
    this.botonSiguiente.nativeElement.click();
    this.operacionEscogida = '/';
    this.btnMarcarEntrevista = false;
    this.btnGuardarOculto = false;
    this.btnOcultoBuscar = false;
    this.btnTratamiento = false;
    // this.NombreAsesor = '';
    // this.CedulaAsesor = '';
    this.NombreAsesorExt = '';
    this.CedulaAsesorExt = '';
    this.MostrarAsesorExterno = false;
    this.disableFormCedula = true;
    this.disableMetodo = true;
    this.disbaleBusqueda = true;
    this.disableFromPEPS = true;
    this.disableFormNumHijos = true;
    this.formBuscarLocked = true;
    this.formBuscarLockedConyugue = true;
    this.formBuscarLockedPpal = true;
    this.BlockCategoria = true;
    this.formEditarLocked = true;
    this.disableFormEstado = true;
    this.disbaleFromDocumento = null;
    this.disableForm = true;
    this.disableFormPA = true;
    this.disableFormSA = true;
    this.disableFormPN = true;
    this.disableFormSN = true;
    this.disableFormEps = true;
    this.disableFormBtnEmpresa = true;
    this.disbaleFromTutor = true;
    this.disableFormPersonas = true;
    this.disableFromTipoDocumento = true;
    this.disableFromTipoCliente = true;
    this.disableFormNumeroDocumento = true;
    this.disbaleOficina = true;
    this.disableFormProfesion = true;
    this.disableClean = true;
    if (tipoCliente === 10) {
      this.formTutorOculto = true;
    } else {
      this.formTutorOculto = false;
    }
    this.BlockTipoContacto = true;
    this.BlockActivo = true;
    this.BlockReferencia = true;
    this.blockTratamiento = true;
    this.blockTratamientoFecha = true;
    this.blockDebitoAtomatico = true;
    this.mostrarOficina = false;
    this.MostrarFechaTratamiento = false;
    this.objMotivoEnvio = new EnvioMotivoModel();
    this.FormCambioEstado.reset();
    this.disablePeriodo = true;
    this.Blockseguro = true;
    this.BlockMonto = true;
    this.BlockEstado = true;
    this.AsessorNecesario = true;
    this.disablePEPS = true;
    this.formLockedReconocimiento = true;
    this.formLockedRecursos = true;
    $('#basicoTab').addClass('disableTab');
    $('#financieroTab').addClass('disableTab');
    $('#contactoTab').addClass('disableTab');
    $('#activoTab').addClass('disableTab');
    $('#conyugueTab').addClass('disableTab');
    $('#laboralTab').addClass('disableTab');
    $('#referenciaTab').addClass('disableTab');
    $('#entrevistaTab').addClass('disableTab');
    $('#seguroTab').addClass('disableTab');
    localStorage.removeItem('DataService');
    this.VolverArriba();
  }
  BloquearFormBuscar() {
    this.basicosFrom.get('operacion')?.reset();
    this.DesmarcarNoPreguntas();
    this.totalActivos = 0;
    this.removeActiveTab();
    this.btnMarcarEntrevista = false;
    this.btnGuardarOculto = false;
    this.siguienteOculto = true;
    this.btnOcultoBuscar = false;
    this.btnTratamiento = false;
    // this.NombreAsesor = '';
    // this.CedulaAsesor = '';
    this.NombreAsesorExt = '';
    this.CedulaAsesorExt = '';
    this.MostrarAsesorExterno = false;
    this.disableFormCedula = true;
    this.disableMetodo = true;
    this.disbaleBusqueda = true;
    this.disableFromPEPS = true;
    this.disableFormNumHijos = true;
    this.itemsLogSeguro = [];
    this.dataActivos = [];
    this.itemsEgresos = [];
    this.itemsIngresos = [];
    this.itemsContacto = [];
    this.dataConyuge = [];
    this.itemsLogSeguro = [];
    this.formBuscarLocked = true;
    this.formBuscarLockedConyugue = true;
    this.formBuscarLockedPpal = true;
    this.BlockCategoria = true;
    this.blockRefeBtn = false;
    this.formEditarLocked = true;
    this.ResetAllForm();
    this.ResetItemForm();
    this.disableFormEstado = true;
    this.disbaleFromDocumento = null;
    this.disableForm = true;
    this.disableFormPA = true;
    this.disableFormSA = true;
    this.disableFormPN = true;
    this.disableFormSN = true;
    this.disableFormEps = true;
    this.disableFormBtnEmpresa = true;
    this.disbaleFromTutor = true;
    this.disableFormPersonas = true;
    this.disableFromTipoDocumento = true;
    this.disableFromTipoCliente = true;
    this.disableFormNumeroDocumento = true;
    this.disbaleOficina = true;
    this.disableFormProfesion = true;
    this.disableClean = true;
    this.formTutorOculto = false;
    this.BlockTipoContacto = true;
    this.BlockActivo = true;
    this.BlockReferencia = true;
    this.blockTratamiento = true;
    this.blockTratamientoFecha = true;
    this.blockDebitoAtomatico = true;
    this.mostrarOficina = false;
    this.MostrarFechaTratamiento = false;
    this.objMotivoEnvio = new EnvioMotivoModel();
    this.FormCambioEstado.reset();
    this.disablePeriodo = true;
    this.Blockseguro = true;
    this.BlockMonto = true;
    this.BlockEstado = true;
    this.AsessorNecesario = true;
    this.disablePEPS = true;
    this.formLockedReconocimiento = true;
    this.formLockedRecursos = true;
    this.DesbloquearRespuesta2 = true;
    this.DesbloquearRespuesta6 = true;
    this.DesbloquearRespuesta14 = true;
    this.DesbloquearRespuesta17 = true;
    localStorage.removeItem('TerceroNatura');
    this.basicosFrom.get('estado')?.setValue(0);
    $('#basicoTab').removeClass('disableTab');
    $('#financieroTab').removeClass('disableTab');
    $('#contactoTab').removeClass('disableTab');
    $('#activoTab').removeClass('disableTab');
    $('#conyugueTab').removeClass('disableTab');
    $('#laboralTab').removeClass('disableTab');
    $('#referenciaTab').removeClass('disableTab');
    $('#entrevistaTab').removeClass('disableTab');
    $('#seguroTab').removeClass('disableTab');
    this.oculatObligatorioTercero = true;
    this.oculatObligatorioTerceroProveedor = true;
    this.basicosFrom.controls['metodo'].setValidators(Validators.required);
    this.basicosFrom.controls['metodo'].setErrors(Validators.required);
    this.basicosFrom.controls['NombreDrop'].setValidators(Validators.required);
    this.basicosFrom.controls['NombreDrop'].setErrors(Validators.required);
    this.basicosFrom.controls['numHijos'].setValidators(Validators.required);
    this.basicosFrom.controls['numHijos'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['numHijosEstudian'].setValidators(Validators.required);
    this.basicosFrom.controls['numHijosEstudian'].setErrors({ 'incorrect': true });
    this.VolverArriba();
  }
  SoloBloquearForm() {
    const tipoCliente = +this.basicosFrom.get('tipoCliente')?.value;
    this.basicosFrom.get('operacion')?.reset();
    this.DesmarcarNoPreguntas();
    this.totalActivos = 0;
    this.removeActiveTab();
    this.btnMarcarEntrevista = false;
    this.btnGuardarOculto = false;
    this.siguienteOculto = true;
    this.btnOcultoBuscar = false;
    this.btnTratamiento = false;
    // this.NombreAsesor = '';
    // this.CedulaAsesor = '';
    this.NombreAsesorExt = '';
    this.CedulaAsesorExt = '';
    this.MostrarAsesorExterno = false;
    this.disableFormCedula = true;
    this.disableMetodo = true;
    this.disbaleBusqueda = true;
    this.disableFromPEPS = true;
    this.disableFormNumHijos = true;
    this.itemsLogSeguro = [];
    this.dataActivos = [];
    this.itemsEgresos = [];
    this.itemsIngresos = [];
    this.itemsContacto = [];
    this.dataConyuge = [];
    this.itemsLogSeguro = [];
    this.formBuscarLocked = true;
    this.formBuscarLockedConyugue = true;
    this.formBuscarLockedPpal = true;
    this.BlockCategoria = true;
    this.blockRefeBtn = false;
    this.formEditarLocked = true;
    this.disableFormEstado = true;
    this.disbaleFromDocumento = null;
    this.disableForm = true;
    this.disableFormPA = true;
    this.disableFormSA = true;
    this.disableFormPN = true;
    this.disableFormSN = true;
    this.disableFormEps = true;
    this.disableFormBtnEmpresa = true;
    // valid si es menor para mostrar los campos del tutor
    if (tipoCliente === 10) {
      this.formTutorOculto = true;
    } else {
      this.formTutorOculto = false;
    }
    this.disbaleFromTutor = true;
    this.disableFormPersonas = true;
    this.disableFromTipoDocumento = true;
    this.disableFromTipoCliente = true;
    this.disableFormNumeroDocumento = true;
    this.disbaleOficina = true;
    this.disableFormProfesion = true;
    this.disableClean = true;
    this.BlockTipoContacto = true;
    this.BlockActivo = true;
    this.BlockReferencia = true;
    this.blockTratamiento = true;
    this.blockTratamientoFecha = true;
    this.blockDebitoAtomatico = true;
    this.mostrarOficina = false;
    this.MostrarFechaTratamiento = false;
    this.objMotivoEnvio = new EnvioMotivoModel();
    this.FormCambioEstado.reset();
    this.disablePeriodo = true;
    this.Blockseguro = true;
    this.BlockMonto = true;
    this.BlockEstado = true;
    this.AsessorNecesario = true;
    this.disablePEPS = true;
    this.formLockedReconocimiento = true;
    this.formLockedRecursos = true;
    localStorage.removeItem('TerceroNatura');
    $('#basicoTab').removeClass('disableTab');
    $('#financieroTab').removeClass('disableTab');
    $('#contactoTab').removeClass('disableTab');
    $('#activoTab').removeClass('disableTab');
    $('#conyugueTab').removeClass('disableTab');
    $('#laboralTab').removeClass('disableTab');
    $('#referenciaTab').removeClass('disableTab');
    $('#entrevistaTab').removeClass('disableTab');
    $('#seguroTab').removeClass('disableTab');
    this.oculatObligatorioTercero = true;
    this.oculatObligatorioTerceroProveedor = true;
    this.basicosFrom.controls['metodo'].setValidators(Validators.required);
    this.basicosFrom.controls['metodo'].setErrors(Validators.required);
    this.basicosFrom.controls['NombreDrop'].setValidators(Validators.required);
    this.basicosFrom.controls['NombreDrop'].setErrors(Validators.required);
    this.basicosFrom.controls['numHijos'].setValidators(Validators.required);
    this.basicosFrom.controls['numHijos'].setErrors({ 'incorrect': true });
    this.basicosFrom.controls['numHijosEstudian'].setValidators(Validators.required);
    this.basicosFrom.controls['numHijosEstudian'].setErrors({ 'incorrect': true });
    localStorage.removeItem('DataService');
    this.VolverArriba();
  }
  valirdarPlazo() {
    const plazo = this.serviciosFrom.get('plazoDeseado')?.value;
    if (+plazo > 180) {
      this.serviciosFrom.get('plazoDeseado')?.reset();
    }
  }
   GetPaisesList() {
    this.condicion = true;
    this.recursosGeneralesService.GetPaisesList().subscribe(
      result => {
        this.dataPaises = result;
        this.dataPaisesAll = result;
        this.dataPaisesNaci = result;
        this.dataPaisesExp = result;
        this.recursosGeneralesService.GetCiudadList(0).subscribe(
          resultCiu => {
            this.dataCiudadesAll = resultCiu;
            this.recursosGeneralesService.GetDepartamentosList(0).subscribe(
              resultDepart => {
                this.dataDepartamentosAll = resultDepart;
                this.recursosGeneralesService.GetBarrioList(0).subscribe(
                  resultBarrios => {
                    this.dataBarriosAll = resultBarrios;
                  });
              });
          });
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      }
    );
  }
   desbloquearDepart(nameInput : any) {
    this.bloqDeparta = null;
  }
  desbloquearDepartExp(nameInput : any) {
    this.bloqDepartaExp = null;
  }

   desbloquearDepartContacto(nameInput : any) {
    this.bloqDepartaCont = null;
  }
  desbloquearDepartActivo(nameInput : any) {
    this.bloqDepartaAct = null;
  }
  desbloquearDepartReferen(nameInput : any) {
    this.bloqDepartaRef = null;
  }
  HabilitarCiudadesNaci() {
    this.bloqCiudad = null;
  }
  HabilitarCiudadesExp() {
    this.bloqCiudadExp = null;
  }
  HabilitarCiudadesCont() {
    this.bloqCiudad = null;
  }
  HabilitarCiudadesRef() {
    this.bloqCiudadRef = null;
  }
  HabilitarCiudadesAct() {
    this.bloqCiudadAct = null;
  }

  GetCiudadList(form : any) {
    this.bloqCiudad = null;
    if (form.departNacimiento !== null && form.departNacimiento !== undefined && form.departNacimiento !== '') {
          this.recursosGeneralesService.GetCiudadList(+form.departNacimiento).subscribe(
            result => {
              this.bloqCiudad = null;
              this.dataCiudadesNaci = result;  
              this.basicosFrom.get('ciudadNacimiento')?.reset();
            },
            error => {
              const errorMessage = <any>error;
              this.notif.onDanger('Error', errorMessage);
              console.error(errorMessage);
            }
          );     
    } else {
      this.basicosFrom.get('departNacimiento')?.reset();
      this.basicosFrom.get('ciudadNacimiento')?.reset();
      this.bloqCiudad = true;
    }
  }
   GetCiudadListExpe(form : any) {
     this.bloqCiudadExp = null;
    if (form.departExpedicion !== null && form.departExpedicion !== undefined && form.departExpedicion !== '') {
          this.recursosGeneralesService.GetCiudadList(+form.departExpedicion).subscribe(
            result => {
              this.bloqCiudadExp = null;
              this.dataCiudadExp = result;
                this.basicosFrom.get('ciudadExpedicion')?.reset();
            },
            error => {
              const errorMessage = <any>error;
              this.notif.onDanger('Error', errorMessage);
              console.error(errorMessage);
            }
          );
      
    } else {
      this.basicosFrom.get('departExpedicion')?.reset();
      this.basicosFrom.get('ciudadExpedicion')?.reset();
      this.bloqCiudadExp = true;
    }
  }
   GetCiudadContactoList(form : any) {
    // this.contactoForm.get('Ciudad')?.reset();
    if (form.Departamento !== null && form.Departamento !== undefined && form.Departamento !== '') {
        this.recursosGeneralesService.GetCiudadList(form.Departamento).subscribe(
          result => {
            this.bloqCiudad = null;
            this.dataCiudad = result;
          },
          error => {
            const errorMessage = <any>error;
            this.notif.onDanger('Error', errorMessage);
            console.error(errorMessage);
          }
        );
    } else {
      this.contactoForm.get('Departamento')?.reset();
      this.contactoForm.get('Ciudad')?.reset();
      this.bloqCiudad = true;
    }
  }
  GetCiudadActivosList(form : any) {
     this.bloqCiudadAct = null;
    if (form.Departamento !== null && form.Departamento !== undefined && form.Departamento !== '') {
        this.recursosGeneralesService.GetCiudadList(+form.Departamento).subscribe(
          result => {
            this.bloqCiudadAct = null;
            this.dataCiudad = result;
          },
          error => {
            const errorMessage = <any>error;
            this.notif.onDanger('Error', errorMessage);
            console.error(errorMessage);
          }
        );
    } else {
      this.activoForm.get('Departamento')?.reset();
      this.activoForm.get('Ciudad')?.reset();
       this.bloqCiudadAct = true;
    }
  }
  GetCiudadReferenList(form : any) {
    this.bloqCiudadRef = null;
    if (form.Departamento !== null && form.Departamento !== undefined && form.Departamento !== '') {
        this.recursosGeneralesService.GetCiudadList(+form.Departamento).subscribe(
          result => {
            this.bloqCiudadRef = null;
            this.dataCiudad = result;
          },
          error => {
            const errorMessage = <any>error;
            this.notif.onDanger('Error', errorMessage);
            console.error(errorMessage);
          }
        );
    } else {
      this.referenciaForm.get('Departamento')?.reset();
      this.referenciaForm.get('Ciudad')?.reset();
      this.bloqCiudadRef = true;
    }
  }
  GetDepartamentosList(form : any) {
    this.bloqDeparta = null;
    const model = form.dataPaisSeleccion;
    if (form.paisNacimiento !== null && form.paisNacimiento !== undefined && form.paisNacimiento !== '') {
      if(form.paisNacimiento == 42) {
          this.basicosFrom.controls['departNacimiento'].setValidators([Validators.required]);
          this.basicosFrom.controls['departNacimiento'].setErrors({ 'incorrect': true });
           this.basicosFrom.get('departNacimiento')?.updateValueAndValidity();
          this.basicosFrom.controls['ciudadNacimiento'].setValidators([Validators.required]);
          this.basicosFrom.controls['ciudadNacimiento'].setErrors({ 'incorrect': true });
           this.basicosFrom.get('ciudadNacimiento')?.updateValueAndValidity();
          
          this.recursosGeneralesService.GetDepartamentosList(+form.paisNacimiento).subscribe(
            result => {
              if (result.length > 0) {
                //aqui se agregan los validadores de depa y ciu
                this.bloqDeparta = null;
                this.dataDepartamentoNaci = result;
              } else {
                this.basicosFrom.get('departNacimiento')?.reset();
                this.basicosFrom.get('ciudadNacimiento')?.reset();
                this.bloqDeparta = true;
              }
            },
            error => {
              const errorMessage = <any>error;
              this.notif.onDanger('Error', errorMessage);
              console.error(errorMessage);
            }
          );
      } else {
        this.basicosFrom.controls['departNacimiento'].setErrors(null);
        this.basicosFrom.controls['departNacimiento'].clearValidators();
        this.basicosFrom.controls['departNacimiento'].setValidators(null);

        this.basicosFrom.controls['ciudadNacimiento'].setErrors(null);
        this.basicosFrom.controls['ciudadNacimiento'].clearValidators();
        this.basicosFrom.controls['ciudadNacimiento'].setValidators(null);

        this.basicosFrom.get('departNacimiento')?.reset();
        this.basicosFrom.get('ciudadNacimiento')?.reset();
        this.bloqDeparta = true;
        this.bloqCiudad = true;
      }
    } else {
      this.dataDepartamentoNaci = [];
      this.basicosFrom.get('departNacimiento')?.reset();
      this.basicosFrom.get('ciudadNacimiento')?.reset();
      this.bloqDeparta = true;
      this.bloqCiudad = true;
    }
  }
   GetDepartamentosListExp(form : any) {
    this.bloqDepartaExp = null;
    if (form.paisExpedicion !== null && form.paisExpedicion !== undefined && form.paisExpedicion !== '') {
      if (form.paisExpedicion == 42) {
            this.basicosFrom.controls['departExpedicion'].setValidators([Validators.required]);
            this.basicosFrom.controls['departExpedicion'].setErrors({ 'incorrect': true });
            this.basicosFrom.get('departExpedicion')?.updateValueAndValidity();
            this.basicosFrom.controls['ciudadExpedicion'].setValidators([Validators.required]);
            this.basicosFrom.controls['ciudadExpedicion'].setErrors({ 'incorrect': true });
            this.basicosFrom.get('ciudadExpedicion')?.updateValueAndValidity();
            
            this.recursosGeneralesService.GetDepartamentosList(+form.paisExpedicion).subscribe(
              result => {
                if (result.length > 0) {
                  //aqui se agregan los validadores de depa y ciu
                  this.bloqDepartaExp = null;
                  this.dataDepartamentoExp = result;
                } else {
                    this.basicosFrom.get('departExpedicion')?.reset();
                    this.basicosFrom.get('ciudadExpedicion')?.reset();
                  this.bloqDepartaExp = true;
                }
              },
              error => {
                const errorMessage = <any>error;
                this.notif.onDanger('Error', errorMessage);
                console.error(errorMessage);
              }
            );
      } else {
        this.basicosFrom.controls['departExpedicion'].setErrors(null);
        this.basicosFrom.controls['departExpedicion'].clearValidators();
        this.basicosFrom.controls['departExpedicion'].setValidators(null);

        this.basicosFrom.controls['ciudadExpedicion'].setErrors(null);
        this.basicosFrom.controls['ciudadExpedicion'].clearValidators();
        this.basicosFrom.controls['ciudadExpedicion'].setValidators(null);

        this.basicosFrom.get('departExpedicion')?.reset();
        this.basicosFrom.get('ciudadExpedicion')?.reset();
        this.bloqDepartaExp = true;
        this.bloqCiudadExp = true;
      }
    } else {
      this.dataDepartamentoExp = [];
      this.basicosFrom.get('departExpedicion')?.reset();
      this.basicosFrom.get('ciudadExpedicion')?.reset();
      this.bloqDepartaExp = true;
      this.bloqCiudadExp = true;
    }
  }
  GetDepartamentosContactoList(form : any) {
    this.bloqDepartaCont = null;
    this.bloqCiudad = null;
    if (form.Pais !== null && form.Pais !== undefined && form.Pais !== '') {
      if (form.Pais == 42) {
          this.contactoForm.controls['Departamento'].setValidators([Validators.required]);
          this.contactoForm.controls['Departamento'].setErrors({ 'incorrect': true });
          this.contactoForm.get('Departamento')?.updateValueAndValidity();
          this.contactoForm.controls['Ciudad'].setValidators([Validators.required]);
          this.contactoForm.controls['Ciudad'].setErrors({ 'incorrect': true });
          this.contactoForm.get('Ciudad')?.updateValueAndValidity();
          this.recursosGeneralesService.GetDepartamentosList(form.Pais).subscribe(
            result => {
              if (result.length > 0) {
                this.bloqDepartaCont = null;
                this.bloqCiudad = null;
                this.dataDepartamentos = result;
              } else {
                  this.contactoForm.get('Departamento')?.reset();
                  this.contactoForm.get('Ciudad')?.reset();
                  this.contactoForm.get('Barrio')?.reset();
                  this.bloqDepartaCont = true;
                  this.bloqCiudad = true;
              }
            },
            error => {
              const errorMessage = <any>error;
              this.notif.onDanger('Error', errorMessage);
              console.error(errorMessage);
            });
      } else {
        this.contactoForm.controls['Departamento'].setErrors(null);
        this.contactoForm.controls['Departamento'].clearValidators();
        this.contactoForm.controls['Departamento'].setValidators(null);

        this.contactoForm.controls['Ciudad'].setErrors(null);
        this.contactoForm.controls['Ciudad'].clearValidators();
        this.contactoForm.controls['Ciudad'].setValidators(null);

        this.contactoForm.get('Departamento')?.reset();
        this.contactoForm.get('Ciudad')?.reset();
        this.contactoForm.get('Barrio')?.reset();
        this.bloqDepartaCont = true;

        this.bloqCiudad = true;
        this.bloqBarrio = true;  
    }
    } else {
      this.dataDepartamentos = [];
      this.contactoForm.get('Departamento')?.reset();
      this.contactoForm.get('Ciudad')?.reset();
      this.contactoForm.get('Barrio')?.reset();
      this.bloqDepartaCont = true;
      this.bloqCiudad = true;
      this.bloqBarrio = true;
    }
  }
   GetDepartamentosActivosist(form : any) {
    this.bloqDepartaAct = null;
    if (+form.Pais !== null && +form.Pais !== undefined && form.Pais !== '') {
       if (+form.Pais == 42) {
          this.activoForm.controls['Departamento'].setValidators([Validators.required]);
          this.activoForm.controls['Departamento'].setErrors({ 'incorrect': true });
          this.activoForm.get('Departamento')?.updateValueAndValidity();
          this.activoForm.controls['Ciudad'].setValidators([Validators.required]);
          this.activoForm.controls['Ciudad'].setErrors({ 'incorrect': true });
          this.activoForm.get('Ciudad')?.updateValueAndValidity();
        this.recursosGeneralesService.GetDepartamentosList(+form.Pais).subscribe(
          result => {
            if (result.length > 0) {
              //aqui se agregan los validadores de depa y ciu
              this.bloqDepartaAct = null;
              this.dataDepartamentos = result;
            } else {
              this.activoForm.get('Departamento')?.reset();
              this.activoForm.get('Ciudad')?.reset();
              this.bloqDepartaAct = true;
              this.bloqCiudadAct = true;
            }
          },
          error => {
            const errorMessage = <any>error;
            this.notif.onDanger('Error', errorMessage);
            console.error(errorMessage);
          }
        );
       } else {
         this.activoForm.controls['Departamento'].setErrors(null);
         this.activoForm.controls['Departamento'].clearValidators();
         this.activoForm.controls['Departamento'].setValidators(null);

         this.activoForm.controls['Ciudad'].setErrors(null);
         this.activoForm.controls['Ciudad'].clearValidators();
         this.activoForm.controls['Ciudad'].setValidators(null);

         this.activoForm.get('Departamento')?.reset();
         this.activoForm.get('Ciudad')?.reset();
         this.bloqDepartaAct = true;
        this.bloqCiudadAct = true;
    }
    } else {
      this.dataDepartamentos = [];
      this.activoForm.get('Departamento')?.reset();
      this.activoForm.get('Ciudad')?.reset();
      this.bloqDepartaAct = true;
      this.bloqCiudadAct = true;
    }
  }
  GetDepartamentosReferenList(form : any) {
    this.bloqDepartaRef = null;
    if (form.Pais !== null && form.Pais !== undefined && form.Pais !== '') {
       if (form.Pais == 42) {
          this.referenciaForm.controls['Departamento'].setValidators([Validators.required]);
          this.referenciaForm.controls['Departamento'].setErrors({ 'incorrect': true });
          this.referenciaForm.get('Departamento')?.updateValueAndValidity();
          this.referenciaForm.controls['Ciudad'].setValidators([Validators.required]);
          this.referenciaForm.controls['Ciudad'].setErrors({ 'incorrect': true });
          this.referenciaForm.get('Ciudad')?.updateValueAndValidity();
          this.recursosGeneralesService.GetDepartamentosList(+form.Pais).subscribe(
            result => {
              if (result.length > 0) {
                //aqui se agregan los validadores de depa y ciu
                this.bloqDepartaRef = null;
                this.dataDepartamentos = result;
              } else {
                  this.referenciaForm.get('Departamento')?.reset();
                  this.referenciaForm.get('Ciudad')?.reset();
                this.bloqDepartaRef = true;
              }
            },
            error => {
              const errorMessage = <any>error;
              this.notif.onDanger('Error', errorMessage);
              console.error(errorMessage);
            }
          );
       } else {
         this.referenciaForm.controls['Departamento'].setErrors(null);
         this.referenciaForm.controls['Departamento'].clearValidators();
         this.referenciaForm.controls['Departamento'].setValidators(null);

         this.referenciaForm.controls['Ciudad'].setErrors(null);
         this.referenciaForm.controls['Ciudad'].clearValidators();
         this.referenciaForm.controls['Ciudad'].setValidators(null);

         this.referenciaForm.get('Departamento')?.reset();
         this.referenciaForm.get('Ciudad')?.reset();
         this.bloqDepartaRef = true;
         this.bloqCiudadRef = true;
       }
    } else {
      this.dataDepartamentos = [];
      this.referenciaForm.get('Departamento')?.reset();
      this.referenciaForm.get('Ciudad')?.reset();
      this.bloqDepartaRef = true;
      this.bloqCiudadRef = true;
    }
  }
  GetBarrioList(form : any) {
     this.bloqBarrio = null;
    if (form.Ciudad !== null && form.Ciudad !== undefined && form.Ciudad !== '') {
      this.contactoForm.get('Barrio')?.reset();
        this.recursosGeneralesService.GetBarrioList(form.Ciudad).subscribe(
          result => {
            if (result.length > 0) {
              this.bloqBarrio = null;
              this.dataBarrios = result;
            } else {
              this.bloqBarrio = true;
              this.contactoForm.get('Barrio')?.reset();
            }
          },
          error => {
            const errorMessage = <any>error;
            this.notif.onDanger('Error', errorMessage);
            console.error(errorMessage);
          }
        );
    } else {
      this.contactoForm.get('Ciudad')?.reset();
      this.contactoForm.get('Barrio')?.reset();
    }
  } 
  EliminarValidadoresDepaCiuExp() {
      this.basicosFrom.controls['departExpedicion'].setErrors(null);
        this.basicosFrom.controls['departExpedicion'].clearValidators();
        this.basicosFrom.controls['departExpedicion'].setValidators(null);

        this.basicosFrom.controls['ciudadExpedicion'].setErrors(null);
        this.basicosFrom.controls['ciudadExpedicion'].clearValidators();
        this.basicosFrom.controls['ciudadExpedicion'].setValidators(null);

        this.basicosFrom.get('departExpedicion')?.reset();
        this.basicosFrom.get('ciudadExpedicion')?.reset();
        this.bloqDepartaExp = true;
        this.bloqCiudadExp = true;
  }
   EliminarValidadoresDepaCiuNaci() {
     this.basicosFrom.controls['departNacimiento'].setErrors(null);
     this.basicosFrom.controls['departNacimiento'].clearValidators();
     this.basicosFrom.controls['departNacimiento'].setValidators(null);

     this.basicosFrom.controls['ciudadNacimiento'].setErrors(null);
     this.basicosFrom.controls['ciudadNacimiento'].clearValidators();
     this.basicosFrom.controls['ciudadNacimiento'].setValidators(null);

     this.basicosFrom.get('departNacimiento')?.reset();
     this.basicosFrom.get('ciudadNacimiento')?.reset();
     this.bloqDeparta = true;
     this.bloqCiudad = true;
  }
  AgregarValidadoresDepaCiuExp() {
    this.basicosFrom.controls['departExpedicion'].setValidators([Validators.required]);
    this.basicosFrom.controls['departExpedicion'].setErrors({ 'incorrect': true });
    this.basicosFrom.get('departExpedicion')?.updateValueAndValidity();
    this.basicosFrom.controls['ciudadExpedicion'].setValidators([Validators.required]);
    this.basicosFrom.controls['ciudadExpedicion'].setErrors({ 'incorrect': true });
    this.basicosFrom.get('ciudadExpedicion')?.updateValueAndValidity();
  }
  AgregarValidadoresDepaCiuNaci() {
    this.basicosFrom.controls['departNacimiento'].setValidators([Validators.required]);
    this.basicosFrom.controls['departNacimiento'].setErrors({ 'incorrect': true });
    this.basicosFrom.get('departNacimiento')?.updateValueAndValidity();
    this.basicosFrom.controls['ciudadNacimiento'].setValidators([Validators.required]);
    this.basicosFrom.controls['ciudadNacimiento'].setErrors({ 'incorrect': true });
    this.basicosFrom.get('ciudadNacimiento')?.updateValueAndValidity();
  }
  validarCiudadList(form : any) {
    if (this.basicosFrom.get('ciudadNacimiento')?.value === '' || this.basicosFrom.get('ciudadNacimiento')?.value === null
      || this.basicosFrom.get('ciudadNacimiento')?.value === undefined) {
     this.basicosFrom.get('ciudadNacimiento')?.reset();
    } else {
      if (form.ciudadNacimiento === null || form.ciudadNacimiento === undefined || form.ciudadNacimiento === '') {
        this.basicosFrom.get('ciudadNacimiento')?.reset();
      }
    }
  }
  validarCiudadListExp(form : any) {
    if (this.basicosFrom.get('ciudadExpedicion')?.value === '' || this.basicosFrom.get('ciudadExpedicion')?.value === null
      || this.basicosFrom.get('ciudadExpedicion')?.value === undefined) {
     this.basicosFrom.get('ciudadExpedicion')?.reset();
    } else {
      if (form.ciudadExpedicion === null || form.ciudadExpedicion === undefined || form.ciudadExpedicion === '') {
        this.basicosFrom.get('ciudadExpedicion')?.reset();
      } 
    }
  }
   validarCiudadContactoList(form : any) {
    if (this.contactoForm.get('Ciudad')?.value === '' || this.contactoForm.get('Ciudad')?.value === null
      || this.contactoForm.get('Ciudad')?.value === undefined) {
     this.contactoForm.get('Ciudad')?.reset();
     this.bloqBarrio = true;
    } else {
      if (form.Ciudad === null || form.Ciudad === undefined || form.Ciudad === '') {
        this.contactoForm.get('Ciudad')?.reset();
        this.bloqBarrio = true;
      }
    }
  }
  validarCiudadActivosList(form : any) {
    if (this.activoForm.get('Ciudad')?.value === '' || this.activoForm.get('Ciudad')?.value === null
      || this.activoForm.get('Ciudad')?.value === undefined) {
     this.activoForm.get('Ciudad')?.reset();
     this.bloqBarrio = true;
    } else {
      if (form.Ciudad === null || form.Ciudad === undefined || form.Ciudad === '') {
        this.activoForm.get('Ciudad')?.reset();
        this.bloqBarrio = true;
      }
    }
  }
  validarCiudadReferenList(form : any) {
    if (this.activoForm.get('Ciudad')?.value === '' || this.activoForm.get('Ciudad')?.value === null
      || this.activoForm.get('Ciudad')?.value === undefined) {
     this.activoForm.get('Ciudad')?.reset();
     this.bloqBarrio = true;
    } else {
      if (form.Ciudad === null || form.Ciudad === undefined || form.Ciudad === '') {
        this.activoForm.get('Ciudad')?.reset();
        this.bloqBarrio = true;
      } 
    }
  }
   validarBarrioList(form : any) {
    if (this.contactoForm.get('Barrio')?.value === '' || this.contactoForm.get('Barrio')?.value === null
      || this.contactoForm.get('Barrio')?.value === undefined) {
      this.contactoForm.get('Barrio')?.reset();
    } else {
      if (form.Barrio === null || form.Barrio === undefined || form.Barrio === '') {
        this.contactoForm.get('Barrio')?.reset();
      } 
    }
  }
  //#endregion

  //#region Metodos de BASICOS

  GetInfoGenNit(tercero : string) {
    this.clientesGetListService.GetInfoGenNit(tercero).subscribe(
      result => {
        this.dataGenNit = result;
      },
      error => {
        this.notif.onDanger('Error', error);
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
    return this.dataGenNit;
  }

  validarSeleccionCiudad(nameCampo : string) {
    const operacion = this.basicosFrom.get('operacion')?.value;
    if (operacion !== '1') {
      const escogida = this.basicosFrom.get('' + nameCampo + '')?.value;
      if (escogida !== null) {
        if (escogida.IdCiudad === null || escogida.IdCiudad === undefined) {
          this.notif.onWarning('Advertencia','Debe seleccionar la ciudad.');
          this.basicosFrom.get('' + nameCampo + '')?.reset();
        }
      }
    }
  }

  validarNumHijos() {
    const valor = +this.basicosFrom.get('numHijos')?.value;
    if (valor % 1 === 0) {
      if (valor === 0) {
        this.disableFormNumHijos = true;
        this.basicosFrom.get('numHijosEstudian')?.setValue(0);
      } else {
        this.disableFormNumHijos = null;
        this.basicosFrom.get('numHijosEstudian')?.setValue(0);
        this.basicosFrom.get('numHijos')?.setValue(valor);
      }

      if (valor < 0 || valor === null) {
        this.disableFormNumHijos = true;
        this.basicosFrom.get('numHijos')?.setValue(0);
        this.basicosFrom.get('numHijosEstudian')?.setValue(0);
      }
    } else {
      this.disableFormNumHijos = true;
      this.basicosFrom.get('numHijos')?.setValue(0);
      this.basicosFrom.get('numHijosEstudian')?.setValue(0);
    }
  }
  validarNumHijosNegativo() {
    const valorHijo = +this.basicosFrom.get('numHijos')?.value;
    const valorPositivo = +this.basicosFrom.get('numHijosEstudian')?.value;
    this.basicosFrom.get('numHijosEstudian')?.setValue(valorPositivo);
    const valor = this.basicosFrom.get('numHijosEstudian')?.value;
    if (valor % 1 === 0) {
      if (valor < 0 || valor === null) {
        this.basicosFrom.get('numHijosEstudian')?.setValue(0);
      }
      if (valorHijo === 0 || valorHijo < 0 || valorHijo === null) {
        this.basicosFrom.get('numHijosEstudian')?.setValue(0);
      }
      if (valor > valorHijo) {
        this.basicosFrom.get('numHijosEstudian')?.setValue(0);
      }
    } else {
      this.basicosFrom.get('numHijosEstudian')?.setValue(0);
    }
  }
  validarConsignaciones() {
    const valor = +this.entrevistaForm.get('RPreguntaString14')?.value;
    if (valor % 1 === 0) {
      if (valor < 0) {
        this.entrevistaForm.get('RPreguntaString14')?.reset();
      }
      if (valor === 0) {
        this.entrevistaForm.get('RPreguntaString14')?.reset();
      }
    } else {
      this.entrevistaForm.get('RPreguntaString14')?.reset();
    }
  }
  validarPersonasCargoNegativo() {
    const valor = +this.basicosFrom.get('numeroPersonasCargo')?.value;
    if (valor % 1 === 0) {
      if (valor < 0) {
        this.basicosFrom.get('numeroPersonasCargo')?.setValue(0);
      }
    } else {
      this.basicosFrom.get('numeroPersonasCargo')?.setValue(0);
    }
  }
  validarAnosNegativo() {
    const valor = this.conyugueForm.get('years')?.value;
    if (valor % 1 === 0) {
      if (valor < 0) {
        this.conyugueForm.get('years')?.setValue(0);
      }
    } else {
      this.conyugueForm.get('years')?.setValue(0);
    }
  }
  validarMesesNegativo() {
    const valor = this.conyugueForm.get('meses')?.value;
    if (valor % 1 === 0) {
      if (valor < 0) {
        this.conyugueForm.get('meses')?.setValue(0);
      }
    } else {
      this.conyugueForm.get('meses')?.setValue(0);
    }

  }
  resetCiudad(nameCampo : string) {
    this.basicosFrom.get('' + nameCampo + '')?.reset();
  }
  limpiar() {
    this.basicosFrom.get('Nombre')?.setValue('');
  }
  GetEmpresaPorNit() {
    const objClients = new ClientesModel();
    objClients.Nit = this.basicosFrom.get('Nit')?.value;
    if (objClients.Nit !== '') {
      this.basicosFrom.get('NombreDrop')?.setValue('');
      this.basicosFrom.get('Nombre')?.setValue('');
      this.clientesGetListService.GetEmpresas(objClients).subscribe(
        result => {
          this.dataEmpresas = result;
          this.AbrirEmpresa.nativeElement.click();
        },
        error => {
          const errorMessage = <any>error;
          this.notif.onDanger('Error', errorMessage);
          console.error(errorMessage);
        }
      );
    }
  }
  ConsultarEPS() {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    objClients.Nombre = this.basicosFrom.get('Nombre')?.value;
    objClients.Nit = this.basicosFrom.get('NIT')?.value;
    if (objClients.Nombre !== '') {
      this.GetEPS();
    } else {
      this.GetEPSPorNit();
    }
  }
  GetEPSPorNit() {
    const objClients = new ClientesModel();
    objClients.Nit = this.basicosFrom.get('NIT')?.value;
    if (objClients.Nit !== null) {
      if (objClients.Nit !== '') {
        this.basicosFrom.get('NombreDrop')?.setValue('');
        this.basicosFrom.get('Nombre')?.setValue('');
        this.clientesGetListService.GetEps(objClients).subscribe(
          result => {
            this.dataEmpresas = result;
            this.AbrirEps.nativeElement.click();
          },
          error => {
            const errorMessage = <any>error;
            this.notif.onDanger('Error', errorMessage);
            console.error(errorMessage);
          }
        );
      }
    }
  }
  GetEPS() {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    objClients.Nombre = this.basicosFrom.get('Nombre')?.value;
    if (objClients.Nombre !== null) {
      if (objClients.Nombre.length >= 3) {
        this.disableFormEps = true;
        this.basicosFrom.get('NombreDrop')?.setValue('');
        this.basicosFrom.get('NIT')?.setValue('');
        this.clientesGetListService.GetEps(objClients).subscribe(
          result => {
            this.disableFormEps = true;
            this.dataEmpresas = result;
            this.AbrirEps.nativeElement.click();
          },
          error => {
            const errorMessage = <any>error;
            this.notif.onDanger('Error', errorMessage);
            console.error(errorMessage);
          }
        );
      } else {
        this.disableFormEps = true;
      }
    }
  }
  GetEPSAll() {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    this.clientesGetListService.GetEps(objClients).subscribe(
      result => {
        this.dataEmpresas = result;
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      }
    );
  }
  GetEmpresas() {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    objClients.Nombre = this.basicosFrom.get('Nombre')?.value;
    if (objClients.Nombre.length >= 3) {
      this.basicosFrom.get('NombreDrop')?.setValue('');
      this.basicosFrom.get('Nit')?.setValue('');
      this.clientesGetListService.GetEmpresas(objClients).subscribe(
        result => {
          this.dataEmpresas = result;
          this.AbrirEmpresa.nativeElement.click();
        },
        error => {
          const errorMessage = <any>error;
          this.notif.onDanger('Error', errorMessage);
          console.error(errorMessage);
        }
      );
    }
  }
  SetDataEPSBasico(data : any) {
    this.basicosFrom.get('NombreDrop')?.setValue(data.Nombre);
    this.BasicosEdit.get('EditEPS')?.setValue(data);
    this.basicosFrom.get('Nombre')?.reset();
  }
  GetEstado() {
    this.clientesGetListService.GetEstado().subscribe(
      result => {
        this.dataEstado = result;
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      });
  }

  GetTipoOcupacion() {
    const tipoEmpleo = this.basicosFrom.get('tipoEmpleo')?.value;
    const tipoCliente =  this.basicosFrom.get('tipoCliente')?.value;
    if (+tipoEmpleo === 1 || +tipoEmpleo === 6 || +tipoEmpleo === 7 || +tipoEmpleo === 8 ||
      +tipoEmpleo === 9 || +tipoEmpleo === 2 || + tipoEmpleo === 15 ||
      +tipoEmpleo === 5 || +tipoEmpleo === 3 || +tipoEmpleo === 14) {
      this.ocultarLaboral = false;
      this.ocultarLaboralDos = true;
      this.MostrarEmpresaDescripcion = true;
      this.MostrarEmpresaBuscar = false;
      this.laboralForm.get('EmpresaString')?.reset();
      this.laboralForm.controls['EmpresaString'].setErrors({ 'incorrect': true });
      this.laboralForm.controls['EmpresaString'].setValidators([Validators.required]);
      this.laboralForm.controls['NombreDropMostrar'].setErrors(null);
      this.laboralForm.controls['NombreDropMostrar'].clearValidators();
      this.laboralForm.controls['NombreDropMostrar'].setValidators(null);

    } else {
      this.ocultarLaboral = true;
      this.ocultarLaboralDos = false;
      this.disableFormEps = true;
      this.MostrarEmpresaDescripcion = false;
      this.MostrarEmpresaBuscar = true;
      this.laboralForm.get('EmpresaString')?.reset();
      this.laboralForm.controls['EmpresaString'].setErrors(null);
      this.laboralForm.controls['EmpresaString'].clearValidators();
      this.laboralForm.controls['EmpresaString'].setValidators(null);
      this.laboralForm.controls['NombreDropMostrar'].setErrors({ 'incorrect': true });
      this.laboralForm.controls['NombreDropMostrar'].setValidators([Validators.required]);
    }
    if (tipoEmpleo === '') {
      this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de empleo válido.');
      this.basicosFrom.get('tipoEmpleo')?.reset();
    } else {

      $(document).on('click', '#agregar_nombres', function () {
        $('#ModalAgregarNombre').modal('show');
      });
      const year = this.basicosFrom.get('fechaNacimiento')?.value;
      const operacion = this.basicosFrom.get('operacion')?.value;
      // 3 Desempleados Mayor 18 años
      // 15 Sin Ocupación Menor de 18 años
      if (operacion === '1') {
        if ((this.empleoAnterior !== +'4' && this.empleoAnterior !== +'6' && this.empleoAnterior !== +'10' && this.empleoAnterior !== +'11')
          && (tipoEmpleo === '4' || tipoEmpleo === '6' || tipoEmpleo === '10' || tipoEmpleo === '11')) {
          if (this.itemsLaboral.length <= 0) {
            this.AbrirLaboral.nativeElement.click();
          }
        }
      }
      if (year !== null  && !this.EsProveedor) {
        const fechaNacimiento = this.basicosFrom.get('fechaNacimiento')?.value;
        const fechaActualFormat = moment(new Date()).format();
        const nacimiento = moment(fechaNacimiento).format();
        const validacionFechas = this.ValidacionFechas(fechaActualFormat, nacimiento);
        if (!validacionFechas && tipoEmpleo === '3') {
          this.basicosFrom.get('tipoEmpleo')?.reset();
          this.notif.onWarning('Advertencia','El tipo de relación seleccionado no es válido para el tipo de empleo');
          this.basicosFrom.get('tipoEmpleo')?.reset();
        } else if (validacionFechas && tipoEmpleo === '15') {
          this.basicosFrom.get('tipoEmpleo')?.reset();
          this.notif.onWarning('Advertencia','El tipo de cliente seleccionado no concuerda con el tipo de empleo.');
        } else {
          this.resetConcepto();
          this.dataActividad = [];
          this.basicosFrom.get('actividad')?.reset();
          const empleoSeleccionado = localStorage.getItem('tipoEmpleoSeleccionado');
          if (empleoSeleccionado === null || empleoSeleccionado === undefined) {
            localStorage.setItem('tipoEmpleoSeleccionado', this.basicosFrom.get('tipoEmpleo')?.value);
            this.cambioEmpleo = false;
          } else {
            if (empleoSeleccionado !== this.basicosFrom.get('tipoEmpleo')?.value) {
              this.cambioEmpleo = true;
              localStorage.setItem('tipoEmpleoSeleccionado', this.basicosFrom.get('tipoEmpleo')?.value);
            } else {
              this.cambioEmpleo = false;
            }
          }
          this.basicosFrom.get('tipoOcupacion')?.setValue(null);
         
          this.clientesGetListService.GetTipoOcupacion(this.basicosFrom.get('tipoEmpleo')?.value).subscribe(
            result => {
              this.dataTipoOcupacion = result;
            
            },
            error => {
              const errorMessage = <any>error;
              this.notif.onDanger('Error', errorMessage);
              console.error(errorMessage);
            }
          );
        }
      } else  if (year !== null  && this.EsProveedor) {
        const fechaNacimiento = this.basicosFrom.get('fechaNacimiento')?.value;
        const fechaActualFormat = moment(new Date()).format();
        const nacimiento = moment(fechaNacimiento).format();
        const validacionFechas = this.ValidacionFechas(fechaActualFormat, nacimiento);
        if (!validacionFechas && tipoEmpleo === '3') {
          this.basicosFrom.get('tipoEmpleo')?.reset();
          this.notif.onWarning('Advertencia','El tipo de relación seleccionado no es válido para el tipo de empleo');
          this.basicosFrom.get('tipoEmpleo')?.reset();
        } else if (validacionFechas && tipoEmpleo === '15') {
          this.basicosFrom.get('tipoEmpleo')?.reset();
          this.notif.onWarning('Advertencia','El tipo de cliente seleccionado no concuerda con el tipo de empleo.');
        } else {
        this.resetConcepto();
          this.dataActividad = [];
          this.basicosFrom.get('actividad')?.reset();

          const empleoSeleccionado = localStorage.getItem('tipoEmpleoSeleccionado');
          if (empleoSeleccionado === null || empleoSeleccionado === undefined) {
            localStorage.setItem('tipoEmpleoSeleccionado', this.basicosFrom.get('tipoEmpleo')?.value);
            this.cambioEmpleo = false;
          } else {
            if (empleoSeleccionado !== this.basicosFrom.get('tipoEmpleo')?.value) {
              this.cambioEmpleo = true;
              localStorage.setItem('tipoEmpleoSeleccionado', this.basicosFrom.get('tipoEmpleo')?.value);
            } else {
              this.cambioEmpleo = false;
            }
          }
          this.basicosFrom.get('tipoOcupacion')?.setValue(null);
          this.clientesGetListService.GetTipoOcupacion(this.basicosFrom.get('tipoEmpleo')?.value).subscribe(
            result => {
              this.dataTipoOcupacion = result;
            },
            error => {
              const errorMessage = <any>error;
              this.notif.onDanger('Error', errorMessage);
              console.error(errorMessage);
            }
          );
        }
      } else  if (year === null && tipoCliente === '15' && this.EsProveedor) {
        this.resetConcepto();
          this.dataActividad = [];
          this.basicosFrom.get('actividad')?.reset();
          const empleoSeleccionado = localStorage.getItem('tipoEmpleoSeleccionado');
          if (empleoSeleccionado === null || empleoSeleccionado === undefined) {
            localStorage.setItem('tipoEmpleoSeleccionado', this.basicosFrom.get('tipoEmpleo')?.value);
            this.cambioEmpleo = false;
          } else {
            if (empleoSeleccionado !== this.basicosFrom.get('tipoEmpleo')?.value) {
              this.cambioEmpleo = true;
              localStorage.setItem('tipoEmpleoSeleccionado', this.basicosFrom.get('tipoEmpleo')?.value);
            } else {
              this.cambioEmpleo = false;
            }
          }
          this.basicosFrom.get('tipoOcupacion')?.setValue(null);
          this.clientesGetListService.GetTipoOcupacion(this.basicosFrom.get('tipoEmpleo')?.value).subscribe(
            result => {
              this.dataTipoOcupacion = result;
            },
            error => {
              const errorMessage = <any>error;
              this.notif.onDanger('Error', errorMessage);
              console.error(errorMessage);
            }
          );
      } else {
        this.notif.onWarning('Advertencia','Debe ingresar la fecha de nacimiento.');
        this.basicosFrom.get('tipoEmpleo')?.reset();
      }
    }
  }
  GetActividadEconomica() {
    const tipoOcupacion = this.basicosFrom.get('tipoOcupacion')?.value;
    if (tipoOcupacion === '') {
      this.notif.onWarning('Advertencia', 'Debe seleccionar una ocupación válida.');
      this.basicosFrom.get('tipoOcupacion')?.reset();
    } else {
      const ocupacion = +this.basicosFrom.get('tipoOcupacion')?.value;
      if (ocupacion === 42 || ocupacion === 57 || ocupacion === 31 || ocupacion === 32) {
            this.dataNivelEstudio = this.DataRequired.NivelEstudioData;
            this.dataNivelEstudio.splice(0, 1);
            this.dataNivelEstudio.splice(0, 1);
            this.dataNivelEstudio.splice(1, 1);
            this.dataNivelEstudio.splice(5, 1);
      } else {
        this.dataNivelEstudio = this.DataRequired.NivelEstudioData;
      }
      this.basicosFrom.get('actividad')?.reset();
      this.clientesGetListService.GetActividadEconomica(this.basicosFrom.get('tipoOcupacion')?.value).subscribe(
        result => {
          this.dataActividad = result;
        },
        error => {
          const errorMessage = <any>error;
          this.notif.onDanger('Error', errorMessage);
          console.error(errorMessage);
        }
      );
    }

  }

  GetAsociados() {
    const operacion = this.basicosFrom.get('operacion')?.value;
    const objAsociados = new AsociadosModel();
    objAsociados.strNumeroDocumento = this.basicosFrom.get('IdentificacionTutor')?.value;
    if (objAsociados.strNumeroDocumento !== '' && objAsociados.strNumeroDocumento != null) {
      if (objAsociados.strNumeroDocumento !== this.basicosFrom.get('numeroDocumento')?.value) {
        this.clientesGetListService.GetAsociados(objAsociados).subscribe(
          result => {
            if (result.length > 0) {
              this.InfoTutorSeleccionado.DocumentoTutor = [];
              this.dataAsociados = result;
              this.basicosFrom.get('NombreTutor')?.setValue(this.dataAsociados[0].PrimerNombre + ' ' + this.dataAsociados[0].SegundoNombre +
                ' ' + this.dataAsociados[0].PrimerApellido + ' ' + this.dataAsociados[0].SegundoApellido);
              this.infoTutor = this.dataAsociados[0];
              this.InfoTutorSeleccionado.DocumentoTutor.push((this.dataAsociados[0].NumeroDocumento));
            } else {
              if (operacion === '1') {
                this.notif.onWarning('Advertencia', 'El tutor ingresado no existe.');
                this.basicosFrom.get('NombreTutor')?.reset();
                this.basicosFrom.get('IdentificacionTutor')?.reset();
                this.InfoTutorSeleccionado.DocumentoTutor = [];
              } else {
                this.notif.onWarning('Advertencia', 'El tutor ingresado no existe.');
                this.basicosFrom.get('NombreTutor')?.reset();
                this.basicosFrom.get('IdentificacionTutor')?.reset();
                this.InfoTutorSeleccionado.DocumentoTutor = [];
              }
            }
          },
          error => {
            const errorMessage = <any>error;
            this.notif.onDanger('Error', errorMessage);
            console.error(errorMessage);
          }
        );
      } else {
        this.basicosFrom.get('NombreTutor')?.reset();
        this.basicosFrom.get('IdentificacionTutor')?.reset();
        this.notif.onWarning('Advertencia', 'El tutor debe ser diferente al asociado.');
      }
    }
  }
  GetObservacionAll() {
    let IdModuloActivo : string | null = localStorage.getItem('IdModuloActivo');
    const modulo = JSON.parse(window.atob(IdModuloActivo == null ? "" : IdModuloActivo));
    this.clientesGetListService.GetObservacionAll(modulo).subscribe(
      result => {
        this.dataObservacion = result;
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      });
  }
  validarOtrosObservacion() {
    const data = this.FormCambioEstado.get('IdTipoObservacion')?.value;
    if (data === '5') {
      this.DescriObservacion = false;
      this.FormCambioEstado.get('Observacion')?.reset();
    } else {
      this.DescriObservacion = true;
      this.FormCambioEstado.get('Observacion')?.reset();
    }
  }
  CambiarEstadoObservacion() {
    const natural = localStorage.getItem('TerceroNatura');
    this.FormCambioEstado.get('lngTercero')?.setValue(natural);
    this.observacionesService.GuardarObservacion(this.FormCambioEstado.value).subscribe(
      result => {
        this.FormCambioEstado.reset();
      },
      error => {
        this.FormCambioEstado.reset();
      });
    this.cambiarEstadoNatural();
  }
  GetAsesorExternoCodigo() {
    this.blockBtnBasico = false;
    if (this.asesorForm.value.strCodigo !== null && this.asesorForm.value.strCodigo !== '') {
      this.asesorForm.get('strNombre')?.setValue('');
      this.clientesGetListService.GetAsesorExterno(this.asesorForm.value).subscribe(
        result => {
          if (result.length > 1) {
            this.dataAsesor = result;
            this.BuscarAsesores.nativeElement.click();
          } else {
            if (result.length !== 0) {
              result.forEach((elementex : any) => {
                this.asesorForm.get('strNombre')?.setValue(elementex.Nombre);
                this.asesorForm.get('strCodigo')?.setValue(elementex.intIdAsesor);
                this.terceroSave.get('IdAsesorExterno')?.setValue(elementex.lngTercero);
              });
            } else {
              this.asesorForm.get('strNombre')?.setValue('');
              this.asesorForm.get('strCodigo')?.setValue('');
              this.terceroSave.get('IdAsesorExterno')?.reset();
              this.notif.onWarning('Advertencia', 'No se encontró el asesor externo.');
            }
          }
        },
        error => {
          this.notif.onWarning('Advertencia', 'El valor ingresado no tiene el formato correcto');
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    } else { 
      if (this.asesorForm.get('strCodigo')?.value === '') {
        this.asesorForm.get('strNombre')?.reset();
      }
    }      
  }
  LimpiaSolo() {
    if (this.asesorForm.get('strNombre')?.value === '') {
      this.asesorForm.get('strCodigo')?.reset();
    }
  }

  GetAsesorExternoCodigoFirst(codigo : string) {
    this.asesorForm.get('strNombre')?.setValue('');
    this.asesorForm.get('strCodigo')?.setValue(codigo);
    this.clientesGetListService.GetAsesorExterno(this.asesorForm.value).subscribe(
      result => {
        if (result.length > 1) {
          this.dataAsesor = result;
          this.BuscarAsesores.nativeElement.click();
        } else {
          if (result.length !== 0) {
            result.forEach((elements : any) => {
              this.asesorForm.get('strNombre')?.setValue(elements.Nombre);
              this.asesorForm.get('strCodigo')?.setValue(elements.intIdAsesor);
              this.terceroSave.get('IdAsesorExterno')?.setValue(elements.intIdAsesor);
            });
          } else {
            this.asesorForm.get('strNombre')?.setValue('');
            this.asesorForm.get('strCodigo')?.setValue('');
            this.terceroSave.get('IdAsesorExterno')?.reset();
            this.notif.onWarning('Advertencia', 'No se encontró el asesor externo.');
          }
        }
      },
      error => {
        this.notif.onDanger('Error', error);
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  GetAsesorExternoNombre() {
    this.asesorForm.get('strCodigo')?.setValue('');
    this.clientesGetListService.GetAsesorExterno(this.asesorForm.value).subscribe(
      result => {
        if (result.length > 1) {
          this.dataAsesor = result;
          this.BuscarAsesores.nativeElement.click();
        } else {
          if (result.length !== 0) {
            result.forEach((elemento : any)=> {
              this.asesorForm.get('strNombre')?.setValue(elemento.Nombre);
              this.asesorForm.get('strCodigo')?.setValue(elemento.intIdAsesor);
              this.terceroSave.get('IdAsesorExterno')?.setValue(elemento.lngTercero);
            });
          } else {
            this.asesorForm.get('strNombre')?.setValue('');
            this.asesorForm.get('strCodigo')?.setValue('');
            this.terceroSave.get('IdAsesorExterno')?.reset();
            this.notif.onWarning('Advertencia', 'No se encontró el asesor externo.');
          }
        }
      },
      error => {
        this.notif.onDanger('Error', error);
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }

  GetAsesorExternoAll() {
    if (this.asesorForm.value.strNombre !== '' && this.asesorForm.value.strNombre !== null) {
      this.asesorForm.get('strCodigo')?.setValue('');
    } else if (this.asesorForm.value.strCodigo !== '' && this.asesorForm.value.strCodigo !== null) {
      this.asesorForm.get('strNombre')?.setValue('');
    } else {
      this.asesorForm.get('strCodigo')?.setValue('');
      this.asesorForm.get('strNombre')?.setValue('');
    }

    this.clientesGetListService.GetAsesorExterno(this.asesorForm.value).subscribe(
      result => {
        if (result.length > 1) {
          this.dataAsesor = result;
          this.BuscarAsesores.nativeElement.click();
        } else {
          if (result.length !== 0) {
            this.asesorForm.get('strNombre')?.reset();
            this.asesorForm.get('strCodigo')?.reset();
            result.forEach((elementt : any) => {
              this.asesorForm.get('strNombre')?.setValue(elementt.Nombre);
              this.asesorForm.get('strCodigo')?.setValue(elementt.intIdAsesor);
              this.terceroSave.get('IdAsesorExterno')?.setValue(elementt.lngTercero);
              this.blockBtnBasico = false;
            });
          } else {
            this.asesorForm.get('strNombre')?.setValue('');
            this.asesorForm.get('strCodigo')?.setValue('');
            this.terceroSave.get('IdAsesorExterno')?.reset();
            this.notif.onWarning('Advertencia', 'No se encontró el asesor externo.');
          }
        }
      },
      error => {
        this.notif.onDanger('Error', error);
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }
  // ----------------- asesor

  GetAsesorCodigo() {
    if (this.asesorForm.value.strCodigoAse !== null && this.asesorForm.value.strCodigoAse !== '') {
      this.asesorForm.get('strNombreAse')?.setValue('');
      this.clientesGetListService.GetAsesor(this.asesorForm.value).subscribe(
        result => {
          if (result.length > 1) {
            this.dataAsesorPapl = result;
            this.BuscarAsesoresPpal.nativeElement.click();
          } else {
            if (result.length !== 0) {
              result.forEach((elementex : any) => {
                this.asesorForm.get('strNombreAse')?.setValue(elementex.Nombre);
                this.asesorForm.get('strCodigoAse')?.setValue(elementex.IdAsesor);
                this.blockBtnBasico = false;
              });
            } else {
              if (this.basicosFrom.value.operacion === '26') {
                if (this.asesorForm.get('strCodigoAse')?.value === 2)
                  this.asesorForm.get('strNombreAse')?.setValue('Coogranada');
              } else {
                this.notif.onWarning('Advertencia', 'No se encontró el asesor.');
              }
            }
          }
        },
        error => {
          this.notif.onWarning('Advertencia', 'El valor ingresado no tiene el formato correcto');
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    } else {
      if (this.asesorForm.value.strCodigoAse === '') {
        this.asesorForm.get('strNombreAse')?.reset();
      }
    }
  }

  GetAsesorCodigoFirst(codigo : string) {
    this.asesorForm.get('strNombreAse')?.setValue('');
    this.asesorForm.get('strCodigoAse')?.setValue(codigo);
    this.clientesGetListService.GetAsesor(this.asesorForm.value).subscribe(
      result => {
        if (result.length > 1) {
          this.dataAsesorPapl = result;
          this.BuscarAsesoresPpal.nativeElement.click();
        } else {
          if (result.length !== 0) {
            result.forEach((elements : any) => {
              this.asesorForm.get('strNombreAse')?.setValue(elements.Nombre);
              this.asesorForm.get('strCodigoAse')?.setValue(elements.IdAsesor);
            });
          } else {
            if (this.basicosFrom.value.operacion === '26') {
              if (this.asesorForm.get('strCodigoAse')?.value === 2)
                this.asesorForm.get('strNombreAse')?.setValue('Coogranada');
            } else {
              this.notif.onWarning('Advertencia', 'No se encontró el asesor.');
            }
          }
        }
      },
      error => {
        this.notif.onDanger('Error', error);
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }

  GetAsesorAll() {
    if (this.asesorForm.value.strNombreAse !== '' && this.asesorForm.value.strNombreAse !== null) {
      this.asesorForm.get('strCodigoAse')?.setValue('');
    } else if (this.asesorForm.value.strCodigoAse !== '' && this.asesorForm.value.strCodigoAse !== null) {
      this.asesorForm.get('strNombreAse')?.setValue('');
    } else {
      this.asesorForm.get('strCodigoAse')?.setValue('');
      this.asesorForm.get('strNombreAse')?.setValue('');
    }

    this.clientesGetListService.GetAsesor(this.asesorForm.value).subscribe(
      result => {
        if (result.length > 1) {
          this.dataAsesorPapl = result;
          this.BuscarAsesoresPpal.nativeElement.click();
        } else {
          if (result.length !== 0) {
            this.asesorForm.get('strNombreAse')?.reset();
            this.asesorForm.get('strCodigoAse')?.reset();
            result.forEach((elementt : any) => {
              this.asesorForm.get('strNombreAse')?.setValue(elementt.Nombre);
              this.asesorForm.get('strCodigoAse')?.setValue(elementt.IdAsesor);
              this.blockBtnBasico = false;
            });
          } else {
            if (this.basicosFrom.value.operacion === '26') {
              if (this.asesorForm.get('strCodigoAse')?.value === 2)
                this.asesorForm.get('strNombreAse')?.setValue('Coogranada');
            } else {
              this.notif.onWarning('Advertencia', 'No se encontró el asesor.');
              this.asesorForm.get('strNombreAse')?.setValue('');
              this.asesorForm.get('strCodigoAse')?.setValue('');
            }
          }
        }
      },
      error => {
        this.notif.onDanger('Error', error);
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }

  // ----------------- fin

  DesbloquearAsesorExterno() {
    this.disableAsesor = null;
  }

  LimpiarExterno(Datos : string) {
    if (Datos === 'strCodigo') {
      this.asesorForm.get('strNombre')?.reset();
    } else if (Datos === 'strNombre') {
      this.asesorForm.get('strCodigo')?.reset();
    }
  }

  LimpiarIdAsesorNombre() {
    this.asesorForm.get('strCodigoAse')?.reset();
  } 

  LimpiarIdAsesorCodigo() {
    this.asesorForm.get('strNombreAse')?.reset();
  }

  GetAsesorExternoAllMapear() {
    if (this.asesorForm.value.strNombre !== '') {
      this.asesorForm.get('strCodigo')?.setValue('');
    } else if (this.asesorForm.value.strCodigo !== '') {
      this.asesorForm.get('strNombre')?.setValue('');
    } else {
      this.asesorForm.get('strCodigo')?.setValue('');
      this.asesorForm.get('strNombre')?.setValue('');
    }
    this.clientesGetListService.GetAsesorExterno(this.asesorForm.value).subscribe(
      result => {
        this.dataAsesor = result;
      });
  }
  setDataBasicos() {
    const operacion = this.basicosFrom.get('operacion')?.value;
    const tercerEdit = localStorage.getItem('TerceroNatura');
    if (operacion === '5') {// Se realiza el guardar del registro natural
      const tipoCliente = +this.basicosFrom.get('tipoCliente')?.value;
      const ocupacion = +this.basicosFrom.get('tipoOcupacion')?.value;
      const profesion = this.basicosFrom.get('profesion')?.value;
      const tieneACargo = this.basicosFrom.get('personasCargo')?.value;
      const numACargo = this.basicosFrom.get('numeroPersonasCargo')?.value;
      if (tieneACargo && (numACargo === 0 || numACargo === null)) { // valid  que e numero de personas a cargo venga
        this.notif.onWarning('Advertencia',
          'El número de personas a cargo debe ser mayor a cero (0).');
      } else if (profesion === '' || profesion === null &&
        (ocupacion === 42 || ocupacion === 57 || ocupacion === 31 || ocupacion === 32)) { // valida el tipo de ocupacion
        this.notif.onWarning('Advertencia','El campo profesión es obligatorio por el tipo de ocupación seleccionado.');
      } else if (this.infoTutor === undefined && tipoCliente === 10) {
        this.notif.onWarning('Advertencia','Debe agregar un tutor para este tipo de cliente.');
      } else {
        const results = this.basicosFrom.get('metodo')?.value;
        if (results === '7' || results === '6') {
          if (this.basicosFrom.get('otroPor')?.value !== null && this.basicosFrom.get('otroPor')?.value !== undefined) {
            if (this.AsessorNecesario !== null) {
              //#region Metodo guardar
              Swal.fire({ // Se pregunta si necesita asesor externo
                title: 'Advertencia',
                text: '',
                html: '¿ el registro requiere un asesor externo ? ',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Si',
                cancelButtonText: 'No',
                confirmButtonColor: 'rgb(13,165,80)',
                cancelButtonColor: 'rgb(160,0,87)',
                allowOutsideClick: false,
                allowEscapeKey: false
                // tslint:disable-next-line:no-shadowed-variable
              }).then((results : any) => {
                if (results.value) { // si lo necesita lo devuelve al formulario
                  this.MostrarAsesorExterno = true;
                  this.disableAsesor = null;
                  this.AsessorNecesario = null;
                  this.AsessorNecesarioMarca = true;
                  this.AnteriorTab.nativeElement.click();
                  // Mostrar el campo asesor en rojo y no dejarlo ir si no lo llena
                  $('#financieroTab').addClass('disableTab');
                  this.disableTabFinanciero = false;
                  this.devolverTab(1);
                  $('#basicoTab').removeClass('disableTab');
                } else { // si no necesita asesor externo pregunta si el registro es para un credito
                  this.AsessorNecesarioMarca = false;
                  this.AsessorNecesario = null;
                      $('#financieroTab').removeClass('disableTab');
                      $('#basicoTab').removeClass('disableTab');
                      let data : string | null = localStorage.getItem('Data');
                      const dataLocal = JSON.parse(window.atob(data == null ? "": data));
                        // JSON.parse(localStorage.getItem('Data'));
                      this.basicoSave.get('MadreCabezaFamilia')?.setValue(this.basicosFrom.value.amaCasa);
                      this.basicoSave.get('IdTipoVivienda')?.setValue(this.basicosFrom.value.tipoVivienda);
                      this.viviendaSeleccionada = this.basicosFrom.value.tipoVivienda;
                      if (this.basicosFrom.value.estrato === null || this.basicosFrom.value.estrato === undefined) {
                        this.basicoSave.get('Estrato')?.setValue('0');
                      } else {
                      this.basicoSave.get('Estrato')?.setValue(this.basicosFrom.value.estrato);
                      }
                        if (this.basicosFrom.value.viveDesde !== null && this.basicosFrom.value.viveDesde !== undefined) {
                      this.basicoSave.get('Fecha_Vive')?.setValue(formatDate(this.basicosFrom.value.viveDesde, 'yyyy-MM-dd', 'en'));
                    } else {
                      this.basicoSave.get('Fecha_Vive')?.setValue('01-01-1900');
                  }
                      this.basicoSave.get('IdEstadoCivil')?.setValue(this.basicosFrom.value.estadoCivil);
                      this.estadoCivilSeleccionado = +this.basicosFrom.value.estadoCivil;
                      localStorage.setItem('estadoSeleccionado', this.basicosFrom.value.estadoCivil);
                      this.basicoSave.get('IdRelacion')?.setValue(this.basicosFrom.value.tipoCliente);
                      this.basicoSave.get('NumHijos')?.setValue(this.basicosFrom.value.numHijos);
                      this.basicoSave.get('NumHijosEstudian')?.setValue(this.basicosFrom.value.numHijosEstudian);
                      this.basicoSave.get('Carnet')?.setValue(0);
                      this.basicoSave.get('IdEstado')?.setValue(this.basicosFrom.value.estado);
                      this.basicoSave.get('IdNivelEstudio')?.setValue(this.basicosFrom.value.nivelEstudio);
                      if (this.basicosFrom.value.profesion !== '' && this.basicosFrom.value.profesion !== null) {
                        this.basicoSave.get('IdTituloProfesional')?.setValue(this.basicosFrom.value.profesion.Clase);
                      } else {
                        this.basicoSave.get('IdTituloProfesional')?.setValue(0);
                      }
                      if (this.basicosFrom.value.actividad.Id !== undefined) {
                        this.basicoSave.get('IdActividadEconomica')?.setValue(this.basicosFrom.value.actividad.Id);
                      } else {
                        this.basicoSave.get('IdActividadEconomica')?.setValue(0);
                      }
                      this.basicoSave.get('Dependiente')?.setValue(0); // preguntar si se deja o se quita
                      this.basicoSave.get('IdSegmento')?.setValue(this.basicosFrom.value.segmento);
                      this.basicoSave.get('IdTipoOcupacion')?.setValue(this.basicosFrom.value.tipoOcupacion);
                      this.basicoSave.get('IdTipoEmpleo')?.setValue(this.basicosFrom.value.tipoEmpleo);
                      localStorage.setItem('laborSeleccionada', this.basicosFrom.value.tipoEmpleo);
                      this.basicoSave.get('NumPersCargo')?.setValue(this.basicosFrom.value.numeroPersonasCargo);
                      console.log('Informacion del tutor seteado - ' + this.infoTutor);
                      if (this.infoTutor !== null && this.infoTutor !== undefined) {
                        if (this.infoTutor.LngTercero !== undefined) {
                          this.basicoSave.get('IdTutor')?.setValue(this.infoTutor.LngTercero);
                        } else {
                          this.basicoSave.get('IdTutor')?.setValue(this.infoTutor.lngTercero);
                        }
                      }
                      this.basicoSave.get('IdEPS')?.setValue(this.BasicosEdit.value.EditEPS.IdEPS);
                      this.basicoSave.get('IdMotivoIngreso')?.setValue(this.basicosFrom.value.motivoIngreso);
                      this.basicoSave.get('PersPEP')?.setValue(this.basicosFrom.value.publica);
                      this.basicoSave.get('FechaCreacion')?.setValue(formatDate(new Date(), 'yyyy-MM-dd HH:mm:ss', 'en'));
                      this.basicoSave.get('IdAsesorCrea')?.setValue(dataLocal.IdAsesor);
                      this.basicoSave.get('FechaMod')?.setValue(null);
                      this.basicoSave.get('IdAsesorMod')?.setValue(dataLocal.IdAsesor);
                      this.basicoSave.get('FechaRetiro')?.setValue(null);
                      this.basicoSave.get('IdAsesorRetira')?.setValue(0);
                      this.basicoSave.get('IdOficina')?.setValue(+dataLocal.NumeroOficina);
                      this.basicoSave.get('MetodoConocio')?.setValue(this.basicosFrom.value.metodo);
                      if (this.basicosFrom.value.otroPor !== null && this.basicosFrom.value.otroPor !== undefined &&
                        this.basicosFrom.value.otroPor !== '') {
                        this.basicoSave.get('OtroPor')?.setValue(this.basicosFrom.value.otroPor.toLowerCase());
                      } else {
                        this.basicoSave.get('OtroPor')?.setValue(this.basicosFrom.value.otroPor);
                      }
                      this.basicoSave.get('NombreArrendador')?.setValue(this.basicosFrom.value.nombreArrendador);
                      this.basicoSave.get('TelefonoArrendador')?.setValue(this.basicosFrom.value.telefonoArrendador);
                      this.basicoSave.get('IdSegmento')?.setValue(this.basicosFrom.value.setSegmento);
                      this.terceroSave.get('NumeroDocumento')?.setValue(this.basicosFrom.value.numeroDocumento);
                      this.terceroSave.get('IdTipoDocumento')?.setValue(this.basicosFrom.value.tipoDocumento);
                      if (this.basicosFrom.value.ciudadExpedicion !== null && this.basicosFrom.value.ciudadExpedicion !== undefined) {
                         this.terceroSave.get('IdCiudadExpeDto')?.setValue(+this.basicosFrom.value.ciudadExpedicion);
                      } else {
                        this.terceroSave.get('IdCiudadExpeDto')?.setValue(0);
                      }
                      if (this.basicosFrom.value.paisExpedicion !== null && this.basicosFrom.value.paisExpedicion !== undefined) {
                         this.terceroSave.get('IdPaisExpe')?.setValue(+this.basicosFrom.value.paisExpedicion);
                      } else {
                        this.terceroSave.get('IdPaisExpe')?.setValue(0);
                      }

                      if (this.basicosFrom.value.paisNacimiento !== null && this.basicosFrom.value.paisNacimiento !== undefined) {
                        this.terceroSave.get('IdPaisNto')?.setValue(+this.basicosFrom.value.paisNacimiento);
                      } else {
                        this.terceroSave.get('IdPaisNto')?.setValue(0);
                      }
                      if (this.basicosFrom.value.ciudadNacimiento !== null && this.basicosFrom.value.ciudadNacimiento !== undefined) {
                        this.terceroSave.get('IdCiudadNto')?.setValue(+this.basicosFrom.value.ciudadNacimiento);
                      } else {
                        this.terceroSave.get('IdCiudadNto')?.setValue(0);
                      }

                      if (this.basicosFrom.value.fechaNacimiento !== null && this.basicosFrom.value.fechaNacimiento !== undefined) {
                      this.terceroSave.get('FechaNacimiento')?.setValue(this.basicosFrom.value.fechaNacimiento);
                      } else {
                      this.terceroSave.get('FechaNacimiento')?.setValue('01-01-1900');
                      }
                      if (this.basicosFrom.value.fechaExpedicion !== null && this.basicosFrom.value.fechaExpedicion !== undefined) {
                        this.terceroSave.get('FechaExpDocumento')?.setValue(this.basicosFrom.value.fechaExpedicion);
                      } else {
                        this.terceroSave.get('FechaExpDocumento')?.setValue('01-01-1900');
                      }
                      this.terceroSave.get('PrimerNombre')?.setValue(this.basicosFrom.value.primerNombre.charAt(0).toUpperCase() + 
                      this.basicosFrom.value.primerNombre.slice(1).toLowerCase());
                      this.terceroSave.get('SegundoNombre')?.setValue(this.basicosFrom.value.segundoNombre.charAt(0).toUpperCase() + 
                      this.basicosFrom.value.segundoNombre.slice(1).toLowerCase());
                      this.terceroSave.get('PrimerApellido')?.setValue(this.basicosFrom.value.primerApellido.charAt(0).toUpperCase() + 
                      this.basicosFrom.value.primerApellido.slice(1).toLowerCase());
                  
                      this.terceroSave.get('SegundoApellido')?.setValue(this.basicosFrom.value.segundoApellido.charAt(0).toUpperCase() + 
                      this.basicosFrom.value.segundoApellido.slice(1).toLowerCase());

                      this.terceroSave.get('IdGenero')?.setValue(this.basicosFrom.value.genero);
                      this.terceroSave.get('IdEstado')?.setValue(this.basicosFrom.value.estado);
                      this.terceroSave.get('IdAsesorExterno')?.setValue(this.terceroSave.value.IdAsesorExterno);
                      this.allItemsFormSaves.asociadosNaturalesDto = {};
                      this.allItemsFormSaves.asociadosNaturalesDto = this.basicoSave.value;
                      this.allItemsFormSaves.tercerosDto = this.terceroSave.value;
                      this.allItemsFormSaves.asociadosNaturalesDto = this.basicoSave.value;
                      this.allItemsFormSaves.tercerosDto = this.terceroSave.value;
                      this.allItemsFormBasico.push(this.basicoSave.value);
                      this.basicosFormSet.get('asociadosNaturalesDto')?.setValue(this.basicoSave.value);
                      this.allItemsFormSave.push(this.basicosFormSet.value);
                      $('#financieroTab').removeClass('disableTab');
                      $('#basicoTab').removeClass('activar');
                      $('#basicoTab').removeClass('active');
                      this.botonBasicoSiguiente.nativeElement.click();
                      this.devolverTab(2);
                      this.VolverArriba();
                      $('#basicoTab').removeClass('disableTab');
                }
              });
            } else { // si ya ingreso el asesor se pregunta de nuevo
              // this.terceroSave.get('IdAsesorExterno')?.setValue(this.terceroSave.value.IdAsesorExterno);
              if (this.AsessorNecesarioMarca && this.terceroSave.value.IdAsesorExterno === '') {
                this.notif.onWarning('Advertencia', 'El asesor externo es obligatorio.');
              } else {
                    $('#financieroTab').removeClass('disableTab');
                    $('#basicoTab').removeClass('disableTab');
                    let data : string | null = localStorage.getItem('Data');
                    const dataLocal = JSON.parse(window.atob(data == null ? "": data));
                    this.basicoSave.get('MadreCabezaFamilia')?.setValue(this.basicosFrom.value.amaCasa);
                    this.basicoSave.get('IdTipoVivienda')?.setValue(this.basicosFrom.value.tipoVivienda);
                    this.viviendaSeleccionada = this.basicosFrom.value.tipoVivienda;
                     if (this.basicosFrom.value.estrato === null || this.basicosFrom.value.estrato === undefined) {
                        this.basicoSave.get('Estrato')?.setValue('0');
                      } else {
                      this.basicoSave.get('Estrato')?.setValue(this.basicosFrom.value.estrato);
                      }
                    if (this.basicosFrom.value.viveDesde !== null && this.basicosFrom.value.viveDesde !== undefined) {
                      this.basicoSave.get('Fecha_Vive')?.setValue(formatDate(this.basicosFrom.value.viveDesde, 'yyyy-MM-dd', 'en'));
                    } else {
                      this.basicoSave.get('Fecha_Vive')?.setValue('01-01-1900');
                    }
                    this.basicoSave.get('IdEstadoCivil')?.setValue(this.basicosFrom.value.estadoCivil);
                    this.estadoCivilSeleccionado = +this.basicosFrom.value.estadoCivil;
                    localStorage.setItem('estadoSeleccionado', this.basicosFrom.value.estadoCivil);
                    this.basicoSave.get('IdRelacion')?.setValue(this.basicosFrom.value.tipoCliente);
                    this.basicoSave.get('NumHijos')?.setValue(this.basicosFrom.value.numHijos);
                    this.basicoSave.get('NumHijosEstudian')?.setValue(this.basicosFrom.value.numHijosEstudian);
                    this.basicoSave.get('Carnet')?.setValue(0);
                    this.basicoSave.get('IdEstado')?.setValue(this.basicosFrom.value.estado);
                    this.basicoSave.get('IdNivelEstudio')?.setValue(this.basicosFrom.value.nivelEstudio);
                    if (this.basicosFrom.value.profesion !== '' && this.basicosFrom.value.profesion !== null) {
                      this.basicoSave.get('IdTituloProfesional')?.setValue(this.basicosFrom.value.profesion.Clase);
                    } else {
                      this.basicoSave.get('IdTituloProfesional')?.setValue(0);
                    }
                    if (this.basicosFrom.value.actividad.Id !== undefined) {
                      this.basicoSave.get('IdActividadEconomica')?.setValue(this.basicosFrom.value.actividad.Id);
                    } else {
                      this.basicoSave.get('IdActividadEconomica')?.setValue(0);
                    }
                    this.basicoSave.get('Dependiente')?.setValue(0); // preguntar si se deja o se quita
                    this.basicoSave.get('IdSegmento')?.setValue(this.basicosFrom.value.setSegmento);
                    this.basicoSave.get('IdTipoOcupacion')?.setValue(this.basicosFrom.value.tipoOcupacion);
                    this.basicoSave.get('IdTipoEmpleo')?.setValue(this.basicosFrom.value.tipoEmpleo);
                    localStorage.setItem('laborSeleccionada', this.basicosFrom.value.tipoEmpleo);
                    this.basicoSave.get('NumPersCargo')?.setValue(this.basicosFrom.value.numeroPersonasCargo);
                    console.log('Informacion del tutor seteado - ' + this.infoTutor);
                    if (this.infoTutor !== null && this.infoTutor !== undefined) {
                      if (this.infoTutor.LngTercero !== undefined) {
                        this.basicoSave.get('IdTutor')?.setValue(this.infoTutor.LngTercero);
                      } else {
                        this.basicoSave.get('IdTutor')?.setValue(this.infoTutor.lngTercero);
                      }
                    }
                    this.basicoSave.get('IdEPS')?.setValue(this.BasicosEdit.value.EditEPS.IdEPS);
                    this.basicoSave.get('IdMotivoIngreso')?.setValue(this.basicosFrom.value.motivoIngreso);
                    this.basicoSave.get('PersPEP')?.setValue(this.basicosFrom.value.publica);
                    this.basicoSave.get('FechaCreacion')?.setValue(formatDate(new Date(), 'yyyy-MM-dd hh:mm:ss', 'en'));
                    this.basicoSave.get('IdAsesorCrea')?.setValue(dataLocal.IdAsesor);
                    this.basicoSave.get('FechaMod')?.setValue(null);
                    this.basicoSave.get('IdAsesorMod')?.setValue(dataLocal.IdAsesor);
                    this.basicoSave.get('FechaRetiro')?.setValue(null);
                    this.basicoSave.get('IdAsesorRetira')?.setValue(0);
                    this.basicoSave.get('IdOficina')?.setValue(+dataLocal.NumeroOficina);
                    this.basicoSave.get('MetodoConocio')?.setValue(this.basicosFrom.value.metodo);
                    if (this.basicosFrom.value.otroPor !== null && this.basicosFrom.value.otroPor !== undefined &&
                      this.basicosFrom.value.otroPor !== '') {
                      this.basicoSave.get('OtroPor')?.setValue(this.basicosFrom.value.otroPor.toLowerCase());
                    } else {
                      this.basicoSave.get('OtroPor')?.setValue(this.basicosFrom.value.otroPor);
                }
                    this.basicoSave.get('NombreArrendador')?.setValue(this.basicosFrom.value.nombreArrendador);
                    this.basicoSave.get('TelefonoArrendador')?.setValue(this.basicosFrom.value.telefonoArrendador);
                    this.basicoSave.get('IdSegmento')?.setValue(this.basicosFrom.value.segmento);
                    this.terceroSave.get('NumeroDocumento')?.setValue(this.basicosFrom.value.numeroDocumento);
                    this.terceroSave.get('IdTipoDocumento')?.setValue(this.basicosFrom.value.tipoDocumento);
                     if (this.basicosFrom.value.ciudadExpedicion !== null && this.basicosFrom.value.ciudadExpedicion !== undefined) {
                        this.terceroSave.get('IdCiudadExpeDto')?.setValue(+this.basicosFrom.value.ciudadExpedicion);
                      } else {
                        this.terceroSave.get('IdCiudadExpeDto')?.setValue(0);
                      }
                      if (this.basicosFrom.value.ciudadNacimiento !== null && this.basicosFrom.value.ciudadNacimiento !== undefined) {
                        this.terceroSave.get('IdCiudadNto')?.setValue(+this.basicosFrom.value.ciudadNacimiento);
                      } else {
                        this.terceroSave.get('IdCiudadNto')?.setValue(0);
                      }
                    // this.terceroSave.get('IdCiudadNto')?.setValue(+this.basicosFrom.value.ciudadNacimiento);
                     if (this.basicosFrom.value.paisExpedicion !== null && this.basicosFrom.value.paisExpedicion !== undefined) {
                         this.terceroSave.get('IdPaisExpe')?.setValue(+this.basicosFrom.value.paisExpedicion);
                      } else {
                        this.terceroSave.get('IdPaisExpe')?.setValue(0);
                      }

                      if (this.basicosFrom.value.paisNacimiento !== null && this.basicosFrom.value.paisNacimiento !== undefined) {
                        this.terceroSave.get('IdPaisNto')?.setValue(+this.basicosFrom.value.paisNacimiento);
                      } else {
                        this.terceroSave.get('IdPaisNto')?.setValue(0);
                      }
                     if (this.basicosFrom.value.fechaNacimiento !== null && this.basicosFrom.value.fechaNacimiento !== undefined) {
                      this.terceroSave.get('FechaNacimiento')?.setValue(this.basicosFrom.value.fechaNacimiento);
                      } else {
                      this.terceroSave.get('FechaNacimiento')?.setValue('01-01-1900');
                      }
                      if (this.basicosFrom.value.fechaExpedicion !== null && this.basicosFrom.value.fechaExpedicion !== undefined) {
                        this.terceroSave.get('FechaExpDocumento')?.setValue(this.basicosFrom.value.fechaExpedicion);
                      } else {
                        this.terceroSave.get('FechaExpDocumento')?.setValue('01-01-1900');
                      }
                    this.terceroSave.get('PrimerNombre')?.setValue(this.basicosFrom.value.primerNombre.charAt(0).toUpperCase() + 
                    this.basicosFrom.value.primerNombre.slice(1).toLowerCase());
                    this.terceroSave.get('SegundoNombre')?.setValue(this.basicosFrom.value.segundoNombre.charAt(0).toUpperCase() + 
                    this.basicosFrom.value.segundoNombre.slice(1).toLowerCase());
                    this.terceroSave.get('PrimerApellido')?.setValue(this.basicosFrom.value.primerApellido.charAt(0).toUpperCase() + 
                    this.basicosFrom.value.primerApellido.slice(1).toLowerCase());
                    this.terceroSave.get('SegundoApellido')?.setValue(this.basicosFrom.value.segundoApellido.charAt(0).toUpperCase() + 
                    this.basicosFrom.value.segundoApellido.slice(1).toLowerCase());

                    this.terceroSave.get('IdGenero')?.setValue(this.basicosFrom.value.genero);
                    this.terceroSave.get('IdEstado')?.setValue(this.basicosFrom.value.estado);
                    this.terceroSave.get('IdAsesorExterno')?.setValue(this.terceroSave.value.IdAsesorExterno);
                    this.allItemsFormSaves.asociadosNaturalesDto = {};
                    this.allItemsFormSaves.asociadosNaturalesDto = this.basicoSave.value;
                    this.allItemsFormSaves.tercerosDto = this.terceroSave.value;
                    this.allItemsFormSaves.asociadosNaturalesDto = this.basicoSave.value;
                    this.allItemsFormSaves.tercerosDto = this.terceroSave.value;
                    this.allItemsFormBasico.push(this.basicoSave.value);
                    this.basicosFormSet.get('asociadosNaturalesDto')?.setValue(this.basicoSave.value);
                    this.allItemsFormSave.push(this.basicosFormSet.value);
                    $('#financieroTab').removeClass('disableTab');
                    $('#basicoTab').removeClass('activar');
                    $('#basicoTab').removeClass('active');
                    this.botonBasicoSiguiente.nativeElement.click();
                    this.devolverTab(2);
                    this.VolverArriba();
                    $('#basicoTab').removeClass('disableTab');
              }
            }
          } else {
            this.notif.onWarning('Advertencia', 'El Otro/Por es obligatorio.');
          }
        } else {
          if (this.AsessorNecesario !== null) {
            Swal.fire({ // Se pregunta si necesita asesor externo
              title: 'Advertencia',
              text: '',
              html: '¿ el registro requiere un asesor externo ? ',
              icon: 'warning',
              showCancelButton: true,
              confirmButtonText: 'Si',
              cancelButtonText: 'No',
              confirmButtonColor: 'rgb(13,165,80)',
              cancelButtonColor: 'rgb(160,0,87)',
              allowOutsideClick: false,
              allowEscapeKey: false
              // tslint:disable-next-line:no-shadowed-variable
            }).then((results) => {
              if (results.value) { // si lo necesita lo devuelve al formulario
                this.MostrarAsesorExterno = true;
                this.disableAsesor = null;
                this.AsessorNecesario = null;
                this.AsessorNecesarioMarca = true;
                this.AnteriorTab.nativeElement.click();
                // Mostrar el campo asesor en rojo y no dejarlo ir si no lo llena
                $('#financieroTab').addClass('disableTab');
                this.disableTabFinanciero = false;
                this.devolverTab(1);
                $('#basicoTab').removeClass('disableTab');
              } else { // si no necesita asesor externo pregunta si el registro es para un credito
                this.AsessorNecesarioMarca = false;
                this.AsessorNecesario = null;
                    $('#financieroTab').removeClass('disableTab');
                    $('#basicoTab').removeClass('disableTab');
                    let data : string | null = localStorage.getItem('Data');
                    const dataLocal = JSON.parse(window.atob(data == null ? "": data));
                    this.basicoSave.get('MadreCabezaFamilia')?.setValue(this.basicosFrom.value.amaCasa);
                    this.basicoSave.get('IdTipoVivienda')?.setValue(this.basicosFrom.value.tipoVivienda);
                    this.viviendaSeleccionada = this.basicosFrom.value.tipoVivienda;
                     if (this.basicosFrom.value.estrato === null || this.basicosFrom.value.estrato === undefined) {
                        this.basicoSave.get('Estrato')?.setValue('0');
                      } else {
                      this.basicoSave.get('Estrato')?.setValue(this.basicosFrom.value.estrato);
                      }
                      if (this.basicosFrom.value.viveDesde !== null && this.basicosFrom.value.viveDesde !== undefined) {
                      this.basicoSave.get('Fecha_Vive')?.setValue(formatDate(this.basicosFrom.value.viveDesde, 'yyyy-MM-dd', 'en'));
                    } else {
                      this.basicoSave.get('Fecha_Vive')?.setValue('01-01-1900');
                    }
                    this.basicoSave.get('IdEstadoCivil')?.setValue(this.basicosFrom.value.estadoCivil);
                    this.estadoCivilSeleccionado = +this.basicosFrom.value.estadoCivil;
                    localStorage.setItem('estadoSeleccionado', this.basicosFrom.value.estadoCivil);
                    this.basicoSave.get('IdRelacion')?.setValue(this.basicosFrom.value.tipoCliente);
                    this.basicoSave.get('NumHijos')?.setValue(this.basicosFrom.value.numHijos);
                    this.basicoSave.get('NumHijosEstudian')?.setValue(this.basicosFrom.value.numHijosEstudian);
                    this.basicoSave.get('Carnet')?.setValue(0);
                    this.basicoSave.get('IdEstado')?.setValue(this.basicosFrom.value.estado);
                    this.basicoSave.get('IdNivelEstudio')?.setValue(this.basicosFrom.value.nivelEstudio);
                    if (this.basicosFrom.value.profesion !== '' && this.basicosFrom.value.profesion !== null) {
                      this.basicoSave.get('IdTituloProfesional')?.setValue(this.basicosFrom.value.profesion.Clase);
                    } else {
                      this.basicoSave.get('IdTituloProfesional')?.setValue(0);
                    }
                    if (this.basicosFrom.value.actividad.Id !== undefined) {
                      this.basicoSave.get('IdActividadEconomica')?.setValue(this.basicosFrom.value.actividad.Id);
                    } else {
                      this.basicoSave.get('IdActividadEconomica')?.setValue(0);
                    }
                    this.basicoSave.get('Dependiente')?.setValue(0); // preguntar si se deja o se quita
                    this.basicoSave.get('IdSegmento')?.setValue(this.basicosFrom.value.setSegmento);
                    this.basicoSave.get('IdTipoOcupacion')?.setValue(this.basicosFrom.value.tipoOcupacion);
                    this.basicoSave.get('IdTipoEmpleo')?.setValue(this.basicosFrom.value.tipoEmpleo);
                    localStorage.setItem('laborSeleccionada', this.basicosFrom.value.tipoEmpleo);
                    this.basicoSave.get('NumPersCargo')?.setValue(this.basicosFrom.value.numeroPersonasCargo);
                    console.log('Informacion del tutor seteado - ' + this.infoTutor);
                    if (this.infoTutor !== null && this.infoTutor !== undefined) {
                      if (this.infoTutor.LngTercero !== undefined) {
                        this.basicoSave.get('IdTutor')?.setValue(this.infoTutor.LngTercero);
                      } else {
                        this.basicoSave.get('IdTutor')?.setValue(this.infoTutor.lngTercero);
                      }
                    }
                    this.basicoSave.get('IdEPS')?.setValue(this.BasicosEdit.value.EditEPS.IdEPS);
                    this.basicoSave.get('IdMotivoIngreso')?.setValue(this.basicosFrom.value.motivoIngreso);
                    this.basicoSave.get('PersPEP')?.setValue(this.basicosFrom.value.publica);
                    this.basicoSave.get('FechaCreacion')?.setValue(formatDate(new Date(), 'yyyy-MM-dd hh:mm:ss', 'en'));
                    this.basicoSave.get('IdAsesorCrea')?.setValue(dataLocal.IdAsesor);
                    this.basicoSave.get('FechaMod')?.setValue(null);
                    this.basicoSave.get('IdAsesorMod')?.setValue(dataLocal.IdAsesor);
                    this.basicoSave.get('FechaRetiro')?.setValue(null);
                    this.basicoSave.get('IdAsesorRetira')?.setValue(0);
                    this.basicoSave.get('IdOficina')?.setValue(+dataLocal.NumeroOficina);
                    this.basicoSave.get('MetodoConocio')?.setValue(this.basicosFrom.value.metodo);
                    if (this.basicosFrom.value.otroPor !== null && this.basicosFrom.value.otroPor !== undefined &&
                      this.basicosFrom.value.otroPor !== '') {
                      this.basicoSave.get('OtroPor')?.setValue(this.basicosFrom.value.otroPor.toLowerCase());
                    } else {
                      this.basicoSave.get('OtroPor')?.setValue(this.basicosFrom.value.otroPor);
                }
                    this.basicoSave.get('NombreArrendador')?.setValue(this.basicosFrom.value.nombreArrendador);
                    this.basicoSave.get('TelefonoArrendador')?.setValue(this.basicosFrom.value.telefonoArrendador);
                    this.basicoSave.get('IdSegmento')?.setValue(this.basicosFrom.value.segmento);
                    this.terceroSave.get('NumeroDocumento')?.setValue(this.basicosFrom.value.numeroDocumento);
                    this.terceroSave.get('IdTipoDocumento')?.setValue(this.basicosFrom.value.tipoDocumento);
                     if (this.basicosFrom.value.ciudadExpedicion !== null && this.basicosFrom.value.ciudadExpedicion !== undefined) {
                        this.terceroSave.get('IdCiudadExpeDto')?.setValue(+this.basicosFrom.value.ciudadExpedicion);
                      } else {
                        this.terceroSave.get('IdCiudadExpeDto')?.setValue(0);
                      }
                      if (this.basicosFrom.value.ciudadNacimiento !== null && this.basicosFrom.value.ciudadNacimiento !== undefined) {
                        this.terceroSave.get('IdCiudadNto')?.setValue(+this.basicosFrom.value.ciudadNacimiento);
                      } else {
                        this.terceroSave.get('IdCiudadNto')?.setValue(0);
                      }
                       if (this.basicosFrom.value.paisExpedicion !== null && this.basicosFrom.value.paisExpedicion !== undefined) {
                         this.terceroSave.get('IdPaisExpe')?.setValue(+this.basicosFrom.value.paisExpedicion);
                      } else {
                        this.terceroSave.get('IdPaisExpe')?.setValue(0);
                      }

                      if (this.basicosFrom.value.paisNacimiento !== null && this.basicosFrom.value.paisNacimiento !== undefined) {
                        this.terceroSave.get('IdPaisNto')?.setValue(+this.basicosFrom.value.paisNacimiento);
                      } else {
                        this.terceroSave.get('IdPaisNto')?.setValue(0);
                      }
                     if (this.basicosFrom.value.fechaNacimiento !== null && this.basicosFrom.value.fechaNacimiento !== undefined) {
                      this.terceroSave.get('FechaNacimiento')?.setValue(this.basicosFrom.value.fechaNacimiento);
                      } else {
                      this.terceroSave.get('FechaNacimiento')?.setValue('01-01-1900');
                      }
                      if (this.basicosFrom.value.fechaExpedicion !== null && this.basicosFrom.value.fechaExpedicion !== undefined) {
                        this.terceroSave.get('FechaExpDocumento')?.setValue(this.basicosFrom.value.fechaExpedicion);
                      } else {
                        this.terceroSave.get('FechaExpDocumento')?.setValue('01-01-1900');
                      }
                    this.terceroSave.get('PrimerNombre')?.setValue(this.basicosFrom.value.primerNombre.charAt(0).toUpperCase() + 
                    this.basicosFrom.value.primerNombre.slice(1).toLowerCase());
                    this.terceroSave.get('SegundoNombre')?.setValue(this.basicosFrom.value.segundoNombre.charAt(0).toUpperCase() + 
                    this.basicosFrom.value.segundoNombre.slice(1).toLowerCase());
                    this.terceroSave.get('PrimerApellido')?.setValue(this.basicosFrom.value.primerApellido.charAt(0).toUpperCase() + 
                    this.basicosFrom.value.primerApellido.slice(1).toLowerCase());
                    this.terceroSave.get('SegundoApellido')?.setValue(this.basicosFrom.value.segundoApellido.charAt(0).toUpperCase() + 
                    this.basicosFrom.value.segundoApellido.slice(1).toLowerCase());
                    this.terceroSave.get('IdGenero')?.setValue(this.basicosFrom.value.genero);
                    this.terceroSave.get('IdEstado')?.setValue(this.basicosFrom.value.estado);
                    this.terceroSave.get('IdAsesorExterno')?.setValue(this.terceroSave.value.IdAsesorExterno);
                    this.allItemsFormSaves.asociadosNaturalesDto = {};
                    this.allItemsFormSaves.asociadosNaturalesDto = this.basicoSave.value;
                    this.allItemsFormSaves.tercerosDto = this.terceroSave.value;
                    this.allItemsFormSaves.asociadosNaturalesDto = this.basicoSave.value;
                    this.allItemsFormSaves.tercerosDto = this.terceroSave.value;
                    this.allItemsFormBasico.push(this.basicoSave.value);
                    this.basicosFormSet.get('asociadosNaturalesDto')?.setValue(this.basicoSave.value);
                    this.allItemsFormSave.push(this.basicosFormSet.value);
                    $('#financieroTab').removeClass('disableTab');
                    $('#basicoTab').removeClass('activar');
                    $('#basicoTab').removeClass('active');
                    this.botonBasicoSiguiente.nativeElement.click();
                    this.devolverTab(2);
                    this.VolverArriba();
                    $('#basicoTab').removeClass('disableTab');
              }

            });
          } else { // si ya ingreso el asesor se pregunta de nuevo
            if (this.AsessorNecesarioMarca && this.terceroSave.value.IdAsesorExterno === '') {
              this.notif.onWarning('Advertencia', 'El asesor externo es obligatorio.');
            } else {
                  $('#financieroTab').removeClass('disableTab');
                  $('#basicoTab').removeClass('disableTab');
                  let data : string | null = localStorage.getItem('Data');
                  const dataLocal = JSON.parse(window.atob(data == null ? "": data));
                  this.basicoSave.get('MadreCabezaFamilia')?.setValue(this.basicosFrom.value.amaCasa);
                  this.basicoSave.get('IdTipoVivienda')?.setValue(this.basicosFrom.value.tipoVivienda);
                  this.viviendaSeleccionada = this.basicosFrom.value.tipoVivienda;
                   if (this.basicosFrom.value.estrato === null || this.basicosFrom.value.estrato === undefined) {
                      this.basicoSave.get('Estrato')?.setValue('0');
                    } else {
                    this.basicoSave.get('Estrato')?.setValue(this.basicosFrom.value.estrato);
                    }
                    if (this.basicosFrom.value.viveDesde !== null && this.basicosFrom.value.viveDesde !== undefined) {
                      this.basicoSave.get('Fecha_Vive')?.setValue(formatDate(this.basicosFrom.value.viveDesde, 'yyyy-MM-dd', 'en'));
                    } else {
                      this.basicoSave.get('Fecha_Vive')?.setValue('01-01-1900');
                    }
                  this.basicoSave.get('IdEstadoCivil')?.setValue(this.basicosFrom.value.estadoCivil);
                  this.estadoCivilSeleccionado = +this.basicosFrom.value.estadoCivil;
                  localStorage.setItem('estadoSeleccionado', this.basicosFrom.value.estadoCivil);
                  this.basicoSave.get('IdRelacion')?.setValue(this.basicosFrom.value.tipoCliente);
                  this.basicoSave.get('NumHijos')?.setValue(this.basicosFrom.value.numHijos);
                  this.basicoSave.get('NumHijosEstudian')?.setValue(this.basicosFrom.value.numHijosEstudian);
                  this.basicoSave.get('Carnet')?.setValue(0);
                  this.basicoSave.get('IdEstado')?.setValue(this.basicosFrom.value.estado);
                  this.basicoSave.get('IdNivelEstudio')?.setValue(this.basicosFrom.value.nivelEstudio);
                  if (this.basicosFrom.value.profesion !== '' && this.basicosFrom.value.profesion !== null) {
                    this.basicoSave.get('IdTituloProfesional')?.setValue(this.basicosFrom.value.profesion.Clase);
                  } else {
                    this.basicoSave.get('IdTituloProfesional')?.setValue(0);
                  }
                  if (this.basicosFrom.value.actividad.Id !== undefined) {
                    this.basicoSave.get('IdActividadEconomica')?.setValue(this.basicosFrom.value.actividad.Id);
                  } else {
                    this.basicoSave.get('IdActividadEconomica')?.setValue(0);
                  }
                  this.basicoSave.get('Dependiente')?.setValue(0); // preguntar si se deja o se quita
                  this.basicoSave.get('IdSegmento')?.setValue(this.basicosFrom.value.setSegmento);
                  this.basicoSave.get('IdTipoOcupacion')?.setValue(this.basicosFrom.value.tipoOcupacion);
                  this.basicoSave.get('IdTipoEmpleo')?.setValue(this.basicosFrom.value.tipoEmpleo);
                  localStorage.setItem('laborSeleccionada', this.basicosFrom.value.tipoEmpleo);
                  this.basicoSave.get('NumPersCargo')?.setValue(this.basicosFrom.value.numeroPersonasCargo);
                  console.log('Informacion del tutor seteado - ' + this.infoTutor);
                  if (this.infoTutor !== null && this.infoTutor !== undefined) {
                    if (this.infoTutor.LngTercero !== undefined) {
                      this.basicoSave.get('IdTutor')?.setValue(this.infoTutor.LngTercero);
                    } else {
                      this.basicoSave.get('IdTutor')?.setValue(this.infoTutor.lngTercero);
                    }
                  }
                  this.basicoSave.get('IdEPS')?.setValue(this.BasicosEdit.value.EditEPS.IdEPS);
                  this.basicoSave.get('IdMotivoIngreso')?.setValue(this.basicosFrom.value.motivoIngreso);
                  this.basicoSave.get('PersPEP')?.setValue(this.basicosFrom.value.publica);
                  this.basicoSave.get('FechaCreacion')?.setValue(formatDate(new Date(), 'yyyy-MM-dd hh:mm:ss', 'en'));
                  this.basicoSave.get('IdAsesorCrea')?.setValue(dataLocal.IdAsesor);
                  this.basicoSave.get('FechaMod')?.setValue(null);
                  this.basicoSave.get('IdAsesorMod')?.setValue(dataLocal.IdAsesor);
                  this.basicoSave.get('FechaRetiro')?.setValue(null);
                  this.basicoSave.get('IdAsesorRetira')?.setValue(0);
                  this.basicoSave.get('IdOficina')?.setValue(+dataLocal.NumeroOficina);
                  this.basicoSave.get('MetodoConocio')?.setValue(this.basicosFrom.value.metodo);
                  if (this.basicosFrom.value.otroPor !== null && this.basicosFrom.value.otroPor !== undefined &&
                    this.basicosFrom.value.otroPor !== '') {
                    this.basicoSave.get('OtroPor')?.setValue(this.basicosFrom.value.otroPor.toLowerCase());
                  } else {
                    this.basicoSave.get('OtroPor')?.setValue(this.basicosFrom.value.otroPor);
                  }
                  this.basicoSave.get('NombreArrendador')?.setValue(this.basicosFrom.value.nombreArrendador);
                  this.basicoSave.get('TelefonoArrendador')?.setValue(this.basicosFrom.value.telefonoArrendador);
                  this.basicoSave.get('IdSegmento')?.setValue(this.basicosFrom.value.segmento);
                  this.terceroSave.get('NumeroDocumento')?.setValue(this.basicosFrom.value.numeroDocumento);
                  this.terceroSave.get('IdTipoDocumento')?.setValue(this.basicosFrom.value.tipoDocumento);
                   if (this.basicosFrom.value.ciudadExpedicion !== null && this.basicosFrom.value.ciudadExpedicion !== undefined) {
                        this.terceroSave.get('IdCiudadExpeDto')?.setValue(+this.basicosFrom.value.ciudadExpedicion);
                      } else {
                        this.terceroSave.get('IdCiudadExpeDto')?.setValue(0);
                      }
                      if (this.basicosFrom.value.ciudadNacimiento !== null && this.basicosFrom.value.ciudadNacimiento !== undefined) {
                        this.terceroSave.get('IdCiudadNto')?.setValue(+this.basicosFrom.value.ciudadNacimiento);
                      } else {
                        this.terceroSave.get('IdCiudadNto')?.setValue(0);
                      }
                       if (this.basicosFrom.value.paisExpedicion !== null && this.basicosFrom.value.paisExpedicion !== undefined) {
                         this.terceroSave.get('IdPaisExpe')?.setValue(+this.basicosFrom.value.paisExpedicion);
                      } else {
                        this.terceroSave.get('IdPaisExpe')?.setValue(0);
                      }

                      if (this.basicosFrom.value.paisNacimiento !== null && this.basicosFrom.value.paisNacimiento !== undefined) {
                        this.terceroSave.get('IdPaisNto')?.setValue(+this.basicosFrom.value.paisNacimiento);
                      } else {
                        this.terceroSave.get('IdPaisNto')?.setValue(0);
                      }
                   if (this.basicosFrom.value.fechaNacimiento !== null && this.basicosFrom.value.fechaNacimiento !== undefined) {
                      this.terceroSave.get('FechaNacimiento')?.setValue(this.basicosFrom.value.fechaNacimiento);
                      } else {
                      this.terceroSave.get('FechaNacimiento')?.setValue('01-01-1900');
                      }
                      if (this.basicosFrom.value.fechaExpedicion !== null && this.basicosFrom.value.fechaExpedicion !== undefined) {
                        this.terceroSave.get('FechaExpDocumento')?.setValue(this.basicosFrom.value.fechaExpedicion);
                      } else {
                        this.terceroSave.get('FechaExpDocumento')?.setValue('01-01-1900');
                      }
                  this.terceroSave.get('PrimerNombre')?.setValue(this.basicosFrom.value.primerNombre.charAt(0).toUpperCase() + 
                  this.basicosFrom.value.primerNombre.slice(1).toLowerCase());
                  this.terceroSave.get('SegundoNombre')?.setValue(this.basicosFrom.value.segundoNombre.charAt(0).toUpperCase() + 
                  this.basicosFrom.value.segundoNombre.slice(1).toLowerCase());
                  this.terceroSave.get('PrimerApellido')?.setValue(this.basicosFrom.value.primerApellido.charAt(0).toUpperCase() + 
                  this.basicosFrom.value.primerApellido.slice(1).toLowerCase());
                  this.terceroSave.get('SegundoApellido')?.setValue(this.basicosFrom.value.segundoApellido.charAt(0).toUpperCase() + 
                  this.basicosFrom.value.segundoApellido.slice(1).toLowerCase());
                  this.terceroSave.get('IdGenero')?.setValue(this.basicosFrom.value.genero);
                  this.terceroSave.get('IdEstado')?.setValue(this.basicosFrom.value.estado);
                  this.terceroSave.get('IdAsesorExterno')?.setValue(this.terceroSave.value.IdAsesorExterno);
                  this.allItemsFormSaves.asociadosNaturalesDto = {};
                  this.allItemsFormSaves.asociadosNaturalesDto = this.basicoSave.value;
                  this.allItemsFormSaves.tercerosDto = this.terceroSave.value;
                  this.allItemsFormSaves.asociadosNaturalesDto = this.basicoSave.value;
                  this.allItemsFormSaves.tercerosDto = this.terceroSave.value;
                  this.allItemsFormBasico.push(this.basicoSave.value);
                  this.basicosFormSet.get('asociadosNaturalesDto')?.setValue(this.basicoSave.value);
                  this.allItemsFormSave.push(this.basicosFormSet.value);
                  $('#financieroTab').removeClass('disableTab');
                  $('#basicoTab').removeClass('activar');
                  $('#basicoTab').removeClass('active');
                  this.botonBasicoSiguiente.nativeElement.click();
                  this.devolverTab(2);
                  this.VolverArriba();
                  $('#basicoTab').removeClass('disableTab');
            }
          }

        }
      }
      //#endregion

    } else if (operacion === '1') { // se edita el registro natural
      const tipoCliente = +this.basicosFrom.get('tipoCliente')?.value;
      const ocupacion = +this.basicosFrom.get('tipoOcupacion')?.value;
      const profesion = this.basicosFrom.get('profesion')?.value;
      const tieneACargo = this.basicosFrom.get('personasCargo')?.value;
      const numACargo = this.basicosFrom.get('numeroPersonasCargo')?.value;
      if (tieneACargo && (numACargo === 0 || numACargo === null)) {
        this.notif.onWarning('Advertencia',
          'El número de personas a cargo debe ser mayor a cero (0).');
      } else if (profesion === '' || profesion === null &&
        (ocupacion === 42 || ocupacion === 57 || ocupacion === 31 || ocupacion === 32)) {
        this.notif.onWarning('Advertencia',
          'El campo profesión es obligatorio por el tipo de ocupación seleccionado.');
      } else if (this.infoTutor === undefined && tipoCliente === 10) {
        this.notif.onWarning('Advertencia',
          'Debe agregar un tutor para este tipo de cliente.');
      } else {
        const results = this.basicosFrom.get('metodo')?.value;
        if (results === '7' || results === '6') {
          if (this.basicosFrom.get('otroPor')?.value !== null && this.basicosFrom.get('otroPor')?.value !== undefined) {
            //#region  Metodo Editar
            let data : string | null = localStorage.getItem('Data');
            const dataLocal = JSON.parse(window.atob(data == null ? "": data));
            this.basicoSave.get('IdNatural')?.setValue(this.basicosFrom.value.idNatural);
            this.basicoSave.get('IdTercero')?.setValue(tercerEdit);
            this.basicoSave.get('MadreCabezaFamilia')?.setValue(this.basicosFrom.value.amaCasa);
            this.basicoSave.get('IdTipoVivienda')?.setValue(this.basicosFrom.value.tipoVivienda);
            this.viviendaSeleccionada = this.basicosFrom.value.tipoVivienda;
             if (this.basicosFrom.value.estrato === null || this.basicosFrom.value.estrato === undefined) {
              this.basicoSave.get('Estrato')?.setValue('0');
            } else {
            this.basicoSave.get('Estrato')?.setValue(this.basicosFrom.value.estrato);
            }
              if (this.basicosFrom.value.viveDesde !== null && this.basicosFrom.value.viveDesde !== undefined) {
                      this.basicoSave.get('Fecha_Vive')?.setValue(formatDate(this.basicosFrom.value.viveDesde, 'yyyy-MM-dd', 'en'));
                    } else {
                      this.basicoSave.get('Fecha_Vive')?.setValue('01-01-1900');
                    }
            this.basicoSave.get('IdEstadoCivil')?.setValue(this.basicosFrom.value.estadoCivil);
            this.estadoCivilSeleccionado = +this.basicosFrom.value.estadoCivil;
            localStorage.setItem('estadoSeleccionado', this.basicosFrom.value.estadoCivil);
            this.basicoSave.get('IdRelacion')?.setValue(this.basicosFrom.value.tipoCliente);
            this.basicoSave.get('NumHijos')?.setValue(this.basicosFrom.value.numHijos);
            this.basicoSave.get('NumHijosEstudian')?.setValue(this.basicosFrom.value.numHijosEstudian);
            this.basicoSave.get('Carnet')?.setValue(0);
            this.basicoSave.get('IdEstado')?.setValue(this.basicosFrom.value.estado);
            this.basicoSave.get('IdNivelEstudio')?.setValue(this.basicosFrom.value.nivelEstudio);
            if (this.basicosFrom.value.profesion !== null) {
              if (this.basicosFrom.value.profesion.Clase !== undefined && this.basicosFrom.value.profesion.Clase !== null) {
                this.basicoSave.get('IdTituloProfesional')?.setValue(this.basicosFrom.value.profesion.Clase);
              } else {
                this.basicoSave.get('IdTituloProfesional')?.setValue(this.dataProfesionMapper.Clase);
              }
            } else {
              this.basicoSave.get('IdTituloProfesional')?.setValue('');
            }
            if (this.basicosFrom.value.actividad.Id !== undefined) {
              this.basicoSave.get('IdActividadEconomica')?.setValue(this.basicosFrom.value.actividad.Id);
            } else {
              this.basicoSave.get('IdActividadEconomica')?.setValue(this.BasicosEdit.value.EditActividad.Id);
            }
            this.basicoSave.get('Dependiente')?.setValue(0); // preguntar si se deja o se quita
            this.basicoSave.get('IdSegmento')?.setValue(this.basicosFrom.value.setSegmento);
            this.basicoSave.get('IdTipoOcupacion')?.setValue(this.basicosFrom.value.tipoOcupacion);
            this.basicoSave.get('IdTipoEmpleo')?.setValue(this.basicosFrom.value.tipoEmpleo);
            localStorage.setItem('laborSeleccionada', this.basicosFrom.value.tipoEmpleo);
            this.basicoSave.get('NumPersCargo')?.setValue(this.basicosFrom.value.numeroPersonasCargo);
            console.log('Informacion del tutor seteado - ' + this.infoTutor);
            if (this.infoTutor !== null && this.infoTutor !== undefined) {
              if (this.infoTutor.LngTercero !== undefined) {
                this.basicoSave.get('IdTutor')?.setValue(this.infoTutor.LngTercero);
              } else {
                this.basicoSave.get('IdTutor')?.setValue(this.infoTutor.lngTercero);
              }
            }
            if (this.BasicosEdit.value.EditEPS !== null) {
              this.basicoSave.get('IdEPS')?.setValue(this.BasicosEdit.value.EditEPS.IdEPS);
            } else {
              this.basicoSave.get('IdEPS')?.setValue(0);
            }
            this.basicoSave.get('IdMotivoIngreso')?.setValue(this.basicosFrom.value.motivoIngreso);
            this.basicoSave.get('PersPEP')?.setValue(this.basicosFrom.value.publica);
            this.basicoSave.get('FechaCreacion')?.setValue(this.fechaCreacionNatural);
            this.basicoSave.get('IdAsesorCrea')?.setValue(this.CedulaAsesor);
            this.basicoSave.get('FechaMod')?.setValue(null);
            this.basicoSave.get('IdAsesorMod')?.setValue(dataLocal.IdAsesor);
            this.basicoSave.get('IdAsesorRetira')?.setValue(0);
            this.basicoSave.get('MetodoConocio')?.setValue(this.basicosFrom.value.metodo);
            if (this.basicosFrom.value.otroPor !== null && this.basicosFrom.value.otroPor !== undefined &&
              this.basicosFrom.value.otroPor !== '') {
              this.basicoSave.get('OtroPor')?.setValue(this.basicosFrom.value.otroPor.toLowerCase());
            } else {
              this.basicoSave.get('OtroPor')?.setValue(this.basicosFrom.value.otroPor);
            }
            this.basicoSave.get('NombreArrendador')?.setValue(this.basicosFrom.value.nombreArrendador);
            this.basicoSave.get('TelefonoArrendador')?.setValue(this.basicosFrom.value.telefonoArrendador);
            this.basicoSave.get('IdSegmento')?.setValue(Number(localStorage.getItem('seg')));
            this.terceroSave.get('NumeroDocumento')?.setValue(this.basicosFrom.value.numeroDocumento);
            this.terceroSave.get('IdTipoDocumento')?.setValue(this.basicosFrom.value.tipoDocumento);

            if (this.basicosFrom.value.ciudadExpedicion !== undefined && this.basicosFrom.value.ciudadExpedicion !== null ) {
              if(this.basicosFrom.value.ciudadExpedicion.IdCiudad !== '' && this.basicosFrom.value.ciudadExpedicion.IdCiudad !== undefined 
            && this.basicosFrom.value.ciudadExpedicion.IdCiudad !== null) {
              this.terceroSave.get('IdCiudadExpeDto')?.setValue(this.basicosFrom.value.ciudadExpedicion.IdCiudad);
            } else {
              this.terceroSave.get('IdCiudadExpeDto')?.setValue(+this.basicosFrom.value.ciudadExpedicion);
            }
            } else {
              this.terceroSave.get('IdCiudadExpeDto')?.setValue(this.BasicosEdit.value.EditCiudadExp.IdCiudad);
            }
            
            
            if (this.basicosFrom.value.ciudadNacimiento !== undefined && this.basicosFrom.value.ciudadNacimiento !== null) {
                if(this.basicosFrom.value.ciudadNacimiento.IdCiudad !== '' && this.basicosFrom.value.ciudadNacimiento.IdCiudad !== undefined 
                  && this.basicosFrom.value.ciudadNacimiento.IdCiudad !== null) {
                  this.terceroSave.get('IdCiudadNto')?.setValue(this.basicosFrom.value.ciudadNacimiento.IdCiudad);
               } else {
                 this.terceroSave.get('IdCiudadNto')?.setValue(+this.basicosFrom.value.ciudadNacimiento);
               }
            } else {
              this.terceroSave.get('IdCiudadNto')?.setValue(this.BasicosEdit.value.EditCiudadNto.IdCiudad);
            }
            if (this.basicosFrom.value.paisExpedicion !== null && this.basicosFrom.value.paisExpedicion !== undefined) {
                this.terceroSave.get('IdPaisExpe')?.setValue(+this.basicosFrom.value.paisExpedicion);
            } else {
              this.terceroSave.get('IdPaisExpe')?.setValue(0);
            }

            if (this.basicosFrom.value.paisNacimiento !== null && this.basicosFrom.value.paisNacimiento !== undefined) {
              this.terceroSave.get('IdPaisNto')?.setValue(+this.basicosFrom.value.paisNacimiento);
            } else {
              this.terceroSave.get('IdPaisNto')?.setValue(0);
            }
            if (this.basicosFrom.value.fechaNacimiento !== null && this.basicosFrom.value.fechaNacimiento !== undefined) {
              this.terceroSave.get('FechaNacimiento')?.setValue(this.basicosFrom.value.fechaNacimiento);
            } else {
              this.terceroSave.get('FechaNacimiento')?.setValue('01-01-1900');
            }
            if (this.basicosFrom.value.fechaExpedicion !== null && this.basicosFrom.value.fechaExpedicion !== undefined) {
              this.terceroSave.get('FechaExpDocumento')?.setValue(this.basicosFrom.value.fechaExpedicion);
            } else {
              this.terceroSave.get('FechaExpDocumento')?.setValue('01-01-1900');
            }
            this.terceroSave.get('PrimerNombre')?.setValue(this.basicosFrom.value.primerNombre.charAt(0).toUpperCase() + 
            this.basicosFrom.value.primerNombre.slice(1).toLowerCase());
            this.terceroSave.get('SegundoNombre')?.setValue(this.basicosFrom.value.segundoNombre.charAt(0).toUpperCase() + 
            this.basicosFrom.value.segundoNombre.slice(1).toLowerCase());
            this.terceroSave.get('PrimerApellido')?.setValue(this.basicosFrom.value.primerApellido.charAt(0).toUpperCase() + 
            this.basicosFrom.value.primerApellido.slice(1).toLowerCase());
            this.terceroSave.get('SegundoApellido')?.setValue(this.basicosFrom.value.segundoApellido.charAt(0).toUpperCase() + 
            this.basicosFrom.value.segundoApellido.slice(1).toLowerCase());
            this.terceroSave.get('IdGenero')?.setValue(this.basicosFrom.value.genero);
            this.terceroSave.get('IdEstado')?.setValue(this.basicosFrom.value.estado);
            this.terceroSave.get('IdAsesorExterno')?.setValue(this.terceroSave.value.IdAsesorExterno);
            this.allItemsFormSaves.asociadosNaturalesDto = {};
            this.allItemsFormSaves.tercerosDto = {};
            this.allItemsEditNatural.asociadosNaturalesDto = this.basicoSave.value;
            this.allItemsEditNatural.tercerosDto = this.terceroSave.value;
            $('#financieroTab').removeClass('disableTab');
            this.disableTabFinanciero = true;
            $('#basicoTab').removeClass('activar');
            $('#basicoTab').removeClass('active');
            this.botonBasicoSiguiente.nativeElement.click();
            this.devolverTab(2);
            this.VolverArriba();
            //#endregion
          } else {
            this.notif.onWarning('Advertencia', 'El Otro/Por es obligatorio.');
          }
        } else {
          //#region  Metodo Editar
          let data : string | null = localStorage.getItem('Data');
          const dataLocal = JSON.parse(window.atob(data == null ? "": data));
          this.basicoSave.get('IdNatural')?.setValue(this.basicosFrom.value.idNatural);
          this.basicoSave.get('IdTercero')?.setValue(tercerEdit);

          this.basicoSave.get('MadreCabezaFamilia')?.setValue(this.basicosFrom.value.amaCasa);
          this.basicoSave.get('IdTipoVivienda')?.setValue(this.basicosFrom.value.tipoVivienda);
          this.viviendaSeleccionada = this.basicosFrom.value.tipoVivienda;
          if (this.basicosFrom.value.estrato === null || this.basicosFrom.value.estrato === undefined) {
            this.basicoSave.get('Estrato')?.setValue('0');
          } else {
          this.basicoSave.get('Estrato')?.setValue(this.basicosFrom.value.estrato);
          }
            if (this.basicosFrom.value.viveDesde !== null && this.basicosFrom.value.viveDesde !== undefined) {
                      this.basicoSave.get('Fecha_Vive')?.setValue(formatDate(this.basicosFrom.value.viveDesde, 'yyyy-MM-dd', 'en'));
                    } else {
                      this.basicoSave.get('Fecha_Vive')?.setValue('01-01-1900');
                    }
          this.basicoSave.get('IdEstadoCivil')?.setValue(this.basicosFrom.value.estadoCivil);
          this.estadoCivilSeleccionado = +this.basicosFrom.value.estadoCivil;
          localStorage.setItem('estadoSeleccionado', this.basicosFrom.value.estadoCivil);
          this.basicoSave.get('IdRelacion')?.setValue(this.basicosFrom.value.tipoCliente);
          this.basicoSave.get('NumHijos')?.setValue(this.basicosFrom.value.numHijos);
          this.basicoSave.get('NumHijosEstudian')?.setValue(this.basicosFrom.value.numHijosEstudian);
          this.basicoSave.get('Carnet')?.setValue(0);
          this.basicoSave.get('IdEstado')?.setValue(this.basicosFrom.value.estado);
          this.basicoSave.get('IdNivelEstudio')?.setValue(this.basicosFrom.value.nivelEstudio);
          if (this.basicosFrom.value.profesion !== null) {
            if (this.basicosFrom.value.profesion.Clase !== undefined && this.basicosFrom.value.profesion.Clase !== null) {
              this.basicoSave.get('IdTituloProfesional')?.setValue(this.basicosFrom.value.profesion.Clase);
            } else {
              this.basicoSave.get('IdTituloProfesional')?.setValue(this.dataProfesionMapper.Clase);
            }
          } else {
            this.basicoSave.get('IdTituloProfesional')?.setValue('');
          }
          if (this.basicosFrom.value.actividad.Id !== undefined) {
            this.basicoSave.get('IdActividadEconomica')?.setValue(this.basicosFrom.value.actividad.Id);
          } else {
            this.basicoSave.get('IdActividadEconomica')?.setValue(this.BasicosEdit.value.EditActividad.Id);
          }
          this.basicoSave.get('Dependiente')?.setValue(0); // preguntar si se deja o se quita
          this.basicoSave.get('IdSegmento')?.setValue(this.basicosFrom.value.setSegmento);
          this.basicoSave.get('IdTipoOcupacion')?.setValue(this.basicosFrom.value.tipoOcupacion);
          this.basicoSave.get('IdTipoEmpleo')?.setValue(this.basicosFrom.value.tipoEmpleo);
          localStorage.setItem('laborSeleccionada', this.basicosFrom.value.tipoEmpleo);
          this.basicoSave.get('NumPersCargo')?.setValue(this.basicosFrom.value.numeroPersonasCargo);
          if (this.infoTutor !== null && this.infoTutor !== undefined) {
            if (this.infoTutor.LngTercero !== undefined) {
              this.basicoSave.get('IdTutor')?.setValue(this.infoTutor.LngTercero);
            } else {
              this.basicoSave.get('IdTutor')?.setValue(this.infoTutor.lngTercero);
            }
          }
          if (this.BasicosEdit.value.EditEPS !== null) {
            this.basicoSave.get('IdEPS')?.setValue(this.BasicosEdit.value.EditEPS.IdEPS);
          } else {
            this.basicoSave.get('IdEPS')?.setValue(0);
          }
          this.basicoSave.get('IdMotivoIngreso')?.setValue(this.basicosFrom.value.motivoIngreso);
          this.basicoSave.get('PersPEP')?.setValue(this.basicosFrom.value.publica);
          this.basicoSave.get('FechaCreacion')?.setValue(this.fechaCreacionNatural);
          this.basicoSave.get('IdAsesorCrea')?.setValue(this.CedulaAsesor);
          this.basicoSave.get('FechaMod')?.setValue(null);
          this.basicoSave.get('IdAsesorMod')?.setValue(dataLocal.IdAsesor);
          this.basicoSave.get('IdAsesorRetira')?.setValue(0);
          this.basicoSave.get('MetodoConocio')?.setValue(this.basicosFrom.value.metodo);
          if (this.basicosFrom.value.otroPor !== null && this.basicosFrom.value.otroPor !== undefined &&
            this.basicosFrom.value.otroPor !== '') {
             this.basicoSave.get('OtroPor')?.setValue(this.basicosFrom.value.otroPor.toLowerCase());
          } else {
            this.basicoSave.get('OtroPor')?.setValue(this.basicosFrom.value.otroPor);
          }
          this.basicoSave.get('NombreArrendador')?.setValue(this.basicosFrom.value.nombreArrendador);
          this.basicoSave.get('TelefonoArrendador')?.setValue(this.basicosFrom.value.telefonoArrendador);
          this.basicoSave.get('IdSegmento')?.setValue(Number(localStorage.getItem('seg')));
          this.terceroSave.get('NumeroDocumento')?.setValue(this.basicosFrom.value.numeroDocumento);
          this.terceroSave.get('IdTipoDocumento')?.setValue(this.basicosFrom.value.tipoDocumento);
          if (this.basicosFrom.value.ciudadExpedicion !== undefined && this.basicosFrom.value.ciudadExpedicion !== null) {
            if(this.basicosFrom.value.ciudadExpedicion.IdCiudad !== '' && this.basicosFrom.value.ciudadExpedicion.IdCiudad !== undefined 
            && this.basicosFrom.value.ciudadExpedicion.IdCiudad !== null) {
              this.terceroSave.get('IdCiudadExpeDto')?.setValue(this.basicosFrom.value.ciudadExpedicion.IdCiudad);
            } else {
              this.terceroSave.get('IdCiudadExpeDto')?.setValue(+this.basicosFrom.value.ciudadExpedicion);
            }
          } else {
            this.terceroSave.get('IdCiudadExpeDto')?.setValue(this.BasicosEdit.value.EditCiudadExp.IdCiudad);
          }
          if (this.basicosFrom.value.ciudadNacimiento !== undefined && this.basicosFrom.value.ciudadNacimiento !== null) {
             if(this.basicosFrom.value.ciudadNacimiento.IdCiudad !== '' && this.basicosFrom.value.ciudadNacimiento.IdCiudad !== undefined 
            && this.basicosFrom.value.ciudadNacimiento.IdCiudad !== null) {
              this.terceroSave.get('IdCiudadNto')?.setValue(this.basicosFrom.value.ciudadNacimiento.IdCiudad);
             } else {
               this.terceroSave.get('IdCiudadNto')?.setValue(this.basicosFrom.value.ciudadNacimiento);
             }
          } else {
            this.terceroSave.get('IdCiudadNto')?.setValue(this.BasicosEdit.value.EditCiudadNto.IdCiudad);
          }
          if (this.basicosFrom.value.paisExpedicion !== null && this.basicosFrom.value.paisExpedicion !== undefined) {
              this.terceroSave.get('IdPaisExpe')?.setValue(+this.basicosFrom.value.paisExpedicion);
          } else {
            this.terceroSave.get('IdPaisExpe')?.setValue(0);
          }

          if (this.basicosFrom.value.paisNacimiento !== null && this.basicosFrom.value.paisNacimiento !== undefined) {
            this.terceroSave.get('IdPaisNto')?.setValue(+this.basicosFrom.value.paisNacimiento);
          } else {
            this.terceroSave.get('IdPaisNto')?.setValue(0);
          }
          if (this.basicosFrom.value.fechaNacimiento !== null && this.basicosFrom.value.fechaNacimiento !== undefined) {
          this.terceroSave.get('FechaNacimiento')?.setValue(this.basicosFrom.value.fechaNacimiento);
          } else {
          this.terceroSave.get('FechaNacimiento')?.setValue('01-01-1900');
          }
          if (this.basicosFrom.value.fechaExpedicion !== null && this.basicosFrom.value.fechaExpedicion !== undefined) {
            this.terceroSave.get('FechaExpDocumento')?.setValue(this.basicosFrom.value.fechaExpedicion);
          } else {
            this.terceroSave.get('FechaExpDocumento')?.setValue('01-01-1900');
          }
          this.terceroSave.get('PrimerNombre')?.setValue(this.basicosFrom.value.primerNombre.charAt(0).toUpperCase() + 
          this.basicosFrom.value.primerNombre.slice(1).toLowerCase());
          this.terceroSave.get('SegundoNombre')?.setValue(this.basicosFrom.value.segundoNombre.charAt(0).toUpperCase() + 
          this.basicosFrom.value.segundoNombre.slice(1).toLowerCase());
          this.terceroSave.get('PrimerApellido')?.setValue(this.basicosFrom.value.primerApellido.charAt(0).toUpperCase() + 
          this.basicosFrom.value.primerApellido.slice(1).toLowerCase());
          this.terceroSave.get('SegundoApellido')?.setValue(this.basicosFrom.value.segundoApellido.charAt(0).toUpperCase() + 
          this.basicosFrom.value.segundoApellido.slice(1).toLowerCase());
          this.terceroSave.get('IdGenero')?.setValue(this.basicosFrom.value.genero);
          this.terceroSave.get('IdEstado')?.setValue(this.basicosFrom.value.estado);
          this.terceroSave.get('IdAsesorExterno')?.setValue(this.terceroSave.value.IdAsesorExterno);
          this.allItemsFormSaves.asociadosNaturalesDto = {};
          this.allItemsFormSaves.tercerosDto = {};
          this.allItemsEditNatural.asociadosNaturalesDto = this.basicoSave.value;
          this.allItemsEditNatural.tercerosDto = this.terceroSave.value;
          $('#financieroTab').removeClass('disableTab');
          this.disableTabFinanciero = true;
          $('#basicoTab').removeClass('activar');
          $('#basicoTab').removeClass('active');
          this.botonBasicoSiguiente.nativeElement.click();
          this.devolverTab(2);
          this.VolverArriba();
          //#endregion
        }
      }
    }
  }

  mostrarNumeroPersonas() {
    const percarg = this.basicosFrom.get('personasCargo')?.value;
    if (!this.basicosFrom.get('personasCargo')?.value || this.basicosFrom.get('personasCargo')?.value === null) {
      this.disablePersonasACargo = false;
    } else {
      this.disablePersonasACargo = true;
      this.basicosFrom.value.numeroPersonasCargo = 0;
      this.basicosFrom.get('numeroPersonasCargo')?.setValue(0);
    }
  }

  SaveDataServicios() {
    this.CargarServicios = 1;
    const esVinculacion = this.serviciosFrom.get('esVinculacion')?.value;
    const formValue = this.serviciosFrom.value;
    // aqui valiar si los campos vienen llenos es para credito
    if ((formValue.montoSolicitado !== ''  && formValue.montoSolicitado !== null && formValue.montoSolicitado !== undefined) &&
       (formValue.plazoDeseado !== ''  && formValue.plazoDeseado !== null && formValue.plazoDeseado !== undefined) &&
       (formValue.Destino !== ''  && formValue.Destino !== null && formValue.Destino !== undefined) ) {
        this.motrarErrorCredito = false;
        localStorage.setItem('Credito', 'true');
        if (esVinculacion && esVinculacion !== null) {
          localStorage.setItem('Vinculacion', 'true');
          localStorage.setItem('Actualizacion', 'false');
        } else {
          localStorage.setItem('Vinculacion', 'false');
          localStorage.setItem('Actualizacion', 'true');
        }
        // validar tambien que si llena algo en el campo documento de deudor no lo deje ir si no encuentra si lo limpia dejelo ir
        localStorage.setItem('DataService', JSON.stringify(this.serviciosFrom.value));
        this.serviciosFrom.get('operacionSeleccionada')?.setValue(this.basicosFrom.get('operacion')?.value);
        const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
        if (strNumeroDocumento !== undefined && strNumeroDocumento !== null) {
          this.CargarServiciosOn = true;
          this.documentoConsultar = strNumeroDocumento;
          this.GuardarLog('Imprimio afiliación - Asociado - ' + this.documentoConsultar, 3, 0, Number(localStorage.getItem('TerceroNatura')),11);
          this.AbrirImpresionServicios.nativeElement.click();
          this.BlockDeudor = null;
          this.BlockServiciosInput = null;
          this.basicosFrom.get('operacion')?.reset();
        }
    } else if ((formValue.montoSolicitado === ''  || formValue.montoSolicitado === null || formValue.montoSolicitado === undefined) &&
       (formValue.plazoDeseado === ''  || formValue.plazoDeseado === null || formValue.plazoDeseado === undefined) &&
       (formValue.Destino === ''  || formValue.Destino === null || formValue.Destino === undefined)) {
        this.motrarErrorCredito = false;
        localStorage.setItem('Credito', 'false');
        if (esVinculacion && esVinculacion !== null) {
          localStorage.setItem('Vinculacion', 'true');
          localStorage.setItem('Actualizacion', 'false');
        } else {
          localStorage.setItem('Vinculacion', 'false');
          localStorage.setItem('Actualizacion', 'true');
        }
        // validar tambien que si llena algo en el campo documento de deudor no lo deje ir si no encuentra si lo limpia dejelo ir
        localStorage.setItem('DataService', JSON.stringify(this.serviciosFrom.value));
        this.serviciosFrom.get('operacionSeleccionada')?.setValue(this.basicosFrom.get('operacion')?.value);
        const strNumeroDocumento = this.basicosFrom.get('DocumentoBusqueda')?.value;
        if (strNumeroDocumento !== undefined && strNumeroDocumento !== null) {
          this.CargarServiciosOn = true;
          this.documentoConsultar = strNumeroDocumento;
          this.GuardarLog('Imprimio afiliación - Asociado - ' + this.documentoConsultar, 3, 0, Number(localStorage.getItem('TerceroNatura')),11);
          this.AbrirImpresionServicios.nativeElement.click();
          this.BlockDeudor = null;
          this.BlockServiciosInput = null;
          this.basicosFrom.get('operacion')?.reset();
        }
    } else {
      this.motrarErrorCredito = true;
    }
  }

  validarFechasIngresadas() {
  }

  OperacionFormNaturales() {
      if (this.basicosFrom.value.operacion === '9') { // Cambiar estado
        const estadoNuevo = +this.basicosFrom.get('estado')?.value;
        if (estadoNuevo === 0) {
          this.notif.onWarning('Advertencia', 'Debe seleccionar un estado valido.');
        } else {
        if (estadoNuevo !== +this.estadoAnterior) {
          this.cambiarEstadoNatural();
        } else {
          this.notif.onWarning('Advertencia', 'Debe cambiar el estado.');
        }
      }
      } if (this.basicosFrom.value.operacion === '47') { // Activar documento bloqueado
        const estadoNuevo = +this.basicosFrom.get('estado')?.value;
        if (estadoNuevo === 0) {
          this.notif.onWarning('Advertencia', 'Debe seleccionar un estado valido.');
        } else {
        if (estadoNuevo !== +this.estadoAnterior) {
          this.ActivarDocumento();
        } else {
          this.notif.onWarning('Advertencia', 'Debe cambiar el estado.');
        }
      }
      } else if (this.basicosFrom.value.operacion === '5') { // Creacion
        if (this.basicosFrom.valid) {
          if (this.basicosFrom.get('IdNacionalidad')?.value !== null
            && this.basicosFrom.get('IdNacionalidad')?.value !== 0
            && this.basicosFrom.get('IdNacionalidad')?.value !== undefined) {
              
            this.setDataBasicos();

          } else {
            this.notif.onWarning('Advertencia', 'Debe ingresar el campo Nacionalidad.');
           $('#SelectNacionalidad').focus().select();
          }
         
        } else {
          this.ValidErrorForm(this.basicosFrom);
        }
      } else if (this.basicosFrom.value.operacion === '1') { // Editar
        if (this.basicosFrom.get('IdNacionalidad')?.value !== null
        && this.basicosFrom.get('IdNacionalidad')?.value !== 0
          && this.basicosFrom.get('IdNacionalidad')?.value !== undefined) {
          
          if (this.basicosFrom.get('tipoEmpleo')?.value !== null
            && this.basicosFrom.get('tipoEmpleo')?.value !== 0
            && this.basicosFrom.get('tipoEmpleo')?.value !== undefined) {
            
            const fechaNacimiento = this.basicosFrom.get('fechaNacimiento')?.value;
            const fechaActual = new Date();
            const fechaActualFormat = moment(new Date()).format();
            const fechas = new Date(fechaNacimiento);
            const nacimiento = moment(fechaNacimiento).format();
            const tipoCliente = +this.basicosFrom.get('tipoCliente')?.value;
            const tipoDocumento = +this.basicosFrom.get('tipoDocumento')?.value;
            if (fechas < fechaActual) {
              if (fechaNacimiento != null) {
                const validacionFechas = this.ValidacionFechas(fechaActualFormat, nacimiento);
                if (validacionFechas && tipoCliente === 10) {
                  this.notif.onWarning('Advertencia',
                    'La fecha de nacimiento no es válida.',
                    );
                  this.basicosFrom.get('fechaNacimiento')?.reset();
                  this.basicosFrom.get('fechaExpedicion')?.reset();
                  this.VolverArriba();
                  if (!this.basicosFrom.valid) {
                    this.ValidErrorForm(this.basicosFrom);
                  }
                } else if (!validacionFechas && tipoCliente === 5) {
                  this.notif.onWarning('Advertencia',
                    'La fecha de nacimiento no es válida.',
                    );
                  this.basicosFrom.get('fechaNacimiento')?.reset();
                  this.basicosFrom.get('fechaExpedicion')?.reset();
                  this.VolverArriba();
                  if (!this.basicosFrom.valid) {
                    this.ValidErrorForm(this.basicosFrom);
                  }
                } else if (validacionFechas && tipoCliente === 15 && (tipoDocumento === 4 || tipoDocumento === 5 || tipoDocumento === 7)) {
                  this.notif.onWarning('Advertencia',
                    'La fecha de nacimiento no es válida.',
                    );
                  this.basicosFrom.get('fechaNacimiento')?.reset();
                  this.basicosFrom.get('fechaExpedicion')?.reset();
                  this.VolverArriba();
                  if (!this.basicosFrom.valid) {
                    this.ValidErrorForm(this.basicosFrom);
                  }
                } else if (!validacionFechas && tipoCliente === 15 && tipoDocumento !== 4 && tipoDocumento !== 5 && tipoDocumento !== 7) {
                  this.notif.onWarning('Advertencia',
                    'La fecha de nacimiento no es válida.',
                    );
                  this.basicosFrom.get('fechaNacimiento')?.reset();
                  this.basicosFrom.get('fechaExpedicion')?.reset();
                  this.VolverArriba();
                  if (!this.basicosFrom.valid) {
                    this.ValidErrorForm(this.basicosFrom);
                  }
                } else {
                  if (this.basicosFrom.valid) {
                    this.setDataBasicos();
                  } else {
                    this.ValidErrorForm(this.basicosFrom);
                  }
                }
              }
            } else {
              this.notif.onWarning('Advertencia',
                'La fecha de nacimiento no puede ser mayor a la fecha actual.',
                );
              this.basicosFrom.get('fechaNacimiento')?.reset();
            }
            
            
          } else {
            this.notif.onWarning('Advertencia', 'los campor tipo de empleo y ocupacion son obligatorios.');
            $('#SelectTipoEmpleo').focus().select();
          }
      } else {
        this.notif.onWarning('Advertencia', 'Debe actualizar el campo Nacionalidad.');
        $('#SelectNacionalidad').focus().select();
      }

            // AQUI AGREGAR LA VALIDACION DE LAS FECHAS 
          
      } else if (this.basicosFrom.value.operacion === '7') { // Marcar PPES
        this.blockBtnBasico = true;
        this.MarcarPPESEntrevista();
      } else if (this.basicosFrom.value.operacion === '8') { // Desmarcar PPES
        this.blockBtnBasico = true;
        this.DesmacarPPES();
      } else if (this.basicosFrom.value.operacion === '4') { // Cambio de relacion
        this.cambiarRelacion();
      } else if (this.basicosFrom.value.operacion === '17') { // Cambio de tipo de documento
       const operacion = +this.basicosFrom.get('operacion')?.value;
      const tipoDocu = +this.basicosFrom.get('tipoDocumento')?.value;
      if (tipoDocu !== 0) {
        const valor = (this.basicosFrom.get('numeroDocumento')?.value).toString();
        const valorBusqueda = Number(this.basicosFrom.get('DocumentoBusqueda')?.value).toString();
        const tipoCli = +this.basicosFrom.get('tipoCliente')?.value;
        if (valor !== valorBusqueda) {
          if (valor !== '0' && valor !== 'NaN' && valor !== '') {
            this.basicosFrom.get('numeroDocumento')?.setValue(valor);
            const objAsociados = new AsociadosModel();
            objAsociados.strNumeroDocumento = this.basicosFrom.get('numeroDocumento')?.value;
            this.ValidarVetadosDocumento();
            if (operacion === 17 && objAsociados.strNumeroDocumento !== this.documentoAnterior) {
              this.clientesGetListService.GetGenNits(objAsociados.strNumeroDocumento).subscribe(
                resultGenNit => {
                  this.clientesGetListService.GetTerceros(objAsociados.strNumeroDocumento).subscribe(
                    result => {
                      if (result !== null || resultGenNit) {
                        this.yaIngreso = false;
                        this.notif.onWarning('Advertencia', 'El asociado ya fue ingresado.');
                        this.itemsLogSeguro = [];
                        this.dataActivos = [];
                        this.itemsEgresos = [];
                        this.itemsIngresos = [];
                        this.itemsContacto = [];
                        this.dataConyuge = [];
                        this.itemsLogSeguro = [];
                        if (tipoCli === 10) {
                          this.formTutorOculto = true;
                        } else {
                          this.formTutorOculto = false;
                        }
                        this.basicosFrom.get('numeroDocumento')?.reset();
                        this.VolverArriba();
                      } else {
                        this.cambiarTipoDocumento();
                      }
                    });
                },
                error => {
                  const errorMessage = <any>error;
                  this.notif.onDanger('Error', error);
                  console.log(errorMessage);
                });
              } else {
                this.cambiarTipoDocumento();
              }
          } else {
            this.basicosFrom.get('numeroDocumento')?.reset();
          }
        } else {
          const valorNormal = this.basicosFrom.get('numeroDocumento')?.value;
          if (valorNormal !== '0' && valorNormal !== 'NaN' && valorNormal !== '') {
            this.basicosFrom.get('numeroDocumento')?.setValue(valorNormal);
            const objAsociados = new AsociadosModel();
            objAsociados.strNumeroDocumento = this.basicosFrom.get('numeroDocumento')?.value;
            this.ValidarVetadosDocumento();
            if (operacion === 17 && objAsociados.strNumeroDocumento !== this.documentoAnterior) {
              this.clientesGetListService.GetGenNits(objAsociados.strNumeroDocumento).subscribe(
                resultGenNit => {
                  this.clientesGetListService.GetTerceros(objAsociados.strNumeroDocumento).subscribe(
                    result => {
                      if (result !== null || resultGenNit) {
                        this.yaIngreso = false;
                        this.notif.onWarning('Advertencia', 'El asociado ya fue ingresado.');
                        this.itemsLogSeguro = [];
                        this.dataActivos = [];
                        this.itemsEgresos = [];
                        this.itemsIngresos = [];
                        this.itemsContacto = [];
                        this.dataConyuge = [];
                        this.itemsLogSeguro = [];
                        if (tipoCli === 10) {
                          this.formTutorOculto = true;
                        } else {
                          this.formTutorOculto = false;
                        }
                        this.basicosFrom.get('numeroDocumento')?.reset();
                        this.VolverArriba();
                      } else {
                        this.cambiarTipoDocumento();
                      }
                    });
                },
                error => {
                  const errorMessage = <any>error;
                  this.notif.onDanger('Error', error);
                  console.log(errorMessage);
                });
            } else {
               this.cambiarTipoDocumento();
            }
          } else {
            this.basicosFrom.get('numeroDocumento')?.reset();
          }
        }
      } else {
         this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de documento valido.');
      }
      } else if (this.basicosFrom.value.operacion === '18') { // Cambio de nombres y apellidos
        this.cambiarNombresApellidos();
      } else if (this.basicosFrom.value.operacion === '20') { // Cambio de oficina
        this.blockBtnBasico = true;
        this.clientesService.TieneCuentas(Number(localStorage.getItem('TerceroNatura'))).subscribe(
          resultCuenta => {
            if (!resultCuenta) {
              this.blockBtnBasico = false;
              this.notif.onWarning('Advertencia', 'No se puede realizar el cambio de oficina, el asociado tiene cuentas activas.');
              this.basicosFrom.get('operacion')?.reset();
              this.basicosFrom.get('oficina')?.setValue(this.oficinaVieja);
              this.disbaleOficina = true;
              this.btnGuardarOculto = false;
              this.siguienteOculto = true;
              this.VolverArriba();
              $('#basicoTab').removeClass('disableTab');
              $('#financieroTab').removeClass('disableTab');
              $('#contactoTab').removeClass('disableTab');
              $('#activoTab').removeClass('disableTab');
              $('#conyugueTab').removeClass('disableTab');
              $('#laboralTab').removeClass('disableTab');
              $('#referenciaTab').removeClass('disableTab');
              $('#entrevistaTab').removeClass('disableTab');
              $('#seguroTab').removeClass('disableTab');
              $('#fechasTab').addClass('disableTab');
            } else {
              $('#basicoTab').removeClass('disableTab');
              $('#financieroTab').removeClass('disableTab');
              $('#contactoTab').removeClass('disableTab');
              $('#activoTab').removeClass('disableTab');
              $('#conyugueTab').removeClass('disableTab');
              $('#laboralTab').removeClass('disableTab');
              $('#referenciaTab').removeClass('disableTab');
              $('#entrevistaTab').removeClass('disableTab');
              $('#seguroTab').removeClass('disableTab');
              $('#fechasTab').addClass('disableTab');
              if(this.objOficinaVieja.Descripcion !== this.basicosFrom.value.oficina) {
                if(this.objOficinaVieja.Valor !== this.basicosFrom.value.oficina.Valor) {
                if (this.basicosFrom.value.oficina !== null && this.basicosFrom.value.oficina !== undefined
                  && this.basicosFrom.value.oficina !== '') {
                    if(this.basicosFrom.value.oficina.Valor !== null && this.basicosFrom.value.oficina.Valor !== undefined
                      && this.basicosFrom.value.oficina.Valor !== '') {
                          this.objOficinaVieja = this.basicosFrom.value.oficina;
                          let TerceroNatura : string | null = localStorage.getItem('TerceroNatura');
                          this.EditarOficina(TerceroNatura == null ? "" : TerceroNatura, this.basicosFrom.value.oficina.Valor);
                          this.EditarFrom = true;
  
                    } else {
                      // this.basicosFrom.get('oficina')?.reset();
                      this.blockBtnBasico = null;
                      this.notif.onWarning('Advertencia', 'Debe seleccionar una oficina valida.');
                      this.VolverArriba();
                    }
                } else {
                  this.blockBtnBasico = null;
                  this.notif.onWarning('Advertencia', 'Debe seleccionar una oficina valida.');
                  this.VolverArriba();
                }   
               } else {
                  this.blockBtnBasico = null;
                  this.notif.onWarning('Advertencia', 'Debe seleccionar una oficina diferente.');
                  this.VolverArriba();
              }
  
              } else {
                  this.blockBtnBasico = null;
                  this.notif.onWarning('Advertencia', 'Debe seleccionar una oficina diferente.');
                  this.VolverArriba();
              }
            }
          });
      } else if (this.basicosFrom.value.operacion === '19') { // Cambiar asesor externo
        this.blockBtnBasico = true;
        if (this.asesorForm.value.strCodigo !== '' && this.asesorForm.value.strCodigo !== null
          && this.asesorForm.value.strCodigo !== undefined) {
            if(this.asesorForm.value.strCodigo !== this.CedulaAsesorExt) {
              let TerceroNatura : string | null = localStorage.getItem('TerceroNatura');
              this.EditarAsesorExterno(TerceroNatura == null ? "" : TerceroNatura, this.terceroSave.value.IdAsesorExterno);
              this.disableAsesor = false;
            } else {
              this.blockBtnBasico = false;
              this.notif.onWarning('Advertencia', 'Debe seleccionar un asesor externo diferente.');
              this.disableAsesor = null;
            }
          }  else {
          this.blockBtnBasico = false;
          this.notif.onWarning('Advertencia', 'Debe seleccionar un asesor externo válido.');
          this.disableAsesor = null;
          this.asesorForm.get('strCodigo')?.reset();
          this.asesorForm.get('strNombre')?.reset();
        }
      } else if (this.basicosFrom.value.operacion === '24') { // Cancelar solicitud retiro
      } else if (this.basicosFrom.value.operacion === '26') { // Cambiar asesor
        this.blockBtnBasico = true;
        if (this.asesorForm.value.strCodigoAse !== '' && this.asesorForm.value.strCodigoAse !== null
          && this.asesorForm.value.strCodigoAse !== undefined) {
            if(this.asesorForm.value.strCodigoAse !== this.CedulaAsesor) {
              this.EditarAsesor(Number(localStorage.getItem('TerceroNatura')).toString(), this.asesorForm.value.strCodigoAse);
              this.disableAsesorPpal = true;
            } else {
              this.blockBtnBasico = false;
              this.notif.onWarning('Advertencia', 'Debe seleccionar un asesor diferente.');
              this.disableAsesorPpal = null;
            }
        } else {
          this.blockBtnBasico = false;
          this.notif.onWarning('Advertencia', 'Debe seleccionar un asesor válido.');
          this.disableAsesorPpal = null;
        }
      } else {
        this.VolverArriba();
      }
   
    
  }
  habilitarEdicion() {
    this.EditarFrom = true;
  }

  ConsultarCiudades(cual : string) {
    if (cual === 'Naci') {
      this.dataCiudadFiltro = [];
      const naci = this.basicosFrom.get('ciudadNacimiento')?.value;
      this.dataCiudad.forEach((elementCiu : any)=> {
        if (elementCiu.Nombre.toLowerCase().indexOf(naci.toLowerCase()) > - 1) {
          this.dataCiudadFiltro.push(elementCiu);
        }
      });
      this.AbrirCiudadesNaciBasico.nativeElement.click();
    } else if (cual === 'Expe') {
      this.dataCiudadFiltro = [];
      const expe = this.basicosFrom.get('ciudadExpedicion')?.value;
      this.dataCiudad.forEach((elementCiu : any) => {
        if (elementCiu.Nombre.toLowerCase().indexOf(expe.toLowerCase()) > - 1) {
          this.dataCiudadFiltro.push(elementCiu);
        }
      });
      this.AbrirCiudadesExpeBasico.nativeElement.click();
    } else if (cual === 'Contac') {
      const naci = this.contactoForm.get('ubicacion')?.value;
      this.dataCiudad.forEach((elementCiu : any) => {
        if (elementCiu.Nombre.toLowerCase().indexOf(naci.toLowerCase()) > - 1) {
          this.dataCiudadFiltro.push(elementCiu);
        }
      });
      this.AbrirCiudadesContacto.nativeElement.click();
    }
  }

  setDataCiudades(value : string, cual : string) {
    if (cual === 'Naci') {
      this.basicosFrom.get('ciudadNacimiento')?.value(value);
    } else if (cual === 'Expe') {
      this.basicosFrom.get('ciudadExpedicion')?.value(value);
    } else if (cual === 'Contac') {
      this.contactoForm.get('ubicacion')?.value(value);
    }
  }

  validarTipoVivienda() {
    const tipoVivienda = +this.basicosFrom.get('tipoVivienda')?.value;
    if (tipoVivienda === 1) {
      // aqui toca mostrar los campos y poner las validaciones
      this.infoArrendador = true;
      this.basicosFrom.get('nombreArrendador')?.reset();
      this.basicosFrom.get('telefonoArrendador')?.reset();
      this.basicosFrom.controls['nombreArrendador'].setValidators([Validators.required, Validators.pattern('[a-zA-ZñÑ ]+')]);
      this.basicosFrom.controls['nombreArrendador'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['telefonoArrendador'].setValidators([Validators.required, Validators.pattern('^[0-9]*')]);
      this.basicosFrom.controls['telefonoArrendador'].setErrors({ 'incorrect': true });
    } else {
      // aqui toca ocultarlos quitar las validaciones y limpiar los campos
      this.infoArrendador = false;
      this.basicosFrom.get('nombreArrendador')?.reset();
      this.basicosFrom.get('telefonoArrendador')?.reset();
      this.basicosFrom.controls['nombreArrendador'].setErrors(null);
      this.basicosFrom.controls['nombreArrendador'].clearValidators();
      this.basicosFrom.controls['nombreArrendador'].setValidators(null);
      this.basicosFrom.controls['telefonoArrendador'].setErrors(null);
      this.basicosFrom.controls['telefonoArrendador'].clearValidators();
      this.basicosFrom.controls['telefonoArrendador'].setValidators(null);
    }
  }

  validarTipoLocal() {
    const tipoVivienda = +this.basicosFrom.get('tipoLocal')?.value;
    if (tipoVivienda === 1) {
      // aqui toca mostrar los campos y poner las validaciones
      this.infoArrendador = true;
      this.basicosFrom.get('nombreArrendador')?.reset();
      this.basicosFrom.get('telefonoArrendador')?.reset();
      this.basicosFrom.controls['nombreArrendador'].setValidators([Validators.required, Validators.pattern('[a-zA-ZñÑ ]+')]);
      this.basicosFrom.controls['nombreArrendador'].setErrors({ 'incorrect': true });
      this.basicosFrom.controls['telefonoArrendador'].setValidators([Validators.required, Validators.pattern('^[0-9]*')]);
      this.basicosFrom.controls['telefonoArrendador'].setErrors({ 'incorrect': true });
    } else {
      // aqui toca ocultarlos quitar las validaciones y limpiar los campos
      this.infoArrendador = false;
      this.basicosFrom.get('nombreArrendador')?.reset();
      this.basicosFrom.get('telefonoArrendador')?.reset();
      this.basicosFrom.controls['nombreArrendador'].setErrors(null);
      this.basicosFrom.controls['nombreArrendador'].clearValidators();
      this.basicosFrom.controls['nombreArrendador'].setValidators(null);
      this.basicosFrom.controls['telefonoArrendador'].setErrors(null);
      this.basicosFrom.controls['telefonoArrendador'].clearValidators();
      this.basicosFrom.controls['telefonoArrendador'].setValidators(null);
    }
  }
  ValidarTipoLocalLaboral(){
    if (this.laboralForm.get('IdTipoLocal')?.value === '1') {
      this.BloqueoArriendo = null;
      $('#CampoNombreA').focus().select();
      this.oAsterisco = null;
    } else {
      this.BloqueoArriendo = true;
      this.oAsterisco = true;
      this.laboralForm.get('NombreArrendador')?.reset();
      this.laboralForm.get('TelefonoArrendador')?.reset();
    }
  }

  validarOficinaSeleccionada() {
    this.blockBtnBasico = false;
    const tipocliente = +this.basicosFrom.get('tipoCliente')?.value;
    const oficinaSeleecionada = this.basicosFrom.get('oficina')?.value;
    if (tipocliente !== 15) {
      if(oficinaSeleecionada.IdLista === 89) {
        this.basicosFrom.get('oficina')?.reset();
         this.notif.onWarning('Advertencia', 'No se puede realizar el cambio de oficina a administración.',
             );
      }
    }
  }
  

  //#endregion

  //#region Metodos de FINANCIEROS

  GetConceptos() {
    const data = this.financieroFrom.get('categoria')?.value;
    this.clientesGetListService.GetConceptos(data.Id).subscribe(
      result => {
        this.dataConcepto = result;
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      }
    );
  }

  GetConceptosIdCategor(IdCatego : string) {

    this.clientesGetListService.GetConceptos(IdCatego).subscribe(
      result => {
        this.dataConcepto = result;
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      }
    );
  }

  validarConcepto() {
    const concepto = this.financieroFrom.get('concepto')?.value;
    const tipo = +this.basicosFrom.get('tipoEmpleo')?.value;
    const catego = this.financieroFrom.get('categoria')?.value;
    if (concepto !== '') {
      if (tipo !== null) {
        if (catego.Id === 1 && (concepto.Id === 12 || concepto.Id === 11) ) { // valido que la categoria y el concepto sean costos y gastos
          if (tipo !== 9) {
            if (tipo !== 8) {
              if (tipo !== 7) {
                if (tipo !== 6) {
                  // valido que el tipo de empleo sea independiente
                    if (concepto.Id === 11) {
                      this.notif.onWarning('Advertencia',
                        'La opción de Ventas brutas mensuales solo está disponible para el tipo de empleo independiente.',
                        );
                      this.resetConcepto();
                    } else {
                      this.notif.onWarning('Advertencia',
                        'La opción de costos y gastos solo está disponible para el tipo de empleo independiente.',
                        );
                      this.resetConcepto();
                    }
                }
              }
            }
          }
        }
      } else {
        this.notif.onWarning('Advertencia', 'Debe llenar el formulario de datos básicos.');
        this.resetConcepto();
      }
    } else {
      this.notif.onWarning('Advertencia', 'Debe seleccionar un concepto válido.');
      this.financieroFrom.get('concepto')?.reset();
    }
  }

  resetConcepto() {
    if (this.financieroFrom.get('concepto')?.value !== undefined || this.financieroFrom.get('concepto')?.value !== null) {
      this.financieroFrom.get('concepto')?.reset();
    }
  }

  MappearFinanciero(i : any, data : any ) {
    this.VolverArriba();
    this.indexFinanciero = i;
    this.BlockCategoria = true;
    this.financieroFrom.get('categoria')?.setValue(data.categoria);
    this.clientesGetListService.GetConceptos(data.categoria.Id).subscribe(
      result => {

        this.dataConcepto = result;
        this.dataConcepto.forEach((elementto : any) => {
          if (elementto.Id === data.concepto.Id) {
            this.financieroFrom.get('concepto')?.setValue(elementto);
          }
        });
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      });
    this.financieroFrom.get('idDatoFinanciero')?.setValue(data.idDatoFinanciero);
    this.financieroFrom.get('valor')?.setValue(data.valor);
    this.financieroFrom.get('observacion')?.setValue(data.observacion);

  }

  eliminarItemEgresos(index : any, data : any) {
    this.acomuladorEgresos = this.acomuladorEgresos - +data.valor;
    this.itemsEgresos.splice(index, 1);
  }

  eliminarItemIngreso(index : any, data : any) {
    this.acomuladorIngresos = 0;
    this.acomuladorCostos = 0;
    this.acomuladorIngresosOpe = 0;
    this.acomuladorOperacional = 0;
    this.itemsIngresos.splice(index, 1);
    this.itemsIngresos.forEach(elementIngresos => {
      if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
        this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
      } else { // si no a al acomulador ingresos
        this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
      }
    });
    this.itemsIngresos.forEach(elementIngresos => {
      if (elementIngresos.concepto.Id === 12) {
        this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
      }
    });
  }

  addItemsIngresosEgresos() {
    const operacion = this.basicosFrom.get('operacion')?.value;
    if (operacion === '5') {
      const data = this.financieroFrom.get('categoria')?.value;
      const tipo = +this.basicosFrom.get('tipoEmpleo')?.value;
      const observa = this.financieroFrom.get('observacion')?.value;
      const concep = this.financieroFrom.get('concepto')?.value;
      if (tipo === 7 || tipo === 6) {
        if (observa === '' || observa === null) { // Mensaje de advertencia
          if (data.Id !== 2) {
            this.notif.onWarning('Advertencia',
              'El campo observación es obligatorio para el tipo de empleo independiente.',
              );
          } else {

            if (data.Id === 2) { /// valida si es un EGRESO

              if (this.indexFinanciero !== null && this.indexFinanciero !== undefined) {
                this.acomuladorEgresos = 0;

                this.itemsEgresos.splice(this.indexFinanciero, 1);
                this.itemsEgresos.push(this.financieroFrom.value);
                this.indexFinanciero = null;
                this.BlockCategoria = null;

                this.itemsEgresos.forEach(elementIngresos => {
                  this.acomuladorEgresos = this.acomuladorEgresos + elementIngresos.valor;
                });

              } else {
                this.acomuladorEgresos = 0;
                this.itemsEgresos.push(this.financieroFrom.value);
                this.allItemsForm.push(this.financieroFrom.value);
                this.itemsEgresos.forEach(elementIngresos => {
                  this.acomuladorEgresos = this.acomuladorEgresos + elementIngresos.valor;
                });
              }
              this.financieroFrom.reset();
            } else { // valida si es un INGRESO
              if (concep.Id === 9) {
                if (observa === '' || observa === null) { // Mensaje de validacion
                  this.notif.onWarning('Advertencia',
                    'El campo observación es obligatorio.',
                    );
                } else {
                  if (this.indexFinanciero !== null && this.indexFinanciero !== undefined) {
                    this.acomuladorIngresos = 0;
                    this.acomuladorCostos = 0;
                    this.acomuladorIngresosOpe = 0;
                    this.acomuladorOperacional = 0;
                    this.itemsIngresos.splice(this.indexFinanciero, 1);
                    this.itemsIngresos.push(this.financieroFrom.value);
                    this.indexFinanciero = null;
                    this.BlockCategoria = null;
                    this.itemsIngresos.forEach(elementIngresos => {
                      if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                        this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                      } else { // si no a al acomulador ingresos
                        this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                      }
                    });
                    this.itemsIngresos.forEach(elementIngresos => {
                      if (elementIngresos.concepto.Id === 12) {
                        this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                      }
                    });
                  } else {
                    this.acomuladorIngresos = 0;
                    this.acomuladorCostos = 0;
                    this.acomuladorIngresosOpe = 0;
                    this.acomuladorOperacional = 0;
                    this.itemsIngresos.push(this.financieroFrom.value);
                    this.allItemsForm.push(this.financieroFrom.value);
                    this.itemsIngresos.forEach(elementIngresos => {
                      if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                        this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                      } else { // si no a al acomulador ingresos
                        this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                      }
                    });
                    this.itemsIngresos.forEach(elementIngresos => {
                      if (elementIngresos.concepto.Id === 12) {
                        this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                      }
                    });
                  }
                  this.financieroFrom.reset();
                }
              } else {
                if (this.indexFinanciero !== null && this.indexFinanciero !== undefined) {
                  this.acomuladorIngresos = 0;
                  this.acomuladorCostos = 0;
                  this.acomuladorIngresosOpe = 0;
                  this.acomuladorOperacional = 0;
                  this.itemsIngresos.splice(this.indexFinanciero, 1);
                  this.itemsIngresos.push(this.financieroFrom.value);
                  this.indexFinanciero = null;
                  this.BlockCategoria = null;
                  this.itemsIngresos.forEach(elementIngresos => {
                    if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                      this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                    } else { // si no a al acomulador ingresos
                      this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                    }
                  });
                  this.itemsIngresos.forEach(elementIngresos => {
                    if (elementIngresos.concepto.Id === 12) {
                      this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                    }
                  });
                } else {
                  this.acomuladorIngresos = 0;
                  this.acomuladorCostos = 0;
                  this.acomuladorIngresosOpe = 0;
                  this.acomuladorOperacional = 0;
                  this.itemsIngresos.push(this.financieroFrom.value);
                  this.allItemsForm.push(this.financieroFrom.value);

                  this.itemsIngresos.forEach(elementIngresos => {
                    if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                      this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                    } else { // si no a al acomulador ingresos
                      this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                    }
                  });
                  this.itemsIngresos.forEach(elementIngresos => {
                    if (elementIngresos.concepto.Id === 12) {
                      this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                    }
                  });

                }
                this.financieroFrom.reset();
              }

            }

          }
        } else {

          if (data.Id === 2) { /// valida si es un EGRESO
            if (this.indexFinanciero !== null && this.indexFinanciero !== undefined) {
              this.acomuladorEgresos = 0;
              this.itemsEgresos.splice(this.indexFinanciero, 1);
              this.itemsEgresos.push(this.financieroFrom.value);
              this.indexFinanciero = null;
              this.BlockCategoria = null;
              this.itemsEgresos.forEach(elementIngresos => {
                this.acomuladorEgresos = this.acomuladorEgresos + elementIngresos.valor;
              });
            } else {
              this.acomuladorEgresos = 0;
              this.itemsEgresos.push(this.financieroFrom.value);
              this.allItemsForm.push(this.financieroFrom.value);
              this.itemsEgresos.forEach(elementIngresos => {
                this.acomuladorEgresos = this.acomuladorEgresos + elementIngresos.valor;
              });
            }
            this.financieroFrom.reset();
          } else { // valida si es un INGRESO
            if (concep.Id === 9) {
              if (observa === '' || observa === null) { // Mensaje de validacion
                this.notif.onWarning('Advertencia',
                  'El campo observación es obligatorio.',
                  );
              } else {
                if (this.indexFinanciero !== null && this.indexFinanciero !== undefined) {
                  this.acomuladorIngresos = 0;
                  this.acomuladorCostos = 0;
                  this.acomuladorIngresosOpe = 0;
                  this.acomuladorOperacional = 0;
                  this.itemsIngresos.splice(this.indexFinanciero, 1);
                  this.itemsIngresos.push(this.financieroFrom.value);
                  this.indexFinanciero = null;
                  this.BlockCategoria = null;
                  this.itemsIngresos.forEach(elementIngresos => {
                    if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                      this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                    } else { // si no a al acomulador ingresos
                      this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                    }
                  });
                  this.itemsIngresos.forEach(elementIngresos => {
                    if (elementIngresos.concepto.Id === 12) {
                      this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                    }
                  });
                } else {
                  this.acomuladorIngresos = 0;
                  this.acomuladorCostos = 0;
                  this.acomuladorIngresosOpe = 0;
                  this.acomuladorOperacional = 0;
                  this.itemsIngresos.push(this.financieroFrom.value);
                  this.allItemsForm.push(this.financieroFrom.value);

                  this.itemsIngresos.forEach(elementIngresos => {
                    if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                      this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                    } else { // si no a al acomulador ingresos
                      this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                    }
                  });
                  this.itemsIngresos.forEach(elementIngresos => {
                    if (elementIngresos.concepto.Id === 12) {
                      this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                    }
                  });

                }
                this.financieroFrom.reset();
              }

            } else {

              if (this.indexFinanciero !== null && this.indexFinanciero !== undefined) {
                this.acomuladorIngresos = 0;
                this.acomuladorCostos = 0;
                this.acomuladorIngresosOpe = 0;
                this.acomuladorOperacional = 0;
                this.itemsIngresos.splice(this.indexFinanciero, 1);
                this.itemsIngresos.push(this.financieroFrom.value);
                this.indexFinanciero = null;
                this.BlockCategoria = null;

                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                    this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                  } else { // si no a al acomulador ingresos
                    this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                  }
                });
                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) {
                    this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                  }
                });
              } else {
                this.acomuladorIngresos = 0;
                this.acomuladorCostos = 0;
                this.acomuladorIngresosOpe = 0;
                this.acomuladorOperacional = 0;
                this.itemsIngresos.push(this.financieroFrom.value);
                this.allItemsForm.push(this.financieroFrom.value);

                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                    this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                  } else { // si no a al acomulador ingresos
                    this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                  }
                });
                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) {
                    this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                  }
                });

              }
              this.financieroFrom.reset();
            }

          }

        }
      } else {

        if (data.Id === 2) { // valida si es un EGRESO

          if (this.indexFinanciero !== null && this.indexFinanciero !== undefined) {
            this.acomuladorIngresos = 0;

            this.itemsEgresos.splice(this.indexFinanciero, 1);
            this.itemsEgresos.push(this.financieroFrom.value);
            this.indexFinanciero = null;
            this.BlockCategoria = null;

            this.itemsEgresos.forEach(elementIngresos => {

              this.acomuladorEgresos = this.acomuladorEgresos + elementIngresos.valor;

            });

          } else {

            this.acomuladorEgresos = 0;

            this.itemsEgresos.push(this.financieroFrom.value);
            this.allItemsForm.push(this.financieroFrom.value);

            this.itemsEgresos.forEach(elementIngresos => {

              this.acomuladorEgresos = this.acomuladorEgresos + elementIngresos.valor;

            });

          }
          this.financieroFrom.reset();

        } else { // valida si es un INGRESO


          if (concep.Id === 9) {

            if (observa === '' || observa === null) { // Mensaje de validacion
              this.notif.onWarning('Advertencia',
                'El campo observación es obligatorio.',
                );
            } else {

              if (this.indexFinanciero !== null && this.indexFinanciero !== undefined) {
                this.acomuladorIngresos = 0;
                this.acomuladorCostos = 0;
                this.acomuladorIngresosOpe = 0;
                this.acomuladorOperacional = 0;
                this.itemsIngresos.splice(this.indexFinanciero, 1);
                this.itemsIngresos.push(this.financieroFrom.value);
                this.indexFinanciero = null;
                this.BlockCategoria = null;

                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                    this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                  } else { // si no a al acomulador ingresos
                    this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                  }
                });
                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) {
                    this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                  }
                });
              } else {
                this.acomuladorIngresos = 0;
                this.acomuladorCostos = 0;
                this.acomuladorIngresosOpe = 0;
                this.acomuladorOperacional = 0;
                this.itemsIngresos.push(this.financieroFrom.value);
                this.allItemsForm.push(this.financieroFrom.value);

                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                    this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                  } else { // si no a al acomulador ingresos
                    this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                  }
                });
                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) {
                    this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                  }
                });

              }
              this.financieroFrom.reset();
            }

          } else {

            if (this.indexFinanciero !== null && this.indexFinanciero !== undefined) {
              this.acomuladorIngresos = 0;
              this.acomuladorCostos = 0;
              this.acomuladorIngresosOpe = 0;
              this.acomuladorOperacional = 0;
              this.itemsIngresos.splice(this.indexFinanciero, 1);
              this.itemsIngresos.push(this.financieroFrom.value);
              this.indexFinanciero = null;
              this.BlockCategoria = null;

              this.itemsIngresos.forEach(elementIngresos => {
                if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                  this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                } else { // si no a al acomulador ingresos
                  this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                }
              });
              this.itemsIngresos.forEach(elementIngresos => {
                if (elementIngresos.concepto.Id === 12) {
                  this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                }
              });
            } else {
              this.acomuladorIngresos = 0;
              this.acomuladorCostos = 0;
              this.acomuladorIngresosOpe = 0;
              this.acomuladorOperacional = 0;
              this.itemsIngresos.push(this.financieroFrom.value);
              this.allItemsForm.push(this.financieroFrom.value);

              this.itemsIngresos.forEach(elementIngresos => {
                if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                  this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                } else { // si no a al acomulador ingresos
                  this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                }
              });
              this.itemsIngresos.forEach(elementIngresos => {
                if (elementIngresos.concepto.Id === 12) {
                  this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                }
              });

            }
            this.financieroFrom.reset();
          }
        }

      }

    } else if (operacion === '1') {
      const data = this.financieroFrom.get('categoria')?.value;
      const tipo = +this.basicosFrom.get('tipoEmpleo')?.value;
      const observa = this.financieroFrom.get('observacion')?.value;
      const concep = this.financieroFrom.get('concepto')?.value;
      if (tipo === 7 || tipo === 6) {
        if (observa === '' || observa === null) { // Mensaje de validacion
          this.notif.onWarning('Advertencia',
            'El campo observación es obligatorio para el tipo de empleo independiente.',
            );
        } else {

          if (data.Id === 2) { // valida si es un EGRESO
            if (this.indexFinanciero !== null) {
              this.acomuladorEgresos = 0;

              this.itemsEgresos.splice(this.indexFinanciero, 1);
              this.itemsEgresos.push(this.financieroFrom.value);

              this.indexFinanciero = null;
              this.BlockCategoria = null;

              this.itemsEgresos.forEach(elementIngresos => {

                this.acomuladorEgresos = this.acomuladorEgresos + elementIngresos.valor;

              });

            } else {
              this.acomuladorEgresos = 0;

              this.itemsEgresos.push(this.financieroFrom.value);
              this.indexFinanciero = null;
              this.BlockCategoria = null;
              this.allItemsForm.push(this.financieroFrom.value);

              this.itemsEgresos.forEach(elementIngresos => {

                this.acomuladorEgresos = this.acomuladorEgresos + elementIngresos.valor;

              });

            }
            this.financieroFrom.reset();
          } else { // valida si es un INGRESO

            if (concep.Id === 9) {

              if (observa === '' || observa === null) {
                this.notif.onWarning('Advertencia',
                  'El campo observación es obligatorio.',
                  );
              } else {
                if (this.indexFinanciero !== null) {

                  // this.acomuladorIngresos = this.acomuladorIngresos - +this.itemsIngresos[this.indexFinanciero].valor;
                  this.acomuladorIngresos = 0;
                  this.acomuladorCostos = 0;
                  this.acomuladorIngresosOpe = 0;
                  this.acomuladorOperacional = 0;
                  this.itemsIngresos.splice(this.indexFinanciero, 1);
                  this.itemsIngresos.push(this.financieroFrom.value);
                  this.indexFinanciero = null;
                  this.BlockCategoria = null;

                  this.itemsIngresos.forEach(elementIngresos => {
                    if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                      this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                    } else { // si no a al acomulador ingresos
                      this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                    }
                  });
                  this.itemsIngresos.forEach(elementIngresos => {
                    if (elementIngresos.concepto.Id === 12) {
                      this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                    }
                  });

                } else {
                  this.acomuladorIngresos = 0;
                  this.acomuladorCostos = 0;
                  this.acomuladorIngresosOpe = 0;
                  this.acomuladorOperacional = 0;
                  this.itemsIngresos.push(this.financieroFrom.value);
                  this.indexFinanciero = null;
                  this.BlockCategoria = null;
                  this.allItemsForm.push(this.financieroFrom.value);

                  this.itemsIngresos.forEach(elementIngresos => {
                    if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                      this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                    } else { // si no a al acomulador ingresos
                      this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                    }
                  });
                  this.itemsIngresos.forEach(elementIngresos => {
                    if (elementIngresos.concepto.Id === 12) {
                      this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                    }
                  });
                }
                this.financieroFrom.reset();
              }

            } else {
              if (this.indexFinanciero !== null) {
                this.acomuladorIngresos = 0;
                this.acomuladorCostos = 0;
                this.acomuladorIngresosOpe = 0;
                this.acomuladorOperacional = 0;
                // this.acomuladorIngresos = this.acomuladorIngresos - +this.itemsIngresos[this.indexFinanciero].valor;

                this.itemsIngresos.splice(this.indexFinanciero, 1);
                this.itemsIngresos.push(this.financieroFrom.value);
                this.indexFinanciero = null;
                this.BlockCategoria = null;

                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                    this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                  } else { // si no a al acomulador ingresos
                    this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                  }

                });
                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) {
                    this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                  }
                });

              } else {

                // this.acomuladorIngresos = this.acomuladorIngresos - this.financieroFrom.value -----------------------
                this.acomuladorIngresos = 0;
                this.acomuladorCostos = 0;
                this.acomuladorIngresosOpe = 0;
                this.acomuladorOperacional = 0;
                this.itemsIngresos.push(this.financieroFrom.value);
                this.indexFinanciero = null;
                this.BlockCategoria = null;
                this.allItemsForm.push(this.financieroFrom.value);

                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                    this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                  } else { // si no a al acomulador ingresos
                    this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                  }
                });
                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) {
                    this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                  }
                });

              }
              this.financieroFrom.reset();
            }

          }
        }
      } else {

        if (data.Id === 2) { // valida si es un EGRESO
          if (this.indexFinanciero !== null) {
            this.acomuladorEgresos = 0;

            this.itemsEgresos.splice(this.indexFinanciero, 1);
            this.itemsEgresos.push(this.financieroFrom.value);

            this.indexFinanciero = null;
            this.BlockCategoria = null;

            this.itemsEgresos.forEach(elementIngresos => {

              this.acomuladorEgresos = this.acomuladorEgresos + elementIngresos.valor;

            });

          } else {
            this.acomuladorEgresos = 0;

            this.itemsEgresos.push(this.financieroFrom.value);
            this.indexFinanciero = null;
            this.BlockCategoria = null;
            this.allItemsForm.push(this.financieroFrom.value);

            this.itemsEgresos.forEach(elementIngresos => {

              this.acomuladorEgresos = this.acomuladorEgresos + elementIngresos.valor;

            });

          }
          this.financieroFrom.reset();
        } else { // valida si es un INGRESO

          if (concep.Id === 9) {

            if (observa === '' || observa === null) { // Mensaje de validacion
              this.notif.onWarning('Advertencia',
                'El campo observación es obligatorio.',
                );
            } else {
              if (this.indexFinanciero !== null) {
                this.acomuladorIngresos = 0;
                this.acomuladorCostos = 0;
                this.acomuladorIngresosOpe = 0;
                this.acomuladorOperacional = 0;
                this.itemsIngresos.splice(this.indexFinanciero, 1);
                this.itemsIngresos.push(this.financieroFrom.value);

                this.indexFinanciero = null;
                this.BlockCategoria = null;

                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                    this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                  } else { // si no a al acomulador ingresos
                    this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                  }
                });
                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) {
                    this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                  }
                });

              } else {
                this.acomuladorIngresos = 0;
                this.acomuladorCostos = 0;
                this.acomuladorIngresosOpe = 0;
                this.acomuladorOperacional = 0;
                this.itemsIngresos.push(this.financieroFrom.value);
                this.indexFinanciero = null;
                this.BlockCategoria = null;
                this.allItemsForm.push(this.financieroFrom.value);

                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                    this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                  } else { // si no a al acomulador ingresos
                    this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                  }
                });
                this.itemsIngresos.forEach(elementIngresos => {
                  if (elementIngresos.concepto.Id === 12) {
                    this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                  }
                });

              }
              this.financieroFrom.reset();
            }

          } else {
            if (this.indexFinanciero !== null) {
              this.acomuladorIngresos = 0;
              this.acomuladorCostos = 0;
              this.acomuladorIngresosOpe = 0;
              this.acomuladorOperacional = 0;
              this.itemsIngresos.splice(this.indexFinanciero, 1);
              this.itemsIngresos.push(this.financieroFrom.value);
              this.indexFinanciero = null;
              this.BlockCategoria = null;

              this.itemsIngresos.forEach(elementIngresos => {
                if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                  this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                } else { // si no a al acomulador ingresos
                  this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                }
              });
              this.itemsIngresos.forEach(elementIngresos => {
                if (elementIngresos.concepto.Id === 12) {
                  this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                }
              });

            } else {
              this.acomuladorIngresos = 0;
              this.acomuladorCostos = 0;
              this.acomuladorIngresosOpe = 0;
              this.acomuladorOperacional = 0;
              this.itemsIngresos.push(this.financieroFrom.value);
              this.indexFinanciero = null;
              this.BlockCategoria = null;
              this.allItemsForm.push(this.financieroFrom.value);

              this.itemsIngresos.forEach(elementIngresos => {
                if (elementIngresos.concepto.Id === 12) { // si es costos lo agregago a acomulador costos
                  this.acomuladorCostos = this.acomuladorCostos + elementIngresos.valor;
                } else { // si no a al acomulador ingresos
                  this.acomuladorIngresos = this.acomuladorIngresos + elementIngresos.valor;
                }
              });
              this.itemsIngresos.forEach(elementIngresos => {
                if (elementIngresos.concepto.Id === 12) {
                  this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                }
              });

            }
            this.financieroFrom.reset();
          }
        }

      }

    } else {
      this.notif.onWarning('Advertencia',
        'Debe seleccionar una operación válida.');
      this.referenciaForm.reset();
    }
  }

  setDataFinancieros() {

    const operacion = this.basicosFrom.get('operacion')?.value;
    const tercerEdit = localStorage.getItem('TerceroNatura');
    const tipoEmpleo = this.basicosFrom.get('tipoEmpleo')?.value;
    const tipoCliente = this.basicosFrom.get('tipoCliente')?.value;
    if (operacion === '5') {

      $('#contactoTab').removeClass('disableTab');
      this.disableTabContacto = false;
      this.allItemsFormSaves.financieroDto = {};
      this.allItemsFormFinanciero = [];
      let validEmpleo = false;

      if (!this.EsProveedor && tipoCliente !== '15') {

      if (this.basicoSave.value.IdTipoEmpleo === '4' || this.basicoSave.value.IdTipoEmpleo === 4 ||
        this.basicoSave.value.IdTipoEmpleo === '6' || this.basicoSave.value.IdTipoEmpleo === 6 ||
        this.basicoSave.value.IdTipoEmpleo === '10' || this.basicoSave.value.IdTipoEmpleo === 10 ||
        this.basicoSave.value.IdTipoEmpleo === '11' || this.basicoSave.value.IdTipoEmpleo === 11) {
        /*valida si el tipo de empleo es Empleado*/
        this.itemsIngresos.forEach(elements => { /* Recoro lo item agregados a los ingresos */
          if (!validEmpleo) { /* Valido el ingreso al foreach cuando se encuentre , debe salir */
            if (elements.concepto.Descripcion === 'Salario') { /* valido si en alguno de los items se agrego salario */
              validEmpleo = true;
            } else {
              validEmpleo = false;
            }
          }
        });

        if (validEmpleo) { /*Si se agrego salario se deja realizar el proceso*/

          this.financieroFrom.get('FinancieroDto')?.setValue(this.allItemsForm);
          this.allItemsForm.forEach(elementr => {
            this.financieroSetForm.get('IdCategoria')?.setValue(elementr.categoria.Id);
            this.financieroSetForm.get('IdConceptoFinan')?.setValue(elementr.concepto.Id);
            this.financieroSetForm.get('Valor')?.setValue(elementr.valor);
            this.financieroSetForm.get('Descripcion')?.setValue(elementr.observacion);
            this.allItemsFormFinanciero.push(this.financieroSetForm.value);
          });

          this.allItemsFormSaves.financieroDto = this.allItemsFormFinanciero;
          this.financieroSave.get('FinancieroDto')?.setValue(this.allItemsFormFinanciero);

          this.allItemsFormSave.push(this.financieroSave.value);
          $('#contactoTab').removeClass('disableTab');
          this.disableTabContacto = true;
          $('#financieroTab').removeClass('activar');
          $('#financieroTab').removeClass('active');
          this.botonFinancieroSiguiente.nativeElement.click();
          this.devolverTab(3);
          this.VolverArriba();

        } else { /* Si no se debe cancelar el proceso */
          $('#contactoTab').addClass('disableTab');
          this.disableTabContacto = false;
          $('#contactoTab').removeClass('activar');
          $('#contactoTab').removeClass('active');
          this.botonFinancieroAnterior.nativeElement.click();
          this.devolverTab(2);
          this.VolverArriba();
          this.notif.onWarning('Advertencia',
            'El tipo de empleo seleccionado debe tener un ingreso por salario.');
        }
      } else if (this.basicoSave.value.IdTipoEmpleo === '' &&
        this.basicosFrom.value.tipoCliente !== '10') { /* Si el tipo de empleo viene vacio  */
        $('#contactoTab').addClass('disableTab');
        this.disableTabContacto = false;
        $('#contactoTab').removeClass('activar');
        $('#contactoTab').removeClass('active');
        this.botonFinancieroAnterior.nativeElement.click();
        this.devolverTab(2);
        this.VolverArriba();
        this.notif.onWarning('Advertencia',
          'Debe llenar el formulario de datos básicos.');
      } else {

        this.allItemsForm.forEach(elementr => {
          this.financieroSetForm.get('IdCategoria')?.setValue(elementr.categoria.Id);
          this.financieroSetForm.get('IdConceptoFinan')?.setValue(elementr.concepto.Id);
          this.financieroSetForm.get('Valor')?.setValue(elementr.valor);
          this.financieroSetForm.get('Descripcion')?.setValue(elementr.observacion);
          this.allItemsFormFinanciero.push(this.financieroSetForm.value);
        });

        this.allItemsFormSaves.financieroDto = this.allItemsFormFinanciero;
        this.financieroSave.get('FinancieroDto')?.setValue(this.allItemsFormFinanciero);
        this.allItemsFormSave.push(this.financieroSave.value);
        $('#contactoTab').removeClass('disableTab');
        this.disableTabContacto = true;
        $('#financieroTab').removeClass('activar');
        $('#financieroTab').removeClass('active');
        this.botonFinancieroSiguiente.nativeElement.click();
        this.devolverTab(3);
        this.VolverArriba();
      }
    } else {

      this.allItemsForm.forEach(elementr => {
          this.financieroSetForm.get('IdCategoria')?.setValue(elementr.categoria.Id);
          this.financieroSetForm.get('IdConceptoFinan')?.setValue(elementr.concepto.Id);
          this.financieroSetForm.get('Valor')?.setValue(elementr.valor);
          this.financieroSetForm.get('Descripcion')?.setValue(elementr.observacion);
          this.allItemsFormFinanciero.push(this.financieroSetForm.value);
        });

      this.allItemsFormSaves.financieroDto = this.allItemsFormFinanciero;
        this.financieroSave.get('FinancieroDto')?.setValue(this.allItemsFormFinanciero);
        this.allItemsFormSave.push(this.financieroSave.value);
        $('#contactoTab').removeClass('disableTab');
        this.disableTabContacto = true;
        $('#financieroTab').removeClass('activar');
        $('#financieroTab').removeClass('active');
        this.botonFinancieroSiguiente.nativeElement.click();
        this.devolverTab(3);
        this.VolverArriba();
    }

    } else if (operacion === '1') {

      this.allItemsFormSaves.financieroDto = {};
      this.allItemsFormFinanciero = [];
      let validEmpleo = false;
      let validForeach = false;

      if (this.basicoSave.value.IdTipoEmpleo === '4' || this.basicoSave.value.IdTipoEmpleo === 4 ||
        this.basicoSave.value.IdTipoEmpleo === '6' || this.basicoSave.value.IdTipoEmpleo === 6 ||
        this.basicoSave.value.IdTipoEmpleo === '10' || this.basicoSave.value.IdTipoEmpleo === 10 ||
        this.basicoSave.value.IdTipoEmpleo === '11' || this.basicoSave.value.IdTipoEmpleo === 11) {
        /*valida si el tipo de empleo es Empleado*/
        this.itemsIngresos.forEach(elements => { /* Recoro lo item agregados a los ingresos */

          if (!validEmpleo) { /* Valido el ingreso al foreach cuando se encuentre , debe salir */
            if (elements.concepto.Descripcion === 'Salario') { /* valido si en alguno de los items se agrego salario */
              validEmpleo = true;
            } else {
              validEmpleo = false;
            }
          }

        });

      /*Valida si agrego una financiero obligaciones */
        this.itemsEgresos.forEach(elements => { /* Recoro lo item agregados a los ingresos */
          if (!validForeach) { /* Valido el ingreso al foreach cuando se encuentre , debe salir */
            if (elements.concepto.Descripcion === 'Obligaciones Financieras') { /* valido si en alguno de los items se agrego salario */
              validForeach = true;
              this.notif.onWarning('Advertencia', 'Tiene obligaciones financieras, debe agregar el total de los pasivos y actualizar.');
              this.botonActivosAnterior.nativeElement.click();
            } else {
              validForeach = false;
            }
          }
        });


        if (validEmpleo) { /*Si se agrego salario se deja realizar el proceso*/

          $('#contactoTab').removeClass('disableTab');
          this.validarSegmentacion = false;
          this.allItemsForm = [];
          this.itemsIngresos.forEach(elementIngreso => {
            this.allItemsForm.push(elementIngreso);
          });
          this.itemsEgresos.forEach(elementEgreso => {
            this.allItemsForm.push(elementEgreso);
          });
          this.allItemsEditNatural.financieroDto = {};
          this.financieroFrom.get('FinancieroDto')?.setValue(this.allItemsForm);
          this.allItemsForm.forEach(elementn => {
            this.financieroSetForm.get('IdTercero')?.setValue(tercerEdit);
            this.financieroSetForm.get('IdDatoFinanciero')?.setValue(elementn.idDatoFinanciero);
            this.financieroSetForm.get('IdCategoria')?.setValue(elementn.categoria.Id);
            this.financieroSetForm.get('IdConceptoFinan')?.setValue(elementn.concepto.Id);
            this.financieroSetForm.get('Valor')?.setValue(elementn.valor);
            this.financieroSetForm.get('Descripcion')?.setValue(elementn.observacion);
            this.allItemsFormFinanciero.push(this.financieroSetForm.value);
          });

          // aqui valido que la vivienda haya cambiado para enviarlo a los formulario necesarios
          const vivienda = +this.basicosFrom.get('tipoVivienda')?.value;
            if (vivienda === 15 && this.viviendaAnterior !== 15) {
            this.notif.onWarning('Advertencia',
              'Debe ingresar una propiedad, es necesaria para el tipo de vivienda seleccionado.',
              );
            this.botonContactoSiguiente.nativeElement.click();
            $('#financieroTab').removeClass('activar');
            $('#financieroTab').removeClass('active');
            this.devolverTab(4);
            this.VolverArriba();
          }

          // valido que el empleo anterior sea diferente de 4 6 y 10 y que el empleo que escogio sea igual a 4 6 0 10
          if ((this.empleoAnterior !== +'4' && this.empleoAnterior !== +'6' && this.empleoAnterior !== +'10'
            && this.empleoAnterior !== +'11') && (tipoEmpleo === '4' || tipoEmpleo === '6' || tipoEmpleo === '10' || tipoEmpleo === '11')) {
            this.RegistrarLaboralEdit(this.allItemsFormLaboralEdit);

          } else if ((this.empleoAnterior === +'4' || this.empleoAnterior === +'6' || this.empleoAnterior === +'10') &&
            (tipoEmpleo !== '4' && tipoEmpleo !== '6' && tipoEmpleo !== '10')) {

          }

          // aqui validar si tiene registros con concepto de salario y
          // si tiene tipo de empleo a empleado para advertile que debe eliminarlos
          this.allItemsEditNatural.financieroDto = this.allItemsFormFinanciero;

          if (this.cambioCivil) {
            this.clientesService.EliminarConyugue(Number(localStorage.getItem('TerceroNatura')).toString()).subscribe(
              result => {
                this.itemsConyugue = [];
                this.cambioCivil = false;
              },
              error => {
                console.error('Error al eliminar el conyugue automatico');
              });
          }
          this.EditarBasicoFinanciero(this.allItemsEditNatural);
          this.allItemsFormSave.push(this.financieroSave.value);
          $('#basicoTab').removeClass('activar');
          $('#basicoTab').removeClass('active');
          this.VolverArriba();
          // }

        } else { /* Si no se debe cancelar el proceso */
          this.botonFinancieroAnterior.nativeElement.click();
          $('#contactoTab').removeClass('activar');
          $('#contactoTab').removeClass('active');
          this.devolverTab(2);
          this.VolverArriba();
          this.notif.onWarning('Advertencia',
            'El tipo de empleo seleccionado debe tener un ingreso por salario.');
        }

      } else {

        /*Valida si agrego una financiero obligaciones */
        this.itemsEgresos.forEach(elements => { /* Recoro lo item agregados a los ingresos */
          if (!validForeach) { /* Valido el ingreso al foreach cuando se encuentre , debe salir */
            if (elements.concepto.Descripcion === 'Obligaciones Financieras') { /* valido si en alguno de los items se agrego salario */
              validForeach = true;
              this.notif.onWarning('Advertencia', 'Tiene obligaciones financieras, debe agregar el total de los pasivos y actualizar.');
            } else {
              validForeach = false;
            }
          }
        });

        $('#contactoTab').removeClass('disableTab');
        this.validarSegmentacion = false;
        this.allItemsForm = [];
        this.itemsIngresos.forEach(elementIngreso => {
          this.allItemsForm.push(elementIngreso);
        });
        this.itemsEgresos.forEach(elementEgreso => {
          this.allItemsForm.push(elementEgreso);
        });
        this.allItemsEditNatural.financieroDto = {};

        this.allItemsForm.forEach(elemente => {
          this.financieroSetForm.get('IdTercero')?.setValue(tercerEdit);
          this.financieroSetForm.get('IdDatoFinanciero')?.setValue(elemente.idDatoFinanciero);
          this.financieroSetForm.get('IdCategoria')?.setValue(elemente.categoria.Id);
          this.financieroSetForm.get('IdConceptoFinan')?.setValue(elemente.concepto.Id);
          this.financieroSetForm.get('Valor')?.setValue(elemente.valor);
          this.financieroSetForm.get('Descripcion')?.setValue(elemente.observacion);
          this.allItemsFormFinanciero.push(this.financieroSetForm.value);
        });

        const vivienda = +this.basicosFrom.get('tipoVivienda')?.value;
          if (vivienda === 15 && this.viviendaAnterior !== 15) {
          this.notif.onWarning('Advertencia',
            'Debe ingresar una propiedad, es necesaria para el tipo de vivienda seleccionado.');
          this.botonContactoSiguiente.nativeElement.click();
          $('#financieroTab').removeClass('activar');
          $('#financieroTab').removeClass('active');
          this.devolverTab(4);
          this.VolverArriba();
        }

        // valido que el empleo anterior sea diferente de 4 6 y 10 y que el empleo que escogio sea igual a 4 6 0 10
        if ((this.empleoAnterior !== +'4' && this.empleoAnterior !== +'6'
          && this.empleoAnterior !== +'10' && this.empleoAnterior !== +'0') &&
          (tipoEmpleo === '4' || tipoEmpleo === '6' || tipoEmpleo === '10')) {
          this.RegistrarLaboralEdit(this.allItemsFormLaboralEdit);

        } else if ((this.empleoAnterior === +'4' || this.empleoAnterior === +'6'
          || this.empleoAnterior === +'10' || this.empleoAnterior === +'0') &&
          (tipoEmpleo !== '4' && tipoEmpleo !== '6' && tipoEmpleo !== '10')) {
        }

        // aqui validar si tiene registros con concepto de salario y
        // si tiene tipo de empleo a empleado para advertile que debe eliminarlos
        this.allItemsEditNatural.financieroDto = this.allItemsFormFinanciero;
        if (this.cambioCivil) {
          this.clientesService.EliminarConyugue(Number(localStorage.getItem('TerceroNatura')).toString()).subscribe(
            result => {
              this.itemsConyugue = [];
              this.cambioCivil = false;
              //   );
            },
            error => {
              console.error('Error al eliminar el conyugue automatico');
            });
        }
        this.EditarBasicoFinanciero(this.allItemsEditNatural);
        this.allItemsFormSave.push(this.financieroSave.value);
        $('#basicoTab').removeClass('activar');
        $('#basicoTab').removeClass('active');
        this.VolverArriba();
      }
    }
  }
  //#endregion

  //#region Metodos de CONTACTOS

  validarVia() {
    const operacion = this.basicosFrom.get('operacion')?.value;
    const viaEscogida = this.contactoForm.get('Vias')?.value;
    if (viaEscogida.Id === 31 || viaEscogida.Id === 28 || viaEscogida.Id === 17
      || viaEscogida.Id === 16 ) {
      // valida si la via escogida es Vereda parabloquear los campos
      this.descripcionNumero = true;
      this.contactoForm.get('NumeroUno')?.reset();
      this.bloquearCampoDir = true;
      this.contactoForm.get('Letra')?.reset();
      this.contactoForm.get('NumeroDos')?.reset();
      this.contactoForm.get('LetraDos')?.reset();
      this.contactoForm.get('Cardi')?.reset();
      this.contactoForm.get('CardiDos')?.reset();
      this.contactoForm.get('NumeroTres')?.reset();
      this.contactoForm.get('NumeroCuatro')?.reset();
      this.Numero = '';
      this.Letra = '';
      this.NumeroDos = '';
      this.LetraDos = '';
      this.Cardinal = '';
      this.CardinalDos = '';
      this.NumeroTres = '';
      this.inmueble = '';
      this.NumeroCuatro = '';
    } else {
      this.descripcionNumero = false;
      this.bloquearCampoDir = null;
    }
    if (operacion === '1') {
      this.ocultarDireccion = false;
 
      this.via = this.contactoForm.get('Vias')?.value.Abreviatura;
      if (this.indexContacto === null ) {
        this.ocultarDireccionEdit = true;
        this.direccionEdit = null;
      } else {
        this.ocultarDireccionEdit = false;
      }
    } else {
      this.ocultarDireccionEdit = true;
      this.ocultarDireccion = false;
      this.Via = this.contactoForm.get('Vias')?.value.Abreviatura;
    }

  }
  value : string = ""
  validarNumeroUno() {
    const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
    const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
    const self = this;
    $('#NumeroUno').on('input', function (e : any) {
      if (!patt.test(self.value)) {
        self.value = self.value.replace(pattReplace, '');
      }
    });
  }
  validarNumeroUnoDescrip() {
    const self = this;
    $('#NumeroUnoDescrip').on('input', function (e : any) {
      if (!/^[ a-z0-9áéíóúüñ]*$/i.test(self.value)) {
        self.value = self.value.replace(/[^ a-z0-9áéíóúüñ]+/ig, '');
      }
    });
  }
   AgregarValidacionesDireccion() {
    // this.contactoForm.controls['Pais'].setValidators([Validators.required]);
    // this.contactoForm.controls['Pais'].setErrors({ 'incorrect': true });
    this.contactoForm.controls['Departamento'].setValidators([Validators.required]);
    this.contactoForm.controls['Departamento'].setErrors({ 'incorrect': true });
    this.contactoForm.controls['Ciudad'].setValidators([Validators.required]);
    this.contactoForm.controls['Ciudad'].setErrors({ 'incorrect': true });
    this.contactoForm.controls['Vias'].setValidators([Validators.required]);
    this.contactoForm.controls['Vias'].setErrors({ 'incorrect': true });
    this.contactoForm.controls['NumeroUno'].setValidators([Validators.required]);
    this.contactoForm.controls['NumeroUno'].setErrors({ 'incorrect': true });
  }
  EliminarValidacionesDireccionContacto(){
    this.contactoForm.controls['Departamento'].setErrors(null);
    this.contactoForm.controls['Departamento'].clearValidators();
    this.contactoForm.controls['Departamento'].setValidators(null);

    this.contactoForm.controls['Ciudad'].setErrors(null);
    this.contactoForm.controls['Ciudad'].clearValidators();
    this.contactoForm.controls['Ciudad'].setValidators(null);

    this.contactoForm.get('Departamento')?.reset();
    this.contactoForm.get('Ciudad')?.reset();
    this.bloqDepartaCont = true;
    this.bloqCiudad = true;
  }
  AgregarValidacionesDireccionActivo() {
    this.activoForm.controls['Departamento'].setValidators([Validators.required]);
    this.activoForm.controls['Departamento'].setErrors({ 'incorrect': true });
    this.activoForm.get('Departamento')?.updateValueAndValidity();
    this.activoForm.controls['Ciudad'].setValidators([Validators.required]);
    this.activoForm.controls['Ciudad'].setErrors({ 'incorrect': true });
    this.activoForm.get('Ciudad')?.updateValueAndValidity();
  }
  EliminarValidacionesDireccionActivo(){
    this.activoForm.controls['Departamento'].setErrors(null);
    this.activoForm.controls['Departamento'].clearValidators();
    this.activoForm.controls['Departamento'].setValidators(null);

    this.activoForm.controls['Ciudad'].setErrors(null);
    this.activoForm.controls['Ciudad'].clearValidators();
    this.activoForm.controls['Ciudad'].setValidators(null);

    this.activoForm.get('Departamento')?.reset();
    this.activoForm.get('Ciudad')?.reset();
    this.bloqDepartaAct = true;
    this.bloqCiudadAct = true;
  }

  AgregarValidacionesDireccionRefe() {
    this.referenciaForm.controls['Departamento'].setValidators([Validators.required]);
    this.referenciaForm.controls['Departamento'].setErrors({ 'incorrect': true });
    this.referenciaForm.get('Departamento')?.updateValueAndValidity();
    this.referenciaForm.controls['Ciudad'].setValidators([Validators.required]);
    this.referenciaForm.controls['Ciudad'].setErrors({ 'incorrect': true });
    this.referenciaForm.get('Ciudad')?.updateValueAndValidity();
  }
  EliminarValidacionesDireccionRefe(){
    this.referenciaForm.controls['Departamento'].setErrors(null);
    this.referenciaForm.controls['Departamento'].clearValidators();
    this.referenciaForm.controls['Departamento'].setValidators(null);

    this.referenciaForm.controls['Ciudad'].setErrors(null);
    this.referenciaForm.controls['Ciudad'].clearValidators();
    this.referenciaForm.controls['Ciudad'].setValidators(null);

    this.referenciaForm.get('Departamento')?.reset();
    this.referenciaForm.get('Ciudad')?.reset();
    this.bloqDepartaRef = true;
  }
  AgregarValidacionesEmail() {
    this.contactoForm.controls['Email'].setValidators([Validators.required,
      Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$')]);
    this.contactoForm.controls['Email'].setErrors({ 'incorrect': true });
  }
  AgregarValidacionesTelefonos() {
    this.contactoForm.controls['Telefonos'].setValidators([Validators.required,
    Validators.minLength(7), Validators.pattern('^[0-9]+')]);
    this.contactoForm.controls['Telefonos'].setErrors({ 'incorrect': true });
  }
  AgregarValidacionesCelular() {
    this.contactoForm.controls['Celular'].setValidators([Validators.required,
    Validators.minLength(10), Validators.pattern('^[0-9]+')]);
    this.contactoForm.controls['Celular'].setErrors({ 'incorrect': true });
  }

  EliminarValidacionesDireccion() {
    this.contactoForm.controls['Pais'].setErrors(null);
    this.contactoForm.controls['Pais'].clearValidators();
    this.contactoForm.controls['Pais'].setValidators(null);
    this.contactoForm.controls['Departamento'].setErrors(null);
    this.contactoForm.controls['Departamento'].clearValidators();
    this.contactoForm.controls['Departamento'].setValidators(null);
    this.contactoForm.controls['Ciudad'].setErrors(null);
    this.contactoForm.controls['Ciudad'].clearValidators();
    this.contactoForm.controls['Ciudad'].setValidators(null);
    this.contactoForm.controls['Vias'].setErrors(null);
    this.contactoForm.controls['Vias'].clearValidators();
    this.contactoForm.controls['Vias'].setValidators(null);
    this.contactoForm.controls['NumeroUno'].setErrors(null);
    this.contactoForm.controls['NumeroUno'].clearValidators();
    this.contactoForm.controls['NumeroUno'].setValidators(null);
  }
  EliminarValidacionesEmail() {
    this.contactoForm.controls['Email'].setErrors(null);
    this.contactoForm.controls['Email'].clearValidators();
    this.contactoForm.controls['Email'].setValidators(null);
  }
  EliminarValidacionesTelefonos() {
    this.contactoForm.controls['Telefonos'].setErrors(null);
    this.contactoForm.controls['Telefonos'].clearValidators();
    this.contactoForm.controls['Telefonos'].setValidators(null);
  }
  ElimnarValidacionesCelular() {
    this.contactoForm.controls['Celular'].setErrors(null);
    this.contactoForm.controls['Celular'].clearValidators();
    this.contactoForm.controls['Celular'].setValidators(null);
  }
  funcionConvert(campo : any) {
    const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
    const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
    if (!patt.test(campo)) {
      campo = campo.replace(pattReplace, '');
      return campo;
    }
  }
  ConcatenarDireccion(campo : any, formCampo : any) {
    // $('#IdComplemento').replace(',', '');
     this.ocultarDireccion = false;
    if (campo === 'via') {
      this.validarVia();
      if (formCampo.Descripcion === 'Vereda') {
        this.descripcionNumero = false;
      } else {
        this.descripcionNumero = true;
      }
      this.Via = formCampo.Abreviatura;
      this.IdVia = formCampo.Id;
    } else if (campo === 'num') {
      if (formCampo !== null) {
        if (formCampo.Descripcion !== undefined && formCampo.Descripcion !== null) {
          if (formCampo.Descripcion !== 'Vereda') {
            this.Numero = this.funcionConvert(formCampo);
          } else {
            this.Numero = formCampo;
          }
        } else {
          this.Numero = formCampo;
        }
     }
    } else if (campo === 'letra') {
         if (formCampo.Descripcion !== undefined && formCampo.Descripcion !== null) {
          this.Letra = formCampo.Descripcion;
         } else {
           this.Letra = '';
         }
      this.IdLetra = formCampo.Id;
    } else if (campo === 'numDos') { //
      this.NumeroDos = this.funcionConvert(formCampo);
    } else if (campo === 'letraDos') {
       if (formCampo.Descripcion !== undefined && formCampo.Descripcion !== null) {
          this.LetraDos = formCampo.Descripcion;
         } else {
           this.LetraDos = '';
         }
      
      this.IdLetraDos = formCampo.Id;
    } else if (campo === 'card') {
       if (formCampo.Descripcion !== undefined && formCampo.Descripcion !== null) {
         this.Cardinal = formCampo.Descripcion;
         } else {
           this.Cardinal = '';
         }
      
      this.IdCardinal = formCampo.Id;
    } else if (campo === 'cardDos') {
      if (formCampo.Descripcion !== undefined && formCampo.Descripcion !== null) {
         this.CardinalDos = formCampo.Descripcion;
         } else {
           this.CardinalDos = '';
         }
      
      this.IdCardinalDos = formCampo.Id;
    }else if (campo === 'numTres') { //
      this.NumeroTres = this.funcionConvert(formCampo);
    } else if (campo === 'inmu') {
      if (formCampo.Descripcion !== undefined && formCampo.Descripcion !== null) {
         this.inmueble = formCampo.Descripcion;
         } else {
           this.inmueble = '';
         }
      this.Idinmueble = formCampo.Id;
    } else if (campo === 'numCuatro') {
      this.NumeroCuatro = this.funcionConvert(formCampo);
    } else if (campo === 'observa') {
      if (formCampo !== null) {
      this.Observacion = formCampo;
      }
    }
    this.DescripcionDireccion = this.Via + ' ' + this.Numero + ' ' + this.Letra + ' ' + this.CardinalDos + ' ' +
      this.NumeroDos + ' ' + this.LetraDos + ' ' + this.Cardinal + ' ' +
      this.NumeroTres + ' ' + this.inmueble + ' ' + this.NumeroCuatro + ' ' + this.Observacion;

    this.DescripcionDireccionIds = this.IdVia + '|' + this.Numero + '|' + this.IdLetra + '|' + this.IdCardinalDos + '|' +
      this.NumeroDos + '|' + this.IdLetraDos + '|' + this.IdCardinal + '|' +
      this.NumeroTres + '|' + this.Idinmueble + '|' + this.NumeroCuatro + '|' + this.Observacion;

    
  }

  setDataContactos() {
    const results = this.basicosFrom.get('operacion')?.value;
    const tipoEmpleo = localStorage.getItem('laborSeleccionada');
    let ppalDir = false;
    let ppalcel = false;
    let tieneDir = null;
    let tieneOtro = null;
    let tieneDirLabor = false;
    let tieneTelLabor = false;
    this.contactoModelList = [];

    if (this.itemsContacto.length <= 0) {
      this.notif.onWarning('Advertencia', 'No hay registros relacionados para continuar.');
    } else {
      this.itemsContacto.forEach(element => {
        if (element.TipoContacto.Id === 2 || element.TipoContacto.Id === 1 ) {
          tieneDir = 1;
        }
        if (element.TipoContacto.Id === 3 || element.TipoContacto.Id === 4 || 
          element.TipoContacto.Id === 5 ||element.TipoContacto.Id === 6) {
          tieneOtro = 1;
        }
      });

      this.itemsContacto.forEach(elementCont => {
        if (elementCont.contactoPpal === true && (elementCont.TipoContacto.Id === 1 || elementCont.TipoContacto.Id === 2)) {
            ppalDir = true;
        }
        if (elementCont.contactoPpal === true && elementCont.TipoContacto.Id === 6) { 
            ppalcel = true;
        }
        if(elementCont.TipoContacto.Id === 2) {
          tieneDirLabor = true;
        }
        if(elementCont.TipoContacto.Id === 5) {
          tieneTelLabor = true;
        }
      });

      if (!ppalDir){ // Direccion
        this.notif.onWarning('Advertencia', 'Debe tener un contacto principal para dirección..',
          );

      } else if (!ppalcel){  // Celular
        this.notif.onWarning('Advertencia', 'Debe ingresar un número de celular principal.',
          );
      } else if (!tieneDirLabor && tipoEmpleo === '4') {
        this.notif.onWarning('Advertencia',
                  'El registro debe contar con una dirección laboral.');
      } else if (!tieneTelLabor && tipoEmpleo === '4') { 
         this.notif.onWarning('Advertencia',
                  'El registro debe contar con un teléfono laboral.');
      } else {
        if (this.itemsContacto.length >= 2 && tieneDir != null && tieneOtro != null) {
          this.itemsContacto.forEach(elementContacto => {
            this.contactoModel = new ContactoModelNatu();
            this.contactoModel.IdTipoContacto = elementContacto.TipoContacto.Id;

            if (elementContacto.TipoContacto.Id === 1 || elementContacto.TipoContacto.Id === 2) {
              this.contactoModel.Descripcion = elementContacto.DescripcionAdress;
              this.contactoModel.DescripcionIds = elementContacto.DescripcionAdressIds;
              if (elementContacto.Ciudad !== null && elementContacto.Ciudad !== undefined) {
                this.contactoModel.IdCiudad = elementContacto.Ciudad.IdCiudad;
              } else {
                 this.contactoModel.IdCiudad = null;
              }
             
              if (elementContacto.Barrio !== null && elementContacto.Barrio !== undefined) {
                this.contactoModel.IdBarrio = elementContacto.Barrio.IdBarrio;
              } else {
                this.contactoModel.IdBarrio = 0;
              }

              if (elementContacto.Pais !== null && elementContacto.Pais !== undefined) {
                this.contactoModel.IdPais = elementContacto.Pais.IdPais;
              } else {
                this.contactoModel.IdPais = null;
              }
            } else if (elementContacto.TipoContacto.Id === 3) {
              this.contactoModel.Descripcion = elementContacto.Email;
              this.contactoModel.IdCiudad = null;
               this.contactoModel.IdPais = null;
              this.contactoModel.IdBarrio = 0;
            } else if (elementContacto.TipoContacto.Id === 5) {
              this.contactoModel.Descripcion = elementContacto.Telefonos;
              this.contactoModel.IdCiudad = null;
               this.contactoModel.IdPais = null;
              this.contactoModel.IdBarrio = 0;
            } else {
              this.contactoModel.Descripcion = elementContacto.Celular;
              this.contactoModel.IdCiudad = null;
               this.contactoModel.IdPais = null;
              this.contactoModel.IdBarrio = 0;
            }
            this.contactoModel.ContactoPrincipal = elementContacto.contactoPpal;

            this.contactoModelList.push(this.contactoModel);
          });

          this.allItemsFormSaves.contactoDto = this.contactoModelList;
          $('#activoTab').removeClass('disableTab');
          this.disableTabActivo = true;
          $('#contactoTab').removeClass('activar');
          $('#contactoTab').removeClass('active');
          this.botonContactoSiguiente.nativeElement.click();
          this.devolverTab(4);
          this.VolverArriba();
          // this.botonContactoSiguiente.nativeElement.click();
          // this.devolverTab(4);
          // this.VolverArriba();

        } else {
          this.notif.onWarning('Advertencia', 'Debe contar con al menos un registro para dirección y otro para celular para continuar');
        }
      }
    }
  }

  ActualizarContacto() {
    let tieneDir = null;
    let tieneOtro = null;
    this.contactoModelList = [];
    this.JuridicoEdit = this.idTerceroConsulta;
    if (this.itemsContacto.length <= 0) {
      this.notif.onWarning('Advertencia', 'No hay registros relacionados para actualizar.');
    } else {
      this.itemsContacto.forEach(element => {
  
        if (element.TipoContacto.Id === 1 || element.TipoContacto.Id === 2 ) {
          if (element.contactoPpal) {
            tieneDir = 1;
          }
        }
        if (element.TipoContacto.Id === 3 || element.TipoContacto.Id === 4 || 
          element.TipoContacto.Id === 5 ||element.TipoContacto.Id === 6) {
          if (element.contactoPpal) {
            tieneOtro = 1;
          }
        }
      });
      if (this.itemsContacto.length >= 2 && tieneDir != null && tieneOtro != null) {
        this.itemsContacto.forEach(elementContacto => {
          this.contactoModel = new ContactoModelNatu();
          this.contactoModel.IdTipoContacto = elementContacto.TipoContacto.Id;

          if (elementContacto.TipoContacto.Id === 1 || elementContacto.TipoContacto.Id === 2) {
            this.contactoModel.Descripcion = elementContacto.DescripcionAdress;
            if (elementContacto.Ciudad !== null && elementContacto.Ciudad !== undefined) {
                this.contactoModel.IdCiudad = elementContacto.Ciudad.IdCiudad;
              } else {
                 this.contactoModel.IdCiudad = null;
              }
             
              if (elementContacto.Barrio !== null && elementContacto.Barrio !== undefined) {
                this.contactoModel.IdBarrio = elementContacto.Barrio.IdBarrio;
              } else {
                this.contactoModel.IdBarrio = 0;
              }

              if (elementContacto.Pais !== null && elementContacto.Pais !== undefined) {
                this.contactoModel.IdPais = elementContacto.Pais.IdPais;
              } else {
                this.contactoModel.IdPais = null;
              }
            this.contactoModel.DescripcionIds = elementContacto.DescripcionAdressIds;
          } else if (elementContacto.TipoContacto.Id === 3) {
            this.contactoModel.Descripcion = elementContacto.Email;
            this.contactoModel.IdCiudad = elementContacto.Ciudad;
            this.contactoModel.IdBarrio = 0;
          } else if (elementContacto.TipoContacto.Id === 4 || elementContacto.TipoContacto.Id === 5 ) {
            this.contactoModel.Descripcion = elementContacto.Telefonos;
            this.contactoModel.IdCiudad = elementContacto.Ciudad;
             this.contactoModel.IdBarrio = 0;
          } else {
            this.contactoModel.Descripcion = elementContacto.Celular;
            this.contactoModel.IdCiudad = elementContacto.Ciudad;
            this.contactoModel.IdBarrio = 0;
          }

          // this.contactoModel.IdBarrio = 0;
          this.contactoModel.ContactoPrincipal = elementContacto.contactoPpal;
          this.contactoModel.IdDatoContacto = elementContacto.IdDatoContacto;
          this.contactoModel.IdTercero = this.JuridicoEdit;

          this.contactoModelList.push(this.contactoModel);
          let data : string | null = localStorage.getItem("Data");
          var dataLocalStorage = JSON.parse(window.atob(data == null ? "" : data ))

          const Usuario = dataLocalStorage.Usuario;
          const Oficina = dataLocalStorage.NumeroOficina;
          this.contactoModel.Usuario = Usuario;
          this.contactoModel.Oficina = Oficina;

        });

       this.allItemsFormSaves.contactoDto = this.contactoModelList;
       this.GuardarLog(this.allItemsFormSaves.contactoDto,1, 0, this.JuridicoEdit,11); //NOTERCERO
        this.clientesService.EditarContactos(this.allItemsFormSaves.contactoDto).subscribe(
          result => {
            if (result) {
              this.dataCorrespondencia = [];
                const tercero = localStorage.getItem('TerceroNatura');
                this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
                this.AsesorModifica(tercero == null ? "" : tercero);
                this.EnableUpdateContacto = false;
                this.clientesService.EditarCorrespondecia(tercero == null ? "" : tercero, 0).subscribe( result => { });
                this.consultarCorrespondenciaPpal(tercero == null ? "" : tercero);
                this.AbrirCorrespondencia.nativeElement.click();
                this.limpiarFormularios(this.contactoForm);
                this.cleanAdrees();
            }
          },
          error => {
            console.error('Error al realizar la actualizacion - juridicos: ' + error);
            this.notif.onDanger('Error', 'No se pudo realizar la actualizacion - Error: ' + error);
          });
      } else {
        if (tieneDir === null || tieneDir === undefined) {
          this.notif.onWarning('Advertencia', 'Debe ingresar una Dirección principal');
          this.EnableUpdateContacto = false;
        }
        if (tieneOtro === null || tieneOtro === undefined) {
          this.notif.onWarning('Advertencia', 'Debe ingresar Celular principal ');
          this.EnableUpdateContacto = false;
        }
      }
    }
  }

  MappearContactos(index : any, data : any) {
    this.dataCiudad = this.dataCiudadesAll;
     let arrayDir: any[] = [];
    this.contactoForm.get('Letra')?.reset();
    this.contactoForm.get('CardiDos')?.reset();
    this.contactoForm.get('LetraDos')?.reset();
    this.contactoForm.get('Cardi')?.reset();
    this.contactoForm.get('Imuebles')?.reset();
    this.contactoForm.reset();
    this.indexContacto = index;
    this.BlockTipoContacto = true;
    // this.contactoForm.get('IdDatoContacto')?.setValue(data.IdDatoContacto);
     if (data.TipoContacto.Id === 2 || data.TipoContacto.Id === 1) { // Mapea Direccion
      if (data.IdTercero !== null && data.IdTipoContacto !== null ) {
        this.JuridicoEdit = data.IdTercero;
        this.contactoForm.get('IdTercero')?.setValue(data.IdTercero);
        this.contactoForm.get('IdDatoContacto')?.setValue(data.IdDatoContacto)
        this.contactoForm.get('Usuario')?.setValue(data.IdDatoContacto);
        this.contactoForm.get('Oficina')?.setValue(data.IdDatoContacto);;
      }
      this.disableDireccion = false;
      this.disablePhone = true;
      this.disableCelular = true;
      this.disableEmail = true;
      this.ocultarDireccionEdit = false;
      this.ocultarDireccion = true;
      this.disableUbicacion = false;
      this.formBuscarLockedPpal = null;
      if(data.Pais !== null && data.Ciudad !== null) {
        this.AgregarValidacionesDireccion();
      } else if (data.Pais !== null && data.Ciudad == null) {
        this.EliminarValidacionesDireccionContacto();
      }
      this.EliminarValidacionesEmail();
      this.EliminarValidacionesTelefonos();
      this.ElimnarValidacionesCelular();
      this.contactoForm.get('TipoContacto')?.setValue(data.TipoContacto);
       if (data.Pais !== null && data.Pais !== undefined) {
         this.contactoForm.get('Pais')?.setValue(data.Pais.IdPais);
         this.PaisMapper = data.Pais;
       }
       if (data.Departamento !== null && data.Departamento !== undefined) {
        this.contactoForm.get('Departamento')?.setValue(data.Departamento.IdDepartamento);
        this.DepartMapper = data.Departamento;
        this.bloqDepartaCont = null;
       } else {
        this.bloqDepartaCont = true;
       }
       if (data.Ciudad !== null && data.Ciudad !== undefined) {
         this.contactoForm.get('Ciudad')?.setValue(data.Ciudad.IdCiudad);
         this.CiudadMapper = data.Ciudad;
         this.bloqCiudad = null;
       } else {
          this.bloqCiudad = true;
       }
       if (data.Ciudad !== null && data.Ciudad !== undefined && data.Ciudad !== '') {
         this.recursosGeneralesService.GetBarrioList(data.Ciudad.IdCiudad).subscribe(
           result => {
             if (result.length > 0) {
               this.bloqBarrio = null;
               this.dataBarrios = result;
             } else {
               this.bloqBarrio = true;
               this.contactoForm.get('Barrio')?.reset();
             }
           },
           error => {
             const errorMessage = <any>error;
             this.notif.onDanger('Error', errorMessage);
             console.error(errorMessage);
           }
         );
       }

      if (data.Barrio !== null && data.Barrio !== undefined && data.Barrio !== '') {
        this.contactoForm.get('Barrio')?.setValue(data.Barrio.IdBarrio);
        this.BarrioMapper = data.Barrio;
      } else {
        this.contactoForm.get('Barrio')?.setValue(null);
        this.bloqBarrio = true;
      }
      this.contactoForm.get('contactoPpal')?.setValue(data.contactoPpal);
      this.DireccionSeleccionada = data.DescripcionAdress;
       this.direccionEdit = data.DescripcionAdress;

      if (data.DescripcionAdressIds !== null &&  data.DescripcionAdressIds !== undefined) {
        arrayDir = data.DescripcionAdressIds.split('|');
        this.direccionEdit  = '';
        this.ocultarDireccionEdit = true;
      }

      if ( arrayDir.length > 0) {
        arrayDir.forEach((x, y) => {
          if (y === 0) {
            if (x !== '' && x !== null && x !== undefined) {
              this.dataVias.forEach((elementVia : any ) => {
                if (+x === elementVia.Id) {
                  this.contactoForm.get('Vias')?.setValue(elementVia);
                  this.Via = elementVia.Abreviatura;
                  this.IdVia = elementVia.Id;
                }
              });
            }
          } else if (y === 2) {
            if (x !== '' && x !== null && x !== undefined) {
              this.dataLetras.forEach((elementLetra : any ) => {
                if (+x === elementLetra.Id) {
                  this.contactoForm.get('Letra')?.setValue(elementLetra);
                  this.Letra = elementLetra.Descripcion;
                  this.IdLetra = elementLetra.Id;
                }
              });
            }
          }else if (y === 3) {
            if (x !== '' && x !== null && x !== undefined) {
              this.dataCardinal.forEach((elementCardinal : any ) => {
                if (+x === elementCardinal.Id) {
                  this.contactoForm.get('CardiDos')?.setValue(elementCardinal);
                  this.CardinalDos = elementCardinal.Descripcion;
                  this.IdCardinalDos = elementCardinal.Id;
                }
              });
            }
          } else if (y === 5) {
            if (x !== '' && x !== null && x !== undefined) {
              this.dataLetras.forEach((elementLetrados : any ) => {
                if (+x === elementLetrados.Id) {
                  this.contactoForm.get('LetraDos')?.setValue(elementLetrados);
                  this.LetraDos = elementLetrados.Descripcion;
                  this.IdLetraDos = elementLetrados.Id;
                }
              });
            }
          } else if (y === 6) {
            if (x !== '' && x !== null && x !== undefined) {
              this.dataCardinal.forEach((elementCardinal : any ) => {
                if (+x === elementCardinal.Id) {
                  this.contactoForm.get('Cardi')?.setValue(elementCardinal);
                  this.Cardinal = elementCardinal.Descripcion;
                  this.IdCardinal = elementCardinal.Id;
                }
              });
            }
          } else if (y === 8) {
            if (x !== '' && x !== null && x !== undefined) {
              this.dataImuebles.forEach((elementInmueble  : any ) => {
                if (+x === elementInmueble.Id) {
                  this.contactoForm.get('Imuebles')?.setValue(elementInmueble);
                  this.inmueble = elementInmueble.Descripcion;
                  this.Idinmueble = elementInmueble.Id;
                }
              });
            }
          }  else if (y === 1) {
            this.contactoForm.get('NumeroUno')?.setValue(x);
            this.Numero = x;
          } else if (y === 4) {
            this.contactoForm.get('NumeroDos')?.setValue(x);
            this.NumeroDos = x;
          } else if (y === 7) {
            this.contactoForm.get('NumeroTres')?.setValue(x);
            this.NumeroTres = x;
          } else if (y === 9) {
            this.contactoForm.get('NumeroCuatro')?.setValue(x);
            this.NumeroCuatro = x;
          } else if (y === 10) {
            this.contactoForm.get('Observacion')?.setValue(x);
            this.Observacion = x;
          } 
          this.DescripcionDireccion = this.Via + ' ' + this.Numero + ' ' + this.Letra + ' ' +  this.CardinalDos + ' ' +
            this.NumeroDos + ' ' + this.LetraDos + ' ' + this.Cardinal + ' ' +
            this.NumeroTres + ' ' + this.inmueble + ' ' + this.NumeroCuatro + ' ' + this.Observacion;

          this.DescripcionDireccionIds = this.IdVia + '|' + this.Numero + '|' + this.IdLetra + '|' + this.IdCardinalDos + '|' +
            this.NumeroDos + '|' + this.IdLetraDos + '|' + this.IdCardinal + '|' +
            this.NumeroTres + '|' + this.Idinmueble + '|' + this.NumeroCuatro + '|' + this.Observacion;
        });
      }


    } else if (data.TipoContacto.Id === 3) { // Mapea email
      this.AgregarValidacionesEmail();
      this.EliminarValidacionesDireccion();
      this.EliminarValidacionesTelefonos();
      this.ElimnarValidacionesCelular();
      this.disableEmail = false;
      this.disableDireccion = true;
      this.disablePhone = true;
      this.disableCelular = true;
      this.ocultarDireccionEdit = true;
      this.ocultarDireccion = true;
      this.disableUbicacion = true;
      this.formBuscarLockedPpal = null;
      if(data.IdTercero !== undefined && data.IdTercero !== null){
       this.JuridicoEdit = data.IdTercero;
        this.contactoForm.get('IdTercero')?.setValue(data.IdTercero);
      }
      this.contactoForm.get('TipoContacto')?.setValue(data.TipoContacto);
      this.contactoForm.get('Email')?.setValue(data.Email);
      this.contactoForm.get('contactoPpal')?.setValue(data.contactoPpal);

    } else if (data.TipoContacto.Id === 5 || data.TipoContacto.Id === 4) { // Mapea Telefono
      this.AgregarValidacionesTelefonos();
      this.EliminarValidacionesDireccion();
      this.EliminarValidacionesEmail();
      this.ElimnarValidacionesCelular();
      this.DigitosContacto = 7;
      this.disablePhone = false;
      this.disableCelular = true;
      this.disableEmail = true;
      this.disableDireccion = true;
      this.ocultarDireccionEdit = true;
      this.ocultarDireccion = true;
      this.disableUbicacion = true;
      this.formBuscarLockedPpal = true;
     if(data.IdTercero !== undefined && data.IdTercero !== null){
       this.JuridicoEdit = data.IdTercero;
        this.contactoForm.get('IdTercero')?.setValue(data.IdTercero);
      }
      this.contactoForm.get('TipoContacto')?.setValue(data.TipoContacto);
      this.contactoForm.get('Telefonos')?.setValue(data.Telefonos);
      this.contactoForm.get('contactoPpal')?.setValue(false);

    } else if (data.TipoContacto.Id === 6) { // Mapea Celular
      this.AgregarValidacionesCelular();
      this.EliminarValidacionesDireccion();
      this.EliminarValidacionesEmail();
      this.EliminarValidacionesTelefonos();
      this.DigitosContacto = 10;
      this.disableCelular = false;
      this.disablePhone = true;
      this.disableEmail = true;
      this.disableDireccion = true;
      this.ocultarDireccionEdit = true;
      this.ocultarDireccion = true;
      this.disableUbicacion = true;
      this.formBuscarLockedPpal = null;
      if(data.IdTercero !== undefined && data.IdTercero !== null){
       this.JuridicoEdit = data.IdTercero;
        this.contactoForm.get('IdTercero')?.setValue(data.IdTercero);
      }
      this.contactoForm.get('TipoContacto')?.setValue(data.TipoContacto);
      this.contactoForm.get('Celular')?.setValue(data.Celular);
      this.contactoForm.get('contactoPpal')?.setValue(data.contactoPpal);
    }
    this.VolverArriba();
  }

  addItemsContactos() {
    let ppalDir = false;
    let ppalEmail = false;
    let ppalcel = false;

    this.contactoForm.get('DescripcionAdress')?.setValue(this.DescripcionDireccion);
    this.contactoForm.get('DescripcionAdressIds')?.setValue(this.DescripcionDireccionIds);
    if (this.contactoForm.valid) {
      if (this.indexContacto === null) {
        this.itemsContacto.forEach(elementCont => {
          if (elementCont.contactoPpal === true && (elementCont.TipoContacto.Id === 1 || elementCont.TipoContacto.Id === 2)) {
            if (this.contactoForm.value.TipoContacto.Id === 1 || this.contactoForm.value.TipoContacto.Id === 2) {
              ppalDir = true;
            }
          }
          if (elementCont.contactoPpal === true && elementCont.TipoContacto.Id === 3) {
            if (this.contactoForm.value.TipoContacto.Id === 3) {
              ppalEmail = true;
            }
          }
          if (elementCont.contactoPpal === true && elementCont.TipoContacto.Id === 6) {
            if (this.contactoForm.value.TipoContacto.Id === 6) {
              ppalcel = true;
            }
          }
        });
        if (ppalDir && this.contactoForm.value.contactoPpal &&
          (this.contactoForm.value.TipoContacto.Id !== 5 && this.contactoForm.value.TipoContacto.Id !== 4)) { // Direccion
          this.notif.onWarning('Advertencia', 'Solo puede tener un contacto principal para dirección.',
            );

        } else if (ppalEmail && this.contactoForm.value.contactoPpal &&
          (this.contactoForm.value.TipoContacto.Id !== 5 && this.contactoForm.value.TipoContacto.Id !== 4)) { // Email
          this.notif.onWarning('Advertencia', 'Solo puede tener un contacto principal para email.',
            );

        } else if (ppalcel && this.contactoForm.value.contactoPpal &&
          (this.contactoForm.value.TipoContacto.Id !== 5 && this.contactoForm.value.TipoContacto.Id !== 4)) { // Celular
          this.notif.onWarning('Advertencia', 'Solo puede tener un contacto principal para celular',
            );

        } else {
          if(this.contactoForm.value.Barrio !== null && this.contactoForm.value.Barrio !== undefined) {
                this.dataBarriosAll.forEach((elementBarr  : any) => {
                if (elementBarr.IdBarrio === +this.contactoForm.value.Barrio) {
                  this.contactoForm.get('Barrio')?.setValue(elementBarr);
                  this.dataCiudadesAll.forEach((elementCiu : any ) => {
                    if (elementCiu.IdCiudad === +this.contactoForm.value.Ciudad) {
                      this.contactoForm.get('Ciudad')?.setValue(elementCiu);
                      this.dataDepartamentosAll.forEach((elementDep : any ) => {
                        if (elementDep.IdDepartamento === +this.contactoForm.value.Departamento) {
                          this.contactoForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any ) => {
                            if (elementPais.IdPais === +this.contactoForm.value.Pais) {
                              this.contactoForm.get('Pais')?.setValue(elementPais);
                              this.pushTable(this.contactoForm.value);
                              this.EnableUpdateContacto = true;
                              this.cleanAdrees();
                            }
                          });
                        }
                      });
                    }
                  });
                }
              });
            } else {
                if (this.contactoForm.value.Ciudad !== null) {
                 this.dataCiudadesAll.forEach((elementCiu : any ) => {
                  if (elementCiu.IdCiudad === +this.contactoForm.value.Ciudad) {
                    this.contactoForm.get('Ciudad')?.setValue(elementCiu);
                    this.dataDepartamentosAll.forEach((elementDep : any ) => {
                      if (elementDep.IdDepartamento === +this.contactoForm.value.Departamento) {
                        this.contactoForm.get('Departamento')?.setValue(elementDep);
                        this.dataPaisesAll.forEach((elementPais : any ) => {
                          if (elementPais.IdPais === +this.contactoForm.value.Pais) {
                            this.contactoForm.get('Pais')?.setValue(elementPais);
                            this.pushTable(this.contactoForm.value);
                            this.EnableUpdateContacto = true;
                            this.cleanAdrees();
                          }
                        });
                      }
                    });
                  }
                });
              } else if (this.contactoForm.value.Ciudad === null && this.contactoForm.value.Pais !== null) {
                this.dataPaisesAll.forEach((elementPais : any ) => {
                  if (elementPais.IdPais === +this.contactoForm.value.Pais) {
                    this.contactoForm.get('Pais')?.setValue(elementPais);
                    this.pushTable(this.contactoForm.value);
                    this.EnableUpdateContacto = true;
                    this.cleanAdrees();
                  }
                });
              } else {
                 this.pushTable(this.contactoForm.value);
                this.EnableUpdateContacto = true;
                this.cleanAdrees();
              }
            }
        }
      } else {

        this.itemsContacto.forEach((x, y) => {
          if (x.contactoPpal === true && (x.TipoContacto.Id === 1 || x.TipoContacto.Id === 2)) {
            if (this.contactoForm.value.TipoContacto.Id === 1 || this.contactoForm.value.TipoContacto.Id === 2) {
              if (this.indexContacto !== y && this.contactoForm.value.contactoPpal === true)  {
                 ppalDir = true;
              }
            }
          }
          if (x.contactoPpal === true && x.TipoContacto.Id === 3) {
            if (this.contactoForm.value.TipoContacto.Id === 3) {
              if (this.indexContacto !== y && this.contactoForm.value.contactoPpal === true) {
                ppalEmail = true;
              }
            }
          }
          if (x.contactoPpal === true && x.TipoContacto.Id === 6) {
            if (this.contactoForm.value.TipoContacto.Id === 6) {
              if (this.indexContacto !== y && this.contactoForm.value.contactoPpal === true) {
                ppalcel = true;
              }
            }
          }
        });
        if (this.indexContacto !== null && this.indexContacto !== undefined && ppalDir && this.contactoForm.value.contactoPpal &&
          (this.contactoForm.value.TipoContacto.Id !== 5 && this.contactoForm.value.TipoContacto.Id !== 4)) { // Direccion
          this.notif.onWarning('Advertencia', 'Solo puede tener un contacto principal para dirección.',
            );
        } else if (this.indexContacto !== null && this.indexContacto !== undefined && ppalEmail && this.contactoForm.value.contactoPpal &&
          (this.contactoForm.value.TipoContacto.Id !== 5 && this.contactoForm.value.TipoContacto.Id !== 4)) { // Email
          this.notif.onWarning('Advertencia', 'Solo puede tener un contacto principal para email.',
            );
        } else if (this.indexContacto !== null && this.indexContacto !== undefined && ppalcel && this.contactoForm.value.contactoPpal &&
          (this.contactoForm.value.TipoContacto.Id !== 5 && this.contactoForm.value.TipoContacto.Id !== 4)) { // Celular
          this.notif.onWarning('Advertencia', 'Solo puede tener un contacto principal para celular',
            );
        } else {
          if (this.contactoForm.value.TipoContacto.Id === 1 || this.contactoForm.value.TipoContacto.Id === 2) {
            if(this.contactoForm.value.Barrio !== null && this.contactoForm.value.Barrio !== undefined) {
                this.dataBarriosAll.forEach((elementBarr  : any) => {
                if (elementBarr.IdBarrio === +this.contactoForm.value.Barrio) {
                  this.contactoForm.get('Barrio')?.setValue(elementBarr);
                  this.dataCiudadesAll.forEach((elementCiu : any ) => {
                    if (elementCiu.IdCiudad === +this.contactoForm.value.Ciudad) {
                      this.contactoForm.get('Ciudad')?.setValue(elementCiu);
                      this.dataDepartamentosAll.forEach((elementDep : any ) => {
                        if (elementDep.IdDepartamento === +this.contactoForm.value.Departamento) {
                          this.contactoForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any ) => {
                            if (elementPais.IdPais === +this.contactoForm.value.Pais) {
                              this.contactoForm.get('Pais')?.setValue(elementPais);
                              this.itemsContacto.splice(Number(this.indexContacto), 1);
                              this.pushTable(this.contactoForm.value);
                              this.indexContacto = null;
                              this.EnableUpdateContacto = true;
                            }
                          });
                        }
                      });
                    }
                  });
                }
              });
            } else {
              if (this.contactoForm.value.Ciudad !== null) {
                 this.dataCiudadesAll.forEach((elementCiu : any ) => {
                  if (elementCiu.IdCiudad === +this.contactoForm.value.Ciudad) {
                    this.contactoForm.get('Ciudad')?.setValue(elementCiu);
                    this.dataDepartamentosAll.forEach((elementDep : any ) => {
                      if (elementDep.IdDepartamento === +this.contactoForm.value.Departamento) {
                        this.contactoForm.get('Departamento')?.setValue(elementDep);
                        this.dataPaisesAll.forEach((elementPais : any ) => {
                          if (elementPais.IdPais === +this.contactoForm.value.Pais) {
                            this.contactoForm.get('Pais')?.setValue(elementPais);
                            this.itemsContacto.splice(Number(this.indexContacto), 1);
                            this.pushTable(this.contactoForm.value);
                            this.indexContacto = null;
                            this.EnableUpdateContacto = true;
                          }
                        });
                      }
                    });
                  }
                });
              } else if (this.contactoForm.value.Ciudad === null && this.contactoForm.value.Pais !== null) {
                this.dataPaisesAll.forEach((elementPais : any ) => {
                  if (elementPais.IdPais === +this.contactoForm.value.Pais) {
                    this.contactoForm.get('Pais')?.setValue(elementPais);
                    this.itemsContacto.splice(Number(this.indexContacto), 1);
                    this.pushTable(this.contactoForm.value);
                    this.EnableUpdateContacto = true;
                  }
                });
              }  else {
                this.itemsContacto.splice(this.indexContacto, 1);
                this.pushTable(this.contactoForm.value);
                this.indexContacto = null;
                this.EnableUpdateContacto = true;
              }
            }
          } else {
              this.itemsContacto.splice(this.indexContacto, 1);
                this.pushTable(this.contactoForm.value);
                this.indexContacto = null;
                this.EnableUpdateContacto = true;
                this.cleanAdrees();
          }
         
        }
      }
    } else {
      this.ValidErrorForm(this.contactoForm);
    }

  }

  pushTable(data : any) {
    this.itemsContacto.push(data);
    this.DescripcionDireccion = '';
    this.cleanAdrees();
    this.limpiarFormularios(this.contactoForm);
    this.BlockTipoContacto = null;
    this.formBuscarLockedPpal = null;
  }

  activarCheck() {
    this.contactoPpal.nativeElement.click();
  }

  cleanAdrees() {
    this.Via = '';
    this.Letra = '';
    this.Numero = '';
    this.NumeroDos = '';
    this.NumeroTres = '';
    this.NumeroCuatro = '';
    this.LetraDos = '';
    this.Cardinal = '';
    this.CardinalDos = '';
    this.inmueble = '';
    this.Observacion = '';
      this.IdVia = '';
    this.IdLetra = ''; 
    this.IdCardinalDos = '';
    this.IdLetraDos = ''; 
    this.IdCardinal = '';
    this.Idinmueble = '';

    this.ocultarDireccion = true;
    this.contactoForm.get('Vias')?.reset();
    this.contactoForm.get('NumeroUno')?.reset();
    this.contactoForm.get('Letra')?.reset();
    this.contactoForm.get('NumeroDos')?.reset();
    this.contactoForm.get('LetraDos')?.reset();
    this.contactoForm.get('Cardi')?.reset();
    this.contactoForm.get('CardiDos')?.reset();
    this.contactoForm.get('NumeroTres')?.reset();
    this.contactoForm.get('Imuebles')?.reset();
    this.contactoForm.get('NumeroCuatro')?.reset();
    this.contactoForm.get('Observacion')?.reset();
    this.contactoForm.get('DescripcionAdressIds')?.reset(); 
    this.DescripcionDireccionIds = '';
    this.descripcionNumero = false;
    this.bloquearCampoDir = null;
  }

  deleteItemsContactos(index : any , data : any) {
    this.itemsContacto.splice(index, 1);
    this.Via = '';
    this.Letra = '';
    this.Numero = '';
    this.NumeroDos = '';
    this.NumeroTres = '';
    this.NumeroCuatro = '';
    this.LetraDos = '';
    this.Cardinal = '';
    this.CardinalDos = '';
    this.inmueble = '';
    this.Observacion = '';
    this.ocultarDireccion = true;
  this.IdVia = '';
    this.IdLetra = ''; 
    this.IdCardinalDos = '';
    this.IdLetraDos = ''; 
    this.IdCardinal = '';
    this.Idinmueble = '';
    if (data.Principal) {
      this.contactoForm.get('Principal')?.setValue(false);
      this.contactoForm.value.Principal = false;
    }
    this.EnableUpdateContacto = true;

  }

  ValidarItemsLaborales() {
    this.basicosFrom.get('tipoEmpleo')?.reset();
    this.basicosFrom.get('tipoEmpleo')?.setValue(0);
    this.itemsLaboralEdit = [];
    this.laboralFormEdit.reset();
  }

  ClianAdressAll() {
     this.Via = '';
    this.Letra = '';
    this.Numero = '';
    this.NumeroDos = '';
    this.NumeroTres = '';
    this.NumeroCuatro = '';
    this.LetraDos = '';
    this.Cardinal = '';
    this.CardinalDos = '';
    this.inmueble = '';
    this.Observacion = '';
    this.IdVia = '';
    this.IdLetra = ''; 
    this.IdCardinalDos = '';
    this.IdLetraDos = ''; 
    this.IdCardinal = '';
    this.Idinmueble = '';
    this.contactoForm.get('Vias')?.reset();
    this.contactoForm.get('NumeroUno')?.reset();
    this.contactoForm.get('Letra')?.reset();
    this.contactoForm.get('NumeroDos')?.reset();
    this.contactoForm.get('LetraDos')?.reset();
    this.contactoForm.get('Cardi')?.reset();
    this.contactoForm.get('NumeroTres')?.reset();
    this.contactoForm.get('Imuebles')?.reset();
    this.contactoForm.get('Numerocuatro')?.reset();
    this.contactoForm.get('Observacion')?.reset();
    this.descripcionNumero = false;
    this.bloquearCampoDir = null;
  }

  ClianAdressPatrimonio() {
    this.Via = '';
    this.Letra = '';
    this.Numero = '';
    this.NumeroDos = '';
    this.NumeroTres = '';
    this.NumeroCuatro = '';
    this.LetraDos = '';
    this.Cardinal = '';
    this.CardinalDos = '';
    this.inmueble = '';
    this.Observacion = '';
    this.activoForm.get('Vias')?.reset();
    this.activoForm.get('NumeroUno')?.reset();
    this.activoForm.get('Letra')?.reset();
    this.activoForm.get('NumeroDos')?.reset();
    this.activoForm.get('LetraDos')?.reset();
    this.activoForm.get('Cardi')?.reset();
    this.activoForm.get('NumeroTres')?.reset();
    this.activoForm.get('Imuebles')?.reset();
    this.activoForm.get('NumeroCuatro')?.reset();
    //this.contactoForm.get('Observacion')?.reset();
  }

  validarCiudadSeleccionada() {
    const ubicacionSelect = this.contactoForm.get('ubicacion')?.value;
    if (ubicacionSelect.IdCiudad === undefined || ubicacionSelect.IdCiudad === null ||
      ubicacionSelect.IdCiudad === '' || ubicacionSelect.IdCiudad === 0) {
      this.contactoForm.get('ubicacion')?.reset();
    } else {
      
    }
  }
  //#endregion

  //#region Metodos de PATRIMONIO

  validarViaActivo(){
   const operacion = this.basicosFrom.get('operacion')?.value;
    const viaEscogida = this.activoForm.get('Vias')?.value;
    if (viaEscogida.Id === 31 || viaEscogida.Id === 28 || viaEscogida.Id === 17
      || viaEscogida.Id === 16 ) {
      // valida si la via escogida es Vereda parabloquear los campos
      this.descripcionNumeroActivo = true;
      this.activoForm.get('NumeroUno')?.reset();
      this.bloquearCampoDirActivo = true;
      this.activoForm.get('Letra')?.reset();
      this.activoForm.get('NumeroDos')?.reset();
      this.activoForm.get('LetraDos')?.reset();
      this.activoForm.get('Cardi')?.reset();
      this.activoForm.get('CardiDos')?.reset();
      this.activoForm.get('NumeroTres')?.reset();
      this.activoForm.get('NumeroCuatro')?.reset();
      this.Numero = '';
      this.Letra = '';
      this.NumeroDos = '';
      this.LetraDos = '';
      this.Cardinal = '';
      this.CardinalDos = '';
      this.NumeroTres = '';
      this.inmueble = '';
      this.NumeroCuatro = '';
    } else {
      this.descripcionNumeroActivo = false;
      this.bloquearCampoDirActivo = null;
    }
    if (operacion === '1') {
      this.ocultarDireccion = false;
 
      this.via = this.activoForm.get('Vias')?.value.Abreviatura;
      if (this.indexContacto === null ) {
        this.ocultarDireccionEdit = true;
        this.direccionEdit = null;
      } else {
        this.ocultarDireccionEdit = false;
      }
    } else {
      this.ocultarDireccionEdit = true;
      this.ocultarDireccion = false;
      this.Via = this.activoForm.get('Vias')?.value.Abreviatura;
    }

  }

  validarNumeroUnoActivo() {
    const self = this;
    const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
    const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
    $('#NumeroUnoActivo').on('input', function (e : any) {
      if (!patt.test(self.value)) {
        self.value = self.value.replace(pattReplace, '');
      }
    });
  }
  validarNumeroUnoDescripActivo() {
    const self = this;
    const patt = new RegExp('/^[ a-z0-9áéíóúüñ]*$/');
    const pattReplace = new RegExp('/[^ a-z0-9áéíóúüñ]+/');
    $('#NumeroUnoDescripActivo').on('input', function (e : any) {
      if (!/^[ a-z0-9áéíóúüñ]*$/i.test(self.value)) {
        self.value = self.value.replace(/[^ a-z0-9áéíóúüñ]+/ig, '');
      }
    });
  }

  GetActivos() {

    this.formLockedHipoPigno = false;
    this.disableAfavor = true;
    this.mostrarObligacion = false;
    this.activoForm.get('VrlAdeudado')?.reset();
    this.activoForm.get('VrlAdeudadoVehi')?.reset();
    this.activoForm.get('hipotecado')?.reset();
    this.activoForm.get('aFavor')?.reset();
    this.activoForm.controls['VrlAdeudado'].setErrors(null);
    this.activoForm.controls['VrlAdeudado'].clearValidators();
    this.activoForm.controls['VrlAdeudado'].setValidators(null);
    this.activoForm.controls['VrlAdeudadoVehi'].setErrors(null);
    this.activoForm.controls['VrlAdeudadoVehi'].clearValidators();
    this.activoForm.controls['VrlAdeudadoVehi'].setValidators(null);
    this.activoForm.controls['aFavor'].setErrors(null);
    this.activoForm.controls['aFavor'].clearValidators();
    this.activoForm.controls['aFavor'].setValidators(null);

    if (this.activoForm.get('tipoActivo')?.value.Id === 2) {
      this.activoForm.get('activo')?.reset();
      this.activoForm.get('identificacionLegal')?.reset();
      this.activoForm.get('ciudadActivos')?.reset();
      this.activoForm.get('VrlComercial')?.reset();
      this.disableControlsVehiculo = true;
      this.LabelHipoPigno = 'Pignorado a favor de';
      this.tipoMatricula = ' vehicular';
      this.MostrarOtroActivo = false;
      this.ocultardireccionActivo = true;
      this.mostrarObligacion = false;
      this.activoForm.controls['VrlAdeudado'].setErrors(null);
      this.activoForm.controls['VrlAdeudado'].clearValidators();
      this.activoForm.controls['VrlAdeudado'].setValidators(null);

      this.activoForm.controls['Pais'].setErrors(null);
      this.activoForm.controls['Pais'].clearValidators();
      this.activoForm.controls['Pais'].setValidators(null);

      this.activoForm.controls['Departamento'].setErrors(null);
      this.activoForm.controls['Departamento'].clearValidators();
      this.activoForm.controls['Departamento'].setValidators(null);

      this.activoForm.controls['Ciudad'].setErrors(null);
      this.activoForm.controls['Ciudad'].clearValidators();
      this.activoForm.controls['Ciudad'].setValidators(null);


      this.activoForm.get('VrlAdeudado')?.reset();
      this.activoForm.get('hipotecado')?.reset();
      this.formLockedHipoPigno = true;
      this.cleanAddress();
    } else if (this.activoForm.get('tipoActivo')?.value.Id === 1) {
      this.activoForm.get('activo')?.reset();
      this.activoForm.get('identificacionLegal')?.reset();
      this.activoForm.get('ciudadActivos')?.reset();
      this.activoForm.get('VrlComercial')?.reset();
      this.disableControlsVehiculo = false;
      this.LabelHipoPigno = 'Hipoteca a favor de';
      this.tipoMatricula = 'inmobiliaria';
      this.MostrarOtroActivo = false;
      this.mostrarObligacion = false;
      this.activoForm.controls['Pais'].setErrors(null);
      this.activoForm.controls['Pais'].clearValidators();
      this.activoForm.controls['Pais'].setValidators(null);

      this.activoForm.controls['Departamento'].setValidators([Validators.required]);
      this.activoForm.controls['Departamento'].setErrors({ 'incorrect': true });
      this.activoForm.controls['Ciudad'].setValidators([Validators.required]);
      this.activoForm.controls['Ciudad'].setErrors({ 'incorrect': true });
      this.activoForm.controls['VrlAdeudado'].setErrors(null);
      this.activoForm.controls['VrlAdeudado'].clearValidators();
      this.activoForm.controls['VrlAdeudado'].setValidators(null);
      this.activoForm.get('VrlAdeudado')?.reset();
      this.activoForm.get('hipotecado')?.reset();
      this.formLockedHipoPigno = true;
      this.PreCargarPais();
    } else {
      this.activoForm.get('activo')?.reset();
      this.activoForm.get('identificacionLegal')?.reset();
      this.activoForm.get('ciudadActivos')?.reset();
      this.activoForm.get('VrlComercial')?.reset();
      this.activoForm.get('VrlAdeudado')?.reset();
      this.activoForm.get('hipotecado')?.reset();
      this.activoForm.controls['Pais'].setErrors(null);
      this.activoForm.controls['Pais'].clearValidators();
      this.activoForm.controls['Pais'].setValidators(null);

      this.activoForm.controls['Departamento'].setErrors(null);
      this.activoForm.controls['Departamento'].clearValidators();
      this.activoForm.controls['Departamento'].setValidators(null);

      this.activoForm.controls['Ciudad'].setErrors(null);
      this.activoForm.controls['Ciudad'].clearValidators();
      this.activoForm.controls['Ciudad'].setValidators(null);
      this.ocultarDireccionEditActivo = true;
      this.ocultardireccionActivo = true;
      this.disableControlsVehiculo = true;
      this.LabelHipoPigno = '';
      this.tipoMatricula = '';
      this.MostrarOtroActivo = true;
    }

    this.clientesGetListService.GetActivos(this.activoForm.get('tipoActivo')?.value.Id).subscribe(
      result => {
        this.dataActivos = result;
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      }
    );
  }

  cleanAddress() {
    this.via = '';
    this.numero = '';
    this.letra = '';
    this.numeroDos = '';
    this.letraDos = '';
    this.cardi = '';
    this.numeroTres = '';
    this.imuebles = '';
    this.numeroCuatro = '';
    this.complement = '';
  }

 

  ConcatenarDireccionPatrimonio(campo : any, formCampo : any ) {
    this.ocultardireccionActivo = false;
    if (campo === 'via') {
      this.validarViaActivo();
      if (formCampo.Descripcion === 'Vereda') {
        this.descripcionNumero = false;
      } else {
        this.descripcionNumero = true;
      }
      this.Via = formCampo.Abreviatura;
      this.IdVia = formCampo.Id;
    } else if (campo === 'num') {
      if (formCampo !== null) {
        if (formCampo.Descripcion !== undefined && formCampo.Descripcion !== null) {
          if (formCampo.Descripcion !== 'Vereda') {
            this.Numero = this.funcionConvert(formCampo);
          } else {
            this.Numero = formCampo;
          }
        } else {
          this.Numero = formCampo;
        }
      }
    } else if (campo === 'letra') {
      this.Letra = formCampo.Descripcion;
      this.IdLetra = formCampo.Id;
    } else if (campo === 'numDos') { //
      this.NumeroDos = this.funcionConvert(formCampo);
    } else if (campo === 'letraDos') {
      this.LetraDos = formCampo.Descripcion;
      this.IdLetraDos = formCampo.Id;
    } else if (campo === 'card') {
      this.Cardinal = formCampo.Descripcion;
      this.IdCardinal = formCampo.Id;
    } else if (campo === 'cardDos') {
      this.CardinalDos = formCampo.Descripcion;
      this.IdCardinalDos = formCampo.Id;
    } else if (campo === 'numTres') { //
      this.NumeroTres = this.funcionConvert(formCampo);
    } else if (campo === 'inmu') {
      this.inmueble = formCampo.Descripcion;
      this.Idinmueble = formCampo.Id;
    } else if (campo === 'numCuatro') {
      this.NumeroCuatro = this.funcionConvert(formCampo);
    } else if (campo === 'observa') {
      this.Observacion = formCampo;
    }
    this.DescripcionDireccion = this.Via + ' ' + this.Numero + ' ' + this.Letra + ' ' + this.CardinalDos + ' ' +
      this.NumeroDos + ' ' + this.LetraDos + ' ' + this.Cardinal + ' ' +
      this.NumeroTres + ' ' + this.inmueble + ' ' + this.NumeroCuatro + ' ' + this.Observacion;

    this.DescripcionDireccionIds = this.IdVia + '|' + this.Numero + '|' + this.IdLetra + '|' + this.IdCardinalDos + '|' +
      this.NumeroDos + '|' + this.IdLetraDos + '|' + this.IdCardinal + '|' +
      this.NumeroTres + '|' + this.Idinmueble + '|' + this.NumeroCuatro + '|' + this.Observacion;
  }

  MappearActivos(i : any, data : any) {
    this.activoForm.reset();
    this.indexActivo = i;
    this.BlockActivo = true;
    let arrayDir: any[] | undefined;

    if (data.tipoActivo.Id === 1) {
      this.LabelHipoPigno = 'Hipoteca a favor de';
      this.tipoMatricula = 'inmobiliaria';
      this.disableControlsVehiculo = false;
      this.ocultarDireccionEditActivo = false;
      this.direccionEditActivo = data.DireccionCompleta;
      this.MostrarOtroActivo = false;
      this.activoForm.get('idPatrimonio')?.setValue(data.IdPatrimonio);
      if (data.DescripcionAdressIds !== null && data.DescripcionAdressIds !== undefined) {
        arrayDir = data.DescripcionAdressIds.split('|');
        this.direccionEdit  = '';
        this.ocultarDireccionEdit = true;
      }
      if(data.Pais !== null && data.Ciudad !== null) {
        this.AgregarValidacionesDireccionActivo();
      } else if (data.Pais !== null && data.Ciudad == null) {
        this.EliminarValidacionesDireccionActivo();
      }
      if (data.Pais !== null) {
      this.activoForm.get('Pais')?.setValue(data.Pais.IdPais);
      this.PaisMapperAct = data.Pais;
      }
      if (data.Departamento !== null) {
      this.activoForm.get('Departamento')?.setValue(data.Departamento.IdDepartamento);
      this.DepartMapperAct = data.Departamento;
      this.bloqDepartaAct = null;
         this.recursosGeneralesService.GetCiudadList(data.Departamento.IdDepartamento).subscribe(
            result => {
              this.bloqCiudad = null;
              this.dataCiudad = result;  
            },
            error => {
              const errorMessage = <any>error;
              this.notif.onDanger('Error', errorMessage);
              console.error(errorMessage);
            }
          );   

      }
      if (data.Ciudad !== null) {
      this.activoForm.get('Ciudad')?.setValue(data.Ciudad.IdCiudad);
      this.CiudadMapperAct = data.Ciudad;
      this.bloqCiudadAct = null;
      }


      if (arrayDir !== undefined) {
        arrayDir.forEach((x, y) => {
          if (y === 0) {
            if (x !== '' && x !== null && x !== undefined) {
              this.dataVias.forEach((elementVia : any ) => {
                if (+x === elementVia.Id) {
                  this.activoForm.get('Vias')?.setValue(elementVia);
                  this.Via = elementVia.Abreviatura;
                  this.IdVia = elementVia.Id;
                }
              });
            }
          } else if (y === 2) {
            if (x !== '' && x !== null && x !== undefined) {
              this.dataLetras.forEach((elementLetra : any ) => {
                if (+x === elementLetra.Id) {
                  this.activoForm.get('Letra')?.setValue(elementLetra);
                  this.Letra = elementLetra.Descripcion;
                  this.IdLetra = elementLetra.Id;
                }
              });
            }
          }else if (y === 3) {
            if (x !== '' && x !== null && x !== undefined) {
              this.dataCardinal.forEach((elementCardinal : any ) => {
                if (+x === elementCardinal.Id) {
                  this.activoForm.get('CardiDos')?.setValue(elementCardinal);
                  this.CardinalDos = elementCardinal.Descripcion;
                  this.IdCardinalDos = elementCardinal.Id;
                }
              });
            }
          } else if (y === 5) {
            if (x !== '' && x !== null && x !== undefined) {
              this.dataLetras.forEach((elementLetrados : any ) => {
                if (+x === elementLetrados.Id) {
                  this.activoForm.get('LetraDos')?.setValue(elementLetrados);
                  this.LetraDos = elementLetrados.Descripcion;
                  this.IdLetraDos = elementLetrados.Id;
                }
              });
            }
          } else if (y === 6) {
            if (x !== '' && x !== null && x !== undefined) {
              this.dataCardinal.forEach((elementCardinal : any ) => {
                if (+x === elementCardinal.Id) {
                  this.activoForm.get('Cardi')?.setValue(elementCardinal);
                  this.Cardinal = elementCardinal.Descripcion;
                  this.IdCardinal = elementCardinal.Id;
                }
              });
            }
          } else if (y === 8) {
            if (x !== '' && x !== null && x !== undefined) {
              this.dataImuebles.forEach((elementInmueble  : any ) => {
                if (+x === elementInmueble.Id) {
                  this.activoForm.get('Imuebles')?.setValue(elementInmueble);
                  this.inmueble = elementInmueble.Descripcion;
                  this.Idinmueble = elementInmueble.Id;
                }
              });
            }
          }  else if (y === 1) {
            this.activoForm.get('NumeroUno')?.setValue(x);
            this.Numero = x;
          } else if (y === 4) {
            this.activoForm.get('NumeroDos')?.setValue(x);
            this.NumeroDos = x;
          } else if (y === 7) {
            this.activoForm.get('NumeroTres')?.setValue(x);
            this.NumeroTres = x;
          } else if (y === 9) {
            this.activoForm.get('NumeroCuatro')?.setValue(x);
            this.NumeroCuatro = x;
          } else if (y === 10) {
            this.activoForm.get('ObservacionCom')?.setValue(x);
            this.Observacion = x;
          } 
          this.DescripcionDireccion = this.Via + ' ' + this.Numero + ' ' + this.Letra + ' ' +  this.CardinalDos + ' ' +
            this.NumeroDos + ' ' + this.LetraDos + ' ' + this.Cardinal + ' ' +
            this.NumeroTres + ' ' + this.inmueble + ' ' + this.NumeroCuatro + ' ' + this.Observacion;

          this.DescripcionDireccionIds = this.IdVia + '|' + this.Numero + '|' + this.IdLetra + '|' + this.IdCardinalDos + '|' +
            this.NumeroDos + '|' + this.IdLetraDos + '|' + this.IdCardinal + '|' +
            this.NumeroTres + '|' + this.Idinmueble + '|' + this.NumeroCuatro + '|' + this.Observacion;
        });
      }



      if ((data.hipotecado !== 'true' && data.hipotecado !== true) || data.hipotecado === null) {
        this.activoForm.controls['VrlAdeudado'].setErrors(null);
        this.activoForm.controls['VrlAdeudado'].clearValidators();
        this.activoForm.controls['VrlAdeudado'].setValidators(null);

        this.activoForm.controls['aFavor'].setErrors(null);
        this.activoForm.controls['aFavor'].clearValidators();
        this.activoForm.controls['aFavor'].setValidators(null);

        this.activoForm.controls['aFavor'].setErrors(null);
        this.activoForm.controls['aFavor'].clearValidators();
        this.activoForm.controls['aFavor'].setValidators(null);

        this.activoForm.controls['VrlAdeudadoVehi'].setErrors(null);
        this.activoForm.controls['VrlAdeudadoVehi'].clearValidators();
        this.activoForm.controls['VrlAdeudadoVehi'].setValidators(null);
      } else {
        this.activoForm.controls['VrlAdeudado'].setErrors({ 'incorrect': true });
        this.activoForm.controls['VrlAdeudado'].setValidators([Validators.required]);

        this.activoForm.controls['VrlAdeudadoVehi'].setErrors(null);
        this.activoForm.controls['VrlAdeudadoVehi'].clearValidators();
        this.activoForm.controls['VrlAdeudadoVehi'].setValidators(null);
      }



    } else if (data.tipoActivo.Id === 3) {
      this.LabelHipoPigno = '';
      this.tipoMatricula = '';
      this.MostrarOtroActivo = true;
      this.disableControlsVehiculo = true;
      this.activoForm.controls['VrlAdeudadoVehi'].setErrors(null);
      this.activoForm.controls['VrlAdeudadoVehi'].clearValidators();
      this.activoForm.controls['VrlAdeudadoVehi'].setValidators(null);

      this.activoForm.controls['VrlAdeudado'].setErrors(null);
      this.activoForm.controls['VrlAdeudado'].clearValidators();
      this.activoForm.controls['VrlAdeudado'].setValidators(null);

      this.activoForm.controls['aFavor'].setErrors(null);
      this.activoForm.controls['aFavor'].clearValidators();
      this.activoForm.controls['aFavor'].setValidators(null);

      this.activoForm.controls['aFavor'].setErrors(null);
      this.activoForm.controls['aFavor'].clearValidators();
      this.activoForm.controls['aFavor'].setValidators(null);

      this.activoForm.controls['Pais'].setErrors(null);
      this.activoForm.controls['Pais'].clearValidators();
      this.activoForm.controls['Pais'].setValidators(null);

      this.activoForm.controls['Departamento'].setErrors(null);
      this.activoForm.controls['Departamento'].clearValidators();
      this.activoForm.controls['Departamento'].setValidators(null);

      this.activoForm.controls['Ciudad'].setErrors(null);
      this.activoForm.controls['Ciudad'].clearValidators();
      this.activoForm.controls['Ciudad'].setValidators(null);
    } else {
      this.LabelHipoPigno = 'Pignorado a favor de';
      this.tipoMatricula = ' vehicular';
      this.disableControlsVehiculo = true;
      this.ocultarDireccionEditActivo = true;
      this.direccionEditActivo = null;
      this.MostrarOtroActivo = false;

      if(data.Pais !== null && data.Ciudad !== null) {
        this.AgregarValidacionesDireccionActivo();
      } else if (data.Pais !== null && data.Ciudad == null) {
        this.EliminarValidacionesDireccionActivo();
      }
      if (data.Pais !== null) {
      this.activoForm.get('Pais')?.setValue(data.Pais.IdPais);
      this.PaisMapperAct = data.Pais;
      }
      if (data.Departamento !== null) {
      this.activoForm.get('Departamento')?.setValue(data.Departamento.IdDepartamento);
      this.DepartMapperAct = data.Departamento;
      this.bloqDepartaAct = null;
         this.recursosGeneralesService.GetCiudadList(data.Departamento.IdDepartamento).subscribe(
            result => {
              this.bloqCiudad = null;
              this.dataCiudad = result;  
            },
            error => {
              const errorMessage = <any>error;
              this.notif.onDanger('Error', errorMessage);
              console.error(errorMessage);
            }
          );   

      }
      if (data.Ciudad !== null) {
      this.activoForm.get('Ciudad')?.setValue(data.Ciudad.IdCiudad);
      this.CiudadMapperAct = data.Ciudad;
      this.bloqCiudadAct = null;
      }

      if ((data.hipotecado !== 'true' && data.hipotecado !== true) || data.hipotecado === null) {
        this.activoForm.controls['VrlAdeudadoVehi'].setErrors(null);
        this.activoForm.controls['VrlAdeudadoVehi'].clearValidators();
        this.activoForm.controls['VrlAdeudadoVehi'].setValidators(null);

        this.activoForm.controls['aFavor'].setErrors(null);
        this.activoForm.controls['aFavor'].clearValidators();
        this.activoForm.controls['aFavor'].setValidators(null);

        this.activoForm.controls['VrlAdeudado'].setErrors(null);
        this.activoForm.controls['VrlAdeudado'].clearValidators();
        this.activoForm.controls['VrlAdeudado'].setValidators(null);

        this.activoForm.controls['Pais'].setErrors(null);
      this.activoForm.controls['Pais'].clearValidators();
      this.activoForm.controls['Pais'].setValidators(null);

      this.activoForm.controls['Departamento'].setErrors(null);
      this.activoForm.controls['Departamento'].clearValidators();
      this.activoForm.controls['Departamento'].setValidators(null);

      this.activoForm.controls['Ciudad'].setErrors(null);
      this.activoForm.controls['Ciudad'].clearValidators();
      this.activoForm.controls['Ciudad'].setValidators(null);
      } else {
        this.activoForm.controls['VrlAdeudadoVehi'].setErrors({ 'incorrect': true });
        this.activoForm.controls['VrlAdeudadoVehi'].setValidators([Validators.required]);

        this.activoForm.controls['VrlAdeudado'].setErrors(null);
        this.activoForm.controls['VrlAdeudado'].clearValidators();
        this.activoForm.controls['VrlAdeudado'].setValidators(null);

        this.activoForm.controls['aFavor'].setErrors(null);
        this.activoForm.controls['aFavor'].clearValidators();
        this.activoForm.controls['aFavor'].setValidators(null);

        this.activoForm.controls['Pais'].setErrors(null);
      this.activoForm.controls['Pais'].clearValidators();
      this.activoForm.controls['Pais'].setValidators(null);

      this.activoForm.controls['Departamento'].setErrors(null);
      this.activoForm.controls['Departamento'].clearValidators();
      this.activoForm.controls['Departamento'].setValidators(null);

      this.activoForm.controls['Ciudad'].setErrors(null);
      this.activoForm.controls['Ciudad'].clearValidators();
      this.activoForm.controls['Ciudad'].setValidators(null);
      }
    }

    if ((data.hipotecado !== 'true' && data.hipotecado !== true) || data.hipotecado === null) {
      this.formLockedHipoPigno = true;
      this.disableAfavor = true;
    } else {
      this.formLockedHipoPigno = null;
      this.disableAfavor = false;
      this.mostrarObligacion = true;
    }
    this.activoForm.get('tipoActivo')?.setValue(data.tipoActivo);
    this.activoForm.get('identificacionLegal')?.setValue(data.identificacionLegal);
    this.activoForm.get('DireccionCompleta')?.setValue(data.DireccionCompleta);

    this.activoForm.get('VrlComercial')?.setValue(data.VrlComercial);
    this.vlrComercialAnterior = data.VrlComercial;

    if (data.tipoActivo.Id === 1) {
      this.activoForm.get('VrlAdeudado')?.setValue(data.VrlAdeudado);
    } else if (data.tipoActivo.Id === 2) {
      this.activoForm.get('VrlAdeudadoVehi')?.setValue(data.VrlAdeudadoVehi);
    }

    if (data.Marca !== null && data.Marca !== undefined) {
      this.activoForm.get('Marca')?.setValue(data.Marca);
    }

    this.activoForm.get('ModeloActivo')?.setValue(data.ModeloActivo);
    this.activoForm.get('Placa')?.setValue(data.Placa);
    if (data.tipoActivo.Id === 1) {
      this.activoForm.get('aFavor')?.setValue(data.aFavor);
    } else if (data.tipoActivo.Id === 2) {
      this.activoForm.get('aFavor')?.setValue(data.aFavor);
    }

    this.activoForm.get('hipotecado')?.setValue(data.hipotecado);

    if (data.descripcionOtro === undefined || data.descripcionOtro === null) {
      this.activoForm.get('descripcionOtro')?.setValue('');
    } else {
      this.activoForm.get('descripcionOtro')?.setValue(data.descripcionOtro);
    }

    this.clientesGetListService.GetActivos(this.activoForm.get('tipoActivo')?.value.Id).subscribe(
      result => {
        this.dataActivos = result;
        this.dataActivos.forEach((elementDataActivo : any) => {
          if (elementDataActivo.Id === data.activo.Id) {
            this.activoForm.get('activo')?.setValue(elementDataActivo);
          }
        });
      });

    this.VolverArriba();
  }

  addItemsActivos() {
    const operacion = this.basicosFrom.get('operacion')?.value;
    if (operacion === '1') {

      if (this.activoForm.value.tipoActivo.Id === 1) { // Propiedad

        if ((this.Via === undefined || this.Via == null || this.Numero === undefined ||
          this.Numero === null || this.Numero === '') && this.indexActivo !== null) { // si edit item y no tiene dir agrega la vieja

          if (this.Via === '' && this.Numero === '') {
            if(this.DescripcionDireccion !== undefined && this.DescripcionDireccion !== null){
              this.direccionArray = this.DescripcionDireccion;
              this.activoForm.get('DescripcionAdressIds')?.setValue(this.DescripcionDireccionIds);
            } else {
              this.direccionArray = this.activoForm.value.DireccionCompleta;
              this.DescripcionDireccion =  this.activoForm.value.DireccionCompleta;
            }   
          }
          if (this.activoForm.value.VrlComercial === '') {
            this.EnableUpdatePatrimonio = false;
            this.notif.onWarning('Advertencia', 'El valor comercial y el valor hipotecado y/o pignorado son obligatorios.',
              );
          } else {
            if (this.activoForm.value.hipotecado && (this.activoForm.get('aFavor')?.value === '' ||
              this.activoForm.get('aFavor')?.value === null  || this.activoForm.get('aFavor')?.value === undefined)) {
              this.notif.onWarning('Advertencia', 'El campo ' + this.LabelHipoPigno + ' es obligatorio');
            } else {
             if (this.DescripcionDireccion !== undefined && this.DescripcionDireccion !== null && this.DescripcionDireccion !== "") {
              this.direccionArray = this.DescripcionDireccion;
              this.activoForm.get('DescripcionAdressIds')?.setValue(this.DescripcionDireccionIds);
              this.activoForm.get('DireccionCompleta')?.setValue(this.direccionArray);
            } else {
              this.direccionArray = this.activoForm.value.DireccionCompleta;
              this.DescripcionDireccion =  this.activoForm.value.DireccionCompleta;
               this.activoForm.get('DireccionCompleta')?.setValue( this.activoForm.value.DireccionCompleta);
            }   

              if (this.indexActivo !== null) {
                this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
                this.itemsPropiedad.splice(this.indexActivo, 1);
                this.indexActivo = null;
              }
                if (this.activoForm.value.Ciudad !== null) {
                  this.dataCiudadesAll.forEach((elementCiu : any ) => {
                  if (elementCiu.IdCiudad === +this.activoForm.value.Ciudad) {
                    this.activoForm.get('Ciudad')?.setValue(elementCiu);
                    this.dataDepartamentosAll.forEach((elementDep : any ) => {
                      if (elementDep.IdDepartamento === +this.activoForm.value.Departamento) {
                        this.activoForm.get('Departamento')?.setValue(elementDep);
                        this.dataPaisesAll.forEach((elementPais : any ) => {
                          if (elementPais.IdPais === +this.activoForm.value.Pais) {
                            this.activoForm.get('Pais')?.setValue(elementPais);

                            this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
                            this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
                            this.calcularPatrimonio();
                            this.itemsPropiedad.push(this.activoForm.value);
                            this.BlockActivo = null;
                            this.activoForm.reset();
                            this.cleanAdress();
                            this.ocultardireccionActivo = true;
                            this.ocultarDireccionEditActivo = true;
                            this.direccionEditActivo = '';
                            this.indexActivo = null;
                            this.EnableUpdatePatrimonio = true;
                            this.formLockedHipoPigno = true;
                            this.DescripcionDireccion = '';
                          }
                        });
                      }
                    });
                  }
                });
              } else {
                this.dataPaisesAll.forEach((elementPais : any ) => {
                        if (elementPais.IdPais === +this.activoForm.value.Pais) {
                          this.activoForm.get('Pais')?.setValue(elementPais);

                           this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
                          this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
                          this.calcularPatrimonio();
                          this.itemsPropiedad.push(this.activoForm.value);
                          this.BlockActivo = null;
                          this.activoForm.reset();
                          this.cleanAdress();
                          this.ocultardireccionActivo = true;
                          this.ocultarDireccionEditActivo = true;
                          this.direccionEditActivo = '';
                          this.indexActivo = null;
                          this.EnableUpdatePatrimonio = true;
                          this.formLockedHipoPigno = true;
                          this.DescripcionDireccion = '';
                        }
                      });
              }
            }
          }
        } else if ((this.Via === undefined || this.Via === '' || this.Numero === undefined ||
          this.Numero === null || this.Numero === '') && this.indexActivo === null) { // si add edit y no tiene direccion no lo deje ir
          this.notif.onWarning('Advertencia', 'Debe seleccionar una vía e ingresar un número.');
          this.EnableUpdatePatrimonio = false;
        } else {
          if (this.activoForm.value.hipotecado && (this.activoForm.get('aFavor')?.value === '' ||
            this.activoForm.get('aFavor')?.value === null || this.activoForm.get('aFavor')?.value === undefined)) {
            this.notif.onWarning('Advertencia', 'El campo ' + this.LabelHipoPigno + ' es obligatorio');
          } else {
            if (this.activoForm.value.VrlComercial === '') {
              this.EnableUpdatePatrimonio = false;
              this.notif.onWarning('Advertencia', 'El valor comercial y el valor hipotecado y/o pignorado son obligatorios.',
                );
            } else {
              if (this.DescripcionDireccion !== undefined && this.DescripcionDireccion !== null && this.DescripcionDireccion !== "") {
              this.direccionArray = this.DescripcionDireccion;
              this.activoForm.get('DescripcionAdressIds')?.setValue(this.DescripcionDireccionIds);
              this.activoForm.get('DireccionCompleta')?.setValue(this.direccionArray);
            } else {
              this.direccionArray = this.activoForm.value.DireccionCompleta;
              this.DescripcionDireccion =  this.activoForm.value.DireccionCompleta;
               this.activoForm.get('DireccionCompleta')?.setValue( this.activoForm.value.DireccionCompleta);
            }   

              if (this.indexActivo !== null) {
                this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
                this.itemsPropiedad.splice(this.indexActivo, 1);
                this.indexActivo = null;
              }
              if (this.activoForm.value.Ciudad !== null) {
              this.dataCiudadesAll.forEach((elementCiu : any ) => {
                if (elementCiu.IdCiudad === +this.activoForm.value.Ciudad) {
                  this.activoForm.get('Ciudad')?.setValue(elementCiu);
                  this.dataDepartamentosAll.forEach((elementDep : any ) => {
                    if (elementDep.IdDepartamento === +this.activoForm.value.Departamento) {
                      this.activoForm.get('Departamento')?.setValue(elementDep);
                      this.dataPaisesAll.forEach((elementPais : any ) => {
                        if (elementPais.IdPais === +this.activoForm.value.Pais) {
                          this.activoForm.get('Pais')?.setValue(elementPais);

                          this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
                          this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
                          this.calcularPatrimonio();
                          this.itemsPropiedad.push(this.activoForm.value);
                          this.BlockActivo = null;
                          this.activoForm.reset();
                          this.cleanAdress();
                          this.ocultardireccionActivo = true;
                          this.ocultarDireccionEditActivo = true;
                          this.direccionEditActivo = '';
                          this.indexActivo = null;
                          this.EnableUpdatePatrimonio = true;
                          this.formLockedHipoPigno = true;
                          this.DescripcionDireccion = '';
                        }
                      });
                    }
                  });
                }
              });
            } else {
                this.dataPaisesAll.forEach((elementPais : any ) => {
                  if (elementPais.IdPais === +this.activoForm.value.Pais) {
                    this.activoForm.get('Pais')?.setValue(elementPais);

                    this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
                    this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
                    this.calcularPatrimonio();
                    this.itemsPropiedad.push(this.activoForm.value);
                    this.BlockActivo = null;
                    this.activoForm.reset();
                    this.cleanAdress();
                    this.ocultardireccionActivo = true;
                    this.ocultarDireccionEditActivo = true;
                    this.direccionEditActivo = '';
                    this.indexActivo = null;
                    this.EnableUpdatePatrimonio = true;
                    this.formLockedHipoPigno = true;
                    this.DescripcionDireccion = '';
                  }
                });
            }

            }
          }
        }

      } else if (this.activoForm.value.tipoActivo.Id === 3) { // Otro

        if (this.indexActivo !== null) {
          this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
          this.itemsOtros.splice(this.indexActivo, 1);
          this.indexActivo = null;
        }
        // if (this.activoForm.value.ciudadActivos.IdCiudad === undefined) {
          this.activoForm.get('ciudadActivos')?.setValue(null);
        // }
        if (this.activoForm.value.activo !== null && this.activoForm.value.activo !== undefined &&
          this.activoForm.value.activo !== '') {
          if (this.activoForm.value.VrlComercial !== null && this.activoForm.value.VrlComercial !== undefined &&
            this.activoForm.value.VrlComercial !== '') {
            this.itemsOtros.push(this.activoForm.value);
            this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
            this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
            this.calcularPatrimonio();
            this.BlockActivo = null;
            this.activoForm.reset();
            this.ocultardireccionActivo = true;
            this.indexActivo = null;
            this.EnableUpdatePatrimonio = true;
          } else {
            this.notif.onWarning('Advertencia',
              'El valor comercial es obligatorio.');
          }
        } else {
          this.notif.onWarning('Advertencia',
            'El activo es obligatorio');
        }

      } else { // Vehiculo
        if (this.activoForm.value.Marca === '' || this.activoForm.value.ModeloActivo === '' ||
          this.activoForm.value.Placa === '' || this.activoForm.value.VrlComercial === '') {
          this.EnableUpdatePatrimonio = false;
          this.notif.onWarning('Advertencia', 'Los campos marca, modelo, placa y valor comercial son obligatorios.',
            );
        } else {
          if (this.activoForm.value.hipotecado && (this.activoForm.get('aFavor')?.value === '' ||
            this.activoForm.get('aFavor')?.value === null || this.activoForm.get('aFavor')?.value === undefined)) {
            this.notif.onWarning('Advertencia', 'El campo ' + this.LabelHipoPigno + ' es obligatorio');
          } else {
            if (this.activoForm.value.Ciudad !== null) {
              this.dataCiudadesAll.forEach((elementCiu : any) => {
                if (elementCiu.IdCiudad === +this.activoForm.value.Ciudad) {
                  this.activoForm.get('Ciudad')?.setValue(elementCiu);
                  this.dataDepartamentosAll.forEach((elementDep : any) => {
                    if (elementDep.IdDepartamento === +this.activoForm.value.Departamento) {
                      this.activoForm.get('Departamento')?.setValue(elementDep);
                      this.dataPaisesAll.forEach((elementPais : any) => {
                        if (elementPais.IdPais === +this.activoForm.value.Pais) {
                          this.activoForm.get('Pais')?.setValue(elementPais);

                          if (this.indexActivo !== null) {
                            this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
                            this.itemsVehiculo.splice(this.indexActivo, 1);
                            this.indexActivo = null;
                          }
                          this.activoForm.get('ciudadActivos')?.setValue(null);
                          this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
                          this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
                          this.calcularPatrimonio();
                          this.itemsVehiculo.push(this.activoForm.value);
                          this.BlockActivo = null;
                          this.activoForm.reset();
                          this.ocultardireccionActivo = true;
                          this.indexActivo = null;
                          this.EnableUpdatePatrimonio = true;
                          this.formLockedHipoPigno = true;
                        }
                      });
                    }
                  });
                }
              });
            } else {
                this.dataPaisesAll.forEach((elementPais : any ) => {
                  if (elementPais.IdPais === +this.activoForm.value.Pais) {
                    this.activoForm.get('Pais')?.setValue(elementPais);

                    if (this.indexActivo !== null) {
                      this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
                      this.itemsVehiculo.splice(this.indexActivo, 1);
                      this.indexActivo = null;
                    }
                    this.activoForm.get('ciudadActivos')?.setValue(null);
                    this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
                    this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
                    this.calcularPatrimonio();
                    this.itemsVehiculo.push(this.activoForm.value);
                    this.BlockActivo = null;
                    this.activoForm.reset();
                    this.ocultardireccionActivo = true;
                    this.indexActivo = null;
                    this.EnableUpdatePatrimonio = true;
                    this.formLockedHipoPigno = true;
                  }
                });
            }
 
          }
        }
      }
    } else if (operacion === '5') {
      if (this.activoForm.value.tipoActivo.Id === 1) { // propiedad
        if ((this.Via === undefined || this.Via == null || this.Numero === undefined ||
          this.Numero === null || this.Numero === '') && this.indexActivo !== null) { // si edit in add y no tiene dir agrega la vieja
          if (this.Via === '' && this.Numero === '') {
            this.direccionArray = this.DescripcionDireccion;
            this.activoForm.get('DescripcionAdressIds')?.setValue(this.DescripcionDireccionIds);
          }
          if (this.activoForm.value.VrlComercial === '') { // Mensaje de validacion
            this.notif.onWarning('Advertencia', 'El valor comercial y el valor hipotecado y/o pignorado son obligatorios.',
              );
          } else {
            if (this.activoForm.value.hipotecado && (this.activoForm.get('aFavor')?.value === '' ||
              this.activoForm.get('aFavor')?.value === null || this.activoForm.get('aFavor')?.value === undefined)) {
              this.notif.onWarning('Advertencia', 'El campo ' + this.LabelHipoPigno + ' es obligatorio');
            } else {
              if (this.activoForm.value.Ciudad !== null) {
              this.dataCiudadesAll.forEach((elementCiu : any) => {
                if (elementCiu.IdCiudad === +this.activoForm.value.Ciudad) {
                  this.activoForm.get('Ciudad')?.setValue(elementCiu);
                  this.dataDepartamentosAll.forEach((elementDep : any) => {
                    if (elementDep.IdDepartamento === +this.activoForm.value.Departamento) {
                      this.activoForm.get('Departamento')?.setValue(elementDep);
                      this.dataPaisesAll.forEach((elementPais : any) => {
                        if (elementPais.IdPais === +this.activoForm.value.Pais) {
                          this.activoForm.get('Pais')?.setValue(elementPais);

                           if (this.indexActivo !== null) {
                            this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
                            this.itemsPropiedad.splice(this.indexActivo, 1);
                            this.indexActivo = null;
                          }
                          this.direccionArray = this.DescripcionDireccion;
                          this.activoForm.get('DescripcionAdressIds')?.setValue(this.DescripcionDireccionIds);
                          this.activoForm.get('DireccionCompleta')?.setValue(this.direccionArray);
                          this.itemsPropiedad.push(this.activoForm.value);
                          this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
                          this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
                          this.calcularPatrimonio();
                          this.activoForm.reset();
                          this.cleanAdress();
                          this.BlockActivo = null;
                          this.indexActivo = null;
                          this.direccionEditActivo = '';
                          this.ocultarDireccionEditActivo = true;
                          this.ocultardireccionActivo = true;
                          this.formLockedHipoPigno = true;
                          this.DescripcionDireccion = '';
                        }
                      });
                    }
                  });
                }
              });
            } else {
              this.dataPaisesAll.forEach((elementPais : any ) => {
                        if (elementPais.IdPais === +this.activoForm.value.Pais) {
                          this.activoForm.get('Pais')?.setValue(elementPais);

                           if (this.indexActivo !== null) {
                            this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
                            this.itemsPropiedad.splice(this.indexActivo, 1);
                            this.indexActivo = null;
                          }
                          this.direccionArray = this.DescripcionDireccion;
                          this.activoForm.get('DescripcionAdressIds')?.setValue(this.DescripcionDireccionIds);
                          this.activoForm.get('DireccionCompleta')?.setValue(this.direccionArray);
                          this.itemsPropiedad.push(this.activoForm.value);
                          this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
                          this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
                          this.calcularPatrimonio();
                          this.activoForm.reset();
                          this.cleanAdress();
                          this.BlockActivo = null;
                          this.indexActivo = null;
                          this.direccionEditActivo = '';
                          this.ocultarDireccionEditActivo = true;
                          this.ocultardireccionActivo = true;
                          this.formLockedHipoPigno = true;
                          this.DescripcionDireccion = '';
                        }
                      });
            }
            }
          }
        } else if ((this.Via === undefined || this.Via === '' || this.Numero === undefined ||
          this.Numero === null || this.Numero === '') && this.indexActivo === null) { // si add y no tiene dir no lo deje ir
          this.notif.onWarning('Advertencia', 'Debe seleccionar una vía e ingresar un número.');
        } else {
          if (this.activoForm.value.hipotecado && (this.activoForm.get('aFavor')?.value === '' ||
            this.activoForm.get('aFavor')?.value === null || this.activoForm.get('aFavor')?.value === undefined)) {
            this.notif.onWarning('Advertencia', 'El campo ' + this.LabelHipoPigno + ' es obligatorio');
          } else {
            if (this.activoForm.value.VrlComercial === '') { // Mensaje de validacion
              this.notif.onWarning('Advertencia', 'El valor comercial y el valor hipotecado y/o pignorado son obligatorios.',
                );
            } else {
              if (this.activoForm.value.Ciudad !== null) {
              this.dataCiudadesAll.forEach((elementCiu : any) => {
                if (elementCiu.IdCiudad === +this.activoForm.value.Ciudad) {
                  this.activoForm.get('Ciudad')?.setValue(elementCiu);
                  this.dataDepartamentosAll.forEach((elementDep : any) => {
                    if (elementDep.IdDepartamento === +this.activoForm.value.Departamento) {
                      this.activoForm.get('Departamento')?.setValue(elementDep);
                      this.dataPaisesAll.forEach((elementPais : any) => {
                        if (elementPais.IdPais === +this.activoForm.value.Pais) {
                          this.activoForm.get('Pais')?.setValue(elementPais);

                          if (this.indexActivo !== null) {
                            this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
                            this.itemsPropiedad.splice(this.indexActivo, 1);
                            this.indexActivo = null;
                          }
                          this.direccionArray = this.DescripcionDireccion;
                          this.activoForm.get('DescripcionAdressIds')?.setValue(this.DescripcionDireccionIds);
                          this.activoForm.get('DireccionCompleta')?.setValue(this.direccionArray);
                          this.itemsPropiedad.push(this.activoForm.value);
                          this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
                          this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
                          this.calcularPatrimonio();
                          this.activoForm.reset();
                          this.cleanAdress();
                          this.BlockActivo = null;
                          this.indexActivo = null;
                          this.direccionEditActivo = '';
                          this.ocultarDireccionEditActivo = true;
                          this.ocultardireccionActivo = true;
                          this.formLockedHipoPigno = true;
                          this.DescripcionDireccion = '';
                        }
                      });
                    }
                  });
                }
              });
            } else {
                this.dataPaisesAll.forEach((elementPais : any ) => {
                  if (elementPais.IdPais === +this.activoForm.value.Pais) {
                    this.activoForm.get('Pais')?.setValue(elementPais);

                    if (this.indexActivo !== null) {
                      this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
                      this.itemsPropiedad.splice(this.indexActivo, 1);
                      this.indexActivo = null;
                    }
                    this.direccionArray = this.DescripcionDireccion;
                    this.activoForm.get('DescripcionAdressIds')?.setValue(this.DescripcionDireccionIds);
                    this.activoForm.get('DireccionCompleta')?.setValue(this.direccionArray);
                    this.itemsPropiedad.push(this.activoForm.value);
                    this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
                    this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
                    this.calcularPatrimonio();
                    this.activoForm.reset();
                    this.cleanAdress();
                    this.BlockActivo = null;
                    this.indexActivo = null;
                    this.direccionEditActivo = '';
                    this.ocultarDireccionEditActivo = true;
                    this.ocultardireccionActivo = true;
                    this.formLockedHipoPigno = true;
                    this.DescripcionDireccion = '';
                  }
                });
            }
            }
          }
        }

      } else if (this.activoForm.value.tipoActivo.Id === 3) { // Otro

        if (this.indexActivo !== null) {
          this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
          this.itemsOtros.splice(this.indexActivo, 1);
          this.indexActivo = null;
        }
        // if (this.activoForm.value.ciudadActivos.IdCiudad === undefined) {
          this.activoForm.get('ciudadActivos')?.setValue(null);
        // }
        if (this.activoForm.value.activo !== null && this.activoForm.value.activo !== undefined &&
        this.activoForm.value.activo !== '' ) {
          if (this.activoForm.value.VrlComercial !== null && this.activoForm.value.VrlComercial !== undefined &&
            this.activoForm.value.VrlComercial !== '') {
            this.itemsOtros.push(this.activoForm.value);
            this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
            this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
            this.calcularPatrimonio();
            this.BlockActivo = null;
            this.activoForm.reset();
            this.ocultardireccionActivo = true;
            this.BlockActivo = null;
            this.indexActivo = null;
          } else {
            this.notif.onWarning('Advertencia',
              'El valor comercial es obligatorio.');
          }
        } else {
          this.notif.onWarning('Advertencia',
            'El activo es obligatorio');
        }

      } else { // vehiculo
        if (this.activoForm.value.Marca === '' || this.activoForm.value.ModeloActivo === '' ||
          this.activoForm.value.Placa === '' || this.activoForm.value.VrlComercial === '') { // Mensaje de validacion
          this.notif.onWarning('Advertencia', 'Los campos marca, modelo, placa y valor comercial son obligatorios.',
            );
        } else {
          if (this.activoForm.value.hipotecado && (this.activoForm.get('aFavor')?.value === '' ||
            this.activoForm.get('aFavor')?.value === null || this.activoForm.get('aFavor')?.value === undefined)) {
            this.notif.onWarning('Advertencia', 'El campo ' + this.LabelHipoPigno + ' es obligatorio');
          } else {
            if (this.activoForm.value.Ciudad !== null) {
              this.dataCiudadesAll.forEach((elementCiu : any) => {
                if (elementCiu.IdCiudad === +this.activoForm.value.Ciudad) {
                  this.activoForm.get('Ciudad')?.setValue(elementCiu);
                  this.dataDepartamentosAll.forEach((elementDep : any) => {
                    if (elementDep.IdDepartamento === +this.activoForm.value.Departamento) {
                      this.activoForm.get('Departamento')?.setValue(elementDep);
                      this.dataPaisesAll.forEach((elementPais : any) => {
                        if (elementPais.IdPais === +this.activoForm.value.Pais) {
                          this.activoForm.get('Pais')?.setValue(elementPais);

                          if (this.indexActivo !== null) {
                            this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
                            this.itemsVehiculo.splice(this.indexActivo, 1);
                            this.indexActivo = null;
                          }
                          this.activoForm.get('ciudadActivos')?.setValue(null);
                          this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
                          this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
                          this.calcularPatrimonio();
                          this.itemsVehiculo.push(this.activoForm.value);
                          this.BlockActivo = null;
                          this.activoForm.reset();
                          this.ocultardireccionActivo = true;
                          this.indexActivo = null;
                          this.EnableUpdatePatrimonio = true;
                          this.formLockedHipoPigno = true;
                        }
                      });
                    }
                  });
                }
              });
            } else {
                this.dataPaisesAll.forEach((elementPais : any ) => {
                  if (elementPais.IdPais === +this.activoForm.value.Pais) {
                    this.activoForm.get('Pais')?.setValue(elementPais);

                    if (this.indexActivo !== null) {
                      this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
                      this.itemsVehiculo.splice(this.indexActivo, 1);
                      this.indexActivo = null;
                    }
                    this.activoForm.get('ciudadActivos')?.setValue(null);
                    this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
                    this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
                    this.calcularPatrimonio();
                    this.itemsVehiculo.push(this.activoForm.value);
                    this.BlockActivo = null;
                    this.activoForm.reset();
                    this.ocultardireccionActivo = true;
                    this.indexActivo = null;
                    this.EnableUpdatePatrimonio = true;
                    this.formLockedHipoPigno = true;
                  }
                });
            }
            // if (this.indexActivo !== null) {
            //   this.totalActivos = this.totalActivos - this.vlrComercialAnterior;
            //   this.itemsVehiculo.splice(this.indexActivo, 1);
            //   this.indexActivo = null;
            // }
            // // if (this.activoForm.value.ciudadActivos.IdCiudad === undefined) {
            //   this.activoForm.get('ciudadActivos')?.setValue(null);
            // // }
            // this.itemsVehiculo.push(this.activoForm.value);
            // this.totalActivos = this.totalActivos + this.activoForm.value.VrlComercial;
            // this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
            // this.calcularPatrimonio();
            // this.activoForm.reset();
            // this.BlockActivo = null;
            // this.indexActivo = null;
            // this.formLockedHipoPigno = true;
          }
        }
      }
    } else {
      this.notif.onWarning('Advertencia',
        'Debe seleccionar una operación válida.');
      this.activoForm.reset();
    }
  }

  calcularPatrimonio() {
    this.totalPatrimonio = 0;
    const tlPasivo = +this.patrimonioForm.get('tlPasivo')?.value;
    const total = this.totalActivos - tlPasivo;
    this.totalPatrimonio = this.totalPatrimonio + total;
    this.patrimonioForm.get('tlPatrimonio')?.setValue(this.totalPatrimonio);
    this.EnableUpdatePatrimonio = true;
  }

  eliminarItemPropiedad(index :number, variable : any) {
    this.totalActivos = this.totalActivos - variable.VrlComercial;
    this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
    this.calcularPatrimonio();
    this.itemsPropiedad.splice(index, 1);
    this.EnableUpdatePatrimonio = true;
  }

  eliminarItemVehiculos(index : number, variable : any) {
    this.totalActivos = this.totalActivos - variable.VrlComercial;
    this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
    this.calcularPatrimonio();
    this.itemsVehiculo.splice(index, 1);
    this.EnableUpdatePatrimonio = true;
  }

  eliminarItemOtro(index : number, variable : any) {
    this.totalActivos = this.totalActivos - variable.VrlComercial;
    this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
    this.calcularPatrimonio();
    this.itemsOtros.splice(index, 1);
    this.EnableUpdatePatrimonio = true;
  }

  mostrarAfavor() {
      this.disableAfavor = false ;
    if (this.activoForm.get('hipotecado')?.value) {
        this.formLockedHipoPigno = false;
        this.disableAfavor = false;
        this.mostrarObligacion = false;
        this.activoForm.get('VrlAdeudado')?.reset();
        this.activoForm.get('VrlAdeudadoVehi')?.reset();
        this.activoForm.get('hipotecado')?.reset();
        this.activoForm.get('aFavor')?.reset();
        this.activoForm.get('aFavor')?.reset();
        this.activoForm.controls['VrlAdeudado'].setErrors(null);
        this.activoForm.controls['VrlAdeudado'].clearValidators();
        this.activoForm.controls['VrlAdeudado'].setValidators(null);
        this.activoForm.controls['VrlAdeudadoVehi'].setErrors(null);
        this.activoForm.controls['VrlAdeudadoVehi'].clearValidators();
        this.activoForm.controls['VrlAdeudadoVehi'].setValidators(null);
        this.activoForm.controls['aFavor'].setErrors(null);
        this.activoForm.controls['aFavor'].clearValidators();
        this.activoForm.controls['aFavor'].setValidators(null);
        this.activoForm.controls['aFavor'].setErrors(null);
        this.activoForm.controls['aFavor'].clearValidators();
        this.activoForm.controls['aFavor'].setValidators(null);
      } else {
        this.disableAfavor = false;
        this.mostrarObligacion = true;
        this.formLockedHipoPigno = null;
        const tipoActivo = +this.activoForm.get('tipoActivo')?.value.Id;
        if (tipoActivo === 1) {
          if (this.activoForm.get('VrlAdeudado')?.value !== null && this.activoForm.get('VrlAdeudado')?.value !== ''
            && this.activoForm.get('VrlAdeudado')?.value !== undefined) {

            this.activoForm.controls['VrlAdeudado'].setErrors(null);
            this.activoForm.controls['VrlAdeudado'].clearValidators();
            this.activoForm.controls['VrlAdeudado'].setValidators(null);
          } else {

            this.activoForm.controls['VrlAdeudado'].setErrors({ 'incorrect': true });
            this.activoForm.controls['VrlAdeudado'].setValidators([Validators.required]);
          }

          this.activoForm.controls['VrlAdeudadoVehi'].setErrors(null);
          this.activoForm.controls['VrlAdeudadoVehi'].clearValidators();
          this.activoForm.controls['VrlAdeudadoVehi'].setValidators(null);

          this.activoForm.controls['aFavor'].setErrors(null);
          this.activoForm.controls['aFavor'].clearValidators();
          this.activoForm.controls['aFavor'].setValidators(null);

        } else if (tipoActivo === 2) {

          this.activoForm.controls['VrlAdeudadoVehi'].setErrors({ 'incorrect': true });
          this.activoForm.controls['VrlAdeudadoVehi'].setValidators([Validators.required]);

          this.activoForm.controls['VrlAdeudado'].setErrors(null);
          this.activoForm.controls['VrlAdeudado'].clearValidators();
          this.activoForm.controls['VrlAdeudado'].setValidators(null);

          this.activoForm.controls['aFavor'].setErrors(null);
          this.activoForm.controls['aFavor'].clearValidators();
          this.activoForm.controls['aFavor'].setValidators(null);

          this.activoForm.controls['aFavor'].setErrors(null);
          this.activoForm.controls['aFavor'].clearValidators();
          this.activoForm.controls['aFavor'].setValidators(null);
        }
      }
  }

  mostrarAfavorMapeo() {
    this.disableAfavor = false;
    this.mostrarObligacion = true;
    this.formLockedHipoPigno = null;
    const tipoActivo = +this.activoForm.get('tipoActivo')?.value.Id;
    if (tipoActivo === 1) {

      this.activoForm.controls['aFavor'].setErrors({ 'incorrect': true });
      this.activoForm.controls['aFavor'].setValidators([Validators.required]);

      if (this.activoForm.get('VrlAdeudado')?.value !== null && this.activoForm.get('VrlAdeudado')?.value !== ''
        && this.activoForm.get('VrlAdeudado')?.value !== undefined) {
        this.activoForm.controls['VrlAdeudado'].setErrors(null);
        this.activoForm.controls['VrlAdeudado'].clearValidators();
        this.activoForm.controls['VrlAdeudado'].setValidators(null);
      } else {
        this.activoForm.controls['VrlAdeudado'].setErrors({ 'incorrect': true });
        this.activoForm.controls['VrlAdeudado'].setValidators([Validators.required]);
      }

      this.activoForm.controls['VrlAdeudadoVehi'].setErrors(null);
      this.activoForm.controls['VrlAdeudadoVehi'].clearValidators();
      this.activoForm.controls['VrlAdeudadoVehi'].setValidators(null);

    } else if (tipoActivo === 2) {

      this.activoForm.controls['VrlAdeudadoVehi'].setErrors({ 'incorrect': true });
      this.activoForm.controls['VrlAdeudadoVehi'].setValidators([Validators.required]);

      this.activoForm.controls['VrlAdeudado'].setErrors(null);
      this.activoForm.controls['VrlAdeudado'].clearValidators();
      this.activoForm.controls['VrlAdeudado'].setValidators(null);

      this.activoForm.controls['aFavor'].setErrors(null);
      this.activoForm.controls['aFavor'].clearValidators();
      this.activoForm.controls['aFavor'].setValidators(null);
    }
  }

  setDataActivos() {
    let tieneObligaciones = false;
    this.allItemsFormActivos = [];
    const results = this.basicosFrom.get('operacion')?.value;
    if (results === '5') {

      this.itemsPropiedad.forEach(propiedad => {
        this.allItemsFormActivos.push(propiedad);
      });
      this.itemsVehiculo.forEach(vehiculo => {
        this.allItemsFormActivos.push(vehiculo);
      });
      this.itemsOtros.forEach(otros => {
        this.allItemsFormActivos.push(otros);
      });

      // se valida si el cliente tiene egresos y un egreso por concepto de obligacion financiera
      const campoPasivoV = this.patrimonioForm.get('tlPasivo')?.value;
      if (this.itemsEgresos.length > 0) {
        this.itemsEgresos.forEach(elementEgregso => {
          if (elementEgregso.concepto.Descripcion === 'Obligaciones Financieras') {
            tieneObligaciones = true;
            this.formPasivoLocked = null;
          }
        });
      }
      // se valida que no tenga pasivo y que no tenga obligaciones financieras
      if (tieneObligaciones && (campoPasivoV === '' || campoPasivoV === null || campoPasivoV === 0)) {
        this.notif.onWarning('Advertencia', 'El pasivo es obligatorio.');
      } else {

        const tipoEmpleo = this.basicosFrom.get('tipoEmpleo')?.value;
        const tipoVivienda = +this.basicosFrom.get('tipoVivienda')?.value;

        if (tipoVivienda === 15 && this.allItemsFormActivos.length <= 0) { // Mensaje de validacion
          this.disableTabConyugue = false;
          this.botonActivosAnterior.nativeElement.click();
          this.devolverTab(4);
          this.VolverArriba();
          $('#conyugueTab').removeClass('activar');
          $('#conyugueTab').removeClass('active');
          this.notif.onWarning('Advertencia','Debe ingresar una propiedad, es necesaria para el tipo de vivienda seleccionado.');
        } else {
          if (tipoEmpleo === 14 && this.allItemsFormActivos.length <= 0) { // Mensaje de validacion
            $('#conyugueTab').addClass('disableTab');
            this.disableTabConyugue = false;
            this.botonActivosAnterior.nativeElement.click();
            this.devolverTab(4);
            $('#conyugueTab').removeClass('activar');
            $('#conyugueTab').removeClass('active');
            this.VolverArriba();
            this.notif.onWarning('Advertencia','El registro debe tener un activo, es obligatorio para el tipo de empleo.');

          } else {

            if (tieneObligaciones && (campoPasivoV === '' || campoPasivoV === null || campoPasivoV === 0)) { // Mensaje de validacion
              this.notif.onWarning('Advertencia', 'El asociado tiene obligaciones financieras, debe ingresar el total de pasivos.');
            } else {
              if (!tieneObligaciones && this.allItemsFormActivos.length <= 0) {
                // valida si no tiene obligaciones y no tiene registros dejarlo pasar
                this.allItemsFormSaves.activoDto = {};
                this.allItemsFormActivo = [];
                this.botonActivosSiguiente.nativeElement.click();
                this.disableTabConyugue = true;
                this.devolverTab(5);
                $('#activoTab').removeClass('activar');
                $('#activoTab').removeClass('active');
                this.VolverArriba();
              } else {
                let validarPropiedad = 0;
                this.validarfianciero = 0;
                this.allItemsFormSaves.activoDto = {};
                this.allItemsFormActivo = [];
                // recoro los items de patrimonio para saber si
                // se ingreso el tipo de activo casa o apartamento
                this.allItemsFormActivos.forEach(elementActivo => {
                  if (elementActivo.tipoActivo.Id === 1) {
                    validarPropiedad = validarPropiedad + 1;
                  } else {
                    validarPropiedad = validarPropiedad + 0;
                  }
                });

                if (tipoVivienda === 15 && validarPropiedad === 0) { // Mensaje de validacion
                  this.disableTabConyugue = false;
                  this.botonActivosAnterior.nativeElement.click();
                  this.devolverTab(4);
                  $('#conyugueTab').removeClass('activar');
                  $('#conyugueTab').removeClass('active');
                  this.VolverArriba();
                  this.notif.onWarning('Advertencia', 'Debe ingresar una propiedad, es necesaria para el tipo de vivienda seleccionado.');
                } else {

                  this.allItemsFormActivos.forEach(elemento => {
                    this.ActivoFormSet.get('IdActivo')?.setValue(elemento.tipoActivo.Id);
                    this.ActivoFormSet.get('IdTipoPatrimonio')?.setValue(elemento.activo.Id);
                    this.ActivoFormSet.get('IdentificadorLegal')?.setValue(elemento.identificacionLegal);
                    if (elemento.Marca === null || elemento.Marca === undefined) {
                      this.ActivoFormSet.get('IdMarca')?.setValue(elemento.Marca);
                    } else {
                      this.ActivoFormSet.get('IdMarca')?.setValue(elemento.Marca.Clase);
                    }
                    if (elemento.tipoActivo.Id === 1) {
                      this.ActivoFormSet.get('aFavor')?.setValue(elemento.aFavor);
                    } else if (elemento.tipoActivo.Id === 2) {
                      this.ActivoFormSet.get('aFavor')?.setValue(elemento.aFavor);
                    }
                    this.ActivoFormSet.get('Placa')?.setValue(elemento.Placa);
                    if( elemento.Ciudad !== null && elemento.Ciudad !== undefined && elemento.Ciudad !== '' && elemento.Ciudad !== 0) {
                     this.ActivoFormSet.get('IdCiudad')?.setValue(elemento.Ciudad.IdCiudad);
                    } else {
                      this.ActivoFormSet.get('IdCiudad')?.setValue(null);
                    }
                    if( elemento.Pais !== null && elemento.Pais !== undefined && elemento.Pais !== '' && elemento.Pais !== 0) {
                     this.ActivoFormSet.get('IdPais')?.setValue(elemento.Pais.IdPais);
                    }
                    this.ActivoFormSet.get('Modelo')?.setValue(elemento.ModeloActivo);
                    this.ActivoFormSet.get('Direccion')?.setValue(elemento.DireccionCompleta);
                    this.ActivoFormSet.get('DescripcionIds')?.setValue(elemento.DescripcionAdressIds);
                    this.ActivoFormSet.get('AvaluoComercial')?.setValue(elemento.VrlComercial);
                    this.ActivoFormSet.get('ValorAdeudado')?.setValue(elemento.VrlAdeudado);
                    this.ActivoFormSet.get('EntidadHipoPignora')?.setValue(elemento.hipotecado);
                    this.ActivoFormSet.get('ValorHipoteca')?.setValue(elemento.VrlAdeudadoVehi);
                    if (elemento.descripcionOtro !== null && elemento.descripcionOtro !== undefined && elemento.descripcionOtro !== '') {
                      this.ActivoFormSet.get('DescripcionOtro')?.setValue(elemento.descripcionOtro.toLowerCase());
                    } else {
                      this.ActivoFormSet.get('DescripcionOtro')?.setValue(elemento.descripcionOtro);
                    }
                    if (elemento.complemen !== null && elemento.complemen !== undefined && elemento.complemen !== '') {
                      this.ActivoFormSet.get('Complemento')?.setValue(elemento.complemen.toLowerCase());
                    } else {
                      this.ActivoFormSet.get('Complemento')?.setValue(elemento.complemen);
                    }
                    this.allItemsFormActivo.push(this.ActivoFormSet.value);
                  });
                  this.allItemsFormSaves.activoDto = this.allItemsFormActivo;
                  this.activoSave.get('ActivoDto')?.setValue(this.allItemsFormActivo);

                  this.allItemsFormSave.push(this.activoSave.value);
                  $('#conyugueTab').removeClass('disableTab');
                  this.botonActivosSiguiente.nativeElement.click();
                  this.disableTabConyugue = true;
                  this.formLockedHipoPigno = false;
                  this.disableAfavor = true;
                  this.mostrarObligacion = false;
                  this.devolverTab(5);
                  $('#activoTab').removeClass('activar');
                  $('#activoTab').removeClass('active');
                  this.disableTabActivo = null;
                  this.activoForm.reset();
                  this.VolverArriba();
                }
              }
            }
          }
        }
      }

    } else if (results === '1') {
      this.itemsVehiculo.forEach(elementn => {
        this.allItemsFormActivos.push(elementn);
      });
      this.itemsPropiedad.forEach(elementn => {
        this.allItemsFormActivos.push(elementn);
      });
      this.itemsOtros.forEach(elementn => {
        this.allItemsFormActivos.push(elementn);
      });
      let campoPasivoV = this.patrimonioForm.get('tlPasivo')?.value;
      if (campoPasivoV !== '' && campoPasivoV !== null && campoPasivoV !== 0) {
        const terceroPasivo = Number(localStorage.getItem('TerceroNatura'));
        const valorPasivo = this.patrimonioForm.get('tlPasivo')?.value;
         this.GuardarLog('Se agrega o edita Total pasivos - ' + 'Tercero: ' + terceroPasivo + ' Valor: ' + valorPasivo,
        this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
        this.GuardarPasivo(Number(localStorage.getItem('TerceroNatura')), this.patrimonioForm.get('tlPasivo')?.value);
      }
        // se valida si el cliente tiene egresos y un egreso por concepto de obligacion financiera
        campoPasivoV = this.patrimonioForm.get('tlPasivo')?.value;
        if (this.itemsEgresos.length > 0) {
          this.itemsEgresos.forEach(elementEgregso => {
            if (elementEgregso.concepto.Id === 6) {
              tieneObligaciones = true;
              this.formPasivoLocked = null;
            }
          });
        }
        // se valida que no tenga pasivo y que no tenga obligaciones financieras
        if (tieneObligaciones && (campoPasivoV === '' || campoPasivoV === null || campoPasivoV === 0)) { // Mensajde de validacion
          this.notif.onWarning('Advertencia', 'El pasivo es obligatorio.');
          this.VolverArriba();
        } else { // Si tiene obligaciones financieras pero no tiene registros debo validar que registre el campo pasivo
          const tipoEmpleo = +this.basicosFrom.get('tipoEmpleo')?.value;
          if (tipoEmpleo === 14 && this.itemsVehiculo.length <= 0 && this.itemsPropiedad.length <= 0) { // Mensaje de validacion
            this.botonActivosAnterior.nativeElement.click();
            this.devolverTab(4);
            $('#conyugueTab').removeClass('activar');
            $('#conyugueTab').removeClass('active');
            this.VolverArriba();
            this.notif.onWarning('Advertencia', 'El registro debe tener un activo, es obligatorio para el tipo de empleo.');

          } else {

            // const tipoEmpleo = this.basicosFrom.get('tipoEmpleo')?.value;
            const tipoVivienda = +this.basicosFrom.get('tipoVivienda')?.value;

            let validarPropiedad = 0;

            this.allItemsFormActivos.forEach(elementt => {
              if (elementt.tipoActivo.Id === 1) {
                validarPropiedad = validarPropiedad + 1;
              } else {
                validarPropiedad = validarPropiedad + 0;
              }
            });
            if (tipoVivienda === 15 && validarPropiedad === 0) { // Mensaje de validacion
              this.disableTabConyugue = false;
              this.botonActivosAnterior.nativeElement.click();
              this.devolverTab(4);
              $('#conyugueTab').removeClass('activar');
              $('#conyugueTab').removeClass('active');
              this.VolverArriba();
              this.notif.onWarning('Advertencia', 'Debe ingresar una propiedad, es necesaria para el tipo de vivienda seleccionado.');
            } else {

              if (!tieneObligaciones && this.itemsVehiculo.length !== 0 || this.itemsPropiedad.length !== 0) { // Mensaje de validacion
                this.allItemsFormSaves.activoDto = {};
                this.allItemsFormActivo = [];
                const tercerEditAfuera = localStorage.getItem('TerceroNatura');
                this.allItemsFormActivos.forEach(elementn => {
                  const tercerEdit = localStorage.getItem('TerceroNatura');
                  this.ActivoFormSet.get('IdPatrimonio')?.setValue(elementn.idPatrimonio);
                  this.ActivoFormSet.get('IdTercero')?.setValue(tercerEdit);
                  this.ActivoFormSet.get('IdActivo')?.setValue(elementn.tipoActivo.Id);
                  this.ActivoFormSet.get('IdTipoPatrimonio')?.setValue(elementn.activo.Id);
                  this.ActivoFormSet.get('IdentificadorLegal')?.setValue(elementn.identificacionLegal);
                  if (elementn.Marca === null || elementn.Marca === undefined) {
                    this.ActivoFormSet.get('IdMarca')?.setValue(elementn.Marca);
                  } else {
                    this.ActivoFormSet.get('IdMarca')?.setValue(elementn.Marca.Clase);
                  }
                  if (elementn.Ciudad !== null && elementn.Ciudad !== undefined && elementn.Ciudad !== '' && elementn.Ciudad !== 0) {
                    this.ActivoFormSet.get('IdCiudad')?.setValue(elementn.Ciudad.IdCiudad);
                  } else {
                    this.ActivoFormSet.get('IdCiudad')?.setValue(null);
                  }
                  if (elementn.Pais !== null && elementn.Pais !== undefined && elementn.Pais !== '' && elementn.Pais !== 0) {
                    this.ActivoFormSet.get('IdPais')?.setValue(elementn.Pais.IdPais);
                  }
                  if (elementn.tipoActivo.Id === 1) {
                     this.ActivoFormSet.get('aFavor')?.setValue(elementn.aFavor);
                  } else if (elementn.tipoActivo.Id === 2) {
                    this.ActivoFormSet.get('aFavor')?.setValue(elementn.aFavor);
                  }
                  this.ActivoFormSet.get('Placa')?.setValue(elementn.Placa);
                  this.ActivoFormSet.get('Modelo')?.setValue(elementn.ModeloActivo);
                  this.ActivoFormSet.get('Direccion')?.setValue(elementn.DireccionCompleta);
                  this.ActivoFormSet.get('DescripcionIds')?.setValue(elementn.DescripcionAdressIds);
                  this.ActivoFormSet.get('AvaluoComercial')?.setValue(elementn.VrlComercial);
                  this.ActivoFormSet.get('ValorAdeudado')?.setValue(elementn.VrlAdeudado);
                  this.ActivoFormSet.get('EntidadHipoPignora')?.setValue(elementn.hipotecado);
                  this.ActivoFormSet.get('ValorHipoteca')?.setValue(elementn.VrlAdeudadoVehi);
                  this.ActivoFormSet.get('DescripcionOtro')?.setValue(elementn.descripcionOtro);
                  this.allItemsFormActivo.push(this.ActivoFormSet.value);
                });
                this.formLockedHipoPigno = false;
                this.disableAfavor = true;
                this.mostrarObligacion = false;
                this.EditarActivos(this.allItemsFormActivo, tercerEditAfuera == null ? "" : tercerEditAfuera);
                this.activoForm.reset();
                this.devolverTab(4);
                this.VolverArriba();
              } else if (tieneObligaciones && this.itemsVehiculo.length !== 0 ||
                this.itemsPropiedad.length !== 0 || this.itemsOtros.length !== 0 ||
                (campoPasivoV !== '' || campoPasivoV !== null || campoPasivoV !== 0)) {
                this.allItemsFormActivo = [];
                const tercerEditAfuera = localStorage.getItem('TerceroNatura');
                this.allItemsFormActivos.forEach(elementn => {
                  const tercerEdit = localStorage.getItem('TerceroNatura');
                  this.ActivoFormSet.get('IdPatrimonio')?.setValue(elementn.idPatrimonio);
                  this.ActivoFormSet.get('IdTercero')?.setValue(tercerEdit);
                  this.ActivoFormSet.get('IdActivo')?.setValue(elementn.tipoActivo.Id);
                  this.ActivoFormSet.get('IdTipoPatrimonio')?.setValue(elementn.activo.Id);
                  this.ActivoFormSet.get('IdentificadorLegal')?.setValue(elementn.identificacionLegal);
                  if (elementn.Marca === null || elementn.Marca === undefined) {
                    this.ActivoFormSet.get('IdMarca')?.setValue(elementn.Marca);
                  } else {
                    this.ActivoFormSet.get('IdMarca')?.setValue(elementn.Marca.Clase);
                  }
                   if (elementn.Ciudad !== null && elementn.Ciudad !== undefined && elementn.Ciudad !== '' && elementn.Ciudad !== 0) {
                    this.ActivoFormSet.get('IdCiudad')?.setValue(elementn.Ciudad.IdCiudad);
                  } else {
                    this.ActivoFormSet.get('IdCiudad')?.setValue(null);
                  }
                  if (elementn.Pais !== null && elementn.Pais !== undefined && elementn.Pais !== '' && elementn.Pais !== 0) {
                    this.ActivoFormSet.get('IdPais')?.setValue(elementn.Pais.IdPais);
                  }
                  if (elementn.tipoActivo.Id === 1) {
                    this.ActivoFormSet.get('aFavor')?.setValue(elementn.aFavor);
                  } else if (elementn.tipoActivo.Id === 2) {
                    this.ActivoFormSet.get('aFavor')?.setValue(elementn.aFavor);
                  }
                  this.ActivoFormSet.get('Placa')?.setValue(elementn.Placa);
                  this.ActivoFormSet.get('Modelo')?.setValue(elementn.ModeloActivo);
                  this.ActivoFormSet.get('Direccion')?.setValue(elementn.DireccionCompleta);
                  this.ActivoFormSet.get('DescripcionIds')?.setValue(elementn.DescripcionAdressIds);
                  this.ActivoFormSet.get('AvaluoComercial')?.setValue(elementn.VrlComercial);
                  this.ActivoFormSet.get('ValorAdeudado')?.setValue(elementn.VrlAdeudado);
                  this.ActivoFormSet.get('EntidadHipoPignora')?.setValue(elementn.hipotecado);
                  this.ActivoFormSet.get('ValorHipoteca')?.setValue(elementn.VrlAdeudadoVehi);
                  if (elementn.descripcionOtro !== null && elementn.descripcionOtro !== undefined && elementn.descripcionOtro !== '') {
                    this.ActivoFormSet.get('DescripcionOtro')?.setValue(elementn.descripcionOtro.toLowerCase());
                  } else {
                    this.ActivoFormSet.get('DescripcionOtro')?.setValue(elementn.descripcionOtro);
                  }
                  if (elementn.complemen !== null && elementn.complemen !== undefined && elementn.complemen !== '') {
                    this.ActivoFormSet.get('Complemento')?.setValue(elementn.complemen.toLowerCase());
                  } else {
                    this.ActivoFormSet.get('Complemento')?.setValue(elementn.complemen);
                  }
                  this.allItemsFormActivo.push(this.ActivoFormSet.value);
                });
                this.formLockedHipoPigno = false;
                this.disableAfavor = true;
                this.mostrarObligacion = false;
                this.EditarActivos(this.allItemsFormActivo, tercerEditAfuera == null ? "" : tercerEditAfuera);
                this.EditarPasivos(this.patrimonioForm.get('tlPasivo')?.value, tercerEditAfuera);
                this.activoForm.reset();
                this.devolverTab(4);
                this.VolverArriba();
              }
            }
          }
        }

    } else { // Mensaje de validacion
      $('#conyugueTab').addClass('disableTab');
      this.disableTabConyugue = false;
      this.botonActivosAnterior.nativeElement.click();
      this.devolverTab(4);
      $('#conyugueTab').removeClass('activar');
      $('#conyugueTab').removeClass('active');
      this.VolverArriba();
      this.notif.onWarning('Advertencia',
        'Debe seleccionar una operación válida.');
    }
  }

  validarValorAdeudado(valor : string) {
    if (this.activoForm.get('VrlAdeudado')?.value > this.activoForm.get('VrlComercial')?.value ) {
      this.activoForm.get('VrlAdeudado')?.reset();
    } else if (this.activoForm.get('VrlAdeudadoVehi')?.value > this.activoForm.get('VrlComercial')?.value) {
      this.notif.onWarning('Advertencia', 'El valor ' + valor + ' no puede ser mayor al valor comercial.');
      this.activoForm.get('VrlAdeudadoVehi')?.reset();
    }
  }

  cleanAdress() {
    this.direccionEdit = '';
    this.direccionEditActivo = '';
    this.Via = '';
    this.IdVia = '';
    this.Numero = '';
    this.Letra = '';
    this.IdLetra = '';
    this.NumeroDos = '';
    this.LetraDos = '';
    this.Cardinal = '';
    this.IdCardinal = '';
    this.CardinalDos = '';
    this.IdCardinalDos = '';
    this.NumeroTres = '';
    this.inmueble = '';
    this.Idinmueble = '';
    this.NumeroCuatro = '';
    this.Observacion = '';
    this.DescripcionDireccionIds = '';
    this.ocultarDireccion = true;
    this.ocultarEditar = true;
    this.direccionArray = null;
    this.bloquearCampoDirActivo = null;
    
  }

  habilitarBtnUpdate() {
    this.EnableUpdatePatrimonio = true;
  }

  validarMarcaSeleccionada() {
    const marcarObj = this.activoForm.get('Marca')?.value;
    if (marcarObj !== null) {
      if (marcarObj.Clase === null || marcarObj.Clase === undefined || marcarObj.Clase === '') {
        this.activoForm.get('Marca')?.reset();
      }
    }
  }

  validarCiudadSeleccionadaActivo() {
      const ubicacionSelect = this.activoForm.get('ciudadActivos')?.value;
    if (ubicacionSelect.IdCiudad === undefined || ubicacionSelect.IdCiudad === null ||
      ubicacionSelect.IdCiudad === '' || ubicacionSelect.IdCiudad === 0) {
      this.activoForm.get('ciudadActivos')?.reset();
    }
  }

  validarCiudadSeleccionadaFina() {
      const ubicacionSelect = this.referenciaForm.get('IdOficinaR')?.value;
    if (ubicacionSelect.IdCiudad === undefined || ubicacionSelect.IdCiudad === null ||
      ubicacionSelect.IdCiudad === '' || ubicacionSelect.IdCiudad === 0) {
      this.referenciaForm.get('IdOficinaR')?.reset();
    }
}

  validarCiudadSeleccionadaCome() {
      const ubicacionSelect = this.referenciaForm.get('CiudadComercial')?.value;
    if (ubicacionSelect.IdCiudad === undefined || ubicacionSelect.IdCiudad === null ||
      ubicacionSelect.IdCiudad === '' || ubicacionSelect.IdCiudad === 0) {
      this.referenciaForm.get('CiudadComercial')?.reset();
    }
}

  //#endregion

  //#region Metodos de CONYUGUE

  ConsultarEmpresa() {
    this.dataEmpresas = null;
    const Documento = this.conyugueForm.get('Nit')?.value;
    if (Documento !== null) {
      this.clientesGetListService.GetEmpresasConyuge(Documento).subscribe(
        result => {
          if(result !== null){
            this.dataEmpresas = result;
            this.AbrirEmpresa.nativeElement.click();
          }
        },
        error => {
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    }
  }

  GetEmpresasConyuge() {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    objClients.Nombre = this.conyugueForm.get('Nombre')?.value;
    if (objClients.Nombre.length >= 3) {
      this.conyugueForm.get('NombreDrop')?.setValue('');
      this.conyugueForm.get('Nit')?.setValue('');
      this.clientesGetListService.GetEmpresas(objClients).subscribe(
        result => {
          this.dataEmpresas = result;
          this.AbrirEmpresa.nativeElement.click();
        },
        error => {
          const errorMessage = <any>error;
          this.notif.onDanger('Error', errorMessage);
          console.error(errorMessage);
        }
      );
    }
  }

  SetDataEmpresaConyugue(data : any) {
    this.conyugueForm.get('NombreDropMostrar')?.setValue(data.Nombre);
    this.conyugueForm.get('Nit')?.setValue(data.Nit);
    this.conyugueForm.get('NombreDrop')?.setValue(data);
    // this.conyugueForm.get('Nit')?.reset();
    // this.conyugueForm.get('Nombre')?.reset();
  }

  resetSearch() {
    this.conyugueForm.get('Nit')?.reset();
    this.conyugueForm.get('Nombre')?.reset();
  }

  ValidarOcupacion() {
    if (this.conyugueForm.value.TipoOcupacion !== '') {
      if (this.conyugueForm.value.TipoOcupacion !== undefined) {
        if (this.conyugueForm.value.TipoOcupacion.Clase === '10') {
          this.disableDetalleOcupa = null;
        } else {
          this.conyugueForm.get('DetalleOcupacionC')?.reset();
          this.disableDetalleOcupa = true;
        }
      } else {
        if (this.conyugueForm.value.TipoOcupacionC.Value === '10') {
          this.disableDetalleOcupa = null;
        } else {
          this.conyugueForm.get('DetalleOcupacionC')?.reset();
          this.disableDetalleOcupa = true;
        }
      }
    } else {
      this.notif.onWarning('Advertencia',
        'Debe seleccionar una ocupación válida.');
      this.conyugueForm.get('TipoOcupacionC')?.reset();
    }

  }

  validarCantidadMeses() {
    const mes = +this.conyugueForm.get('meses')?.value;
    if (mes > 11) {
      this.conyugueForm.get('meses')?.reset();
      this.notif.onWarning('Advertencia', 'El número máximo de meses es 11.');
    }
  }

  addItemsConyugue() {
    const results = this.basicosFrom.get('operacion')?.value;
    if (results === '5') {
      if (this.estadoCivilSeleccionado === 25) {
        this.notif.onWarning('Advertencia', 'No se puede registrar el conyugue, para el estado civil seleccionado.');
        this.conyugueForm.reset();
      } else {
        this.formBuscarLockedCreacion = true;
        if (this.indexConyugue !== null) {
          this.conyugueForm.get('TipoDocumento')?.setValue(this.conyugueForm.value.TipoDocumento);
            if (this.conyugueForm.get('TipoDocumento')?.value === 1) {
              this.conyugueForm.get('DescripcionTipoDocumento')?.setValue('Cédula');
            } else if (this.conyugueForm.get('TipoDocumento')?.value === 2) {
              this.conyugueForm.get('DescripcionTipoDocumento')?.setValue('Extranjería Cedula');
          }
          if (this.conyugueForm.get('TipoOcupacionC')?.value !== null) {
            this.ocupacionesConyugue.forEach((elementOcupacion : any) => {
              if (+elementOcupacion.Value === this.conyugueForm.value.TipoOcupacionC.Value) {
                this.conyugueForm.get('TipoOcupacionC')?.setValue(elementOcupacion);
              }
            });
          }
          if (this.conyugueForm.value.years === null) {
            this.conyugueForm.get('years')?.setValue('');
          }
          if (this.conyugueForm.value.meses === null) {
            this.conyugueForm.get('meses')?.setValue('');
          }
          this.conyugueForm.get('AntiguedadEmpresa')?.setValue('Años - ' + this.conyugueForm.value.years +
            ' Meses - ' + this.conyugueForm.value.meses);
          this.antiguedadStr = this.conyugueForm.value.years + '|' + this.conyugueForm.value.meses;
          this.itemsConyugue.splice(this.indexConyugue, 1);
          this.itemsConyugue.push(this.conyugueForm.value);
          this.indexConyugue = null;
          this.conyugueForm.reset();
        } else {
          if (this.itemsConyugue.length <= 0) {

            this.conyugueForm.get('TipoDocumento')?.setValue(this.conyugueForm.value.TipoDocumento);
            if (this.conyugueForm.get('TipoDocumento')?.value === 1) {
              this.conyugueForm.get('DescripcionTipoDocumento')?.setValue('Cédula');
            } else if (this.conyugueForm.get('TipoDocumento')?.value === 2) {
              this.conyugueForm.get('DescripcionTipoDocumento')?.setValue('Extranjería Cedula');
            }
            if (this.conyugueForm.get('TipoOcupacionC')?.value !== null) {
            this.ocupacionesConyugue.forEach((elementOcupacion : any) => {
              if (+elementOcupacion.Value === this.conyugueForm.value.TipoOcupacionC.Value) {
                this.conyugueForm.get('TipoOcupacionC')?.setValue(elementOcupacion);
              }
            });
            }
            if (this.conyugueForm.value.years === null) {
              this.conyugueForm.get('years')?.setValue('');
            }
            if (this.conyugueForm.value.meses === null) {
              this.conyugueForm.get('meses')?.setValue('');
            }
            this.conyugueForm.get('AntiguedadEmpresa')?.setValue('Años - ' + this.conyugueForm.value.years +
              ' Meses - ' + this.conyugueForm.value.meses);
            this.antiguedadStr = this.conyugueForm.value.years + '|' + this.conyugueForm.value.meses;
            this.itemsConyugue.push(this.conyugueForm.value);
            this.conyugueForm.reset();
          } else {
            this.notif.onWarning('Advertencia', 'Solo puede agregar un conyugue.');
          }
        }
      }
    } else if (results === '1') {
      console.log('Estado civil - consultado no seleccionado - Editando -' + this.estadoCivilSeleccionado);
      if (this.estadoCivilSeleccionado === 25) {
        this.EnableUpdateConyugue = false;
        this.notif.onWarning('Advertencia', 'No se puede registrar el conyugue, para el estado civil seleccionado. ');
        this.conyugueForm.reset();
      } else {
        if (this.indexConyugue !== null) {
          this.conyugueForm.get('TipoDocumento')?.setValue(this.conyugueForm.value.TipoDocumento);
          if (this.conyugueForm.get('TipoDocumento')?.value === 1) {
            this.conyugueForm.get('DescripcionTipoDocumento')?.setValue('Cédula');
          } else if (this.conyugueForm.get('TipoDocumento')?.value === 2) {
            this.conyugueForm.get('DescripcionTipoDocumento')?.setValue('Extranjería Cedula');
          }
          if (this.conyugueForm.get('TipoOcupacionC')?.value !== null) {
            this.ocupacionesConyugue.forEach((elementOcupacion : any) => {
              if (+elementOcupacion.Value === this.conyugueForm.value.TipoOcupacionC.Value) {
                this.conyugueForm.get('TipoOcupacionC')?.setValue(elementOcupacion);
              }
            });
          }
          this.conyugueForm.get('AntiguedadEmpresa')?.setValue('Años - ' + this.conyugueForm.value.years +
            ' Meses - ' + this.conyugueForm.value.meses);
          this.antiguedadStr = this.conyugueForm.value.years + '|' + this.conyugueForm.value.meses;
          this.itemsConyugue.splice(this.indexConyugue, 1);
          this.itemsConyugue.push(this.conyugueForm.value);
          this.indexConyugue = null;
          this.conyugueForm.reset();
          this.EnableUpdateConyugue = true;
        } else {
          if (this.itemsConyugue.length === 0) {
            this.conyugueForm.get('TipoDocumento')?.setValue(this.conyugueForm.value.TipoDocumento);
            if (this.conyugueForm.get('TipoDocumento')?.value === 1) {
              this.conyugueForm.get('DescripcionTipoDocumento')?.setValue('Cédula');
            } else if (this.conyugueForm.get('TipoDocumento')?.value === 2) {
              this.conyugueForm.get('DescripcionTipoDocumento')?.setValue('Extranjería Cedula');
            }
            if (this.conyugueForm.get('TipoOcupacionC')?.value !== null) {
              this.ocupacionesConyugue.forEach((elementOcupacion : any) => {
                if (+elementOcupacion.Value === this.conyugueForm.value.TipoOcupacionC.Value) {
                  this.conyugueForm.get('TipoOcupacionC')?.setValue(elementOcupacion);
                }
              });
            }
           
            if (this.conyugueForm.value.years === null) {
              this.conyugueForm.get('years')?.setValue('');
            }
            if (this.conyugueForm.value.meses === null) {
              this.conyugueForm.get('meses')?.setValue('');
            }
            this.conyugueForm.get('AntiguedadEmpresa')?.setValue('Años - ' + this.conyugueForm.value.years +
              ' Meses - ' + this.conyugueForm.value.meses);

            this.antiguedadStr = this.conyugueForm.value.years + '|' + this.conyugueForm.value.meses;

            this.itemsConyugue.push(this.conyugueForm.value);
            this.conyugueForm.reset();
            this.EnableUpdateConyugue = true;
          } else {
            this.EnableUpdateConyugue = false;
            this.notif.onWarning('Advertencia', 'Solo puede agregar un conyugue.');
          }
        }
      }
    }
  }

  EliminarItemConyugue(index : number) {
    this.EnableUpdateConyugue = true;
    this.itemsConyugue.splice(index, 1);
  }

  MapearConyugue(data : any, index : number) {
    this.VolverArriba();
    this.indexConyugue = index;
    const results = this.basicosFrom.get('operacion')?.value;
    this.conyugueForm.get('idConyugue')?.setValue(data.idConyugue);
    this.conyugueForm.get('TipoDocumento')?.setValue(data.TipoDocumento);
    this.conyugueForm.get('NumeroDocumento')?.setValue(data.NumeroDocumento);
    this.conyugueForm.get('PrimerApellidoC')?.setValue(data.PrimerApellidoC);
    this.conyugueForm.get('SegundoApellidoC')?.setValue(data.SegundoApellidoC);
    this.conyugueForm.get('PrimerNombreC')?.setValue(data.PrimerNombreC);
    this.conyugueForm.get('SegundoNombreC')?.setValue(data.SegundoNombreC);
    this.conyugueForm.get('TelefonoResidenciaC')?.setValue(data.TelefonoResidenciaC);
    this.conyugueForm.get('NumeroCelularC')?.setValue(data.NumeroCelularC);
    this.conyugueForm.get('NombreDropMostrar')?.setValue(data.NombreDropMostrar);
    this.conyugueForm.get('NombreDrop')?.setValue(data.NombreDrop);
    this.conyugueForm.get('TipoOcupacionC')?.setValue(data.TipoOcupacionC);
    this.conyugueForm.get('IngresosC')?.setValue(data.IngresosC);
    this.conyugueForm.get('EgresosC')?.setValue(data.EgresosC);
    this.conyugueForm.get('TelefonoEmpresa')?.setValue(data.TelefonoEmpresa);
    if (data.DetalleOcupacionC !== null) {
      this.conyugueForm.get('DetalleOcupacionC')?.setValue(data.DetalleOcupacionC);
    }
    this.conyugueForm.get('Nit')?.setValue(data.NombreDrop.Nit);
    if (results === '5') {
      const antiguedad = this.antiguedadStr.split('|');
      this.conyugueForm.get('years')?.setValue(antiguedad[0]);
      this.conyugueForm.get('meses')?.setValue(antiguedad[1]);
    } else {
      if (this.antiguedadStr !== undefined) {
        const antiguedad = this.antiguedadStr.split('|');
        this.conyugueForm.get('years')?.setValue(antiguedad[0]);
        this.conyugueForm.get('meses')?.setValue(antiguedad[1]);
      }
    }
  }

  setItemConyugue() {
    const results = this.basicosFrom.get('operacion')?.value;
    if (results === '5') {

      if (this.itemsConyugue.length > 0) {
        this.allItemsFormSaves.conyugueDto = {};
        this.itemsConyugue.forEach(elementCon => {
          this.conyugueFormSet.get('IdTipoDocumento')?.setValue(elementCon.TipoDocumento);
          this.conyugueFormSet.get('Documento')?.setValue(elementCon.NumeroDocumento);
          this.conyugueFormSet.get('PrimerApellido')?.setValue(elementCon.PrimerApellidoC);
          this.conyugueFormSet.get('SegundoApellido')?.setValue(elementCon.SegundoApellidoC);
          this.conyugueFormSet.get('PrimerNombre')?.setValue(elementCon.PrimerNombreC);
          this.conyugueFormSet.get('SegundoNombre')?.setValue(elementCon.SegundoNombreC);
          this.conyugueFormSet.get('TelefonoResidencia')?.setValue(elementCon.TelefonoResidenciaC);
          this.conyugueFormSet.get('NumeroCelular')?.setValue(elementCon.NumeroCelularC);
          if (elementCon.NombreDropMostrar !== null) {
            this.conyugueFormSet.get('EmpresaLabora')?.setValue(elementCon.NombreDrop.Nombre);
          } else {
            this.conyugueFormSet.get('EmpresaLabora')?.setValue(null);
          }
          if (elementCon.TipoOcupacionC !== null) {
            this.conyugueFormSet.get('IdOcupacion')?.setValue(elementCon.TipoOcupacionC.Value);
          } else {
            this.conyugueFormSet.get('IdOcupacion')?.setValue(null);
          }
          this.conyugueFormSet.get('Ingresos')?.setValue(elementCon.IngresosC);
          this.conyugueFormSet.get('Egresos')?.setValue(elementCon.EgresosC);
          this.conyugueFormSet.get('NitEmpresa')?.setValue(elementCon.Nit);
          this.conyugueFormSet.get('Antiguedad')?.setValue(elementCon.years + '|' + elementCon.meses);
          this.conyugueFormSet.get('TelEmpresa')?.setValue(elementCon.TelefonoEmpresa);
          this.conyugueFormSet.get('DetalleOcupacion')?.setValue(elementCon.DetalleOcupacionC);
        });
        let data : string | null = localStorage.getItem('Data');
        const Datos = JSON.parse(window.atob(data == null ? "": data));
        this.conyugueFormSet.get('Oficina')?.setValue(+Datos.NumeroOficina);
        this.conyugueFormSet.get('Asesor')?.setValue(+Datos.IdAsesor);
        this.conyugueFormSet.get('UsuarioERP')?.setValue(+Datos.IdUsuario);
        this.conyugueFormSet.get('IdTerceroAsesor')?.setValue(+Datos.intlngTercero);

        this.allItemsFormSaves.conyugueDto = this.conyugueFormSet.value;
        this.conyugueSave.get('ConyugueDto')?.setValue(this.conyugueFormSet.value);
        this.allItemsFormSave.push(this.conyugueSave.value);
        $('#laboralTab').removeClass('disableTab');
        $('#conyugueTab').removeClass('disableTab');
        $('#conyugueTab').removeClass('activar');
        $('#conyugueTab').removeClass('active');
        this.botonConyugueSiguiente.nativeElement.click();
        this.devolverTab(6);
        this.VolverArriba();
      } else {

        this.allItemsFormSaves.conyugueDto = null;
        $('#laboralTab').removeClass('disableTab');
        $('#conyugueTab').removeClass('disableTab');
        $('#conyugueTab').removeClass('activar');
        $('#conyugueTab').removeClass('active');
        this.botonConyugueSiguiente.nativeElement.click();
        this.devolverTab(6);
        this.VolverArriba();
      }

    } else if (results === '1') {

      if (this.itemsConyugue.length > 0) {
        this.allItemsFormSaves.conyugueDto = {};
        this.itemsConyugue.forEach(elementcon => {
          const tercerEdit = localStorage.getItem('TerceroNatura');
          this.conyugueFormSet.get('IdConyuge')?.setValue(elementcon.idConyugue);
          this.conyugueFormSet.get('IdTercero')?.setValue(tercerEdit);
          this.conyugueFormSet.get('IdTipoDocumento')?.setValue(elementcon.TipoDocumento);
          this.conyugueFormSet.get('Documento')?.setValue(elementcon.NumeroDocumento);
          this.conyugueFormSet.get('PrimerApellido')?.setValue(elementcon.PrimerApellidoC);
          this.conyugueFormSet.get('SegundoApellido')?.setValue(elementcon.SegundoApellidoC);
          this.conyugueFormSet.get('PrimerNombre')?.setValue(elementcon.PrimerNombreC);
          this.conyugueFormSet.get('SegundoNombre')?.setValue(elementcon.SegundoNombreC);
          this.conyugueFormSet.get('TelefonoResidencia')?.setValue(elementcon.TelefonoResidenciaC);
          this.conyugueFormSet.get('NumeroCelular')?.setValue(elementcon.NumeroCelularC);
          if (elementcon.NombreDrop !== null) {
            this.conyugueFormSet.get('EmpresaLabora')?.setValue(elementcon.NombreDrop.Nombre);
          } else {
            this.conyugueFormSet.get('EmpresaLabora')?.setValue(null);
          }
          if (elementcon.TipoOcupacionC !== null) {
            this.conyugueFormSet.get('IdOcupacion')?.setValue(elementcon.TipoOcupacionC.Value);
          } else {
            this.conyugueFormSet.get('IdOcupacion')?.setValue(null);
          }
          this.conyugueFormSet.get('Ingresos')?.setValue(elementcon.IngresosC);
          this.conyugueFormSet.get('Egresos')?.setValue(elementcon.EgresosC);
          this.conyugueFormSet.get('NitEmpresa')?.setValue(elementcon.Nit);
          this.conyugueFormSet.get('Antiguedad')?.setValue(elementcon.years + '|' + elementcon.meses);
          this.conyugueFormSet.get('TelEmpresa')?.setValue(elementcon.TelefonoEmpresa);
          this.conyugueFormSet.get('DetalleOcupacion')?.setValue(elementcon.DetalleOcupacionC);
        });
        let data : string | null = localStorage.getItem('Data');
        const Datos = JSON.parse(window.atob(data == null ? "": data));
        this.conyugueFormSet.get('Oficina')?.setValue(+Datos.NumeroOficina);
        this.conyugueFormSet.get('Asesor')?.setValue(+Datos.IdAsesor);
        this.conyugueFormSet.get('UsuarioERP')?.setValue(+Datos.IdUsuario);
        this.conyugueFormSet.get('IdTerceroAsesor')?.setValue(+Datos.intlngTercero);


        this.EditarConyugue(this.conyugueFormSet.value);
        this.devolverTab(5);
        this.VolverArriba();
      } else {
        if (this.conyugueViejo != null) {
          this.EliminarConyugue(Number(localStorage.getItem('TerceroNatura')).toString());
          this.devolverTab(5);
          this.VolverArriba();
        } else {
          this.notif.onWarning('Advertencia', 'No tiene registros para editar.');
        }
      }

    } else {
      $('#laboralTab').addClass('disableTab');
      $('#laboralTab').removeClass('activar');
      $('#laboralTab').removeClass('active');
      this.disableTabLaboral = false;
      this.devolverTab(5);
      this.VolverArriba();
      this.notif.onWarning('Advertencia', 'Debe seleccionar una operación válida.');
    }
  }

  ConsultarConyugueCedula(documento : any) {
    if (documento !== 0 && documento !== null && documento !== undefined && documento !== ' ') {
      this.clientesService.BuscarConyugeAll(documento).subscribe(
        result => {
          if (result !== null) {
            this.inputTipoDocumento = true;
            this.conyugueForm.get('TipoDocumento')?.setValue(result.IdTipoDocumento)
            this.conyugueForm.get('DescripcionTipoDocumento')?.setValue(result.DescripcionTipoDocumento);
            this.conyugueForm.get('PrimerNombreC')?.setValue(result.PrimerNombre);
            this.conyugueForm.get('PrimerApellidoC')?.setValue(result.PrimerApellido);
            this.conyugueForm.get('SegundoNombreC')?.setValue(result.SegundoNombre);
            this.conyugueForm.get('SegundoApellidoC')?.setValue(result.SegundoApellido);
            this.conyugueForm.get('TelefonoResidenciaC')?.setValue(result.TelefonoResidencia);
            this.conyugueForm.get('TelefonoEmpresa')?.setValue(result.EmpresaLabora);
            this.conyugueForm.get('NumeroCelularC')?.setValue(result.NumeroCelular);
            this.conyugueForm.get('Nit')?.setValue(result.NitEmpresa);
              this.conyugueForm.get('NombreDropMostrar')?.setValue(result.NombreEmpresa);
            // if (result.NitEmpresa === '100023404') {
            //   this.conyugueForm.get('Nit')?.setValue('8909819121');
            //   this.conyugueForm.get('NombreDropMostrar')?.setValue('Coogranada');
            // } else {
            //   this.conyugueForm.get('Nit')?.setValue(result.NitEmpresa);
            //   this.conyugueForm.get('NombreDropMostrar')?.setValue(result.NombreEmpresa);
            // }
            if (result.IdOcupacion !== null) {
              this.ocupacionesConyugue.forEach((elementOcupacion : any) => {
                if (elementOcupacion.Value === result.IdOcupacion) {
                  this.conyugueForm.get('TipoOcupacionC')?.setValue(elementOcupacion);
                }
              });
            }
            this.conyugueForm.get('IngresosC')?.setValue(result.Ingresos);
            this.conyugueForm.get('EgresosC')?.setValue(result.Egresos);

            this.formBuscarLockedConyugue = true;
          }
        },
        error => {
          const errorMessage = <any>error;
          console.log(errorMessage);
        }
      );
    }
  }
  limpiarNombreEmpresaConyugue() {
    this.conyugueForm.get('Nombre')?.reset();
    this.conyugueForm.get('NombreDropMostrar')?.reset();
  }

  limpiarNitEmpresaConyugue() {
    this.conyugueForm.get('Nit')?.reset();
    this.conyugueForm.get('NombreDropMostrar')?.reset();
  }
  //#endregion

  //#region Metodos de LABORAL

  limpiarNombreEmpresa() {
    this.laboralForm.get('Nombre')?.reset();
    this.laboralForm.get('NombreDropMostrar')?.reset();
  }
  limpiarNitEmpresa() {
    this.laboralForm.get('Nit')?.reset();
    this.laboralForm.get('NombreDropMostrar')?.reset();
  }
  limpiarNombreEmpresaEdit() {
    this.laboralFormEdit.get('Nombre')?.reset();
    this.laboralFormEdit.get('NombreDropMostrar')?.reset();
  }
  limpiarNitEmpresaEdit() {
    this.laboralFormEdit.get('Nit')?.reset();
    this.laboralFormEdit.get('NombreDropMostrar')?.reset();
  }
  validarPersonasCargo() {
    const valor = +this.laboralForm.get('NumPersonasCargo')?.value;
    if (valor % 1 === 0) {
      if (valor < 0 || valor === null) {
        this.laboralForm.get('NumPersonasCargo')?.setValue(0);
      }
    } else {
      this.laboralForm.get('NumPersonasCargo')?.setValue(0);
    }
  }
  validarPersonasCargoEdit() {
    const valor = +this.laboralFormEdit.get('NumPersonasCargo')?.value;
    if (valor % 1 === 0) {
      if (valor < 0 || valor === null) {
        this.laboralForm.get('NumPersonasCargo')?.setValue(0);
      }
    } else {
      this.laboralForm.get('NumPersonasCargo')?.setValue(0);
    }
  }
  ConsultarEmpresaLaboral() {
    const porqueConsulta = this.laboralForm.get('porConsulta')?.value;
    if (!porqueConsulta) {
      this.dataEmpresas = null;
      const objClients = new ClientesModel();
      objClients.Nombre = this.laboralForm.get('Nombre')?.value;
      objClients.Nit = this.laboralForm.get('Nit')?.value;
      if (objClients.Nombre !== '' && objClients.Nombre !== null) {
        this.GetEmpresasLaboral();
        this.laboralForm.get('Nit')?.reset();
      } else if (objClients.Nit !== '' && objClients.Nit !== null) {
        this.GetEmpresaPorNitLaboral();
        this.laboralForm.get('Nombre')?.reset();
      } else {
        this.laboralForm.get('Nit')?.reset();
        this.laboralForm.get('Nombre')?.reset();
      }
    } else {
      // aqui realizar la consulta para los naturales
      this.dataEmpresas = null;
      const objClients = new ClientesModel();
      objClients.Nombre = this.laboralForm.get('Nombre')?.value;
      objClients.Nit = this.laboralForm.get('Nit')?.value;
      if (objClients.Nombre !== '' && objClients.Nombre !== null) {
        this.basicosFrom.get('NombreBusqueda')?.setValue(objClients.Nombre);
        if (objClients.Nombre.length >= 3) {
           this.buscarAllNaturalLaboral(objClients.Nombre, true);
        this.laboralForm.get('Nit')?.reset();
        } else {
           this.notif.onWarning('Advertencia', 'Debe ingresar al menos 3 caracteres para realizar la busqueda.');
        }
      } else if (objClients.Nit !== '' && objClients.Nit !== null) {
        this.buscarAllNaturalLaboral(objClients.Nit, false);
        this.laboralForm.get('Nombre')?.reset();
      } else {
        this.laboralForm.get('Nit')?.reset();
        this.laboralForm.get('Nombre')?.reset();
      }
    }
  }

  ConsultarEmpresaLaboralModal() {
    const porqueConsulta = this.laboralFormEdit.get('porConsulta')?.value;
    if (!porqueConsulta) {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    objClients.Nombre = this.laboralFormEdit.get('Nombre')?.value;
    objClients.Nit = this.laboralFormEdit.get('Nit')?.value;
    if (objClients.Nombre !== '' && objClients.Nombre !== null) {
      this.GetEmpresasLaboralEdit();
      this.laboralFormEdit.get('Nit')?.reset();
    } else if (objClients.Nit !== '' && objClients.Nit !== null) {
      this.GetEmpresaPorNitLaboralEdit();
      this.laboralForm.get('Nombre')?.reset();
    } else {
      this.laboralFormEdit.get('Nit')?.reset();
      this.laboralFormEdit.get('Nombre')?.reset();
    }
  }  else {
      // aqui realizar la consulta para los naturales
      this.dataEmpresas = null;
      const objClients = new ClientesModel();
      objClients.Nombre = this.laboralFormEdit.get('Nombre')?.value;
      objClients.Nit = this.laboralFormEdit.get('Nit')?.value;
      if (objClients.Nombre !== '' && objClients.Nombre !== null) {
        this.basicosFrom.get('NombreBusqueda')?.setValue(objClients.Nombre);
        if (objClients.Nombre.length >= 3) {
           this.buscarAllNaturalLaboralEdit(objClients.Nombre, true);
        this.laboralFormEdit.get('Nit')?.reset();
        } else {
           this.notif.onWarning('Advertencia', 'Debe ingresar al menos 3 caracteres para realizar la busqueda.');
        }
      } else if (objClients.Nit !== '' && objClients.Nit !== null) {
        this.buscarAllNaturalLaboralEdit(objClients.Nit, false);
        this.laboralFormEdit.get('Nombre')?.reset();
      } else {
        this.laboralFormEdit.get('Nit')?.reset();
        this.laboralFormEdit.get('Nombre')?.reset();
      }
    }
  }

  GetEmpresaPorNitLaboral() {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    objClients.Nit = this.laboralForm.get('Nit')?.value;
    if (objClients.Nit !== '') {
      this.laboralForm.get('NombreDrop')?.setValue('');
      this.laboralForm.get('Nombre')?.setValue('');
      this.clientesGetListService.GetEmpresas(objClients).subscribe(
        result => {
          this.dataEmpresas = result;
          this.AbrirEmpresaLaboral.nativeElement.click();
        },
        error => {
          const errorMessage = <any>error;
          this.notif.onDanger('Error', errorMessage);
          console.error(errorMessage);
        }
      );
    }
  }

  GetEmpresasLaboral() {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    objClients.Nombre = this.laboralForm.get('Nombre')?.value;
    if (objClients.Nombre.length >= 3) {
      this.laboralForm.get('NombreDrop')?.setValue('');
      this.laboralForm.get('Nit')?.setValue('');
      this.clientesGetListService.GetEmpresas(objClients).subscribe(
        result => {
          this.dataEmpresas = result;
          this.AbrirEmpresaLaboral.nativeElement.click();
        },
        error => {
          const errorMessage = <any>error;
          this.notif.onDanger('Error', errorMessage);
          console.error(errorMessage);
        }
      );
    } else {
      this.notif.onWarning('Advertencia', 'Debe ingresar al menos 3 caracteres para realizar la busqueda.');
    }
  }

  GetEmpresaPorNitLaboralEdit() {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    objClients.Nit = this.laboralFormEdit.get('Nit')?.value;
    if (objClients.Nit !== '') {
      this.laboralFormEdit.get('NombreDrop')?.setValue('');
      this.laboralFormEdit.get('Nombre')?.setValue('');
      this.clientesGetListService.GetEmpresas(objClients).subscribe(
        result => {
          this.dataEmpresas = result;
        },
        error => {
          const errorMessage = <any>error;
          this.notif.onDanger('Error', errorMessage);
          console.error(errorMessage);
        }
      );
    }
  }

  GetEmpresasLaboralEdit() {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    objClients.Nombre = this.laboralFormEdit.get('Nombre')?.value;
    if (objClients.Nombre.length >= 3) {
      this.laboralFormEdit.get('NombreDrop')?.setValue('');
      this.laboralFormEdit.get('Nit')?.setValue('');
      this.clientesGetListService.GetEmpresas(objClients).subscribe(
        result => {
          this.dataEmpresas = result;
        },
        error => {
          const errorMessage = <any>error;
          this.notif.onDanger('Error', errorMessage);
          console.error(errorMessage);
        }
      );
    }
  }

  resetSearchLaboral() {
    this.laboralForm.get('Nit')?.reset();
    this.laboralForm.get('Nombre')?.reset();
  }

  SetDataEmpresaLaboral(data : any) {
    this.laboralForm.get('NombreDrop')?.setValue(data);
    this.laboralForm.get('NombreDropMostrar')?.setValue(data.Nombre);
    this.laboralForm.get('Nit')?.reset();
    this.laboralForm.get('Nombre')?.reset();
    this.GetConvenios();
  }

  SetDataEmpresaLaboralEdit(data : any) {
    this.laboralFormEdit.get('NombreDrop')?.setValue(data);
    this.laboralFormEdit.get('NombreDropMostrar')?.setValue(data.Nombre);
    this.laboralFormEdit.get('Nit')?.reset();
    this.laboralFormEdit.get('Nombre')?.reset();
    this.GetConveniosEdit();
  }

  validaaddItemsLaboral() {
    if (this.laboralForm.get('IdTipoLocal')?.value === '1') {
      if (this.laboralForm.get('NombreArrendador')?.value !== null
      && this.laboralForm.get('NombreArrendador')?.value !== ' '
      && this.laboralForm.get('NombreArrendador')?.value !== undefined
      &&this.laboralForm.get('TelefonoArrendador')?.value !== null
      && this.laboralForm.get('TelefonoArrendador')?.value !== ' '
        && this.laboralForm.get('TelefonoArrendador')?.value !== undefined) {
        this.addItemsLaboral();
      } else {
        this.notif.onWarning('Advertencia',
        'Debe agregar los datos del arrendador');
      }
    } else{
      this.addItemsLaboral();
    }
  }

  addItemsLaboral() {
   
    const operacion = this.basicosFrom.get('operacion')?.value;
    const tipoEmpleo = +this.basicosFrom.get('tipoEmpleo')?.value;
    const cargoInput = this.laboralForm.get('cargo')?.value;
    const periodoInput = this.laboralForm.get('periodoPago')?.value;

    if (this.laboralForm.get('IdTipoLocal')?.value === '15') {
      this.laboralForm.get('DescripcionTipoLocal')?.setValue('Propio')
    }else if(this.laboralForm.get('IdTipoLocal')?.value === '1'){
      this.laboralForm.get('DescripcionTipoLocal')?.setValue('Arrendado')
    }

    if (operacion === '1') {

      if (this.itemsLaboral.length > 0) {
        let logForeachs = true;

        this.itemsLaboral.forEach(elementItems => {
          if (logForeachs) {
            if (elementItems.tipoContrato !== null) { // entra si es empleado
              if (this.itemsLaboral.length > 0
                && elementItems.tipoContrato.Clase === this.laboralForm.value.tipoContrato.Clase
                && this.indexLaboral === null) {
                this.EnableUpdateLaboral = false;
                this.notif.onWarning('Advertencia',
                  'No se puede agregar otro contrato a término indefinido.');
                logForeachs = false;
              } else {

                const fecha = this.laboralForm.get('fechaIngreso')?.value;
                const fechaNac = this.basicosFrom.get('fechaNacimiento')?.value;
                const fechaEnviada = new Date(fecha);
                const fechaNacimiento = new Date(fechaNac);
                const fechaAcutal = new Date();
                if (fechaEnviada > fechaAcutal) {
                  this.EnableUpdateLaboral = false;
                  this.laboralForm.get('fechaIngreso')?.reset();
                  this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser mayor a la fecha actual.',
                    );
                } else if (fechaEnviada < fechaNacimiento) {
                  this.EnableUpdateLaboral = false;
                  this.laboralForm.get('fechaIngreso')?.reset();
                  this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser menor que la fecha de nacimiento.',
                    );
                } else {

                  if (this.laboralForm.value.convenio !== '') {

                    if (this.laboralForm.value.convenio === undefined) {
                      if (this.dataConvenio.length > 0) {
                        this.laboralForm.get('convenio')?.setValue(this.dataConvenio[0]);
                      } else {
                        this.laboralForm.get('convenio')?.setValue(null);
                      }
                    }
                    this.laboralForm.value.porConsulta = this.porConsultaglobal;
                    if ((tipoEmpleo !== 1 && tipoEmpleo !== 2 && tipoEmpleo !== 3  &&
                         tipoEmpleo !== 5 && tipoEmpleo !== 7  &&
                         tipoEmpleo !== 8 && tipoEmpleo !== 9 && tipoEmpleo !== 14 &&
                         tipoEmpleo !== 15
                         ) &&
                       ((cargoInput !== null && cargoInput !== undefined && cargoInput !== '') &&
                       (periodoInput !== null && periodoInput !== undefined && periodoInput !== ''))
                    ) {
                      
                      if (periodoInput !== null) {
                        this.dataPeriodos.forEach((elements : any) => {
                          if (this.laboralForm.value.periodoPago === elements.Clase) {
                            this.laboralForm.get('periodoPago')?.setValue(elements);
                          }
                        });
                      }

                      if (this.indexLaboral !== null) {
                        this.porConsultaglobal = this.laboralForm.get('porConsulta')?.value;
                        this.itemsLaboral.splice(this.indexLaboral, 1);
                        this.indexLaboral = null;
                      }
                      if (this.laboralForm.value.cargo === null || this.laboralForm.value.cargo.Clase === undefined) {
                        this.laboralForm.get('cargo')?.setValue(this.laboralFormSet.value.IdCargo);
                      }
                      this.itemsLaboral.push(this.laboralForm.value);
                      this.laboralForm.reset();
                    } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
                              ((cargoInput === null || cargoInput === undefined || cargoInput === '') ||
                        (periodoInput === null || periodoInput === undefined || periodoInput === ''))) {
                      if (this.indexLaboral !== null) {
                        this.porConsultaglobal = this.laboralForm.get('porConsulta')?.value;
                        this.itemsLaboral.splice(this.indexLaboral, 1);
                        this.indexLaboral = null;
                      }
                      if (this.laboralForm.value.cargo === null || this.laboralForm.value.cargo.Clase === undefined) {
                        this.laboralForm.get('cargo')?.setValue(this.laboralFormSet.value.IdCargo);
                      }
                      this.itemsLaboral.push(this.laboralForm.value);
                      this.laboralForm.reset();
                    } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
                              ((cargoInput !== null || cargoInput !== undefined || cargoInput !== '') ||
                        (periodoInput !== null || periodoInput !== undefined || periodoInput !== ''))) {
                      if (this.indexLaboral !== null) {
                        this.porConsultaglobal = this.laboralForm.get('porConsulta')?.value;
                        this.itemsLaboral.splice(this.indexLaboral, 1);
                        this.indexLaboral = null;
                      }
                      if (this.laboralForm.value.cargo === null || this.laboralForm.value.cargo.Clase === undefined) {
                        this.laboralForm.get('cargo')?.setValue(this.laboralFormSet.value.IdCargo);
                      }
                      this.itemsLaboral.push(this.laboralForm.value);
                      this.laboralForm.reset();
                    } else {
                      this.EnableUpdateLaboral = false;
                      this.notif.onWarning('Advertencia', 'Los campos cargo y periodo de pago son obligatorios.',
                        );
                    }

                    logForeachs = false;
                    this.EnableUpdateLaboral = true;
                    this.formLockedPersonNatura = null;
                  } else {
                    this.EnableUpdateLaboral = false;
                    this.notif.onWarning('Advertencia', 'Debe ingresar un convenio válido.',
                      );
                  }

                }
              }

            } else { // entra si es idependiente
              const fecha = this.laboralForm.get('fechaIngreso')?.value;
              const fechaNac = this.basicosFrom.get('fechaNacimiento')?.value;
              const fechaEnviada = new Date(fecha);
              const fechaNacimiento = new Date(fechaNac);
              const fechaAcutal = new Date();
              if (fechaEnviada > fechaAcutal) {
                this.EnableUpdateLaboral = false;
                this.laboralForm.get('fechaIngreso')?.reset();
                this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser mayor a la fecha actual.',
                  );
              } else if (fechaEnviada < fechaNacimiento) {
                this.EnableUpdateLaboral = false;
                this.laboralForm.get('fechaIngreso')?.reset();
                this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser menor que la fecha de nacimiento.',
                  );
              } else {

              if (this.laboralForm.value.convenio !== '') { 

                  if (this.laboralForm.value.convenio === undefined) {
                    if (this.dataConvenio.length > 0) {
                      this.laboralForm.get('convenio')?.setValue(this.dataConvenio[0]);
                    } else {
                      this.laboralForm.get('convenio')?.setValue(null);
                    }
                  }

                  if ((tipoEmpleo !== 1 && tipoEmpleo !== 2 && tipoEmpleo !== 3  &&
                         tipoEmpleo !== 5 && tipoEmpleo !== 7  &&
                         tipoEmpleo !== 8 && tipoEmpleo !== 9 && tipoEmpleo !== 14 &&
                         tipoEmpleo !== 15
                         ) &&
                    ((cargoInput !== null && cargoInput !== undefined && cargoInput !== '') &&
                      (periodoInput !== null && periodoInput !== undefined && periodoInput !== ''))
                  ) {

                    if (periodoInput !== null) {
                      this.dataPeriodos.forEach((elements : any) => {
                        if (this.laboralForm.value.periodoPago === elements.Clase) {
                          this.laboralForm.get('periodoPago')?.setValue(elements);
                        }
                      });
                    }

                    if (this.indexLaboral !== null) {
                      this.itemsLaboral.splice(this.indexLaboral, 1);
                      this.indexLaboral = null;
                    }
                    if (this.laboralForm.value.cargo === null || this.laboralForm.value.cargo.Clase === undefined) {
                      this.laboralForm.get('cargo')?.setValue(this.laboralFormSet.value.IdCargo);
                    }
                    this.itemsLaboral.push(this.laboralForm.value);
                    this.laboralForm.reset();
                  } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
                    ((cargoInput === null || cargoInput === undefined || cargoInput === '') ||
                      (periodoInput === null || periodoInput === undefined || periodoInput === ''))) {
                    if (this.indexLaboral !== null) {
                      this.itemsLaboral.splice(this.indexLaboral, 1);
                      this.indexLaboral = null;
                    }
                    if (this.laboralForm.value.cargo === null || this.laboralForm.value.cargo.Clase === undefined) {
                      this.laboralForm.get('cargo')?.setValue(this.laboralFormSet.value.IdCargo);
                    }
                    this.itemsLaboral.push(this.laboralForm.value);
                    this.laboralForm.reset();
                  } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
                    ((cargoInput !== null || cargoInput !== undefined || cargoInput !== '') ||
                      (periodoInput !== null || periodoInput !== undefined || periodoInput !== ''))) {
                    if (this.indexLaboral !== null) {
                      this.itemsLaboral.splice(this.indexLaboral, 1);
                      this.indexLaboral = null;
                    }
                    if (this.laboralForm.value.cargo === null || this.laboralForm.value.cargo.Clase === undefined) {
                      this.laboralForm.get('cargo')?.setValue(this.laboralFormSet.value.IdCargo);
                    }
                    this.itemsLaboral.push(this.laboralForm.value);
                    this.laboralForm.reset();
                  } else {
                    this.EnableUpdateLaboral = false;
                    this.notif.onWarning('Advertencia', 'Los campos cargo y periodo de pago son obligatorios.',
                      );
                  }
                  logForeachs = false;
                  this.EnableUpdateLaboral = true;
                  this.formLockedPersonNatura = null;
              } else {
                  this.EnableUpdateLaboral = false;
                  this.notif.onWarning('Advertencia', 'Debe ingresar un convenio válido.',
                    );
              }

              }
            }
          }
        });
        this.disablePagoConvenio = true;
        this.disablePagoConvenioInput = true;
      } else {
        const fecha = this.laboralForm.get('fechaIngreso')?.value;
        const fechaNac = this.basicosFrom.get('fechaNacimiento')?.value;
        const fechaEnviada = new Date(fecha);
        const fechaNacimiento = new Date(fechaNac);
        const fechaAcutal = new Date();
        if (fechaEnviada > fechaAcutal) {
          this.EnableUpdateLaboral = false;
          this.laboralForm.get('fechaIngreso')?.reset();
          this.notif.onWarning('Advertencia','La fecha de ingreso no puede ser mayor a la fecha actual.');
        } else if (fechaEnviada < fechaNacimiento) {
          this.EnableUpdateLaboral = false;
          this.laboralForm.get('fechaIngreso')?.reset();
          this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser menor que la fecha de nacimiento.');
        } else {
          if (this.indexLaboral !== null) {
            this.itemsLaboral.splice(this.indexLaboral, 1);
            this.indexLaboral = null;
          }

          if ((tipoEmpleo !== 1 && tipoEmpleo !== 2 && tipoEmpleo !== 3  && tipoEmpleo !== 5 && tipoEmpleo !== 7  &&
            tipoEmpleo !== 8 && tipoEmpleo !== 9 && tipoEmpleo !== 14 && tipoEmpleo !== 15)
            && ((cargoInput !== null && cargoInput !== undefined && cargoInput !== '') && (periodoInput !== null && periodoInput !== undefined && periodoInput !== '')))
          {
            if (periodoInput !== null) {
              this.dataPeriodos.forEach((elements : any) => {
                if (this.laboralForm.value.periodoPago === elements.Clase) {
                  this.laboralForm.get('periodoPago')?.setValue(elements);
                }
              });
            }
            this.itemsLaboral.push(this.laboralForm.value);
            this.laboralForm.reset();
          } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 || tipoEmpleo === 5 || tipoEmpleo === 7 ||
                      tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 || tipoEmpleo === 15) &&
            ((cargoInput === null || cargoInput === undefined || cargoInput === '') || (periodoInput === null || periodoInput === undefined || periodoInput === ''))) {
            this.itemsLaboral.push(this.laboralForm.value);
            this.laboralForm.reset();
          } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 || tipoEmpleo === 5 || tipoEmpleo === 7 ||
                      tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 || tipoEmpleo === 15) &&
            ((cargoInput !== null || cargoInput !== undefined || cargoInput !== '') ||
              (periodoInput !== null || periodoInput !== undefined || periodoInput !== ''))) {
            this.itemsLaboral.push(this.laboralForm.value);
            this.laboralForm.reset();
          } else {
            this.EnableUpdateLaboral = false;
            this.notif.onWarning('Advertencia', 'Los campos cargo y periodo de pago son obligatorios.',
              );
          }
          this.disablePagoConvenio = true;
          this.disablePagoConvenioInput = true;
          this.EnableUpdateLaboral = true;
          this.formLockedPersonNatura = null;
        }
      }

    } else if (operacion === '5') {

      this.dataPeriodos.forEach((elements : any) => {
        if (this.laboralForm.value.periodoPago === elements.Clase) {
          this.laboralForm.get('periodoPago')?.setValue(elements);
        }
      });

      if (this.itemsLaboral.length > 0) {
        let logForeachs = true;

        this.itemsLaboral.forEach(elementItems => {
          if (logForeachs) {
            if (elementItems.tipoContrato !== null) {

              if (this.itemsLaboral.length > 0
                && elementItems.tipoContrato.Clase === this.laboralForm.value.tipoContrato.Clase
                && this.indexLaboral === null
              ) { // valid que el registro de laboral no venga con otro contrato laboral
                this.notif.onWarning('Advertencia','No se puede agregar otro contrato a término indefinido.');
                logForeachs = false;
              } else {

                const fecha = this.laboralForm.get('fechaIngreso')?.value;
                const fechaNac = this.basicosFrom.get('fechaNacimiento')?.value;
                const fechaEnviada = new Date(fecha);
                const fechaNacimiento = new Date(fechaNac);
                const fechaAcutal = new Date();
                if (fechaEnviada > fechaAcutal) {
                  this.laboralForm.get('fechaIngreso')?.reset();
                  this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser mayor a la fecha actual.',
                    );
                } else if (fechaEnviada < fechaNacimiento) {
                  this.laboralForm.get('fechaIngreso')?.reset();
                  this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser menor que la fecha de nacimiento.',
                    );
                } else {
                  if (this.indexLaboral !== null) {
                    if ((tipoEmpleo !== 1 && tipoEmpleo !== 2 && tipoEmpleo !== 3  &&
                         tipoEmpleo !== 5 && tipoEmpleo !== 7  &&
                         tipoEmpleo !== 8 && tipoEmpleo !== 9 && tipoEmpleo !== 14 &&
                         tipoEmpleo !== 15
                         ) &&
                      ((cargoInput !== null && cargoInput !== undefined && cargoInput !== '') &&
                        (periodoInput !== null && periodoInput !== undefined && periodoInput !== ''))
                    ) {
                      this.itemsLaboral.splice(this.indexLaboral, 1);
                      this.itemsLaboral.push(this.laboralForm.value);
                      this.laboralForm.reset();
                    } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
                      ((cargoInput === null || cargoInput === undefined || cargoInput === '') ||
                        (periodoInput === null || periodoInput === undefined || periodoInput === ''))) {
                      this.itemsLaboral.splice(this.indexLaboral, 1);
                      this.itemsLaboral.push(this.laboralForm.value);
                      this.laboralForm.reset();
                    } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
                      ((cargoInput !== null || cargoInput !== undefined || cargoInput !== '') ||
                        (periodoInput !== null || periodoInput !== undefined || periodoInput !== ''))) {
                      this.itemsLaboral.splice(this.indexLaboral, 1);
                      this.itemsLaboral.push(this.laboralForm.value);
                      this.laboralForm.reset();
                    } else {
                      this.EnableUpdateLaboral = false;
                      this.notif.onWarning('Advertencia', 'Los campos cargo y periodo de pago son obligatorios.',
                        );
                    }

                    logForeachs = false;
                    this.indexLaboral = null;
                    this.formLockedPersonNatura = null;
                  } else {
                    if ((tipoEmpleo !== 1 && tipoEmpleo !== 2 && tipoEmpleo !== 3  &&
                         tipoEmpleo !== 5 && tipoEmpleo !== 7  &&
                         tipoEmpleo !== 8 && tipoEmpleo !== 9 && tipoEmpleo !== 14 &&
                         tipoEmpleo !== 15
                         ) &&
                      ((cargoInput !== null && cargoInput !== undefined && cargoInput !== '') &&
                        (periodoInput !== null && periodoInput !== undefined && periodoInput !== ''))
                    ) {


                      if (periodoInput !== null) {
                        this.dataPeriodos.forEach((elements : any) => {
                          if (this.laboralForm.value.periodoPago === elements.Clase) {
                            this.laboralForm.get('periodoPago')?.setValue(elements);
                          }
                        });
                      }

                      this.itemsLaboral.push(this.laboralForm.value);
                      this.laboralForm.reset();
                    } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
                      ((cargoInput === null || cargoInput === undefined || cargoInput === '') ||
                        (periodoInput === null || periodoInput === undefined || periodoInput === ''))) {
                      this.itemsLaboral.push(this.laboralForm.value);
                      this.laboralForm.reset();
                    } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
                      ((cargoInput !== null || cargoInput !== undefined || cargoInput !== '') ||
                        (periodoInput !== null || periodoInput !== undefined || periodoInput !== ''))) {
                      this.itemsLaboral.push(this.laboralForm.value);
                      this.laboralForm.reset();
                    } else {
                      this.EnableUpdateLaboral = false;
                      this.notif.onWarning('Advertencia', 'Los campos cargo y periodo de pago son obligatorios.',
                        );
                    }
                    logForeachs = false;
                    this.indexLaboral = null;
                    this.formLockedPersonNatura = null;
                  }
                }
              }

            } else {
              const fecha = this.laboralForm.get('fechaIngreso')?.value;
              const fechaNac = this.basicosFrom.get('fechaNacimiento')?.value;
              const fechaEnviada = new Date(fecha);
              const fechaNacimiento = new Date(fechaNac);
              const fechaAcutal = new Date();
              if (fechaEnviada > fechaAcutal) {
                this.laboralForm.get('fechaIngreso')?.reset();
                this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser mayor a la fecha actual.',
                  );
              } else if (fechaEnviada < fechaNacimiento) {
                this.laboralForm.get('fechaIngreso')?.reset();
                this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser menor que la fecha de nacimiento.',
                  );
              } else {
                if (this.indexLaboral !== null) {
                  if ((tipoEmpleo !== 1 && tipoEmpleo !== 2 && tipoEmpleo !== 3  &&
                         tipoEmpleo !== 5 && tipoEmpleo !== 7  &&
                         tipoEmpleo !== 8 && tipoEmpleo !== 9 && tipoEmpleo !== 14 &&
                         tipoEmpleo !== 15
                         ) &&
                    ((cargoInput !== null && cargoInput !== undefined && cargoInput !== '') &&
                      (periodoInput !== null && periodoInput !== undefined && periodoInput !== ''))
                  ) {

                    if (periodoInput !== null) {
                      this.dataPeriodos.forEach((elements : any) => {
                        if (this.laboralForm.value.periodoPago === elements.Clase) {
                          this.laboralForm.get('periodoPago')?.setValue(elements);
                        }
                      });
                    }

                    this.itemsLaboral.splice(this.indexLaboral, 1);
                    this.itemsLaboral.push(this.laboralForm.value);
                    this.laboralForm.reset();
                  } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
                    ((cargoInput === null || cargoInput === undefined || cargoInput === '') ||
                      (periodoInput === null || periodoInput === undefined || periodoInput === ''))) {
                    this.itemsLaboral.splice(this.indexLaboral, 1);
                    this.itemsLaboral.push(this.laboralForm.value);
                    this.laboralForm.reset();
                  } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
                    ((cargoInput !== null || cargoInput !== undefined || cargoInput !== '') ||
                      (periodoInput !== null || periodoInput !== undefined || periodoInput !== ''))) {
                    this.itemsLaboral.splice(this.indexLaboral, 1);
                    this.itemsLaboral.push(this.laboralForm.value);
                    this.laboralForm.reset();
                  } else {
                    this.EnableUpdateLaboral = false;
                    this.notif.onWarning('Advertencia', 'Los campos cargo y periodo de pago son obligatorios.',
                      );
                  }

                  this.indexLaboral = null;
                } else {
                  if ((tipoEmpleo !== 1 && tipoEmpleo !== 2 && tipoEmpleo !== 3  &&
                         tipoEmpleo !== 5 && tipoEmpleo !== 7  &&
                         tipoEmpleo !== 8 && tipoEmpleo !== 9 && tipoEmpleo !== 14 &&
                         tipoEmpleo !== 15
                         ) &&
                    ((cargoInput !== null && cargoInput !== undefined && cargoInput !== '') &&
                      (periodoInput !== null && periodoInput !== undefined && periodoInput !== ''))
                  ) {

                    if (periodoInput !== null) {
                      this.dataPeriodos.forEach((elements : any) => {
                        if (this.laboralForm.value.periodoPago === elements.Clase) {
                          this.laboralForm.get('periodoPago')?.setValue(elements);
                        }
                      });
                    }


                    this.itemsLaboral.push(this.laboralForm.value);
                    this.laboralForm.reset();
                  } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
                    ((cargoInput === null || cargoInput === undefined || cargoInput === '') ||
                      (periodoInput === null || periodoInput === undefined || periodoInput === ''))) {
                    this.itemsLaboral.push(this.laboralForm.value);
                    this.laboralForm.reset();
                  } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
                    ((cargoInput !== null || cargoInput !== undefined || cargoInput !== '') ||
                      (periodoInput !== null || periodoInput !== undefined || periodoInput !== ''))) {
                    this.itemsLaboral.push(this.laboralForm.value);
                    this.laboralForm.reset();
                  } else {
                    this.EnableUpdateLaboral = false;
                    this.notif.onWarning('Advertencia', 'Los campos cargo y periodo de pago son obligatorios.',
                      );
                  }
                }
                logForeachs = false;
                this.formLockedPersonNatura = null;
              }
            }

          }
        });
        this.disablePagoConvenio = true;
        this.disablePagoConvenioInput = true;


      } else {
        const fecha = this.laboralForm.get('fechaIngreso')?.value;
        const fechaNac = this.basicosFrom.get('fechaNacimiento')?.value;
        const fechaEnviada = new Date(fecha);
        const fechaNacimiento = new Date(fechaNac);
        const fechaAcutal = new Date();
        if (fechaEnviada > fechaAcutal) {
          this.laboralForm.get('fechaIngreso')?.reset();
          this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser mayor a la fecha actual.',
            );
        } else if (fechaEnviada < fechaNacimiento) {
          this.laboralForm.get('fechaIngreso')?.reset();
          this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser menor que la fecha de nacimiento.',
            );
        } else {
          if (this.indexLaboral !== null) {
            if ((tipoEmpleo !== 1 && tipoEmpleo !== 2 && tipoEmpleo !== 3  &&
                         tipoEmpleo !== 5 && tipoEmpleo !== 7  &&
                         tipoEmpleo !== 8 && tipoEmpleo !== 9 && tipoEmpleo !== 14 &&
                         tipoEmpleo !== 15
                         ) &&
              ((cargoInput !== null && cargoInput !== undefined && cargoInput !== '') &&
                (periodoInput !== null && periodoInput !== undefined && periodoInput !== ''))
            ) {

              if (periodoInput !== null) {
                this.dataPeriodos.forEach((elements : any) => {
                  if (this.laboralForm.value.periodoPago === elements.Clase) {
                    this.laboralForm.get('periodoPago')?.setValue(elements);
                  }
                });
              }

              this.itemsLaboral.splice(this.indexLaboral, 1);
              this.itemsLaboral.push(this.laboralForm.value);
              this.disablePagoConvenio = true;
              this.disablePagoConvenioInput = true;
              this.laboralForm.reset();
              this.indexLaboral = null;
            } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
              ((cargoInput === null || cargoInput === undefined || cargoInput === '') ||
                (periodoInput === null || periodoInput === undefined || periodoInput === ''))) {
              this.itemsLaboral.splice(this.indexLaboral, 1);
              this.itemsLaboral.push(this.laboralForm.value);
              this.disablePagoConvenio = true;
              this.disablePagoConvenioInput = true;
              this.laboralForm.reset();
              this.indexLaboral = null;
            } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
              ((cargoInput !== null || cargoInput !== undefined || cargoInput !== '') ||
                (periodoInput !== null || periodoInput !== undefined || periodoInput !== ''))) {
              this.itemsLaboral.splice(this.indexLaboral, 1);
              this.itemsLaboral.push(this.laboralForm.value);
              this.disablePagoConvenio = true;
              this.disablePagoConvenioInput = true;
              this.laboralForm.reset();
              this.indexLaboral = null;
            } else {
              this.EnableUpdateLaboral = false;
              this.notif.onWarning('Advertencia', 'Los campos cargo y periodo de pago son obligatorios.',
                );
            }

          } else {
            if ((tipoEmpleo !== 1 && tipoEmpleo !== 2 && tipoEmpleo !== 3  &&
                         tipoEmpleo !== 5 && tipoEmpleo !== 7  &&
                         tipoEmpleo !== 8 && tipoEmpleo !== 9 && tipoEmpleo !== 14 &&
                         tipoEmpleo !== 15
                         ) &&
              ((cargoInput !== null && cargoInput !== undefined && cargoInput !== '') &&
                (periodoInput !== null && periodoInput !== undefined && periodoInput !== ''))
            ) {

              if (periodoInput !== null) {
                this.dataPeriodos.forEach((elements : any) => {
                  if (this.laboralForm.value.periodoPago === elements.Clase) {
                    this.laboralForm.get('periodoPago')?.setValue(elements);
                  }
                });
              }


              this.itemsLaboral.push(this.laboralForm.value);
              this.disablePagoConvenio = true;
              this.disablePagoConvenioInput = true;
              this.laboralForm.reset();
            } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 6 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
              ((cargoInput === null || cargoInput === undefined || cargoInput === '') ||
                (periodoInput === null || periodoInput === undefined || periodoInput === ''))) {
              this.itemsLaboral.push(this.laboralForm.value);
              this.disablePagoConvenio = true;
              this.disablePagoConvenioInput = true;
              this.laboralForm.reset();
            } else if ((tipoEmpleo === 1 || tipoEmpleo === 2 || tipoEmpleo === 3 ||
                                tipoEmpleo === 5 || tipoEmpleo === 6 || tipoEmpleo === 7 ||
                                tipoEmpleo === 8 || tipoEmpleo === 9 || tipoEmpleo === 14 ||
                                tipoEmpleo === 15
                                ) &&
              ((cargoInput !== null || cargoInput !== undefined || cargoInput !== '') ||
                (periodoInput !== null || periodoInput !== undefined || periodoInput !== ''))) {
              this.itemsLaboral.push(this.laboralForm.value);
              this.disablePagoConvenio = true;
              this.disablePagoConvenioInput = true;
              this.laboralForm.reset();
            } else {
              this.EnableUpdateLaboral = false;
              this.notif.onWarning('Advertencia', 'Los campos cargo y periodo de pago son obligatorios.',
                );
            }
          }
          this.formLockedPersonNatura = null;
        }
      }
    } else {
      this.EnableUpdateReferencia = false;
      this.notif.onWarning('Advertencia',
        'Debe seleccionar una operación válida.');
      this.laboralForm.reset();
    }
  }

  addItemsLaboralEdit() {
    const operacion = this.basicosFrom.get('operacion')?.value;
    if (operacion === '1') {
      this.dataPeriodos.forEach((elements : any) => {
        if (this.laboralFormEdit.value.periodoPago === elements.Clase) {
          this.laboralFormEdit.get('periodoPago')?.setValue(elements);
        }
      });
      if (this.itemsLaboralEdit.length > 0) {
        let logForeachs = true;
        this.itemsLaboralEdit.forEach(elementItems => {
          if (logForeachs) {
            if (this.itemsLaboralEdit.length > 0
              && elementItems.tipoContrato.Clase === this.laboralFormEdit.value.tipoContrato.Clase
              && this.indexLaboral === null) { // valida que no se ingrese un mismo contrato a termino indefinido
              this.EnableUpdateLaboral = false;
              this.notif.onWarning('Advertencia','Debe ingresar un convenio válido.');
              logForeachs = false;
            } else {
              const fecha = this.laboralFormEdit.get('fechaIngreso')?.value;
              const fechaNac = this.basicosFrom.get('fechaNacimiento')?.value;
              const fechaEnviada = new Date(fecha);
              const fechaNacimiento = new Date(fechaNac);
              const fechaAcutal = new Date();
              if (fechaEnviada > fechaAcutal) {
                this.EnableUpdateLaboral = false;
                this.laboralFormEdit.get('fechaIngreso')?.reset();
                this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser mayor a la fecha actual.',
                  );
              } else if (fechaEnviada < fechaNacimiento) {
                this.EnableUpdateLaboral = false;
                this.laboralFormEdit.get('fechaIngreso')?.reset();
                this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser menor que la fecha de nacimiento.',
                  );
              } else {
                if (this.indexLaboral !== null) {
                  this.itemsLaboralEdit.splice(this.indexLaboral, 1);
                  this.indexLaboral = null;
                }
                this.itemsLaboralEdit.push(this.laboralFormEdit.value);
                logForeachs = false;
                this.EnableUpdateLaboral = true;
              }
            }
          }
        });
        this.disablePagoConvenio = true;
        this.disablePagoConvenioInput = true;
        this.laboralFormEdit.reset();
      } else {
        const fecha = this.laboralFormEdit.get('fechaIngreso')?.value;
        const fechaNac = this.basicosFrom.get('fechaNacimiento')?.value;
        const fechaEnviada = new Date(fecha);
        const fechaNacimiento = new Date(fechaNac);
        const fechaAcutal = new Date();
        if (fechaEnviada > fechaAcutal) {
          this.EnableUpdateLaboral = false;
          this.laboralFormEdit.get('fechaIngreso')?.reset();
          this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser mayor a la fecha actual.',
            );
        } else if (fechaEnviada < fechaNacimiento) {
          this.EnableUpdateLaboral = false;
          this.laboralFormEdit.get('fechaIngreso')?.reset();
          this.notif.onWarning('Advertencia', 'La fecha de ingreso no puede ser menor que la fecha de nacimiento.',
            );
        } else {
          if (this.indexLaboral !== null) {
            this.itemsLaboralEdit.splice(this.indexLaboral, 1);
            this.indexLaboral = null;
          }
          this.itemsLaboralEdit.push(this.laboralFormEdit.value);
          this.disablePagoConvenio = true;
          this.disablePagoConvenioInput = true;
          this.laboralFormEdit.reset();
          this.EnableUpdateLaboral = true;
        }
      }
      this.laboralFormEdit.reset();
    }
  }

  eliminarLaboral(index : number) {
    this.EnableUpdateLaboral = true;
    this.itemsLaboral.splice(index, 1);
  }

  eliminarLaboralEdit(index : number) {
    this.EnableUpdateLaboral = true;
    this.itemsLaboralEdit.splice(index, 1);
  }

  setDataLaboral() {
    // 4- Empleado 10 -jubilado Empleado 11 -jubilado pensionado
    const empleoSeleccionado = localStorage.getItem('laborSeleccionada');
    const results = this.basicosFrom.get('operacion')?.value;
    if (empleoSeleccionado === '4' || empleoSeleccionado === '10' || empleoSeleccionado === '11') { // Mensaje
      if (this.itemsLaboral.length === 0) { // Mensaje
        $('#referenciasTab').addClass('disableTab');
        $('#referenciaTab').removeClass('activar');
        $('#referenciaTab').removeClass('active');
        this.botonLaboralAnterior.nativeElement.click();
        this.devolverTab(6);
        this.VolverArriba();
        this.notif.onWarning('Advertencia',
          'Debe agregar un registro laboral.');
      } else {

        if (results === '5') {
          this.allItemsFormSaves.laboralDto = {};
          this.allItemsFormLaboral = [];
          this.laboralForm.get('dataLaboral')?.setValue(this.itemsLaboral);

          this.itemsLaboral.forEach(elementlab => {
            if (elementlab.NombreDrop !== null) {
              if (elementlab.NombreDrop.Codigo !== undefined) {
                this.laboralFormSet.get('IdEmpresa')?.setValue(elementlab.NombreDrop.Codigo);
                this.laboralFormSet.get('IdNatural')?.setValue('0');
              } else {
                this.laboralFormSet.get('IdEmpresa')?.setValue(elementlab.NombreDrop.IdTercero);
                this.laboralFormSet.get('IdNatural')?.setValue('1');
              }
            } else {
              this.laboralFormSet.get('IdEmpresa')?.setValue('0');
            }
            if (elementlab.convenio !== null && elementlab.convenio !== '') {
              this.laboralFormSet.get('IdConvenio')?.setValue(elementlab.convenio.intConvenio);
            } else {
              this.laboralFormSet.get('IdConvenio')?.setValue(elementlab.convenio);
            }
            if (elementlab.cargo !== null && elementlab.cargo !== undefined && elementlab.cargo !== '') {
              this.laboralFormSet.get('IdCargo')?.setValue(elementlab.cargo.Clase);
            } else {
              this.laboralFormSet.get('IdCargo')?.setValue(null);
            }
            if (elementlab.tipoContrato !== null && elementlab.tipoContrato !== undefined && elementlab.tipoContrato !== '') {
              this.laboralFormSet.get('IdTipoContratoLaboral')?.setValue(elementlab.tipoContrato.Clase);
            } else {
              this.laboralFormSet.get('IdTipoContratoLaboral')?.setValue(null);
            }

            this.laboralFormSet.get('FechaLabora')?.setValue(elementlab.fechaIngreso);
            if (elementlab.periodoPago !== null && elementlab.periodoPago !== undefined && elementlab.periodoPago !== '') {
              this.laboralFormSet.get('IdPeriodoPago')?.setValue(elementlab.periodoPago.Clase);
            } else {
              this.laboralFormSet.get('IdPeriodoPago')?.setValue(null);
            }
            this.laboralFormSet.get('NumPersonasCargo')?.setValue(elementlab.NumPersonasCargo);
            this.laboralFormSet.get('EmpresaDescripcion')?.setValue(elementlab.EmpresaString);

            if (elementlab.IdTipoLocal !== null && elementlab.IdTipoLocal !== undefined && elementlab.IdTipoLocal !== '') {
              this.laboralFormSet.get('IdTipoLocal')?.setValue(elementlab.IdTipoLocal);
            } else {
              this.laboralFormSet.get('IdTipoLocal')?.setValue(null);
            }
            if (elementlab.NombreArrendador !== null && elementlab.NombreArrendador !== undefined && elementlab.NombreArrendador !== '') {
              this.laboralFormSet.get('NombreArrendador')?.setValue(elementlab.NombreArrendador);
            } else {
              this.laboralFormSet.get('NombreArrendador')?.setValue(null);
            }
            if (elementlab.TelefonoArrendador !== null && elementlab.TelefonoArrendador !== undefined && elementlab.TelefonoArrendador !== '') {
              this.laboralFormSet.get('TelefonoArrendador')?.setValue(elementlab.TelefonoArrendador);
            } else {
              this.laboralFormSet.get('TelefonoArrendador')?.setValue(null);
            }



            this.allItemsFormLaboral.push(this.laboralFormSet.value);
          });
          this.allItemsFormSaves.laboralDto = this.allItemsFormLaboral;
          this.laboralSave.get('LaboralDto')?.setValue(this.allItemsFormLaboral);
          this.allItemsFormSave.push(this.laboralSave.value);
          $('#referenciasTab').removeClass('disableTab');
          $('#laboralTab').removeClass('activar');
          $('#laboralTab').removeClass('active');
          this.botonLaboralSiguiente.nativeElement.click();
          this.devolverTab(7);
          this.VolverArriba();

        } else if (results === '1') {
          this.allItemsFormSaves.laboralDto = {};
          this.allItemsFormLaboral = [];
          this.laboralForm.get('dataLaboral')?.setValue(this.itemsLaboral);
          this.itemsLaboral.forEach(elementlabo => {
            this.laboralFormSet.get('IdAsocEmpresa')?.setValue(elementlabo.idAsocEmpresa);
            if (elementlabo.NombreDrop !== null) {
              if (elementlabo.NombreDrop.Codigo !== undefined) {
                this.laboralFormSet.get('IdEmpresa')?.setValue(elementlabo.NombreDrop.Codigo);
                this.laboralFormSet.get('IdNatural')?.setValue('0');
              } else {
                this.laboralFormSet.get('IdEmpresa')?.setValue(elementlabo.NombreDrop.IdTercero);
                this.laboralFormSet.get('IdNatural')?.setValue('1');
              }
            } else {
              this.laboralFormSet.get('IdEmpresa')?.setValue('0');
            }
            if (elementlabo.convenio !== null && elementlabo.convenio !== '') {
              this.laboralFormSet.get('IdConvenio')?.setValue(elementlabo.convenio.intConvenio);
            } else {
              this.laboralFormSet.get('IdConvenio')?.setValue(elementlabo.convenio);
            }
            const tercerEdit = localStorage.getItem('TerceroNatura');
            this.laboralFormSet.get('IdTercero')?.setValue(tercerEdit);
            this.laboralFormSet.get('IdCargo')?.setValue(elementlabo.cargo.Clase);
            this.laboralFormSet.get('IdTipoContratoLaboral')?.setValue(elementlabo.tipoContrato.Clase);
            this.laboralFormSet.get('FechaLabora')?.setValue(elementlabo.fechaIngreso);
            this.laboralFormSet.get('IdPeriodoPago')?.setValue(elementlabo.periodoPago.Clase);
            this.laboralFormSet.get('NumPersonasCargo')?.setValue(elementlabo.NumPersonasCargo);
            this.laboralFormSet.get('EmpresaDescripcion')?.setValue(elementlabo.EmpresaString);
            this.laboralFormSet.get('IdTipoLocal')?.setValue(elementlabo.IdTipoLocal);
            this.laboralFormSet.get('NombreArrendador')?.setValue(elementlabo.NombreArrendador);
            this.laboralFormSet.get('TelefonoArrendador')?.setValue(elementlabo.TelefonoArrendador);
            this.allItemsFormLaboral.push(this.laboralFormSet.value);
          });
          this.EditarLaboral(this.allItemsFormLaboral);
          this.devolverTab(6);
          this.VolverArriba();
        } else {
          this.botonLaboralAnterior.nativeElement.click();
          this.disableTabReferencia = false;
          $('#referenciaTab').removeClass('activar');
          $('#referenciaTab').removeClass('active');
          this.devolverTab(6);
          this.VolverArriba();
          this.notif.onWarning('Advertencia', 'Debe seleccionar una operación válida.');
        }
      }

    } else if (empleoSeleccionado !== '4' && empleoSeleccionado !== '10'
      && empleoSeleccionado !== '11' && this.itemsLaboral.length === 0) { // Mensaje
      this.allItemsFormSaves.laboralDto = null;
      this.allItemsFormLaboral = [];
      const tercerEdit = localStorage.getItem('TerceroNatura');
        if (results === '1') {
          this.EliminarLaborales(tercerEdit == null ? "" : tercerEdit);
        }
        $('#referenciasTab').removeClass('disableTab');
        this.botonLaboralSiguiente.nativeElement.click();
        $('#laboralTab').removeClass('activar');
        $('#laboralTab').removeClass('active');
        this.devolverTab(7);
      this.VolverArriba();
    } else {
      if (results === '5') {
        this.allItemsFormSaves.laboralDto = {};
        this.allItemsFormLaboral = [];
        this.laboralForm.get('dataLaboral')?.setValue(this.itemsLaboral);
        this.itemsLaboral.forEach(elementlab => {
          if (elementlab.NombreDrop !== null) {
            if (elementlab.NombreDrop.Codigo !== undefined) {
              this.laboralFormSet.get('IdEmpresa')?.setValue(elementlab.NombreDrop.Codigo);
              this.laboralFormSet.get('IdNatural')?.setValue('0');
            } else {
              this.laboralFormSet.get('IdEmpresa')?.setValue(elementlab.NombreDrop.IdTercero);
              this.laboralFormSet.get('IdNatural')?.setValue('1');
            }
          } else {
            this.laboralFormSet.get('IdEmpresa')?.setValue('0');
          }
          if (elementlab.convenio !== null && elementlab.convenio !== '') {
            this.laboralFormSet.get('IdConvenio')?.setValue(elementlab.convenio.intConvenio);
          } else {
            this.laboralFormSet.get('IdConvenio')?.setValue(elementlab.convenio);
          }
          if (elementlab.cargo !== null && elementlab.cargo !== undefined && elementlab.cargo !== '') {
            this.laboralFormSet.get('IdCargo')?.setValue(elementlab.cargo.Clase);
          } else {
            this.laboralFormSet.get('IdCargo')?.setValue(null);
          }
         if (elementlab.tipoContrato !== null && elementlab.tipoContrato !== undefined && elementlab.tipoContrato !== '') {
            this.laboralFormSet.get('IdTipoContratoLaboral')?.setValue(elementlab.tipoContrato.Clase);
          } else {
            this.laboralFormSet.get('IdTipoContratoLaboral')?.setValue(null);
          }
          this.laboralFormSet.get('FechaLabora')?.setValue(elementlab.fechaIngreso);
          if (elementlab.periodoPago !== null && elementlab.periodoPago !== undefined && elementlab.periodoPago !== '') {
            this.laboralFormSet.get('IdPeriodoPago')?.setValue(elementlab.periodoPago.Clase);
          } else {
            this.laboralFormSet.get('IdPeriodoPago')?.setValue(null);
          }
          this.laboralFormSet.get('NumPersonasCargo')?.setValue(elementlab.NumPersonasCargo);
          this.laboralFormSet.get('EmpresaDescripcion')?.setValue(elementlab.EmpresaString);

          if (elementlab.IdTipoLocal !== null && elementlab.IdTipoLocal !== undefined && elementlab.IdTipoLocal !== '') {
            this.laboralFormSet.get('IdTipoLocal')?.setValue(elementlab.IdTipoLocal);
          } else {
            this.laboralFormSet.get('IdTipoLocal')?.setValue(null);
          }
          if (elementlab.NombreArrendador !== null && elementlab.NombreArrendador !== undefined && elementlab.NombreArrendador !== '') {
            this.laboralFormSet.get('NombreArrendador')?.setValue(elementlab.NombreArrendador);
          } else {
            this.laboralFormSet.get('NombreArrendador')?.setValue(null);
          }
          if (elementlab.TelefonoArrendador !== null && elementlab.TelefonoArrendador !== undefined && elementlab.TelefonoArrendador !== '') {
            this.laboralFormSet.get('TelefonoArrendador')?.setValue(elementlab.TelefonoArrendador);
          } else {
            this.laboralFormSet.get('TelefonoArrendador')?.setValue(null);
          }

          this.allItemsFormLaboral.push(this.laboralFormSet.value);


        });
        this.allItemsFormSaves.laboralDto = this.allItemsFormLaboral;
        this.laboralSave.get('LaboralDto')?.setValue(this.allItemsFormLaboral);
        this.allItemsFormSave.push(this.laboralSave.value);
        $('#referenciasTab').removeClass('disableTab');
        this.disableTabReferencia = true;
        $('#laboralTab').removeClass('activar');
        $('#laboralTab').removeClass('active');
        this.botonLaboralSiguiente.nativeElement.click();
        this.devolverTab(7);
        this.VolverArriba();
      } else if (results === '1') {
        this.allItemsFormSaves.laboralDto = {};
        this.allItemsFormLaboral = [];
        this.laboralForm.get('dataLaboral')?.setValue(this.itemsLaboral);
        this.itemsLaboral.forEach(elementlab => {
          this.laboralFormSet.get('IdAsocEmpresa')?.setValue(elementlab.idAsocEmpresa);
          if (elementlab.NombreDrop !== null) {
            if (elementlab.NombreDrop.Codigo !== undefined) {
              this.laboralFormSet.get('IdEmpresa')?.setValue(elementlab.NombreDrop.Codigo);
              this.laboralFormSet.get('IdNatural')?.setValue('0');
            } else {
              this.laboralFormSet.get('IdEmpresa')?.setValue(elementlab.NombreDrop.IdTercero);
              this.laboralFormSet.get('IdNatural')?.setValue('1');
            }
          } else {
            this.laboralFormSet.get('IdEmpresa')?.setValue('0');
          }
          if (elementlab.convenio !== null && elementlab.convenio !== '') {
            this.laboralFormSet.get('IdConvenio')?.setValue(elementlab.convenio.intConvenio);
          } else {
            this.laboralFormSet.get('IdConvenio')?.setValue(elementlab.convenio);
          }
          const tercerEdit = localStorage.getItem('TerceroNatura');
          this.laboralFormSet.get('IdTercero')?.setValue(tercerEdit);
          if (elementlab.cargo !== null && elementlab.cargo !== undefined && elementlab.cargo !== '') {
            this.laboralFormSet.get('IdCargo')?.setValue(elementlab.cargo.Clase);
          } else {
            this.laboralFormSet.get('IdCargo')?.setValue(null);
          }
          if (elementlab.tipoContrato !== null && elementlab.tipoContrato !== undefined && elementlab.tipoContrato !== '') {
              this.laboralFormSet.get('IdTipoContratoLaboral')?.setValue(elementlab.tipoContrato.Clase);
            } else {
              this.laboralFormSet.get('IdTipoContratoLaboral')?.setValue(null);
            }
          this.laboralFormSet.get('FechaLabora')?.setValue(elementlab.fechaIngreso);
          if (elementlab.periodoPago !== null && elementlab.periodoPago !== undefined && elementlab.periodoPago !== '') {
            this.laboralFormSet.get('IdPeriodoPago')?.setValue(elementlab.periodoPago.Clase);
          } else {
            this.laboralFormSet.get('IdPeriodoPago')?.setValue(null);
          }
          this.laboralFormSet.get('NumPersonasCargo')?.setValue(elementlab.NumPersonasCargo);
          this.laboralFormSet.get('EmpresaDescripcion')?.setValue(elementlab.EmpresaString);

          if (elementlab.IdTipoLocal !== null && elementlab.IdTipoLocal !== undefined && elementlab.IdTipoLocal !== '') {
            this.laboralFormSet.get('IdTipoLocal')?.setValue(elementlab.IdTipoLocal);
          } else {
            this.laboralFormSet.get('IdTipoLocal')?.setValue(null);
          }
          if (elementlab.NombreArrendador !== null && elementlab.NombreArrendador !== undefined && elementlab.NombreArrendador !== '') {
            this.laboralFormSet.get('NombreArrendador')?.setValue(elementlab.NombreArrendador);
          } else {
            this.laboralFormSet.get('NombreArrendador')?.setValue(null);
          }
          if (elementlab.TelefonoArrendador !== null && elementlab.TelefonoArrendador !== undefined && elementlab.TelefonoArrendador !== '') {
            this.laboralFormSet.get('TelefonoArrendador')?.setValue(elementlab.TelefonoArrendador);
          } else {
            this.laboralFormSet.get('TelefonoArrendador')?.setValue(null);
          }


          this.allItemsFormLaboral.push(this.laboralFormSet.value);
        });

        this.EditarLaboral(this.allItemsFormLaboral);
        this.devolverTab(6);
        this.VolverArriba();
      } else {
        this.botonLaboralAnterior.nativeElement.click();
        $('#referenciaTab').removeClass('activar');
        $('#referenciaTab').removeClass('active');
        this.devolverTab(6);
        this.VolverArriba();
        this.notif.onWarning('Advertencia', 'Debe seleccionar una operación válida.');
      }
    }

  }

  setDataLaboralEditModal() {
    this.allItemsFormSaves.laboralDto = {};
    this.allItemsFormLaboralEdit = [];
    this.laboralFormEdit.get('dataLaboral')?.setValue(this.itemsLaboralEdit);

    this.itemsLaboralEdit.forEach(elementlab => {
      this.laboralFormSet.get('IdAsocEmpresa')?.setValue(elementlab.idAsocEmpresa);
      if (elementlab.NombreDrop !== null) {
          if (elementlab.NombreDrop.Codigo !== undefined) {
            this.laboralFormSet.get('IdEmpresa')?.setValue(elementlab.NombreDrop.Codigo);
            this.laboralFormSet.get('IdNatural')?.setValue('0');
          } else {
            this.laboralFormSet.get('IdEmpresa')?.setValue(elementlab.NombreDrop.IdTercero);
            this.laboralFormSet.get('IdNatural')?.setValue('1');
          }
        } else {
          this.laboralFormSet.get('IdEmpresa')?.setValue('0');
        }
      if (elementlab.convenio !== null && elementlab.convenio !== '') {
        this.laboralFormSet.get('IdConvenio')?.setValue(elementlab.convenio.intConvenio);
      } else {
        this.laboralFormSet.get('IdConvenio')?.setValue(elementlab.convenio);
      }
      const tercerEdit = localStorage.getItem('TerceroNatura');
      this.laboralFormSet.get('IdTercero')?.setValue(tercerEdit);
      this.laboralFormSet.get('IdCargo')?.setValue(elementlab.cargo.Clase);
      if (elementlab.tipoContrato !== null && elementlab.tipoContrato !== undefined && elementlab.tipoContrato !== '') {
        this.laboralFormSet.get('IdTipoContratoLaboral')?.setValue(elementlab.tipoContrato.Clase);
      } else {
        this.laboralFormSet.get('IdTipoContratoLaboral')?.setValue(null);
      }
      this.laboralFormSet.get('FechaLabora')?.setValue(elementlab.fechaIngreso);
      this.laboralFormSet.get('IdPeriodoPago')?.setValue(elementlab.periodoPago.Clase);
      this.laboralFormSet.get('NumPersonasCargo')?.setValue(elementlab.NumPersonasCargo);
      this.allItemsFormLaboralEdit.push(this.laboralFormSet.value);
    });
    this.laboralFormEdit.reset();
  }

  GetConvenios() {
    const codigo = this.laboralForm.get('NombreDrop')?.value.Codigo;
    if (codigo !== null && codigo !== undefined) {
      this.clientesGetListService.GetConvenios(codigo).subscribe(
        result => {
          this.dataConvenio = result;
          if (this.dataConvenio.length !== 0) {
            this.disablePagoConvenio = false;
            this.disablePagoConvenioInput = false;
          } else {
            this.disablePagoConvenio = true;
            this.disablePagoConvenioInput = true;
            this.laboralForm.get('convenio')?.setValue(null);
          }
        },
        error => {
          const errorMessage = <any>error;
          console.error(errorMessage);
        }
      );
    }
  }

  GetConveniosEdit() {
    const codigo = this.laboralFormEdit.get('NombreDrop')?.value.Codigo;
    if (codigo !== null && codigo !== undefined) {
      this.clientesGetListService.GetConvenios(codigo).subscribe(
        result => {
          this.dataConvenio = result;
          if (this.dataConvenio.length !== 0) {
            this.disablePagoConvenio = false;
            this.disablePagoConvenioInput = false;
          } else {
            this.dataConvenio = null;
            this.disablePagoConvenio = true;
            this.disablePagoConvenioInput = true;
            this.laboralFormEdit.get('convenio')?.setValue(null);
          }
        },
        error => {
          const errorMessage = <any>error;
          console.error(errorMessage);
        }
      );
    }
  }

  GetConveniosAll() {
    this.clientesGetListService.GetConvenios(0).subscribe(
      result => {
        this.dataConvenio = result;
      },
      error => {
        const errorMessage = <any>error;
        console.error(errorMessage);
      }
    );
  }

  MapperLaboral(i : any, data : any) {
    let dataEmpresa;
    this.indexLaboral = i;

    if (data.NombreDrop !== null) {
      this.laboralForm.get('idAsocEmpresa')?.setValue(data.idAsocEmpresa);

      this.laboralForm.get('NombreDrop')?.setValue(data.NombreDrop);

      if (data.NombreDrop.Nombre !== undefined && data.NombreDrop.Nombre !== null) {
        this.laboralForm.get('NombreDropMostrar')?.setValue(data.NombreDrop.Nombre);
      } else {
        this.laboralForm.get('NombreDropMostrar')?.setValue(data.NombreDrop.PrimerNombre + ''
          + data.NombreDrop.SegundoNombre + '' + data.NombreDrop.PrimerApellido + '' + data.NombreDrop.SegundoApellido);
      }

      if (data.porConsulta) {
        this.nitCambiante = 'Documento';
        this.porConsultaglobal = true;
        this.disablePagoConvenioInput = true;
        this.formLockedPersonNatura = true;
      } else {
        this.nitCambiante = 'Nit';
        this.porConsultaglobal = false;
        this.formLockedPersonNatura = true;
      }
      this.laboralForm.get('porConsulta')?.setValue(data.porConsulta);

      this.laboralFormSet.get('IdEmpresa')?.setValue(data.NombreDrop);

     if (this.basicosFrom.value.tipoEmpleo === '4' || this.basicosFrom.value.tipoEmpleo === 4 ||
        this.basicosFrom.value.tipoEmpleo === '6' || this.basicosFrom.value.tipoEmpleo === 6 ||
        this.basicosFrom.value.tipoEmpleo === '10' || this.basicosFrom.value.tipoEmpleo === 10 ||
        this.basicosFrom.value.tipoEmpleo === '11' || this.basicosFrom.value.tipoEmpleo === 11) {
          if (data.NombreDrop.Codigo !== undefined && data.NombreDrop.Codigo !== null) {
          this.clientesGetListService.GetConvenios(data.NombreDrop.Codigo).subscribe(
            result => {
              this.dataConvenio = result;
              dataEmpresa = result;
              if (dataEmpresa.length > 0) {
                this.disablePagoConvenio = false;
                this.disablePagoConvenioInput = false;
                this.laboralForm.get('cargo')?.setValue(data.cargo.Descripcion);
                this.laboralFormSet.get('IdCargo')?.setValue(data.cargo);

                if (data.convenio !== null) {
                  this.laboralForm.get('pagaConConvenio')?.setValue(false);
                  this.laboralForm.get('convenio')?.setValue(this.dataConvenio[0]);
                  this.laboralForm.get('periodoPago')?.setValue(data.periodoPago.Clase);
                } else {
                  this.laboralForm.get('pagaConConvenio')?.setValue(false);
                  this.laboralForm.get('convenio')?.setValue(data.convenio);
                  this.laboralForm.get('periodoPago')?.setValue(data.periodoPago.Clase);
                }
                this.laboralForm.get('tipoContrato')?.setValue(data.tipoContrato);
                this.laboralForm.get('NumPersonasCargo')?.setValue(data.NumPersonasCargo);
                this.laboralForm.get('fechaIngreso')?.setValue(formatDate(data.fechaIngreso, 'yyyy-MM-dd', 'en'));
              } else {
                this.disablePagoConvenio = true;
                this.disablePagoConvenioInput = true;
                this.laboralForm.get('cargo')?.setValue(data.cargo.Descripcion);
                this.laboralFormSet.get('IdCargo')?.setValue(data.cargo);

                if (data.convenio !== null) {
                  this.laboralForm.get('pagaConConvenio')?.setValue(false);
                  this.laboralForm.get('convenio')?.setValue(data.convenio);
                  this.laboralForm.get('periodoPago')?.setValue(data.periodoPago.Clase);
                } else {
                  this.laboralForm.get('pagaConConvenio')?.setValue(false);
                  this.laboralForm.get('convenio')?.setValue(data.convenio);
                  this.laboralForm.get('periodoPago')?.setValue(data.periodoPago.Clase);
                }
                this.laboralForm.get('tipoContrato')?.setValue(data.tipoContrato);
                this.laboralForm.get('NumPersonasCargo')?.setValue(data.NumPersonasCargo);
                this.laboralForm.get('fechaIngreso')?.setValue(formatDate(data.fechaIngreso, 'yyyy-MM-dd', 'en'));
              }
            }, error => {
              console.error('MapperLaboral - Error al cargar los convenios por empresa');
            });

          } else {
            this.disablePagoConvenio = true;
            this.disablePagoConvenioInput = true;
            this.laboralForm.get('cargo')?.setValue(data.cargo.Descripcion);
            this.laboralFormSet.get('IdCargo')?.setValue(data.cargo);

            if (data.convenio !== null) {
              this.laboralForm.get('pagaConConvenio')?.setValue(false);
              this.laboralForm.get('convenio')?.setValue(data.convenio);
              this.laboralForm.get('periodoPago')?.setValue(data.periodoPago.Clase);
            } else {
              this.laboralForm.get('pagaConConvenio')?.setValue(false);
              this.laboralForm.get('convenio')?.setValue(data.convenio);
              this.laboralForm.get('periodoPago')?.setValue(data.periodoPago.Clase);
            }
            this.laboralForm.get('tipoContrato')?.setValue(data.tipoContrato);
            this.laboralForm.get('NumPersonasCargo')?.setValue(data.NumPersonasCargo);
            this.laboralForm.get('fechaIngreso')?.setValue(formatDate(data.fechaIngreso, 'yyyy-MM-dd', 'en'));
          }
    } else {
        this.disablePagoConvenio = true;
        this.disablePagoConvenioInput = true;
        this.laboralForm.get('cargo')?.setValue(data.cargo.Descripcion);
        this.laboralFormSet.get('IdCargo')?.setValue(data.cargo);

        if (data.convenio !== null) {
          this.laboralForm.get('pagaConConvenio')?.setValue(false);
          this.laboralForm.get('convenio')?.setValue(data.convenio);
          this.laboralForm.get('periodoPago')?.setValue(null);
        } else {
          this.laboralForm.get('pagaConConvenio')?.setValue(false);
          this.laboralForm.get('convenio')?.setValue(data.convenio);
          this.laboralForm.get('periodoPago')?.setValue(null);
        }
        this.laboralForm.get('tipoContrato')?.setValue(null);
        this.laboralForm.get('NumPersonasCargo')?.setValue(data.NumPersonasCargo);
        this.laboralForm.get('fechaIngreso')?.setValue(formatDate(data.fechaIngreso, 'yyyy-MM-dd', 'en'));
    }

    } else {
      this.laboralForm.get('idAsocEmpresa')?.setValue(data.idAsocEmpresa);
      if (data.cargo !== null) {
        this.laboralForm.get('cargo')?.setValue(data.cargo.Descripcion);
        this.laboralFormSet.get('IdCargo')?.setValue(data.cargo);
      } else {
        this.laboralForm.get('cargo')?.setValue('');
      }
      this.laboralForm.get('NumPersonasCargo')?.setValue(data.NumPersonasCargo);
      this.laboralForm.get('fechaIngreso')?.setValue(formatDate(data.fechaIngreso, 'yyyy-MM-dd', 'en'));
      this.laboralForm.get('EmpresaString')?.setValue(data.EmpresaString);
      this.laboralForm.get('NombreArrendador')?.setValue(data.NombreArrendador);
      this.laboralForm.get('TelefonoArrendador')?.setValue(data.TelefonoArrendador);
      this.laboralForm.get('IdTipoLocal')?.setValue(data.IdTipoLocal);
      this.laboralForm.get('tipoContrato')?.setValue(data.tipoContrato);
      if (data.convenio !== null) {
        this.laboralForm.get('pagaConConvenio')?.setValue(false);
        this.laboralForm.get('convenio')?.setValue(data.convenio);
        this.laboralForm.get('periodoPago')?.setValue(data.periodoPago.Clase);
      } 
    }

  }

  pagaConConvenio() {
    const pagaCon = this.laboralForm.get('pagaConConvenio')?.value;
    if (this.laboralForm.get('pagaConConvenio')?.value === false) {
      this.disablePagoConvenioInput = true;
      this.laboralForm.get('convenio')?.reset();
    } else {
      this.disablePagoConvenioInput = false;
    }
  }

  pagaConConvenioEdit() {
    const pagaCon = this.laboralFormEdit.get('pagaConConvenio')?.value;
    if (this.laboralFormEdit.get('pagaConConvenio')?.value === false ||
      this.laboralFormEdit.get('pagaConConvenio')?.value === null ||
      this.laboralFormEdit.get('pagaConConvenio')?.value === '') {
      this.disablePagoConvenioInput = true;
      this.laboralFormEdit.get('convenio')?.reset();
    } else {
      this.disablePagoConvenioInput = false;
    }
  }

  cambiarPlaceHolder() {
    const porqueConsulta = this.laboralForm.get('porConsulta')?.value;
    if (!porqueConsulta) {
      this.nitCambiante = 'Documento';
      this.porConsultaglobal = true;
      this.disablePagoConvenioInput = true;
    } else {
      this.nitCambiante = 'Nit';
      this.porConsultaglobal = false;
    }
  }

  cambiarPlaceHolderModal() {
    const porqueConsulta = this.laboralFormEdit.get('porConsulta')?.value;
    if (!porqueConsulta) {
      this.nitCambianteModal = 'Documento';
      this.porConsultaglobalModal = true;
      this.disablePagoConvenioInput = true;
      this.porqueConsultaGoblal = true;
    } else {
      this.nitCambianteModal = 'Nit';
      this.porConsultaglobal = false;
      this.porqueConsultaGoblal = false;
    }
  }

  SetInfoNaturalLaboral(dataNatural : any) {
    this.laboralForm.get('NombreDrop')?.setValue(dataNatural);
    this.laboralForm.get('NombreDropMostrar')?.setValue(dataNatural.PrimerNombre + ' ' + dataNatural.SegundoNombre + ' ' +
                                                      dataNatural.PrimerApellido + ' ' + dataNatural.SegundoApellido);
    this.laboralForm.get('Nit')?.reset();
    this.laboralForm.get('Nombre')?.reset();
  }

  SetInfoNaturalLaboralEdit(dataNatural : any) {
    this.laboralFormEdit.get('NombreDrop')?.setValue(dataNatural);
    this.laboralFormEdit.get('NombreDropMostrar')?.setValue(dataNatural.PrimerNombre + ' ' + dataNatural.SegundoNombre + ' ' +
                                                      dataNatural.PrimerApellido + ' ' + dataNatural.SegundoApellido);
    this.laboralForm.get('Nit')?.reset();
    this.laboralForm.get('Nombre')?.reset();
  }
  //#endregion

  //#region Metodos de REFERENCIA

  validateErrorCelular() {
    if (this.referenciaForm.get('celular')?.value !== null) {
      this.MostrarErrorCelular = false;
    }
  }

  validateErrorContacto() {
    if (this.referenciaForm.get('TelefonoContacto')?.value !== null) {
      this.MostrarErrorContacto = false;
    }
  }

  ConsultarEmpresaComerciofinanciera() {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    objClients.Nombre = this.referenciaForm.get('Nombre')?.value;
    objClients.Nit = this.referenciaForm.get('Nit')?.value;
    if (objClients.Nombre !== '' && objClients.Nombre !== null) {
      this.GetEmpresasReferencia();
      this.referenciaForm.get('Nit')?.reset();
    } else if (objClients.Nit !== '' && objClients.Nit !== null) {
      this.GetEmpresaPorNitReferencia();
      this.referenciaForm.get('Nombre')?.reset();
    } else {
      this.referenciaForm.get('Nit')?.reset();
      this.referenciaForm.get('Nombre')?.reset();
    }
  }

  GetEmpresaPorNitReferencia() {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    objClients.Nit = this.referenciaForm.get('Nit')?.value;
    if (objClients.Nit !== '') {
      this.referenciaForm.get('EmpresaComercial')?.setValue('');
      this.referenciaForm.get('Nombre')?.setValue('');
      this.clientesGetListService.GetEmpresas(objClients).subscribe(
        result => {
          this.dataEmpresas = result;
          this.AbrirEmpresaComerFinanciera.nativeElement.click();
        },
        error => {
          const errorMessage = <any>error;
          this.notif.onDanger('Error', errorMessage);
          console.error(errorMessage);
        }
      );
    }
  }

  GetEmpresasReferencia() {
    this.dataEmpresas = null;
    const objClients = new ClientesModel();
    objClients.Nombre = this.referenciaForm.get('Nombre')?.value;
    if (objClients.Nombre.length >= 3) {
      this.referenciaForm.get('EmpresaComercial')?.setValue('');
      this.referenciaForm.get('Nit')?.setValue('');
      this.clientesGetListService.GetEmpresas(objClients).subscribe(
        result => {
          this.dataEmpresas = result;
          this.AbrirEmpresaComerFinanciera.nativeElement.click();
        },
        error => {
          const errorMessage = <any>error;
          this.notif.onDanger('Error', errorMessage);
          console.error(errorMessage);
        }
      );
    }
  }

  resetSearchComercioFinanciera() {
    this.referenciaForm.get('Nit')?.reset();
    this.referenciaForm.get('Nombre')?.reset();
  }

  SetDataEmpresaComercioFinanciera(data : any) {

    const ref = this.referenciaForm.get('idTipoReferencia')?.value;
    if (ref.Id === 1) {
      this.referenciaForm.get('EmpresaComercialMostrar')?.setValue(data.Nombre);
      this.referenciaForm.get('EmpresaComercial')?.setValue(data);
    } else if (ref.Id === 3) {
      this.referenciaForm.get('EmpresaFinancieraMostrar')?.setValue(data.Nombre);
      this.referenciaForm.get('EmpresaFinanciera')?.setValue(data);
    } else {
      this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de referencia válido.');
    }
    this.referenciaForm.get('Nit')?.reset();
    this.referenciaForm.get('Nombre')?.reset();

  }

  MapperPersonfami(i : any, data : any) {
        this.removerValidatorComercial();
        this.removerValidatorFinanciera();
        this.addValidatosFamiliarPersonal();
        this.BlockReferencia = true;
        this.indexReferencia = i;
        this.refFamiliar = true;
        this.refComercial = false;
        this.refFinanciera = false;
        this.dataReferencias.forEach((elementRefe : any) => {
          if (elementRefe.Id === data.idTipoReferencia) {
            if (data.idTipoReferencia === 2) {
              this.MostrarParenFami = true;
              this.MostrarParenPers = false;
            } else if (data.idTipoReferencia === 4) {
               this.MostrarParenFami = false;
              this.MostrarParenPers = true;
            }
            this.referenciaForm.get('idTipoReferencia')?.setValue(elementRefe);
          }
        });
        this.referenciaForm.get('idReferencia')?.setValue(data.idReferencia);
        this.referenciaForm.get('IdParentesco')?.setValue(data.IdParentesco);
        this.referenciaForm.get('PrimerApellido')?.setValue(data.PrimerApellido);
        this.referenciaForm.get('SegundoApellido')?.setValue(data.SegundoApellido);
        this.referenciaForm.get('PrimerNombre')?.setValue(data.PrimerNombre);
        this.referenciaForm.get('SegundoNombre')?.setValue(data.SegundoNombre);
        if(data.Pais !== null && data.Ciudad !== null) {
          this.AgregarValidacionesDireccionRefe();
        } else if (data.Pais !== null && data.Ciudad == null) {
          this.EliminarValidacionesDireccionRefe();
        }
        if (data.Pais !== null) {
          this.referenciaForm.get('Pais')?.setValue(data.Pais.IdPais);
          this.PaisMapperRefe = data.Pais;
        }
        if (data.Departamento !== null) {
          this.referenciaForm.get('Departamento')?.setValue(data.Departamento.IdDepartamento);
          this.DepartMapper = data.Departamento;
          this.DepartMapperRefe = null;
          this.bloqDepartaRef = null;
          this.recursosGeneralesService.GetCiudadList(data.Departamento.IdDepartamento).subscribe(
            result => {
              this.bloqCiudad = null;
              this.dataCiudad = result;
            },
            error => {
              const errorMessage = <any>error;
              this.notif.onDanger('Error', errorMessage);
              console.error(errorMessage);
            }
          );  
        } else {
          this.bloqDepartaRef = true;
        }
        this.bloqCiudad = null;
        if(data.Ciudad !== null) {
          this.referenciaForm.get('Ciudad')?.setValue(data.Ciudad.IdCiudad);
          this.CiudadMapperRefe = data.Ciudad;
          this.bloqCiudadRef = null;
        } else {
          this.bloqCiudad = true;
          this.bloqCiudadRef = true;
        }
        

        this.referenciaForm.get('email')?.setValue(data.email);
        this.referenciaForm.get('TelefonoContactos')?.setValue(data.TelefonoContactos);
        this.referenciaForm.get('TelefonoEmpresaPersonal')?.setValue(data.TelefonoEmpresaPersonal);
        this.referenciaForm.get('extEmpresarial')?.setValue(data.extEmpresarial);
        this.referenciaForm.get('celular')?.setValue(data.celular);
        this.VolverArriba();


  }

  MapperComercial(i : any, data : any) {
    this.addVaidatorsComercial();
    this.removerValidatorFinanciera();
    this.removerValidatorFamiliarPersonal();
    this.VolverArriba();
    this.BlockReferencia = true;
    this.indexReferencia = i;
    this.refComercial = true;
    this.refFamiliar = false;
    this.refFinanciera = false;
    this.referenciaForm.get('idReferencia')?.setValue(data.idReferencia);
    this.dataReferencias.forEach((elementRefe : any) => {
      if (elementRefe.Id === data.idTipoReferencia) {
        this.referenciaForm.get('idTipoReferencia')?.setValue(elementRefe);
      }
    });
    this.referenciaForm.get('DescripcionEmpresa')?.setValue(data.DescripcionEmpresa);
    this.referenciaForm.get('TelefonoEmpresas')?.setValue(data.TelefonoEmpresas);
    if (data.Pais !== null && data.Ciudad !== null) {
      this.AgregarValidacionesDireccionRefe();
    } else if (data.Pais !== null && data.Ciudad == null) {
      this.EliminarValidacionesDireccionRefe();
    }
    if (data.Pais !== null) {
      this.referenciaForm.get('Pais')?.setValue(data.Pais.IdPais);
      this.PaisMapperRefe = data.Pais;
    }
    if (data.Departamento !== null) {
      this.referenciaForm.get('Departamento')?.setValue(data.Departamento.IdDepartamento);
      this.DepartMapper = data.Departamento;
      this.DepartMapperRefe = null;
      this.bloqDepartaRef = null;
    } else {
       this.bloqDepartaRef = true;
    }
    if(data.Ciudad !== null) {
      this.referenciaForm.get('Ciudad')?.setValue(data.Ciudad.IdCiudad);
      this.CiudadMapperRefe = data.Ciudad;
      this.bloqCiudadRef = null;
    } else {
      this.bloqCiudad = true;
      this.bloqCiudadRef = true;
    }
    this.referenciaForm.get('ServicioProductoComercial')?.setValue(data.ServicioProductoComercial);
    this.VolverArriba();
  }

  MapperFinanciero(i : any, data : any) {
    this.removerValidatorComercial();
    this.addValidatorsFinanciera();
    this.removerValidatorFamiliarPersonal();
    this.VolverArriba();
    this.BlockReferencia = true;
    this.indexReferencia = i;
    this.refFinanciera = true;
    this.refComercial = false;
    this.refFamiliar = false;
    this.referenciaForm.get('idReferencia')?.setValue(data.idReferencia);
    this.dataReferencias.forEach((elementRefe : any) => {
      if (elementRefe.Id === data.idTipoReferencia) {
        this.referenciaForm.get('idTipoReferencia')?.setValue(elementRefe);
      }
    });

    this.referenciaForm.get('DescripcionEmpresaR')?.setValue(data.DescripcionEmpresaR);
    this.referenciaForm.get('TelefonoFinanciera')?.setValue(data.TelefonoFinanciera);
    if(data.Pais !== null && data.Ciudad !== null) {
      this.AgregarValidacionesDireccionRefe();
    } else if (data.Pais !== null && data.Ciudad == null) {
      this.EliminarValidacionesDireccionRefe();
    }
    if (data.Pais !== null) {
      this.referenciaForm.get('Pais')?.setValue(data.Pais.IdPais);
      this.PaisMapperRefe = data.Pais;
    }
    if (data.Departamento !== null) {
      this.referenciaForm.get('Departamento')?.setValue(data.Departamento.IdDepartamento);
      this.DepartMapper = data.Departamento;
      this.DepartMapperRefe = null;
      this.bloqDepartaRef =  null;
    } else {
      this.bloqDepartaRef = true;
    }
    if(data.Ciudad !== null) {
      this.referenciaForm.get('Ciudad')?.setValue(data.Ciudad.IdCiudad);
      this.CiudadMapperRefe = data.Ciudad;
      this.bloqCiudadRef = null;
    } else {
      this.bloqCiudad = true;
      this.bloqCiudadRef = true;
    }
    this.referenciaForm.get('ServicioProductoFinanciera')?.setValue(data.ServicioProductoFinanciera);
    this.referenciaForm.get('NumeroProductoFinanciera')?.setValue(data.NumeroProductoFinanciera);
    this.VolverArriba();
  }

  addItemsReferencias() {
    let ciudadReigistrada : any[] = [];
    const operacion = this.basicosFrom.get('operacion')?.value;

    if (operacion === '5') {
      this.BlockReferencia = null;
      if (this.referenciaForm.value.idTipoReferencia !== null && this.referenciaForm.value.idTipoReferencia !== '') {

        if (this.referenciaForm.value.idTipoReferencia.Id === 1) {// Comercial
          if (this.referenciaForm.value.DescripcionEmpresa !== '' && this.referenciaForm.value.DescripcionEmpresa !== null) {
            if (this.referenciaForm.value.Ciudad !== null &&
              this.referenciaForm.value.Ciudad !== undefined
              && this.referenciaForm.value.Ciudad !== '' &&
              this.referenciaForm.value.idTipoReferencia.Id === 1) {
              
              if (this.referenciaForm.value.TelefonoEmpresas !== null &&
                this.referenciaForm.value.TelefonoEmpresas !== undefined && this.referenciaForm.value.TelefonoEmpresas !== '') {
                this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.value.idTipoReferencia.Descripcion);
                this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.value.idTipoReferencia.Id);

                if (this.indexReferencia !== null) {
                  this.dataCiudadesAll.forEach((elementCiu : any) => {
                    if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                      this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                      this.dataDepartamentosAll.forEach((elementDep : any) => {
                        if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                          this.referenciaForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any) => {
                            if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                              this.referenciaForm.get('Pais')?.setValue(elementPais);
                            }
                          });
                        }
                      });
                    }
                  });
                }
                if (this.indexReferencia !== null) {
                   this.dataCiudadesAll.forEach((elementCiu : any) => {
                    if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                      this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                      this.dataDepartamentosAll.forEach((elementDep : any) => {
                        if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                          this.referenciaForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any) => {
                            if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                              this.referenciaForm.get('Pais')?.setValue(elementPais);
                               this.itemsFinancieraComercial.splice(this.indexReferencia, 1);
                              this.indexReferencia = null;
                            }
                          });
                        }
                      });
                    }
                  });
                 
                }
                if (this.itemsFinancieraComercial.length < 4) {
                  this.dataCiudadesAll.forEach((elementCiu : any) => {
                    if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                      this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                      this.dataDepartamentosAll.forEach((elementDep : any) => {
                        if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                          this.referenciaForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any) => {
                            if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                              this.referenciaForm.get('Pais')?.setValue(elementPais);
                              this.referenciaForm.value.DescripcionEmpresa = this.referenciaForm.value.DescripcionEmpresa.substr(0, 1).toUpperCase() +
                                this.referenciaForm.value.DescripcionEmpresa.substr(1).toLowerCase();
                              this.itemsFinancieraComercial.push(this.referenciaForm.value);
                              this.referenciaForm.reset();

                            }
                          });
                        }
                      });
                    }
                  });
                 
                } else {
                  this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias comerciales',
                    );
                }
                this.BlockReferencia = null;
                this.referenciaForm.reset();
              } else {
                this.notif.onWarning('Advertencia', 'El campo teléfono es obligatorio.');
              }
            } else if (this.referenciaForm.value.Ciudad === null &&
              this.referenciaForm.value.Pais !== null &&
              this.referenciaForm.value.idTipoReferencia.Id === 1) {
              
              if (this.referenciaForm.value.TelefonoEmpresas !== null &&
                this.referenciaForm.value.TelefonoEmpresas !== undefined && this.referenciaForm.value.TelefonoEmpresas !== '') {
                this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.value.idTipoReferencia.Descripcion);
                this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.value.idTipoReferencia.Id);

                if (this.indexReferencia !== null) {
                    this.dataPaisesAll.forEach((elementPais : any) => {
                      if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                        this.referenciaForm.get('Pais')?.setValue(elementPais);
                      }
                    });
                }
                if (this.indexReferencia !== null) {
                    this.dataPaisesAll.forEach((elementPais : any) => {
                      if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                        this.referenciaForm.get('Pais')?.setValue(elementPais);
                          this.itemsFinancieraComercial.splice(this.indexReferencia, 1);
                        this.indexReferencia = null;
                      }
                    });
                }
                if (this.itemsFinancieraComercial.length < 4) {
                    this.dataPaisesAll.forEach((elementPais : any)=> {
                      if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                        this.referenciaForm.get('Pais')?.setValue(elementPais);
                        this.referenciaForm.value.DescripcionEmpresa = this.referenciaForm.value.DescripcionEmpresa.substr(0, 1).toUpperCase() +
                          this.referenciaForm.value.DescripcionEmpresa.substr(1).toLowerCase();
                        this.itemsFinancieraComercial.push(this.referenciaForm.value);
                        this.referenciaForm.reset();
                      }
                    });

                } else {
                  this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias comerciales',
                    );
                }
                this.BlockReferencia = null;
                this.referenciaForm.reset();
              } else {
                this.notif.onWarning('Advertencia', 'El campo teléfono es obligatorio.');
              }
            } else {
              this.notif.onWarning('Advertencia', 'Debe seleccionar una ciudad válida.');
            }
          } else {
            this.notif.onWarning('Advertencia', 'Debe llenar los campos obligatorios');
          }

        } else if (this.referenciaForm.value.idTipoReferencia.Id === 3) {// Financiera
          if (this.referenciaForm.value.DescripcionEmpresaR !== '' && this.referenciaForm.value.DescripcionEmpresaR !== null) {
            if (this.referenciaForm.value.Ciudad !== null &&
              this.referenciaForm.value.Ciudad !== undefined &&
              this.referenciaForm.value.Ciudad !== '' &&
              this.referenciaForm.value.idTipoReferencia.Id === 3) {
              
            //   if (this.referenciaForm.value.Ciudad.IdCiudad !== undefined && this.referenciaForm.value.Ciudad.IdCiudad != null) {
                if (this.referenciaForm.value.TelefonoFinanciera !== null &&
                  this.referenciaForm.value.TelefonoFinanciera !== undefined && this.referenciaForm.value.TelefonoFinanciera !== '') {
                  this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.value.idTipoReferencia.Descripcion);
                  this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.value.idTipoReferencia.Id);

                  if (this.indexReferencia !== null) {
                      this.dataCiudadesAll.forEach((elementCiu : any) => {
                        if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                          this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                          this.dataDepartamentosAll.forEach((elementDep : any) => {
                            if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                              this.referenciaForm.get('Departamento')?.setValue(elementDep);
                              this.dataPaisesAll.forEach((elementPais : any) => {
                                if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                                  this.referenciaForm.get('Pais')?.setValue(elementPais);
                                }
                              });
                            }
                          });
                        }
                      });
                  }
                  if (this.indexReferencia !== null) {
                     this.dataCiudadesAll.forEach((elementCiu : any )=> {
                    if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                      this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                      this.dataDepartamentosAll.forEach((elementDep : any)=> {
                        if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                          this.referenciaForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any) => {
                            if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                              this.referenciaForm.get('Pais')?.setValue(elementPais);
                               this.itemsFinancieraComercial.splice(this.indexReferencia, 1);
                              this.indexReferencia = null;
                            }
                          });
                        }
                      });
                    }
                  });
                   
                  }
                  if (this.itemsFinancieraComercial.length < 4) {
                    this.dataCiudadesAll.forEach((elementCiu : any) => {
                    if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                      this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                      this.dataDepartamentosAll.forEach((elementDep : any) => {
                        if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                          this.referenciaForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any) => {
                            if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                              this.referenciaForm.get('Pais')?.setValue(elementPais);
                               this.referenciaForm.value.DescripcionEmpresaR =  this.referenciaForm.value.DescripcionEmpresaR.substr(0, 1).toUpperCase() +
                              this.referenciaForm.value.DescripcionEmpresaR.substr(1).toLowerCase();
                              this.itemsFinancieraComercial.push(this.referenciaForm.value);
                              this.referenciaForm.reset();
                            }
                          });
                        }
                      });
                    }
                  });
                    
                  } else {
                    this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias financieras',
                      );
                  }
                  this.BlockReferencia = null;
                  this.referenciaForm.reset();
                } else {
                  this.notif.onWarning('Advertencia', 'El teléfono es obligatorio.');
                }
            } else if (this.referenciaForm.value.Ciudad === null &&
              this.referenciaForm.value.Pais !== null &&
              this.referenciaForm.value.idTipoReferencia.Id === 3) {
              if (this.referenciaForm.value.TelefonoFinanciera !== null &&
                this.referenciaForm.value.TelefonoFinanciera !== undefined && this.referenciaForm.value.TelefonoFinanciera !== '') {
                this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.value.idTipoReferencia.Descripcion);
                this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.value.idTipoReferencia.Id);

                if (this.indexReferencia !== null) {
                    this.dataPaisesAll.forEach((elementPais : any )=> {
                      if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                        this.referenciaForm.get('Pais')?.setValue(elementPais);
                      }
                    });
                }
                if (this.indexReferencia !== null) {
                  this.dataPaisesAll.forEach((elementPais : any) => {
                    if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                      this.referenciaForm.get('Pais')?.setValue(elementPais);
                      this.itemsFinancieraComercial.splice(this.indexReferencia, 1);
                      this.indexReferencia = null;
                    }
                  });
                }
                if (this.itemsFinancieraComercial.length < 4) {
                    this.dataPaisesAll.forEach((elementPais : any)=> {
                      if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                        this.referenciaForm.get('Pais')?.setValue(elementPais);
                        this.referenciaForm.value.DescripcionEmpresaR = this.referenciaForm.value.DescripcionEmpresaR.substr(0, 1).toUpperCase() +
                          this.referenciaForm.value.DescripcionEmpresaR.substr(1).toLowerCase();
                        this.itemsFinancieraComercial.push(this.referenciaForm.value);
                        this.referenciaForm.reset();
                      }
                    });
                } else {
                  this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias financieras',
                    );
                }
                this.BlockReferencia = null;
                this.referenciaForm.reset();
              } else {
                this.notif.onWarning('Advertencia', 'El teléfono es obligatorio.');
              }
            } else {
              this.notif.onWarning('Advertencia', 'Debe seleccionar una ubicación válida.');
            }
          } else {
            this.notif.onWarning('Advertencia', 'Debe llenar los campos obligatorios.');
          }


        } else { // Familia-personal
          // Valida que venga alguno de los dos numeros
          if (this.referenciaForm.value.IdParentesco === null || this.referenciaForm.value.IdParentesco === undefined) {
            this.notif.onWarning('Advertencia',
              'Debe llenar los campos obligatorios.',
              );
          } else {
            if ((this.referenciaForm.get('celular')?.value === null || this.referenciaForm.get('celular')?.value === ''
              || this.referenciaForm.get('celular')?.value === undefined)
              && (this.referenciaForm.get('TelefonoContactos')?.value === null || this.referenciaForm.get('TelefonoContactos')?.value === ''
                || this.referenciaForm.get('TelefonoContactos')?.value === undefined)) {
              this.notif.onWarning('Advertencia',
                'Debe ingresar un número de celular o de teléfono.',
                );
            } else {
              // Valida que venga una ciudad valida y un index al editar creando
              if (this.referenciaForm.get('Ciudad')?.value !== null && this.indexReferencia !== null) {
                // this.referenciaForm.get('IdCiudadR')?.setValue(this.referenciaForm.get('ciudad')?.value);

                if (this.indexReferencia !== null) {
                if (this.referenciaForm.value.Ciudad !== null) {
                  this.dataCiudadesAll.forEach((elementCiu : any ) => {
                    if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                      this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                      this.dataDepartamentosAll.forEach((elementDep : any ) => {
                        if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                          this.referenciaForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any ) => {
                            if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                              this.referenciaForm.get('Pais')?.setValue(elementPais);
                              this.itemsFamiliaPersonal.splice(this.indexReferencia, 1);
                              this.indexReferencia = null;
                            }
                          });
                        }
                      });
                    }
                  });
                } else if (this.referenciaForm.value.Ciudad === null && this.referenciaForm.value.Pais !== null){
                  this.dataPaisesAll.forEach((elementPais : any ) => {
                    if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                      this.referenciaForm.get('Pais')?.setValue(elementPais);
                      this.itemsFamiliaPersonal.splice(this.indexReferencia, 1);
                      this.indexReferencia = null;
                    }
                  });
                }
                  
                } else {
                  if (this.referenciaForm.value.Ciudad !== null) {
                  this.dataCiudadesAll.forEach((elementCiu : any ) => {
                    if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                      this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                      this.dataDepartamentosAll.forEach((elementDep : any ) => {
                        if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                          this.referenciaForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any ) => {
                            if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                              this.referenciaForm.get('Pais')?.setValue(elementPais);
                            }
                          });
                        }
                      });
                    }
                  });
                 } else if (this.referenciaForm.value.Ciudad === null && this.referenciaForm.value.Pais !== null){
                  this.dataPaisesAll.forEach((elementPais : any ) => {
                    if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                      this.referenciaForm.get('Pais')?.setValue(elementPais);
                      this.itemsFamiliaPersonal.splice(this.indexReferencia, 1);
                      this.indexReferencia = null;
                    }
                  });
                }

                }
                this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.get('idTipoReferencia')?.value.Descripcion);
                this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.get('idTipoReferencia')?.value.Id);
                if (this.itemsFamiliaPersonal.length < 4) {
                  this.referenciaForm.value.PrimerNombre =  this.referenciaForm.value.PrimerNombre.substr(0, 1).toUpperCase() +
                  this.referenciaForm.value.PrimerNombre.substr(1).toLowerCase();
                  if (this.referenciaForm.value.SegundoNombre !== null && this.referenciaForm.value.SegundoNombre !== undefined) {
                    this.referenciaForm.value.SegundoNombre = this.referenciaForm.value.SegundoNombre.substr(0, 1).toUpperCase() +
                      this.referenciaForm.value.SegundoNombre.substr(1).toLowerCase();
                  }
                  this.referenciaForm.value.PrimerApellido =  this.referenciaForm.value.PrimerApellido.substr(0, 1).toUpperCase() +
                  this.referenciaForm.value.PrimerApellido.substr(1).toLowerCase();
                  if(this.referenciaForm.value.SegundoApellido !== null && this.referenciaForm.value.SegundoApellido !== undefined){
                   this.referenciaForm.value.SegundoApellido =  this.referenciaForm.value.SegundoApellido.substr(0, 1).toUpperCase() +
                    this.referenciaForm.value.SegundoApellido.substr(1).toLowerCase();
                  }

                  this.itemsFamiliaPersonal.push(this.referenciaForm.value);
                  this.referenciaForm.reset();
                } else {
                  this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias familiares y dos personales.',
                    );
                }
                  this.referenciaForm.reset();
                ciudadReigistrada = [];

              } else if (this.referenciaForm.get('Ciudad')?.value !== null) {
                const valueCity = this.referenciaForm.value.Ciudad;
                if (valueCity !== undefined && valueCity !== null ) {
                    this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.get('idTipoReferencia')?.value.Descripcion);
                    this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.get('idTipoReferencia')?.value.Id);
                    if (this.indexReferencia !== null) {
                        this.dataCiudadesAll.forEach((elementCiu : any ) => {
                          if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                            this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                            this.dataDepartamentosAll.forEach((elementDep : any ) => {
                              if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                                this.referenciaForm.get('Departamento')?.setValue(elementDep);
                                this.dataPaisesAll.forEach((elementPais : any ) => {
                                  if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                                    this.referenciaForm.get('Pais')?.setValue(elementPais);
                                    this.itemsFamiliaPersonal.splice(this.indexReferencia, 1);
                                    this.indexReferencia = null;
                                    this.referenciaForm.value.PrimerNombre =  this.referenciaForm.value.PrimerNombre.substr(0, 1).toUpperCase() +
                                    this.referenciaForm.value.PrimerNombre.substr(1).toLowerCase();
                                    if(this.referenciaForm.value.SegundoNombre !== null && this.referenciaForm.value.SegundoNombre !== undefined){
                                    this.referenciaForm.value.SegundoNombre =  this.referenciaForm.value.SegundoNombre.substr(0, 1).toUpperCase() +
                                    this.referenciaForm.value.SegundoNombre.substr(1).toLowerCase();
                                    }
                                    this.referenciaForm.value.PrimerApellido =  this.referenciaForm.value.PrimerApellido.substr(0, 1).toUpperCase() +
                                    this.referenciaForm.value.PrimerApellido.substr(1).toLowerCase();
                                    if(this.referenciaForm.value.SegundoApellido !== null && this.referenciaForm.value.SegundoApellido !== undefined){
                                    this.referenciaForm.value.SegundoApellido =  this.referenciaForm.value.SegundoApellido.substr(0, 1).toUpperCase() +
                                      this.referenciaForm.value.SegundoApellido.substr(1).toLowerCase();
                                    }
                                    this.itemsFamiliaPersonal.push(this.referenciaForm.value);
                                    this.referenciaForm.reset();
                                  }
                                });
                              }
                            });
                          }
                        });
                    } else {
                      if (this.itemsFamiliaPersonal.length < 4) {
                        this.dataCiudadesAll.forEach((elementCiu : any ) => {
                          if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                            this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                            this.dataDepartamentosAll.forEach((elementDep : any ) => {
                              if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                                this.referenciaForm.get('Departamento')?.setValue(elementDep);
                                this.dataPaisesAll.forEach((elementPais : any ) => {
                                  if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                                    this.referenciaForm.get('Pais')?.setValue(elementPais);
                                    this.referenciaForm.value.PrimerNombre =  this.referenciaForm.value.PrimerNombre.substr(0, 1).toUpperCase() +
                                    this.referenciaForm.value.PrimerNombre.substr(1).toLowerCase();
                                    if(this.referenciaForm.value.SegundoNombre !== null && this.referenciaForm.value.SegundoNombre !== undefined){
                                    this.referenciaForm.value.SegundoNombre =  this.referenciaForm.value.SegundoNombre.substr(0, 1).toUpperCase() +
                                    this.referenciaForm.value.SegundoNombre.substr(1).toLowerCase();
                                    }
                                    this.referenciaForm.value.PrimerApellido =  this.referenciaForm.value.PrimerApellido.substr(0, 1).toUpperCase() +
                                    this.referenciaForm.value.PrimerApellido.substr(1).toLowerCase();
                                    if(this.referenciaForm.value.SegundoApellido !== null && this.referenciaForm.value.SegundoApellido !== undefined){
                                    this.referenciaForm.value.SegundoApellido =  this.referenciaForm.value.SegundoApellido.substr(0, 1).toUpperCase() +
                                      this.referenciaForm.value.SegundoApellido.substr(1).toLowerCase();
                                    }
                                    this.itemsFamiliaPersonal.push(this.referenciaForm.value);
                                    this.referenciaForm.reset();
                                  }
                                });
                              }
                            });
                          }
                        });
                      } else {
                        this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias familiares y dos personales.',
                          );
                      }
                    }
                  
                } else {
                  this.notif.onWarning('Advertencia', 'Debe seleccionar una ciudad válida.',
                    );
                }
              } else if (this.referenciaForm.get('Ciudad')?.value === null && this.referenciaForm.get('Pais')?.value !== null) {
                const valuePais = this.referenciaForm.value.Pais;
                if (valuePais !== undefined && valuePais !== null ) {
                    this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.get('idTipoReferencia')?.value.Descripcion);
                    this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.get('idTipoReferencia')?.value.Id);
                    if (this.indexReferencia !== null) {
                      this.dataPaisesAll.forEach((elementPais : any ) => {
                        if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                          this.referenciaForm.get('Pais')?.setValue(elementPais);
                          this.itemsFamiliaPersonal.splice(this.indexReferencia, 1);
                          this.indexReferencia = null;
                          this.referenciaForm.value.PrimerNombre =  this.referenciaForm.value.PrimerNombre.substr(0, 1).toUpperCase() +
                          this.referenciaForm.value.PrimerNombre.substr(1).toLowerCase();
                          if(this.referenciaForm.value.SegundoNombre !== null && this.referenciaForm.value.SegundoNombre !== undefined){
                          this.referenciaForm.value.SegundoNombre =  this.referenciaForm.value.SegundoNombre.substr(0, 1).toUpperCase() +
                          this.referenciaForm.value.SegundoNombre.substr(1).toLowerCase();
                          }
                          this.referenciaForm.value.PrimerApellido =  this.referenciaForm.value.PrimerApellido.substr(0, 1).toUpperCase() +
                          this.referenciaForm.value.PrimerApellido.substr(1).toLowerCase();
                          if(this.referenciaForm.value.SegundoApellido !== null && this.referenciaForm.value.SegundoApellido !== undefined){
                          this.referenciaForm.value.SegundoApellido =  this.referenciaForm.value.SegundoApellido.substr(0, 1).toUpperCase() +
                            this.referenciaForm.value.SegundoApellido.substr(1).toLowerCase();
                          }
                          this.itemsFamiliaPersonal.push(this.referenciaForm.value);
                          this.referenciaForm.reset();
                        }
                      });      
                    } else {
                      if (this.itemsFamiliaPersonal.length < 4) {
                        this.dataPaisesAll.forEach((elementPais : any ) => {
                          if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                            this.referenciaForm.get('Pais')?.setValue(elementPais);
                            this.referenciaForm.value.PrimerNombre =  this.referenciaForm.value.PrimerNombre.substr(0, 1).toUpperCase() +
                            this.referenciaForm.value.PrimerNombre.substr(1).toLowerCase();
                            if(this.referenciaForm.value.SegundoNombre !== null && this.referenciaForm.value.SegundoNombre !== undefined){
                            this.referenciaForm.value.SegundoNombre =  this.referenciaForm.value.SegundoNombre.substr(0, 1).toUpperCase() +
                            this.referenciaForm.value.SegundoNombre.substr(1).toLowerCase();
                            }
                            this.referenciaForm.value.PrimerApellido =  this.referenciaForm.value.PrimerApellido.substr(0, 1).toUpperCase() +
                            this.referenciaForm.value.PrimerApellido.substr(1).toLowerCase();
                            if(this.referenciaForm.value.SegundoApellido !== null && this.referenciaForm.value.SegundoApellido !== undefined){
                            this.referenciaForm.value.SegundoApellido =  this.referenciaForm.value.SegundoApellido.substr(0, 1).toUpperCase() +
                              this.referenciaForm.value.SegundoApellido.substr(1).toLowerCase();
                            }
                            this.itemsFamiliaPersonal.push(this.referenciaForm.value);
                            this.referenciaForm.reset();
                          }
                        });  
                      } else {
                        this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias familiares y dos personales.',
                          );
                      }
                    }
                  
                } else {
                  this.notif.onWarning('Advertencia', 'Debe seleccionar una pais válido.',
                    );
                }
              } else {
                this.notif.onWarning('Advertencia', 'Debe seleccionar una ciudad válida.',
                  );
              }
            }
          }
        }
      } else {
        this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de referencia válido.');
      }

    } else if (operacion === '1') {
      this.BlockReferencia = null;
      if (this.referenciaForm.value.idTipoReferencia !== null && this.referenciaForm.value.idTipoReferencia !== '') {

        if (this.referenciaForm.value.idTipoReferencia.Id === 1) { // Comercial

          if (this.referenciaForm.value.DescripcionEmpresa !== '' && this.referenciaForm.value.DescripcionEmpresa !== null) {

            if ((this.referenciaForm.value.Ciudad !== null && this.referenciaForm.value.Ciudad !== '' &&
                this.referenciaForm.value.Ciudad !== undefined) ||
              (this.referenciaForm.value.Pais !== null && this.referenciaForm.value.Pais !== undefined)
              && this.referenciaForm.value.idTipoReferencia.Id === 1) {

              this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.value.idTipoReferencia.Descripcion);
              this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.value.idTipoReferencia.Id);

              if (this.referenciaForm.value.TelefonoEmpresas !== null &&
                this.referenciaForm.value.TelefonoEmpresas !== undefined && this.referenciaForm.value.TelefonoEmpresas !== '') {

      
                  if (this.itemsFinancieraComercial.length <= 4) {
                    if (this.indexReferencia !== null) {
                      if (this.referenciaForm.value.Ciudad !== null && this.referenciaForm.value.Ciudad !== undefined) {
                        this.dataCiudadesAll.forEach((elementCiu : any ) => {
                          if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                            this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                            this.dataDepartamentosAll.forEach((elementDep : any ) => {
                              if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                                this.referenciaForm.get('Departamento')?.setValue(elementDep);
                                this.dataPaisesAll.forEach((elementPais : any ) => {
                                  if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                                    this.referenciaForm.get('Pais')?.setValue(elementPais);
                                    this.itemsFinancieraComercial.splice(this.indexReferencia, 1);
                                    this.itemsFinancieraComercial.push(this.referenciaForm.value);
                                    this.referenciaForm.reset();
                                    this.indexReferencia = null;
                                  }
                                });
                              }
                            });
                          }
                        });
                      } else {
                        this.dataPaisesAll.forEach((elementPais : any ) => {
                          if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                            this.referenciaForm.get('Pais')?.setValue(elementPais);
                            this.itemsFinancieraComercial.splice(this.indexReferencia, 1);
                            this.itemsFinancieraComercial.push(this.referenciaForm.value);
                            this.referenciaForm.reset();
                            this.indexReferencia = null;
                          }
                        });
                      }
                    } else if(this.indexReferencia === null && this.itemsFinancieraComercial.length < 4) {
                      if (this.referenciaForm.value.Ciudad !== null && this.referenciaForm.value.Ciudad !== undefined) {
                        this.dataCiudadesAll.forEach((elementCiu : any ) => {
                          if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                            this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                            this.dataDepartamentosAll.forEach((elementDep : any ) => {
                              if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                                this.referenciaForm.get('Departamento')?.setValue(elementDep);
                                this.dataPaisesAll.forEach((elementPais : any ) => {
                                  if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                                    this.referenciaForm.get('Pais')?.setValue(elementPais);
                                    this.itemsFinancieraComercial.push(this.referenciaForm.value);
                                    this.referenciaForm.reset();
                                  }
                                });
                              }
                            });
                          }
                        });
                      } else {
                        this.dataPaisesAll.forEach((elementPais : any ) => {
                          if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                            this.referenciaForm.get('Pais')?.setValue(elementPais);
                            this.itemsFinancieraComercial.push(this.referenciaForm.value);
                            this.referenciaForm.reset();
                          }
                        });
                      }
                    }

                  } else {
                    this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias financieras',
                      );
                  }
                  this.BlockReferencia = null;
                  this.referenciaForm.reset();
                  this.EnableUpdateReferencia = true;
              } else {
                this.EnableUpdateReferencia = false;
                this.notif.onWarning('Advertencia', 'El teléfono es obligatorio.');
              }
            } else {
              this.EnableUpdateReferencia = false;
              this.notif.onWarning('Advertencia', 'Debe seleccionar una ciudad válida.');
            }
          } else {
            this.EnableUpdateReferencia = false;
            this.notif.onWarning('Advertencia', 'La empresa es obligatoria.');
          }

        } else if (this.referenciaForm.value.idTipoReferencia.Id === 3) { // Financiera
          if (this.referenciaForm.value.DescripcionEmpresaR !== '' && this.referenciaForm.value.DescripcionEmpresaR !== null) {
            if ((this.referenciaForm.value.Ciudad !== null && this.referenciaForm.value.Ciudad !== '' &&
                this.referenciaForm.value.Ciudad !== undefined) ||
                (this.referenciaForm.value.Pais !== null && this.referenciaForm.value.Pais !== undefined)
                  && this.referenciaForm.value.idTipoReferencia.Id === 3) {

                this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.value.idTipoReferencia.Descripcion);
                this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.value.idTipoReferencia.Id);

                if (this.referenciaForm.value.TelefonoFinanciera !== null &&
                  this.referenciaForm.value.TelefonoFinanciera !== undefined && this.referenciaForm.value.TelefonoFinanciera !== '') {

                    if (this.itemsFinancieraComercial.length <= 4) {
                      if (this.indexReferencia !== null) {
                      if (this.referenciaForm.value.Ciudad !== null && this.referenciaForm.value.Ciudad !== undefined) {
                        this.dataCiudadesAll.forEach((elementCiu : any ) => {
                          if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                            this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                            this.dataDepartamentosAll.forEach((elementDep : any ) => {
                              if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                                this.referenciaForm.get('Departamento')?.setValue(elementDep);
                                this.dataPaisesAll.forEach((elementPais : any ) => {
                                  if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                                    this.referenciaForm.get('Pais')?.setValue(elementPais);
                                    this.itemsFinancieraComercial.splice(this.indexReferencia, 1);
                                    this.itemsFinancieraComercial.push(this.referenciaForm.value);
                                    this.referenciaForm.reset();
                                    this.indexReferencia = null;
                                  }
                                });
                              }
                            });
                          }
                        });
                      } else {
                        this.dataPaisesAll.forEach((elementPais : any ) => {
                          if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                            this.referenciaForm.get('Pais')?.setValue(elementPais);
                            this.itemsFinancieraComercial.splice(this.indexReferencia, 1);
                            this.itemsFinancieraComercial.push(this.referenciaForm.value);
                            this.referenciaForm.reset();
                            this.indexReferencia = null;
                          }
                        });
                      }
                    } else if (this.indexReferencia == null && this.itemsFinancieraComercial.length < 4) {
                      if (this.referenciaForm.value.Ciudad !== null && this.referenciaForm.value.Ciudad !== undefined) {
                        this.dataCiudadesAll.forEach((elementCiu : any ) => {
                          if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                            this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                            this.dataDepartamentosAll.forEach((elementDep : any ) => {
                              if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                                this.referenciaForm.get('Departamento')?.setValue(elementDep);
                                this.dataPaisesAll.forEach((elementPais : any ) => {
                                  if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                                    this.referenciaForm.get('Pais')?.setValue(elementPais);
                                  this.itemsFinancieraComercial.push(this.referenciaForm.value);
                                  this.referenciaForm.reset();
                                }
                                });
                              }
                            });
                          }
                        });
                      } else {
                        this.dataPaisesAll.forEach((elementPais : any ) => {
                          if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                              this.referenciaForm.get('Pais')?.setValue(elementPais);
                            this.itemsFinancieraComercial.push(this.referenciaForm.value);
                          }
                        });
                      }
                    }
                    } else {
                      this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias financieras',
                        );
                    }
                    this.BlockReferencia = null;
                    this.referenciaForm.reset();
                    this.EnableUpdateReferencia = true;

                } else {
                  this.EnableUpdateReferencia = false;
                   this.notif.onWarning('Advertencia', 'El teléfono es obligatorio.');
                 }
    
            } else {
              this.EnableUpdateReferencia = false;
              this.notif.onWarning('Advertencia', 'Debe seleccionar una ubicación válida.');
            }
          } else {
            this.EnableUpdateReferencia = false;
            this.notif.onWarning('Advertencia', 'La empresa es obligatoria.');
          }
        } else { // Familiar o personal
          if (this.referenciaForm.value.IdParentesco === null || this.referenciaForm.value.IdParentesco === undefined) {
            this.EnableUpdateReferencia = false;
            this.notif.onWarning('Advertencia',
              'Debe llenar los campos obligatorios.',
              );
          } else {
            if ((this.referenciaForm.get('celular')?.value === null || this.referenciaForm.get('celular')?.value === ''
              || this.referenciaForm.get('celular')?.value === undefined)
              && (this.referenciaForm.get('TelefonoContactos')?.value === null || this.referenciaForm.get('TelefonoContactos')?.value === ''
              || this.referenciaForm.get('TelefonoContactos')?.value === undefined)) {
              this.EnableUpdateReferencia = false;
              this.notif.onWarning('Advertencia',
                'Debe llenar los campos obligatorios.',
                );
            } else {

              if (this.referenciaForm.value.Ciudad === null && this.indexReferencia !== null) {

                if (this.indexReferencia !== null) {

                  // this.dataCiudadesAll.forEach((elementCiu : any ) => {
                  //   if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                  //     this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                  //     this.dataDepartamentosAll.forEach((elementDep : any ) => {
                  //       if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                  //         this.referenciaForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any ) => {
                            if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                              this.referenciaForm.get('Pais')?.setValue(elementPais);
                              this.itemsFamiliaPersonal.splice(this.indexReferencia, 1);
                              this.indexReferencia = null;
                            }
                          });
                  //       }
                  //     });
                  //   }
                  // });

                } else {

                    // this.dataCiudadesAll.forEach((elementCiu : any ) => {
                    // if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                    //   this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                    //   this.dataDepartamentosAll.forEach((elementDep : any ) => {
                    //     if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                    //       this.referenciaForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any ) => {
                            if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                              this.referenciaForm.get('Pais')?.setValue(elementPais);
                            }
                          });
                    //     }
                    //   });
                    // }
                    // });
                  
                }
                this.referenciaForm.get('IdCiudadR')?.setValue(ciudadReigistrada);
                this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.value.idTipoReferencia.Descripcion);
                this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.value.idTipoReferencia.Id);
                if (this.itemsFamiliaPersonal.length < 4) {
                  this.itemsFamiliaPersonal.push(this.referenciaForm.value);
                  this.referenciaForm.reset();
                } else {
                  this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias familiares y dos personales.',
                    );
                }
                this.referenciaForm.reset();
                ciudadReigistrada = [];
                this.EnableUpdateReferencia = true;
                this.formBuscarLockedExt = true;
              } else if (this.referenciaForm.value.Ciudad !== null && this.referenciaForm.value.Ciudad !== '') {

                if (this.indexReferencia !== null) {
                  this.dataCiudadesAll.forEach((elementCiu : any ) => {
                    if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                      this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                      this.dataDepartamentosAll.forEach((elementDep : any ) => {
                        if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                          this.referenciaForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any ) => {
                            if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                              this.referenciaForm.get('Pais')?.setValue(elementPais);
                              this.itemsFamiliaPersonal.splice(this.indexReferencia, 1);
                                this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.value.idTipoReferencia.Descripcion);
                                this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.value.idTipoReferencia.Id);
                                if (this.itemsFamiliaPersonal.length < 4) {
                                  this.itemsFamiliaPersonal.push(this.referenciaForm.value);
                                  this.referenciaForm.reset();
                                } else {
                                  this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias femiliares y dos personales.',
                                    );
                                }
                                this.referenciaForm.reset();
                                ciudadReigistrada = [];
                                this.EnableUpdateReferencia = true;
                                this.formBuscarLockedExt = true;
                                this.indexReferencia = null;
                              }
                          });
                        }
                      });
                    }
                  });
                } else {
                  this.dataCiudadesAll.forEach((elementCiu : any ) => {
                    if (elementCiu.IdCiudad === +this.referenciaForm.value.Ciudad) {
                      this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                      this.dataDepartamentosAll.forEach((elementDep : any ) => {
                        if (elementDep.IdDepartamento === +this.referenciaForm.value.Departamento) {
                          this.referenciaForm.get('Departamento')?.setValue(elementDep);
                          this.dataPaisesAll.forEach((elementPais : any ) => {
                            if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                              this.referenciaForm.get('Pais')?.setValue(elementPais);
                              this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.value.idTipoReferencia.Descripcion);
                              this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.value.idTipoReferencia.Id);
                              if (this.itemsFamiliaPersonal.length < 4) {
                                this.itemsFamiliaPersonal.push(this.referenciaForm.value);
                                this.referenciaForm.reset();
                              } else {
                                this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias femiliares y dos personales.',
                                  );
                              }
                              this.referenciaForm.reset();
                              ciudadReigistrada = [];
                              this.EnableUpdateReferencia = true;
                              this.formBuscarLockedExt = true;
                            }
                          });
                        }
                      });
                    }
                  });
                }
               
              } else if (this.referenciaForm.value.Pais !== null && this.referenciaForm.value.Pais !== '') {
                if (this.indexReferencia !== null) {
                    this.dataPaisesAll.forEach((elementPais : any ) => {
                      if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                        this.referenciaForm.get('Pais')?.setValue(elementPais);
                        this.itemsFamiliaPersonal.splice(this.indexReferencia, 1);
                          this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.value.idTipoReferencia.Descripcion);
                          this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.value.idTipoReferencia.Id);
                          if (this.itemsFamiliaPersonal.length < 4) {
                            this.itemsFamiliaPersonal.push(this.referenciaForm.value);
                            this.referenciaForm.reset();
                          } else {
                            this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias femiliares y dos personales.',
                              );
                          }
                          this.referenciaForm.reset();
                          ciudadReigistrada = [];
                          this.EnableUpdateReferencia = true;
                          this.formBuscarLockedExt = true;
                          this.indexReferencia = null;
                        }
                    }); 
                } else {
                  this.dataPaisesAll.forEach((elementPais : any ) => {
                    if (elementPais.IdPais === +this.referenciaForm.value.Pais) {
                      this.referenciaForm.get('Pais')?.setValue(elementPais);
                      this.referenciaForm.get('NombreEmpresa')?.setValue(this.referenciaForm.value.idTipoReferencia.Descripcion);
                      this.referenciaForm.get('idTipoReferencia')?.setValue(this.referenciaForm.value.idTipoReferencia.Id);
                      if (this.itemsFamiliaPersonal.length < 4) {
                        this.itemsFamiliaPersonal.push(this.referenciaForm.value);
                        this.referenciaForm.reset();
                      } else {
                        this.notif.onWarning('Advertencia', 'Solo puede agregar dos referencias femiliares y dos personales.',
                          );
                      }
                      this.referenciaForm.reset();
                      ciudadReigistrada = [];
                      this.EnableUpdateReferencia = true;
                      this.formBuscarLockedExt = true;
                    }
                  }); 
                }
              } else {
                this.EnableUpdateReferencia = false;
                this.notif.onWarning('Advertencia', 'Debe seleccionar una ciudad válida.',
                  );
              }
            }
          }
        }
      } else {
        this.EnableUpdateReferencia = false;
        this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de referencia válido.');
      }
    } else {
      this.notif.onWarning('Advertencia', 'Debe seleccionar una operación válida.',
        );
    }
  }

  eliminarItemReferencia(index : any, tipo : any) {
    if (tipo === 4 || tipo === 2) {
      this.EnableUpdateReferencia = true;
      this.itemsFamiliaPersonal.splice(index, 1);
    } else {
      this.EnableUpdateReferencia = true;
      this.itemsFinancieraComercial.splice(index, 1);
    }
  }

  setDataReferencia() {
    const tercerEdit = localStorage.getItem('TerceroNatura');
    const results = this.basicosFrom.get('operacion')?.value;
    let tipoVivienda = '';
    if (this.viviendaSeleccionada !== undefined && this.viviendaSeleccionada !== null
        && this.viviendaSeleccionada !== '') {
      tipoVivienda = this.viviendaSeleccionada.toString();
    } else {
      if (this.viviendaAnterior !== null && this.viviendaAnterior !== undefined) {
        tipoVivienda = this.viviendaAnterior.toString();
      } else {
        tipoVivienda = '0';
      }
    }
    let familiar = false;
    let personal = false;
    let arrendado = 0;
    if (results === '5') {
     if (tipoVivienda === '0' && this.allItemsFormRefencia.length <= 0 && this.basicosFrom.value.tipoCliente === '15') {
        if (this.itemsFamiliaPersonal.length <= 0 && this.itemsFinancieraComercial.length <= 0) {
          // valido que no tenga nada agregado y lo dejo ir
          // si es tercero y no tiene vivienda arrendada y no tiene referencias dejelo ir
          this.allItemsFormSaves.referenciaDto = this.allItemsFormRefencia;
          this.referenciaSave.get('ReferenciaDto')?.setValue(this.allItemsFormRefencia);
          this.allItemsFormSave.push(this.referenciaSave.value);
          $('#referenciaTab').removeClass('activar');
          $('#referenciaTab').removeClass('active');
          $('#entrevistaTab').removeClass('disableTab');
          this.botonReferenciaSiguiente.nativeElement.click();
          $('#referenciaTab').removeClass('disableTab');
          this.devolverTab(8);
          this.VolverArriba();
        } else {
          this.allItemsFormSaves.referenciaDto = {};
          this.allItemsFormRefencia = [];
          this.referenciaForm.get('dataFamiliaPersonal')?.setValue(this.itemsFamiliaPersonal);
          this.referenciaForm.get('dataFinancieraComercial')?.setValue(this.itemsFinancieraComercial);
          this.itemsFinancieraComercial.forEach(elementfin => {
            if (elementfin.idTipoReferencia === 1) {
              this.referenciaFormSet.get('IdReferencia')?.setValue(null);
              this.referenciaFormSet.get('IdTipoReferencia')?.setValue(elementfin.idTipoReferencia);
              this.referenciaFormSet.get('PrimerNombre')?.setValue(elementfin.PrimerNombre);
              this.referenciaFormSet.get('SegundoNombre')?.setValue(elementfin.SegundoNombre);
              this.referenciaFormSet.get('PrimerApellido')?.setValue(elementfin.PrimerApellido);
              this.referenciaFormSet.get('SegundoApellido')?.setValue(elementfin.SegundoApellido);
              this.referenciaFormSet.get('IdParentesco')?.setValue(null);
              this.referenciaFormSet.get('TelefonoContacto')?.setValue(elementfin.TelefonoContactos);
              this.referenciaFormSet.get('TelefonoEmpresa')?.setValue(elementfin.TelefonoEmpresas);
              this.referenciaFormSet.get('Ext')?.setValue(null);
              this.referenciaFormSet.get('Celular')?.setValue(elementfin.celular);
              this.referenciaFormSet.get('Email')?.setValue(elementfin.email);
              // this.referenciaFormSet.get('IdCiudad')?.setValue(elementfin.Ciudad.IdCiudad);
              if (elementfin.Ciudad !== null) {
                  this.referenciaFormSet.get('IdCiudad')?.setValue(elementfin.Ciudad.IdCiudad);
                } else {
                  this.referenciaFormSet.get('IdCiudad')?.setValue(0);
                }
                if(elementfin.Pais !== null){
                  this.referenciaFormSet.get('IdPais')?.setValue(elementfin.Pais.IdPais);
                } else {
                  this.referenciaFormSet.get('IdPais')?.setValue(null);
                }
              this.referenciaFormSet.get('IdOficina')?.setValue(0);
              this.referenciaFormSet.get('NumeroProducto')?.setValue(elementfin.NumeroProducto);
              this.referenciaFormSet.get('ServicioProducto')?.setValue(elementfin.ServicioProductoComercial);
              this.referenciaFormSet.get('DescripcionEmpresa')?.setValue(elementfin.DescripcionEmpresa);
              this.allItemsFormRefencia.push(this.referenciaFormSet.value);
            }
            if (elementfin.idTipoReferencia === 3) {
              this.referenciaFormSet.get('IdReferencia')?.setValue(null);
              this.referenciaFormSet.get('IdTipoReferencia')?.setValue(elementfin.idTipoReferencia);
              this.referenciaFormSet.get('PrimerNombre')?.setValue(elementfin.PrimerNombre);
              this.referenciaFormSet.get('SegundoNombre')?.setValue(elementfin.SegundoNombre);
              this.referenciaFormSet.get('PrimerApellido')?.setValue(elementfin.PrimerApellido);
              this.referenciaFormSet.get('SegundoApellido')?.setValue(elementfin.SegundoApellido);
              this.referenciaFormSet.get('IdParentesco')?.setValue(null);
              this.referenciaFormSet.get('TelefonoContacto')?.setValue(elementfin.TelefonoContactos);
              this.referenciaFormSet.get('TelefonoEmpresa')?.setValue(elementfin.TelefonoFinanciera);
              this.referenciaFormSet.get('Ext')?.setValue(null);
              this.referenciaFormSet.get('Celular')?.setValue(elementfin.celular);
              this.referenciaFormSet.get('Email')?.setValue(elementfin.email);
              this.referenciaFormSet.get('IdCiudad')?.setValue(0);
              // this.referenciaFormSet.get('IdOficina')?.setValue(elementfin.CiudadComercial.IdCiudad);
              if (elementfin.CiudadComercial !== null) {
                  this.referenciaFormSet.get('IdOficina')?.setValue(elementfin.CiudadComercial.IdCiudad);
                } else {
                  this.referenciaFormSet.get('IdCiudad')?.setValue(0);
                }
                if(elementfin.Pais !== null){
                  this.referenciaFormSet.get('IdPais')?.setValue(elementfin.Pais.IdPais);
                } else {
                  this.referenciaFormSet.get('IdPais')?.setValue(null);
                }
              this.referenciaFormSet.get('NumeroProducto')?.setValue(elementfin.NumeroProductoFinanciera);
              this.referenciaFormSet.get('ServicioProducto')?.setValue(elementfin.ServicioProductoFinanciera);
              this.referenciaFormSet.get('DescripcionEmpresa')?.setValue(elementfin.DescripcionEmpresaR);
              this.allItemsFormRefencia.push(this.referenciaFormSet.value);
            }
          });
          if (this.itemsFamiliaPersonal.length > 0) {
            this.itemsFamiliaPersonal.forEach(elementper => {
              this.referenciaFormSet.get('IdReferencia')?.setValue(null);
              this.referenciaFormSet.get('IdTipoReferencia')?.setValue(elementper.idTipoReferencia);
              this.referenciaFormSet.get('PrimerNombre')?.setValue(elementper.PrimerNombre);
              this.referenciaFormSet.get('SegundoNombre')?.setValue(elementper.SegundoNombre);
              this.referenciaFormSet.get('PrimerApellido')?.setValue(elementper.PrimerApellido);
              this.referenciaFormSet.get('SegundoApellido')?.setValue(elementper.SegundoApellido);
              if (elementper.IdParentesco !== null) {
                this.referenciaFormSet.get('IdParentesco')?.setValue(elementper.IdParentesco.Clase);
              } else {
                this.referenciaFormSet.get('IdParentesco')?.setValue(null);
              }
              this.referenciaFormSet.get('TelefonoContacto')?.setValue(elementper.TelefonoContactos);
              this.referenciaFormSet.get('TelefonoEmpresa')?.setValue(elementper.TelefonoEmpresaPersonal);
              this.referenciaFormSet.get('Ext')?.setValue(elementper.extEmpresarial);
              this.referenciaFormSet.get('Celular')?.setValue(elementper.celular);
              this.referenciaFormSet.get('Email')?.setValue(elementper.email);
              if (elementper.IdCiudadR !== null) {
                this.referenciaFormSet.get('IdCiudad')?.setValue(elementper.Ciudad.IdCiudad);
              } else {
                this.referenciaFormSet.get('IdCiudad')?.setValue(0);
              }
              if (elementper.Pais !== null) {
                this.referenciaFormSet.get('IdPais')?.setValue(elementper.Pais.IdPais);
              } else {
                this.referenciaFormSet.get('IdPais')?.setValue(null);
              }
               if (elementper.IdCiudadR !== null) {
                this.referenciaFormSet.get('IdOficina')?.setValue(elementper.Ciudad.IdCiudad);
              } else {
                this.referenciaFormSet.get('IdOficina')?.setValue(0);
              }
              
              this.referenciaFormSet.get('NumeroProducto')?.setValue(elementper.NumeroProducto);
              this.referenciaFormSet.get('ServicioProducto')?.setValue(elementper.ServicioProductoComercial);
              this.referenciaFormSet.get('DescripcionEmpresa')?.setValue('');
              this.allItemsFormRefencia.push(this.referenciaFormSet.value);
            });
          }
          this.allItemsFormSaves.referenciaDto = this.allItemsFormRefencia;
          this.referenciaSave.get('ReferenciaDto')?.setValue(this.allItemsFormRefencia);
          this.allItemsFormSave.push(this.referenciaSave.value);
          $('#referenciaTab').removeClass('activar');
          $('#referenciaTab').removeClass('active');
          $('#entrevistaTab').removeClass('disableTab');
          this.botonReferenciaSiguiente.nativeElement.click();
          $('#referenciaTab').removeClass('disableTab');
          this.devolverTab(8);
          this.VolverArriba();
          this.referenciaForm.reset();
        }
      } else {
        // aqui se valida si ingreso algun item de familia o personal
        this.itemsFamiliaPersonal.forEach(elementr => {
          if (elementr.idTipoReferencia === 2) {
            familiar = true;
          } else if (elementr.idTipoReferencia === 4) {
            personal = true;
          }
        });
        this.itemsFinancieraComercial.forEach(elementr => {
          if (elementr.idTipoReferencia === 1) {
            arrendado = arrendado + 1;
          } else {
            arrendado = arrendado + 0;
          }
        });
        if (familiar && personal) {
            this.allItemsFormSaves.referenciaDto = {};
            this.allItemsFormRefencia = [];
            this.referenciaForm.get('dataFamiliaPersonal')?.setValue(this.itemsFamiliaPersonal);
            this.referenciaForm.get('dataFinancieraComercial')?.setValue(this.itemsFinancieraComercial);
            this.itemsFinancieraComercial.forEach(elementfin => {
              if (elementfin.idTipoReferencia === 1) {
                this.referenciaFormSet.get('IdReferencia')?.setValue(null);
                this.referenciaFormSet.get('IdTipoReferencia')?.setValue(elementfin.idTipoReferencia);
                this.referenciaFormSet.get('PrimerNombre')?.setValue(elementfin.PrimerNombre);
                this.referenciaFormSet.get('SegundoNombre')?.setValue(elementfin.SegundoNombre);
                this.referenciaFormSet.get('PrimerApellido')?.setValue(elementfin.PrimerApellido);
                this.referenciaFormSet.get('SegundoApellido')?.setValue(elementfin.SegundoApellido);
                this.referenciaFormSet.get('IdParentesco')?.setValue(null);
                this.referenciaFormSet.get('TelefonoContacto')?.setValue(elementfin.TelefonoContactos);
                this.referenciaFormSet.get('TelefonoEmpresa')?.setValue(elementfin.TelefonoEmpresas);
                this.referenciaFormSet.get('Ext')?.setValue(null);
                this.referenciaFormSet.get('Celular')?.setValue(elementfin.celular);
                this.referenciaFormSet.get('Email')?.setValue(elementfin.email);
                 
                this.referenciaFormSet.get('IdOficina')?.setValue(0);
                this.referenciaFormSet.get('NumeroProducto')?.setValue(elementfin.NumeroProducto);
                this.referenciaFormSet.get('ServicioProducto')?.setValue(elementfin.ServicioProductoComercial);
                this.referenciaFormSet.get('DescripcionEmpresa')?.setValue(elementfin.DescripcionEmpresa);
                this.allItemsFormRefencia.push(this.referenciaFormSet.value);
              }
              if (elementfin.idTipoReferencia === 3) {
                this.referenciaFormSet.get('IdReferencia')?.setValue(null);
                this.referenciaFormSet.get('IdTipoReferencia')?.setValue(elementfin.idTipoReferencia);
                this.referenciaFormSet.get('PrimerNombre')?.setValue(elementfin.PrimerNombre);
                this.referenciaFormSet.get('SegundoNombre')?.setValue(elementfin.SegundoNombre);
                this.referenciaFormSet.get('PrimerApellido')?.setValue(elementfin.PrimerApellido);
                this.referenciaFormSet.get('SegundoApellido')?.setValue(elementfin.SegundoApellido);
                this.referenciaFormSet.get('IdParentesco')?.setValue(null);
                this.referenciaFormSet.get('TelefonoContacto')?.setValue(elementfin.TelefonoContactos);
                this.referenciaFormSet.get('TelefonoEmpresa')?.setValue(elementfin.TelefonoFinanciera);
                this.referenciaFormSet.get('Ext')?.setValue(null);
                this.referenciaFormSet.get('Celular')?.setValue(elementfin.celular);
                this.referenciaFormSet.get('Email')?.setValue(elementfin.email);
                if(elementfin.Ciudad !== null) {
                  this.referenciaFormSet.get('IdCiudad')?.setValue(elementfin.Ciudad.IdCiudad);
                } else {
                  this.referenciaFormSet.get('IdCiudad')?.setValue(0);
                }
                if(elementfin.Pais !== null){
                  this.referenciaFormSet.get('IdPais')?.setValue(elementfin.Pais.IdPais);
                } else {
                  this.referenciaFormSet.get('IdPais')?.setValue(null);
                }
                this.referenciaFormSet.get('IdOficina')?.setValue(0);
                this.referenciaFormSet.get('NumeroProducto')?.setValue(elementfin.NumeroProductoFinanciera);
                this.referenciaFormSet.get('ServicioProducto')?.setValue(elementfin.ServicioProductoFinanciera);
                this.referenciaFormSet.get('DescripcionEmpresa')?.setValue(elementfin.DescripcionEmpresaR);
                this.allItemsFormRefencia.push(this.referenciaFormSet.value);
              }
            });

            this.itemsFamiliaPersonal.forEach(elementper => {
              this.referenciaFormSet.get('IdReferencia')?.setValue(null);
              this.referenciaFormSet.get('IdTipoReferencia')?.setValue(elementper.idTipoReferencia);
              this.referenciaFormSet.get('PrimerNombre')?.setValue(elementper.PrimerNombre);
              this.referenciaFormSet.get('SegundoNombre')?.setValue(elementper.SegundoNombre);
              this.referenciaFormSet.get('PrimerApellido')?.setValue(elementper.PrimerApellido);
              this.referenciaFormSet.get('SegundoApellido')?.setValue(elementper.SegundoApellido);
              if (elementper.IdParentesco !== null) {
                this.referenciaFormSet.get('IdParentesco')?.setValue(elementper.IdParentesco.Clase);
              } else {
                this.referenciaFormSet.get('IdParentesco')?.setValue(null);
              }
              this.referenciaFormSet.get('TelefonoContacto')?.setValue(elementper.TelefonoContactos);
              this.referenciaFormSet.get('TelefonoEmpresa')?.setValue(elementper.TelefonoEmpresaPersonal);
              this.referenciaFormSet.get('Ext')?.setValue(elementper.extEmpresarial);
              this.referenciaFormSet.get('Celular')?.setValue(elementper.celular);
              this.referenciaFormSet.get('Email')?.setValue(elementper.email);
              if (elementper.IdCiudadR !== null) {
                this.referenciaFormSet.get('IdCiudad')?.setValue(elementper.Ciudad.IdCiudad);
              } else {
               this.referenciaFormSet.get('IdCiudad')?.setValue(0);
              }
              if (elementper.Pais !== null) {
                this.referenciaFormSet.get('IdPais')?.setValue(elementper.Pais.IdPais);
              } else {
                this.referenciaFormSet.get('IdPais')?.setValue(null);
              }
              if (elementper.Ciudad !== null) {
                this.referenciaFormSet.get('IdOficina')?.setValue(elementper.Ciudad.IdCiudad);
              } else {
               this.referenciaFormSet.get('IdOficina')?.setValue(0);
              }
              this.referenciaFormSet.get('NumeroProducto')?.setValue(elementper.NumeroProducto);
              this.referenciaFormSet.get('ServicioProducto')?.setValue(elementper.ServicioProductoComercial);
              this.referenciaFormSet.get('DescripcionEmpresa')?.setValue('');
              this.allItemsFormRefencia.push(this.referenciaFormSet.value);
            });
            this.allItemsFormSaves.referenciaDto = this.allItemsFormRefencia;
            this.referenciaSave.get('ReferenciaDto')?.setValue(this.allItemsFormRefencia);
            this.allItemsFormSave.push(this.referenciaSave.value);
            $('#referenciaTab').removeClass('activar');
            $('#referenciaTab').removeClass('active');
            $('#entrevistaTab').removeClass('disableTab');
            this.botonReferenciaSiguiente.nativeElement.click();
            $('#referenciaTab').removeClass('disableTab');
            this.devolverTab(8);
            this.VolverArriba();
        } else {
          $('#entrevistaTab').addClass('disableTab');
          $('#referenciaTab').removeClass('disableTab');
          $('#entrevistaTab').removeClass('activar');
          $('#entrevistaTab').removeClass('active');
          this.botonReferenciaAnterior.nativeElement.click();
          this.devolverTab(7);
          this.VolverArriba();
          this.notif.onWarning('Advertencia','Debe agregar una referencia personal y una familiar.');
        }
      }

    } else if (results === '1') {
      let tieneFamilia = false;
      let tienePersonal = false;
      let tieneComercial = false;
      let validarCiudadComercial = false;
      let validarCiudadFamiliar = false;
      this.itemsFamiliaPersonal.forEach(elementFamiliaPersonal => {
        if (elementFamiliaPersonal.idTipoReferencia === 2) {
          tieneFamilia = true;
        }
        if (elementFamiliaPersonal.idTipoReferencia === 4) {
          tienePersonal = true;
        }
      });
      this.itemsFinancieraComercial.forEach(elementComercialFinanciero => {
        if (elementComercialFinanciero.idTipoReferencia === 1) { // valido que tenga una referencia comercial
          tieneComercial = true;
        }
      });
      if (tieneFamilia && tienePersonal) { // valida que tenga registros de familia y personal
          this.allItemsFormSaves.referenciaDto = {};
          this.allItemsFormRefencia = [];
          this.referenciaForm.get('dataFamiliaPersonal')?.setValue(this.itemsFamiliaPersonal);
          this.referenciaForm.get('dataFinancieraComercial')?.setValue(this.itemsFinancieraComercial);
          this.itemsFinancieraComercial.forEach(elementcom => {
            if (elementcom.idTipoReferencia === 1 || elementcom.idTipoReferencia === 3 ) {
              if (elementcom.Ciudad === null || elementcom.Ciudad === undefined) {
                  validarCiudadComercial = true;
                  if(elementcom.Pais !== null || elementcom.Pais !== undefined) {
                    validarCiudadComercial = false;
                  }
              }
            }
          });
          this.itemsFamiliaPersonal.forEach(elementFami => {
            if (elementFami.idTipoReferencia === 2 || elementFami.idTipoReferencia === 4) {
              if (elementFami.Ciudad === null || elementFami.Ciudad === undefined) {
                validarCiudadFamiliar = true;
                if(elementFami.Pais !== null || elementFami.Pais !== undefined) {
                  validarCiudadFamiliar = false;
                  }
              }
            }
          });
         if(!validarCiudadComercial  && !validarCiudadFamiliar) {
          this.itemsFinancieraComercial.forEach(elementcom => {
            if (elementcom.idTipoReferencia === 1) {
              this.referenciaFormSet.get('IdTercero')?.setValue(tercerEdit);
              this.referenciaFormSet.get('IdReferencia')?.setValue(elementcom.idReferencia);
              this.referenciaFormSet.get('IdTipoReferencia')?.setValue(elementcom.idTipoReferencia);
              this.referenciaFormSet.get('PrimerNombre')?.setValue(null);
              this.referenciaFormSet.get('SegundoNombre')?.setValue(null);
              this.referenciaFormSet.get('PrimerApellido')?.setValue(null);
              this.referenciaFormSet.get('SegundoApellido')?.setValue(null);
              this.referenciaFormSet.get('IdParentesco')?.setValue(null);
              this.referenciaFormSet.get('TelefonoContacto')?.setValue(elementcom.TelefonoContactos);
              this.referenciaFormSet.get('TelefonoEmpresa')?.setValue(elementcom.TelefonoEmpresas);
              this.referenciaFormSet.get('Ext')?.setValue(null);
              this.referenciaFormSet.get('Celular')?.setValue(null);
              this.referenciaFormSet.get('Email')?.setValue(null);
              if (elementcom.Ciudad !== null) {
                this.referenciaFormSet.get('IdCiudad')?.setValue(elementcom.Ciudad.IdCiudad);
              } else {
                this.referenciaFormSet.get('IdCiudad')?.setValue(0);
              }
              if (elementcom.Pais !== null) {
                this.referenciaFormSet.get('IdPais')?.setValue(elementcom.Pais.IdPais);
              } else {
                this.referenciaFormSet.get('IdPais')?.setValue(null);
              }
              this.referenciaFormSet.get('IdOficina')?.setValue(0);
              this.referenciaFormSet.get('NumeroProducto')?.setValue(elementcom.NumeroProducto);
              this.referenciaFormSet.get('ServicioProducto')?.setValue(elementcom.ServicioProductoComercial);
              this.referenciaFormSet.get('DescripcionEmpresa')?.setValue(elementcom.DescripcionEmpresa);
              this.allItemsFormRefencia.push(this.referenciaFormSet.value);
            }
            if (elementcom.idTipoReferencia === 3) {
              this.referenciaFormSet.get('IdTercero')?.setValue(tercerEdit);
              this.referenciaFormSet.get('IdReferencia')?.setValue(elementcom.idReferencia);
              this.referenciaFormSet.get('IdTipoReferencia')?.setValue(elementcom.idTipoReferencia);
              this.referenciaFormSet.get('PrimerNombre')?.setValue(null);
              this.referenciaFormSet.get('SegundoNombre')?.setValue(null);
              this.referenciaFormSet.get('PrimerApellido')?.setValue(null);
              this.referenciaFormSet.get('SegundoApellido')?.setValue(null);
              this.referenciaFormSet.get('IdParentesco')?.setValue(null);
              this.referenciaFormSet.get('TelefonoContacto')?.setValue(elementcom.TelefonoContactos);
              this.referenciaFormSet.get('TelefonoEmpresa')?.setValue(elementcom.TelefonoFinanciera);
              this.referenciaFormSet.get('Ext')?.setValue(null);
              this.referenciaFormSet.get('Celular')?.setValue(null);
              this.referenciaFormSet.get('Email')?.setValue(null);
              if (elementcom.Ciudad !== null) {
                this.referenciaFormSet.get('IdCiudad')?.setValue(elementcom.Ciudad.IdCiudad);
              } else {
                this.referenciaFormSet.get('IdCiudad')?.setValue(0);
              }
              if (elementcom.Pais !== null) {
                this.referenciaFormSet.get('IdPais')?.setValue(elementcom.Pais.IdPais);
              } else {
                this.referenciaFormSet.get('IdPais')?.setValue(null);
              }
              this.referenciaFormSet.get('IdOficina')?.setValue(null);
              this.referenciaFormSet.get('NumeroProducto')?.setValue(elementcom.NumeroProductoFinanciera);
              this.referenciaFormSet.get('ServicioProducto')?.setValue(elementcom.ServicioProductoFinanciera);
              this.referenciaFormSet.get('DescripcionEmpresa')?.setValue(elementcom.DescripcionEmpresaR);
              this.allItemsFormRefencia.push(this.referenciaFormSet.value);
            }
          });

          this.itemsFamiliaPersonal.forEach(elementper => {
            this.referenciaFormSet.get('IdTercero')?.setValue(tercerEdit);
            this.referenciaFormSet.get('IdReferencia')?.setValue(elementper.idReferencia);
            this.referenciaFormSet.get('IdTipoReferencia')?.setValue(elementper.idTipoReferencia);
            this.referenciaFormSet.get('PrimerNombre')?.setValue(elementper.PrimerNombre);
            this.referenciaFormSet.get('SegundoNombre')?.setValue(elementper.SegundoNombre);
            this.referenciaFormSet.get('PrimerApellido')?.setValue(elementper.PrimerApellido);
            this.referenciaFormSet.get('SegundoApellido')?.setValue(elementper.SegundoApellido);
            if (elementper.IdParentesco !== null) {
              this.referenciaFormSet.get('IdParentesco')?.setValue(elementper.IdParentesco.Clase);
            } else {
              this.referenciaFormSet.get('IdParentesco')?.setValue(null);
            }
            this.referenciaFormSet.get('TelefonoContacto')?.setValue(elementper.TelefonoContactos);
            this.referenciaFormSet.get('TelefonoEmpresa')?.setValue(elementper.TelefonoEmpresaPersonal);
            this.referenciaFormSet.get('Ext')?.setValue(elementper.extEmpresarial);
            this.referenciaFormSet.get('Celular')?.setValue(elementper.celular);
            this.referenciaFormSet.get('Email')?.setValue(elementper.email);
              if (elementper.Pais !== null) {
                this.referenciaFormSet.get('IdPais')?.setValue(elementper.Pais.IdPais);
              } else {
                this.referenciaFormSet.get('IdPais')?.setValue(null);
              }
               if (elementper.Ciudad !== null) {
                this.referenciaFormSet.get('IdOficina')?.setValue(elementper.Ciudad.IdCiudad);
              } else {
                this.referenciaFormSet.get('IdOficina')?.setValue(0);
              }
            this.referenciaFormSet.get('NumeroProducto')?.setValue(null);
            this.referenciaFormSet.get('ServicioProducto')?.setValue(null);
            this.referenciaFormSet.get('DescripcionEmpresa')?.setValue('');
            this.allItemsFormRefencia.push(this.referenciaFormSet.value);
          });
          this.EditarReferencias(this.allItemsFormRefencia);
          $('#referenciaTab').removeClass('disableTab');
          this.devolverTab(7);
          this.VolverArriba();
          } else { 
            this.notif.onWarning('Advertencia', 'Debe actualizar la ubicacion de todos los registros.');
          }
      } else {
        this.notif.onWarning('Advertencia', 'Debe ingresar una referencia familiar y una personal.');
        this.EnableUpdateReferencia = true;
      }
    } else {
      $('#entrevistaTab').addClass('disableTab');
      $('#referenciaTab').removeClass('disableTab');
      $('#entrevistaTab').removeClass('activar');
      $('#entrevistaTab').removeClass('active');
      this.botonReferenciaAnterior.nativeElement.click();
      this.devolverTab(7);
      this.VolverArriba();
      this.notif.onWarning('Advertencia', 'Debe seleccionar una operación válida.');
    }
  }

  limpiarFormularioReferencia() {
    this.referenciaForm.reset();
    this.removerValidatorComercial();
    this.removerValidatorFamiliarPersonal();
    this.removerValidatorFinanciera();
    this.BlockReferencia = null;
    this.BlockCategoria = null;
    this.BlockActivo = null;
    this.ocultarDireccionEdit = true;
    this.direccionEdit = '';
    this.via = '';
    this.numero = '';
    this.letra = '';
    this.numeroDos = '';
    this.letraDos = '';
    this.cardi = '';
    this.numeroTres = '';
    this.imuebles = '';
    this.numeroCuatro = '';
    this.ocultarDireccion = true;
    this.ocultarEditar = true;
    this.direccionArray = null;
    this.BlockTipoContacto = null;
    this.formBuscarLockedPpal = null;
    this.indexActivo = null;
    this.indexContacto = null;
    this.indexContactos = null;
    this.indexConyugue = null;
    this.indexLaboral = null;
    this.indexFinanciero = null;
    this.indexReferencia = null;
    this.indexSeguro = null;
    this.formBuscarLockedExt = true;
  }

  validarExtEmpresa() {
    const telEmpres = this.referenciaForm.get('TelefonoEmpresaPersonal')?.value;
    if (telEmpres !== null) {
      if (telEmpres.length >= 6) {
        this.formBuscarLockedExt = null;
      } else {
        this.formBuscarLockedExt = true;
      }
    }
  }

  validarValueExtEmpresa() {
    const valueEmp = this.referenciaForm.get('TelefonoEmpresaPersonal')?.value;
    const valueExtEmp = this.referenciaForm.get('extEmpresarial')?.value;
    if (valueEmp !== null) {
      if (valueEmp.length <= 6 && valueEmp !== '') {
        this.formBuscarLockedExt = true;
        this.referenciaForm.get('extEmpresarial')?.reset();
        this.referenciaForm.controls['TelefonoEmpresaPersonal'].setValidators([Validators.required]);
        this.referenciaForm.controls['TelefonoEmpresaPersonal'].setErrors({ 'incorrect': true });
      } else {
        if ((valueEmp === null || valueEmp === undefined || valueEmp === '') &&
          (valueExtEmp !== null && valueExtEmp !== '' && valueExtEmp !== undefined)) {
          this.referenciaForm.controls['TelefonoEmpresaPersonal'].setValidators([Validators.required]);
          this.referenciaForm.controls['TelefonoEmpresaPersonal'].setErrors({ 'incorrect': true });
        } else {
          if (!isNaN(valueEmp)) {
            this.referenciaForm.controls['TelefonoEmpresaPersonal'].setValidators(null);
            this.referenciaForm.controls['TelefonoEmpresaPersonal'].setErrors(null);
            this.referenciaForm.controls['TelefonoEmpresaPersonal'].clearValidators();
            this.referenciaForm.controls['extEmpresarial'].setValidators(null);
            this.referenciaForm.controls['extEmpresarial'].setErrors(null);
            this.referenciaForm.controls['extEmpresarial'].clearValidators();
          } else {
            this.referenciaForm.controls['TelefonoEmpresaPersonal'].setValidators([Validators.required, Validators.pattern('^[0-9]*')]);
            this.referenciaForm.controls['TelefonoEmpresaPersonal'].setErrors({ 'incorrect': true });
          }
        }
      }
    }
  }

  validarTelefono() {
    const self = this;
    const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
    const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
    $('#TelEmpresa').on('input', function (e : any) {
      if (!patt.test(self.value)) {
        self.value = self.value.replace(pattReplace, '');
      }
    });
  }

  validarExtencion() {
    const self = this;
    const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
    const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
    $('#extencionNumero').on('input', function (e : any) {
      if (!patt.test(self.value)) {
        self.value = self.value.replace(pattReplace, '');
      }
    });
  }

  //#endregion

  //#region Metodos de ENTREVISTA

  ValidarSeleccion(data : any, idP : any) {
    this.EnableUpdateEntrevista = true;
    if (data === 'si') {
      this.entrevistaForm.get('RPregunta' + idP + 'Si')?.setValue(true);
      this.entrevistaForm.get('RPregunta' + idP + 'No')?.setValue(false);
    } else {
      this.entrevistaForm.get('RPregunta' + idP + 'Si')?.setValue(false);
      this.entrevistaForm.get('RPregunta' + idP + 'No')?.setValue(true);
    }
    // Desbloquea los campos para la repsuesta 2
    if (idP === 2) {
        if (idP === 2 && data === 'si' ) {
          this.DesbloquearRespuesta2 = null;
          this.entrevistaForm.controls['RPregunta3Si'].setErrors({ 'incorrect': true });
          this.entrevistaForm.controls['RPregunta3Si'].setValidators([Validators.required, Validators.pattern('[a-zA-ZñÑ ]+')]);
          this.entrevistaForm.controls['RPregunta4Si'].setErrors({ 'incorrect': true });
          this.entrevistaForm.controls['RPregunta4Si'].setValidators([Validators.required]);
        } else {
          this.DesbloquearRespuesta2 = true;
          this.entrevistaForm.controls['RPregunta3Si'].setErrors(null);
          this.entrevistaForm.controls['RPregunta3Si'].clearValidators();
          this.entrevistaForm.controls['RPregunta3Si'].setValidators(null);
          this.entrevistaForm.controls['RPregunta4Si'].setErrors(null);
          this.entrevistaForm.controls['RPregunta4Si'].clearValidators();
          this.entrevistaForm.controls['RPregunta4Si'].setValidators(null);
          this.entrevistaForm.get('RPregunta3Si')?.reset();
          this.entrevistaForm.get('RPregunta4Si')?.reset();
        }
    }
    // Desbloquea los campos para la repsuesta 6
    if (idP === 6) {
      if (idP === 6 && data === 'si') {
        this.DesbloquearRespuesta6 = null;
        this.entrevistaForm.controls['RPregunta11Si'].setErrors({ 'incorrect': true });
        this.entrevistaForm.controls['RPregunta11Si'].setValidators([Validators.required, Validators.pattern('[a-zA-ZñÑ ]+')]);
        this.entrevistaForm.controls['RPregunta12Si'].setErrors({ 'incorrect': true });
        this.entrevistaForm.controls['RPregunta12Si'].setValidators([Validators.required]);
        this.entrevistaForm.controls['RPregunta13Si'].setErrors({ 'incorrect': true });
        this.entrevistaForm.controls['RPregunta13Si'].setValidators([Validators.required, Validators.pattern('[a-zA-ZñÑ ]+')]);
        this.entrevistaForm.get('RPregunta12Si')?.setValue('');
      } else {
        this.DesbloquearRespuesta6 = true;
        this.entrevistaForm.controls['RPregunta11Si'].setErrors(null);
        this.entrevistaForm.controls['RPregunta11Si'].clearValidators();
        this.entrevistaForm.controls['RPregunta11Si'].setValidators(null);
        this.entrevistaForm.controls['RPregunta12Si'].setErrors(null);
        this.entrevistaForm.controls['RPregunta12Si'].clearValidators();
        this.entrevistaForm.controls['RPregunta12Si'].setValidators(null);
        this.entrevistaForm.controls['RPregunta13Si'].setErrors(null);
        this.entrevistaForm.controls['RPregunta13Si'].clearValidators();
        this.entrevistaForm.controls['RPregunta13Si'].setValidators(null);
        this.entrevistaForm.get('RPregunta7Si')?.reset();
        this.entrevistaForm.get('RPregunta8Si')?.reset();
        this.entrevistaForm.get('RPregunta9Si')?.reset();
        this.entrevistaForm.get('RPregunta10Si')?.reset();
        this.entrevistaForm.get('RPregunta11Si')?.reset();
        this.entrevistaForm.get('RPregunta12Si')?.reset();
        this.entrevistaForm.get('RPregunta13Si')?.reset();
        this.entrevistaForm.get('RPregunta25Si')?.reset();
        this.entrevistaForm.get('RPregunta24Si')?.reset();
        this.entrevistaForm.get('RPregunta12Si')?.setValue('');
      }
    }
    // Desbloquea los campos para la repsuesta 14
    if (idP === 14) {
      if (idP === 14 && data === 'si') {
        this.DesbloquearRespuesta14 = null;
        this.entrevistaForm.controls['RPregunta15Si'].setErrors({ 'incorrect': true });
        this.entrevistaForm.controls['RPregunta15Si'].setValidators([Validators.required]);
        this.entrevistaForm.controls['RPregunta16Si'].setErrors({ 'incorrect': true });
        this.entrevistaForm.controls['RPregunta16Si'].setValidators([Validators.required]);
        this.entrevistaForm.get('RPregunta15Si')?.setValue('');
        this.entrevistaForm.get('RPregunta16Si')?.setValue('');
      } else {
        this.DesbloquearRespuesta14 = true;
        this.entrevistaForm.controls['RPregunta15Si'].setErrors(null);
        this.entrevistaForm.controls['RPregunta15Si'].clearValidators();
        this.entrevistaForm.controls['RPregunta15Si'].setValidators(null);
        this.entrevistaForm.controls['RPregunta16Si'].setErrors(null);
        this.entrevistaForm.controls['RPregunta16Si'].clearValidators();
        this.entrevistaForm.controls['RPregunta16Si'].setValidators(null);
        this.entrevistaForm.get('RPregunta15Si')?.reset();
        this.entrevistaForm.get('RPregunta16Si')?.reset();
        this.entrevistaForm.get('RPregunta29Si')?.reset();
        this.entrevistaForm.get('RPregunta15Si')?.setValue('');
        this.entrevistaForm.get('RPregunta16Si')?.setValue('');
      }
    }
    // Desbloquea los campos para la repsuesta 17
    if (idP === 17) {
      if (idP === 17 && data === 'si') {
        this.DesbloquearRespuesta17 = null;
        this.entrevistaForm.controls['RPregunta18Si'].setErrors({ 'incorrect': true });
        this.entrevistaForm.controls['RPregunta18Si'].setValidators([Validators.required, Validators.pattern('[a-zA-ZñÑ ]+')]);
        this.entrevistaForm.controls['RPregunta19Si'].setErrors({ 'incorrect': true });
        this.entrevistaForm.controls['RPregunta19Si'].setValidators([Validators.required]);
        this.entrevistaForm.controls['RPregunta29Si'].setErrors({ 'incorrect': true });
        this.entrevistaForm.controls['RPregunta29Si'].setValidators([Validators.required]);
        this.entrevistaForm.get('RPregunta18Si')?.setValue('');
        this.entrevistaForm.get('RPregunta19Si')?.setValue('');
        this.entrevistaForm.get('RPregunta29Si')?.setValue('');
      } else {
        this.DesbloquearRespuesta17 = true;
        this.entrevistaForm.controls['RPregunta18Si'].setErrors(null);
        this.entrevistaForm.controls['RPregunta18Si'].clearValidators();
        this.entrevistaForm.controls['RPregunta18Si'].setValidators(null);
        this.entrevistaForm.controls['RPregunta19Si'].setErrors(null);
        this.entrevistaForm.controls['RPregunta19Si'].clearValidators();
        this.entrevistaForm.controls['RPregunta19Si'].setValidators(null);
        this.entrevistaForm.controls['RPregunta29Si'].clearValidators();
        this.entrevistaForm.controls['RPregunta29Si'].setValidators(null)
        this.entrevistaForm.get('RPregunta18Si')?.reset();
        this.entrevistaForm.get('RPregunta19Si')?.reset();
        this.entrevistaForm.get('RPregunta18Si')?.setValue('');
        this.entrevistaForm.get('RPregunta19Si')?.setValue('');
        this.entrevistaForm.get('RPregunta29Si')?.setValue('');
      }
    }
    // Desbloquea los campos para la respuesta 23 y los PEPS - AQUI ELIMINAR LOS REGISTROS SI SELECCIONA QUE NO
    if (idP === 23) {
      if (idP === 23 && data === 'si') {
        this.DesbloquearRespuesta17 = null;
        this.mostrarFemiliaresPeps = true;
      } else {
        this.DesbloquearRespuesta17 = true;
        this.mostrarFemiliaresPeps = false;
      }
    }
  }

  validateSiNoPeps(data : any, idP : any) {
    this.EnableUpdateEntrevista = true;
    if (idP === 3) {
      if (data === 'si') {
        this.entrevistaForm.get('RPregunta3Si')?.setValue(true);
        this.entrevistaForm.get('RPregunta3No')?.setValue(false);
        this.entrevistaForm.get('RPregunta4Si')?.setValue(false);
        this.entrevistaForm.get('RPregunta4No')?.setValue(true);
      } else if (data === 'No') {
        this.entrevistaForm.get('RPregunta3Si')?.setValue(false);
        this.entrevistaForm.get('RPregunta3No')?.setValue(true);
        this.entrevistaForm.get('RPregunta4Si')?.setValue(true);
        this.entrevistaForm.get('RPregunta4No')?.setValue(false);
      }

    } else if (idP === 4) {
      if (data === 'si') {
        this.entrevistaForm.get('RPregunta4Si')?.setValue(true);
        this.entrevistaForm.get('RPregunta4No')?.setValue(false);
        this.entrevistaForm.get('RPregunta3Si')?.setValue(false);
        this.entrevistaForm.get('RPregunta3No')?.setValue(true);
      } else if (data === 'No') {
        this.entrevistaForm.get('RPregunta4Si')?.setValue(false);
        this.entrevistaForm.get('RPregunta4No')?.setValue(true);
        this.entrevistaForm.get('RPregunta3Si')?.setValue(true);
        this.entrevistaForm.get('RPregunta3No')?.setValue(false);
      }
    }

  }

  setDataEntrevista() {
      this.allItemFormEntrevista = [];
    if (this.basicosFrom.value.tipoCliente === '15') {
          // Valida la pregunta 1
          if (this.entrevistaForm.value.RPregunta1Si === null && this.entrevistaForm.value.RPregunta1No === null) {
            this.validoPregunta1 = false;
          } else {
            this.validoPregunta1 = true;
          }
          // valida la pregunta 2 y que la 3 y 4 llegen si marca SI
          if (this.entrevistaForm.value.RPregunta2Si !== null) {
            if (this.entrevistaForm.value.RPregunta2Si === true &&
              ((this.entrevistaForm.value.RPregunta3Si === null || this.entrevistaForm.value.RPregunta3Si === undefined ||
                this.entrevistaForm.value.RPregunta3Si === '')
                || (this.entrevistaForm.value.RPregunta4Si === null || this.entrevistaForm.value.RPregunta4Si === undefined ||
                  this.entrevistaForm.value.RPregunta4Si === ''))) {
              this.validoPregunta2 = false;
            } else {
              if (this.entrevistaForm.value.RPregunta2Si === false) {
                this.validoPregunta2 = true;
              } else {
                this.validoPregunta2 = true;
              }
            }
          } else {
            this.validoPregunta2 = false;
          }

          // Valida la pregunta 5
          if (this.entrevistaForm.value.RPregunta5Si === null || this.entrevistaForm.value.RPregunta5Si === undefined ||
            this.entrevistaForm.value.RPregunta5Si === '' || this.entrevistaForm.value.RPregunta5Si === 'false') {
            this.validoPregunta5 = false;
          } else {
            this.validoPregunta5 = true;
          }

          // Valida la ppregunta 6
          if (this.entrevistaForm.value.RPregunta6Si !== null) {
            if (this.entrevistaForm.value.RPregunta6Si === true) {
              if (this.entrevistaForm.value.RPregunta6Si === true &&
                (this.entrevistaForm.value.RPregunta7Si === null || this.entrevistaForm.value.RPregunta7Si === undefined ||
                  this.entrevistaForm.value.RPregunta7Si === '') ||
                (this.entrevistaForm.value.RPregunta11Si === null || this.entrevistaForm.value.RPregunta11Si === undefined ||
                  this.entrevistaForm.value.RPregunta11Si === '') ||
                (this.entrevistaForm.value.RPregunta12Si === null || this.entrevistaForm.value.RPregunta12Si === undefined ||
                  this.entrevistaForm.value.RPregunta12Si === '') ||
                (this.entrevistaForm.value.RPregunta13Si === null || this.entrevistaForm.value.RPregunta13Si === undefined ||
                  this.entrevistaForm.value.RPregunta13Si === '') ||
                (this.entrevistaForm.value.RPregunta24Si === null || this.entrevistaForm.value.RPregunta24Si === undefined ||
                  this.entrevistaForm.value.RPregunta24Si === '') ||
                (this.entrevistaForm.value.RPregunta25Si === null || this.entrevistaForm.value.RPregunta25Si === undefined ||
                  this.entrevistaForm.value.RPregunta25Si === '')) {
                this.validoPregunta6 = false;
              } else {
                if (this.entrevistaForm.value.RPregunta6Si === true && (this.entrevistaForm.value.RPregunta8Si !== null ||
                  this.entrevistaForm.value.RPregunta9Si !== null || this.entrevistaForm.value.RPregunta10Si !== null)) {
                  this.validoPregunta6 = true;
                } else if (this.entrevistaForm.value.RPregunta6Si === true && (this.entrevistaForm.value.RPregunta8Si === null ||
                  this.entrevistaForm.value.RPregunta9Si === null || this.entrevistaForm.value.RPregunta10Si === null)) {
                  this.validoPregunta6 = false;
                }
              }
            } else {
              this.validoPregunta6 = true;
            }

          } else {
            this.validoPregunta6 = false;
          }

          // valida la pregunta 14
          if (this.entrevistaForm.value.RPregunta14Si !== null) {
            if (this.entrevistaForm.value.RPregunta14Si === true &&
              ((this.entrevistaForm.value.RPregunta15Si === null || this.entrevistaForm.value.RPregunta15Si === undefined ||
                this.entrevistaForm.value.RPregunta15Si === '') ||
                (this.entrevistaForm.value.RPregunta16Si === null || this.entrevistaForm.value.RPregunta16Si === undefined ||
                  this.entrevistaForm.value.RPregunta16Si === ''))) {
              this.validoPregunta14 = false;
            } else {
              if (this.entrevistaForm.value.RPregunta14Si === false) {
                this.validoPregunta14 = true;
              } else {
                this.validoPregunta14 = true;
              }
            }
          } else {
            this.validoPregunta14 = false;
          }

          // Valida la pregunta 17
          if (this.entrevistaForm.value.RPregunta17Si !== null) {
            if (this.entrevistaForm.value.RPregunta17Si === true &&
              ((this.entrevistaForm.value.RPregunta18Si === null || this.entrevistaForm.value.RPregunta18Si === undefined ||
                this.entrevistaForm.value.RPregunta18Si === '') ||
                (this.entrevistaForm.value.RPregunta19Si === null || this.entrevistaForm.value.RPregunta19Si === undefined ||
                  this.entrevistaForm.value.RPregunta19Si === ''))) {
              this.validoPregunta17 = false;
            } else {
              if (this.entrevistaForm.value.RPregunta17Si === false) {
                this.validoPregunta17 = true;
              } else {
                this.validoPregunta17 = true;
              }
            }
          } else {
            this.validoPregunta17 = false;
          }
          if (this.entrevistaForm.value.RPregunta28Si === null && this.entrevistaForm.value.RPregunta28No === null) {
            this.validoPregunta28 = false;
          } else {
            this.validoPregunta28 = true;
          }
          if (this.validoPregunta1 && this.validoPregunta2 && this.validoPregunta5 &&
            this.validoPregunta6 && this.validoPregunta14 && this.validoPregunta17  && this.validoPregunta28) {
            this.registroEntrevista();
          } else if (!this.validoPregunta1 && !this.validoPregunta2 && !this.validoPregunta5 &&
            !this.validoPregunta6 && !this.validoPregunta14 && !this.validoPregunta17  && this.validoPregunta28) {
            this.allItemFormEntrevista.push(this.entrevistaForm.value);
            this.registroEntrevista();
          } else {
            if (this.basicosFrom.get('tipoCliente')?.value === '15') {
              if (this.entrevistaForm.get('RPregunta5Si')?.value === null) {
                this.registroEntrevista(); 
              }
            } else {
              this.relacionPepsForm.reset();
              this.notif.onWarning('Advertencia', 'Debe responder todas las preguntas.');
           
            }
          }

    } else {
      // Valida la pregunta 1
      if (this.entrevistaForm.value.RPregunta1Si === null && this.entrevistaForm.value.RPregunta1No === null) {
        this.validoPregunta1 = false;
      } else {
        this.validoPregunta1 = true;
      }
      // valida la pregunta 2 y que la 3 y 4 llegen si marca SI
      if (this.entrevistaForm.value.RPregunta2Si !== null) {
        if (this.entrevistaForm.value.RPregunta2Si === true &&
          ((this.entrevistaForm.value.RPregunta3Si === null || this.entrevistaForm.value.RPregunta3Si === undefined ||
            this.entrevistaForm.value.RPregunta3Si === '')
            || (this.entrevistaForm.value.RPregunta4Si === null || this.entrevistaForm.value.RPregunta4Si === undefined ||
              this.entrevistaForm.value.RPregunta4Si === ''))) {
          this.validoPregunta2 = false;
        } else {
          if (this.entrevistaForm.value.RPregunta2Si === false) {
            this.validoPregunta2 = true;
          } else {
            this.validoPregunta2 = true;
          }
        }
      } else {
        this.validoPregunta2 = false;
      }
      // Valida la pregunta 5
      if (this.entrevistaForm.value.RPregunta5Si === null || this.entrevistaForm.value.RPregunta5Si === undefined ||
        this.entrevistaForm.value.RPregunta5Si === '' || this.entrevistaForm.value.RPregunta5Si === 'false') {
        this.validoPregunta5 = false;
      } else {
        this.validoPregunta5 = true;
      }
      // Valida la ppregunta 6
      if (this.entrevistaForm.value.RPregunta6Si !== null) {
        if (this.entrevistaForm.value.RPregunta6Si === true) {
            if (this.entrevistaForm.value.RPregunta6Si === true &&
              (this.entrevistaForm.value.RPregunta7Si === null || this.entrevistaForm.value.RPregunta7Si === undefined ||
                this.entrevistaForm.value.RPregunta7Si === '') ||
              (this.entrevistaForm.value.RPregunta11Si === null || this.entrevistaForm.value.RPregunta11Si === undefined ||
                this.entrevistaForm.value.RPregunta11Si === '') ||
              (this.entrevistaForm.value.RPregunta12Si === null || this.entrevistaForm.value.RPregunta12Si === undefined ||
                this.entrevistaForm.value.RPregunta12Si === '') ||
              (this.entrevistaForm.value.RPregunta13Si === null || this.entrevistaForm.value.RPregunta13Si === undefined ||
                this.entrevistaForm.value.RPregunta13Si === '') ||
              (this.entrevistaForm.value.RPregunta24Si === null || this.entrevistaForm.value.RPregunta24Si === undefined ||
                this.entrevistaForm.value.RPregunta24Si === '') ||
              (this.entrevistaForm.value.RPregunta25Si === null || this.entrevistaForm.value.RPregunta25Si === undefined ||
                this.entrevistaForm.value.RPregunta25Si === '')) {
              this.validoPregunta6 = false;
            } else {
                if (this.entrevistaForm.value.RPregunta6Si === true && (this.entrevistaForm.value.RPregunta8Si !== null ||
                    this.entrevistaForm.value.RPregunta9Si !== null || this.entrevistaForm.value.RPregunta10Si !== null)) {
                    this.validoPregunta6 = true;
                } else if ( this.entrevistaForm.value.RPregunta6Si === true && (this.entrevistaForm.value.RPregunta8Si === null ||
                    this.entrevistaForm.value.RPregunta9Si === null || this.entrevistaForm.value.RPregunta10Si === null)) {
                    this.validoPregunta6 = false;
                }
            }
        } else {
          this.validoPregunta6 = true;
        }
      } else {
        this.validoPregunta6 = false;
      }
      // valida la pregunta 14
      if (this.entrevistaForm.value.RPregunta14Si !== null) {
        if (this.entrevistaForm.value.RPregunta14Si === true &&
          ((this.entrevistaForm.value.RPregunta15Si === null || this.entrevistaForm.value.RPregunta15Si === undefined ||
          this.entrevistaForm.value.RPregunta15Si === '') ||
          (this.entrevistaForm.value.RPregunta16Si === null || this.entrevistaForm.value.RPregunta16Si === undefined ||
          this.entrevistaForm.value.RPregunta16Si === '') )) {
          this.validoPregunta14 = false;
        } else {
          if (this.entrevistaForm.value.RPregunta14Si === false) {
            this.validoPregunta14 = true;
          } else {
            this.validoPregunta14 = true;
          }
        }
      } else {
        this.validoPregunta14 = false;
      }
      // Valida la pregunta 17
      if (this.entrevistaForm.value.RPregunta17Si !== null) {
        if (this.entrevistaForm.value.RPregunta17Si === true &&
          ((this.entrevistaForm.value.RPregunta18Si === null || this.entrevistaForm.value.RPregunta18Si === undefined ||
          this.entrevistaForm.value.RPregunta18Si === '') ||
          (this.entrevistaForm.value.RPregunta19Si === null || this.entrevistaForm.value.RPregunta19Si === undefined ||
            this.entrevistaForm.value.RPregunta19Si === '') ||
          (this.entrevistaForm.value.RPregunta29Si === null || this.entrevistaForm.value.RPregunta29Si === undefined ||
            this.entrevistaForm.value.RPregunta29Si === ''))) {
          this.validoPregunta17 = false;
        } else {
          if (this.entrevistaForm.value.RPregunta17Si === false) {
            this.validoPregunta17 = true;
          } else {
            this.validoPregunta17 = true;
          }
        }
      } else {
        this.validoPregunta17 = false;
      }
      // Valida pregunta 28
      if (this.entrevistaForm.value.RPregunta28Si === null && this.entrevistaForm.value.RPregunta28No === null) {
        this.validoPregunta28 = false;
      } else {
        this.validoPregunta28 = true;
      }
      if (this.validoPregunta1 && this.validoPregunta2 && this.validoPregunta5 &&
        this.validoPregunta6 && this.validoPregunta14 && this.validoPregunta17 && this.validoPregunta28) {
          this.registroEntrevista();
      } else {
        this.relacionPepsForm.reset();
        this.notif.onWarning('Advertencia', 'Debe responder todas las preguntas.');
      }
    }
  }

  registroEntrevista() {
    const results = this.basicosFrom.get('operacion')?.value;
    if (results === '5') {
      this.allItemsFormSaves.entrevistaDto = {};
      this.allItemEntrevista = [];
      this.allItemsPeps = [];
      this.entrevistaSave.get('EntrevistaDto')?.setValue([]);
      this.allItemFormEntrevista = [];
      this.allItemFormEntrevista.push(this.entrevistaForm.value);
      this.allItemFormEntrevista.forEach(elementa => {
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(1);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta1Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(2);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta2Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(3);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta3Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(4);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta4Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(5);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta5Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(6);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta6Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(7);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta7Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(8);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta8Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(9);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta9Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(10);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta10Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(11);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta11Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        if (elementa.RPregunta12Si !== null) {
          this.entrevistaFormSet.get('NumeroPregunta')?.setValue(12);
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta12Si.IdPais);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        } else {
          this.entrevistaFormSet.get('NumeroPregunta')?.setValue(12);
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta12Si);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        }
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(13);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta13Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(14);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta14Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        if (elementa.RPregunta15Si !== null) {
          this.entrevistaFormSet.get('NumeroPregunta')?.setValue(15);
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta15Si.IdPais);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        } else {
          this.entrevistaFormSet.get('NumeroPregunta')?.setValue(15);
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta15Si);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        }
        if (elementa.RPregunta16Si !== null) {
          this.entrevistaFormSet.get('NumeroPregunta')?.setValue(16);
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta16Si.Id);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        } else {
          this.entrevistaFormSet.get('NumeroPregunta')?.setValue(16);
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta16Si);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        }
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(17);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta17Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        if (elementa.RPregunta18Si !== null) {
          this.entrevistaFormSet.get('NumeroPregunta')?.setValue(18);
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta18Si.IdPais);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        } else {
          this.entrevistaFormSet.get('NumeroPregunta')?.setValue(18);
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta18Si);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        }
        if (elementa.RPregunta19Si !== null) {
          this.entrevistaFormSet.get('NumeroPregunta')?.setValue(19);
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta19Si.Id);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        } else {
          this.entrevistaFormSet.get('NumeroPregunta')?.setValue(19);
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta19Si);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        }
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(20);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta20Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(21);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta21Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(22);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta22Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(23);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta23Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(24);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta24Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        if (elementa.RPregunta25Si !== null) {
          this.entrevistaFormSet.get('NumeroPregunta')?.setValue(25);
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta25Si.Id);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        } else {
          this.entrevistaFormSet.get('NumeroPregunta')?.setValue(25);
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta25Si);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        }
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(26);
        if (elementa.RPregunta26Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta26Si);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        } else {
          this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
      
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(28);
        if (elementa.RPregunta28Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta28Si);
          this.allItemEntrevista.push(this.entrevistaFormSet.value);
        } else {
          this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(29);
        this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta29Si);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
      });

      this.allItemsFormSaves.entrevistaDto = this.allItemEntrevista;
      this.entrevistaSave.get('EntrevistaDto')?.setValue(this.allItemEntrevista);
      this.allItemsFormSaves.listaDePeps = this.allItemsPeps;
      this.entrevistaForm.get('listPEPS')?.setValue(this.itemRelacionPeps);
      this.allItemsFormSave.push(this.entrevistaSave.value);
      if (this.itemRelacionPeps != null) {
        this.itemRelacionPeps.forEach(( elementpeps: any ) => {
          this.relacionPepsForm.get('IdPregunta')?.setValue(elementpeps.IdPregunta);
          this.relacionPepsForm.get('NombreCompleto')?.setValue(elementpeps.NombreCompleto);
          this.relacionPepsForm.get('Identificacion')?.setValue(elementpeps.Identificacion);
          this.relacionPepsForm.get('Cargo')?.setValue(elementpeps.Cargo.Clase);
          this.relacionPepsForm.get('PeriodoDesde')?.setValue(elementpeps.PeriodoDesde);
          this.relacionPepsForm.get('PeriodoHasta')?.setValue(elementpeps.PeriodoHasta);
          this.relacionPepsForm.get('IdParentesco')?.setValue(elementpeps.IdParentesco.IdParentesco);
          this.relacionPepsForm.get('IdTercero')?.setValue(elementpeps.IdTercero);
          this.allItemsPeps.push(this.relacionPepsForm.value);
        });
        this.allItemsFormSaves.listaDePeps = this.allItemsPeps;
        this.relacionPepsSave.get('ListaDePeps')?.setValue(this.allItemsPeps);
        this.allItemsFormSave.push(this.relacionPepsSave.value);
      } else {
        this.allItemsFormSaves.listaDePeps = [];
        this.relacionPepsSave.get('ListaDePeps')?.setValue([]);
        this.allItemsFormSave.push(this.relacionPepsSave.value);
      }
      $('#entrevistaTab').removeClass('activar');
      $('#entrevistaTab').removeClass('active');
      $('#seguroTab').removeClass('disableTab');
      this.botonEntrevistaSiguiente.nativeElement.click();
      this.disableTabSeguro = true;
      this.devolverTab(9);
      this.VolverArriba();
      this.variableGlobalFalse = null;

    } else if (results === '1') {
      this.allItemsFormSaves.entrevistaDto = {};
      this.allItemEntrevista = [];
      this.entrevistaSave.get('EntrevistaDto')?.setValue([]);
      this.allItemFormEntrevista = [];
      this.allItemFormEntrevista.push(this.entrevistaForm.value);
      this.allItemFormEntrevista.forEach((elementa :any) => {
        const tercerEdit = localStorage.getItem('TerceroNatura');
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(1);
        if (elementa.RPregunta1Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta1Si);
        } else {
          if (elementa.RPregunta1No) {
            this.entrevistaFormSet.get('Respuesta')?.setValue(false);
          }
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(2);
        if (elementa.RPregunta2Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta2Si);
        } else {
          if (elementa.RPregunta2No) {
            this.entrevistaFormSet.get('Respuesta')?.setValue(false);
          }
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(3);
        if (elementa.RPregunta3Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta3Si);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(4);
        if (elementa.RPregunta4Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta4Si);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(5);
        if (elementa.RPregunta5Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta5Si);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(6);
        if (elementa.RPregunta6Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta6Si);
        } else {
          if (elementa.RPregunta6No) {
            this.entrevistaFormSet.get('Respuesta')?.setValue(false);
          }
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(7);
        if (elementa.RPregunta7Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta7Si);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(8);
        if (elementa.RPregunta8Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta8Si);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(9);
        if (elementa.RPregunta9Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta9Si);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(10);
        if (elementa.RPregunta10Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta10Si);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(11);
        if (elementa.RPregunta11Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta11Si);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
         this.entrevistaFormSet.get('NumeroPregunta')?.setValue(12);
        if (elementa.RPregunta12Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta12Si.IdPais);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
         this.entrevistaFormSet.get('NumeroPregunta')?.setValue(13);
        if (elementa.RPregunta13Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta13Si);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
         this.entrevistaFormSet.get('NumeroPregunta')?.setValue(14);
        if (elementa.RPregunta14Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta14Si);
        } else {
          if (elementa.RPregunta14No) {
            this.entrevistaFormSet.get('Respuesta')?.setValue(false);
          }
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);

         this.entrevistaFormSet.get('NumeroPregunta')?.setValue(15);
        if (elementa.RPregunta15Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta15Si.IdPais);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(16);
        if (elementa.RPregunta16Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta16Si.Id);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(17);
        if (elementa.RPregunta17Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta17Si);
        } else {
          if (elementa.RPregunta17No) {
            this.entrevistaFormSet.get('Respuesta')?.setValue(false);
          }
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
         this.entrevistaFormSet.get('NumeroPregunta')?.setValue(18);
        if (elementa.RPregunta18Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta18Si.IdPais);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(19);
        if (elementa.RPregunta19Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta19Si.Id);
        } else {
            this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(20);
        if (elementa.RPregunta20Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta20Si.Id);
        } else {
          this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
         this.entrevistaFormSet.get('NumeroPregunta')?.setValue(21);
        if (elementa.RPregunta21Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta21Si.Id);
        } else {
          this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(22);
        if (elementa.RPregunta22Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta22Si.Id);
        } else {
          this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(23);
        if (elementa.RPregunta23Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta23Si.Id);
        } else {
          this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }
        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(24);
        if (elementa.RPregunta24Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta24Si);
        } else {
          this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }

        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(25);
        if (elementa.RPregunta25Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta25Si.Id);
        } else {
          this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }

        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(26);
        if (elementa.RPregunta26Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta26Si.Id);
        } else {
          this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }

        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(28);
        if (elementa.RPregunta28Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta28Si);
        } else {
          this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }

        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
        this.entrevistaFormSet.get('NumeroPregunta')?.setValue(29);
        if (elementa.RPregunta29Si !== null) {
          this.entrevistaFormSet.get('Respuesta')?.setValue(elementa.RPregunta29Si);
        } else {
          this.entrevistaFormSet.get('Respuesta')?.setValue(null);
        }

        this.entrevistaFormSet.get('IdEntrevista')?.setValue(elementa.idEntrevista);
        this.entrevistaFormSet.get('IdTercero')?.setValue(tercerEdit);
        this.allItemEntrevista.push(this.entrevistaFormSet.value);
      });
      this.allItemsFormSaves.entrevistaDto = this.allItemEntrevista;
      this.entrevistaSave.get('EntrevistaDto')?.setValue(this.allItemEntrevista);
      this.allItemsFormSave.push(this.entrevistaSave.value);
      this.EditarEntrevista(this.allItemEntrevista);
      this.devolverTab(8);
      this.VolverArriba();
      this.variableGlobalFalse = null;
    }
  }

  habilitarActualizar() {
    const results = +this.basicosFrom.get('operacion')?.value;
    if (results === 1) {
      this.EnableUpdateEntrevista = true;
    } else {
      this.EnableUpdateEntrevista = false;
    }
  }

  setRelacionPeps(pregunta : number) {
    this.EnableUpdateEntrevista = true;
    this.blockBtnBasico = null;
    this.formBuscarLocked = false;
    this.relacionPepsForm.get('IdPregunta')?.setValue(pregunta);
    const tercerEdit = localStorage.getItem('TerceroNatura');
    this.relacionPepsForm.get('IdTercero')?.setValue(tercerEdit);
    if (this.itemRelacionPeps.length < 4) {
      this.itemRelacionPeps.push(this.relacionPepsForm.value);
    } else {
      this.notif.onWarning('Advertencia', 'Solo puede agregar cuatro (4) PEPS.');
    }
    this.relacionPepsForm.reset();
  }

  deletePepsRelacionados(index : any) {
    this.EnableUpdateEntrevista = true;
    this.itemRelacionPeps.splice(index, 1);
  }

  selectAutomaticoDropEntrevista() {
    this.entrevistaForm.get('RPregunta12Si')?.setValue('');
    this.entrevistaForm.get('RPregunta15Si')?.setValue('');
    this.entrevistaForm.get('RPregunta16Si')?.setValue('');
    this.entrevistaForm.get('RPregunta18Si')?.setValue('');
    this.entrevistaForm.get('RPregunta19Si')?.setValue('');
  }

  validarCamposNumericos(campo : string, value : any) {
    if (!isNaN(value)) {
      this.entrevistaForm.get('' + campo + '')?.reset();
    }
  }


  //#endregion

  //#region Metodos de SEGUROS

  cleanSeguro() {
    this.indexSeguro = null;
    this.segurosForm.reset();
    this.Blockseguro = null;
    this.BlockMonto = null;
    this.BlockEstado = null;
    this.mostrarCobertura = false;
    this.mostrarPorQueCobertura = false;
  }

  addItemsSeguro() {
    const valor = this.segurosForm.get('tieneSeguro')?.value;
    const operacion = this.basicosFrom.get('operacion')?.value;
    if (operacion === '5') {
      if (!valor && this.segurosForm.value.montoAsegurado === 0 &&
        (this.segurosForm.value.estadoSeguro.Id !== 3 && this.segurosForm.value.estadoSeguro.Id !== 7)) {
        this.notif.onWarning('Advertencia',
          'El Monto asegurado debe ser mayor que 0.');
      } else {
        let validarSeguro = false;
        if (this.segurosForm.value.seguro !== '' &&
          this.segurosForm.value.montoAsegurado !== '' &&
          this.segurosForm.value.seguro !== null &&
          this.segurosForm.value.montoAsegurado !== null &&
          this.segurosForm.value.estadoSeguro !== null) {
          if (this.itemsSeguro.length >= 1) {
            this.itemsSeguro.forEach(elementsItem => {
              if (elementsItem.seguro.Clase === this.segurosForm.value.seguro.Clase) {
                validarSeguro = true;
              }
            });
            if (validarSeguro) {
              this.notif.onWarning('Advertencia',
                'El tipo de seguro ya fue ingresado.');
              this.Blockseguro = null;
              this.BlockMonto = null;
              this.BlockEstado = null;
              this.segurosForm.get('seguro')?.reset();
              this.segurosForm.get('estadoSeguro')?.reset();
              this.segurosForm.get('tieneSeguro')?.setValue(false);
              this.mostrarCobertura = true;
              this.mostrarPorQueCobertura = false;
              this.segurosForm.get('DescripcionTieneSeguro')?.reset();
              this.segurosForm.controls['DescripcionTieneSeguro'].setErrors(null);
              this.segurosForm.controls['DescripcionTieneSeguro'].clearValidators();
              this.segurosForm.controls['DescripcionTieneSeguro'].setValidators(null);
            } else {
              if (this.indexSeguro !== null) {
                // aqui debe agregar el editado al nuevo modelo
                this.segurosForm.get('seguro')?.setValue(this.segurosEdit.value.EditSeguro);
                this.itemsSeguro.splice(this.indexSeguro, 1);
                this.itemsSeguro.push(this.segurosForm.value);
                this.itemsSeguroEdit.push(this.segurosForm.value);
                this.indexSeguro = null;
                this.Blockseguro = null;
                this.BlockMonto = null;
                this.BlockEstado = null;
                this.segurosForm.reset();
                this.segurosForm.controls['DescripcionTieneSeguro'].setErrors(null);
                this.segurosForm.controls['DescripcionTieneSeguro'].clearValidators();
                this.segurosForm.controls['DescripcionTieneSeguro'].setValidators(null);
                this.mostrarPorQueCobertura = false;
                this.BlockMonto = null;
              } else {

                const fechaCrea = moment(new Date()).format();
                this.segurosForm.get('fechaCreacion')?.setValue(fechaCrea);
                this.itemsSeguro.push(this.segurosForm.value);
                this.segurosForm.reset();
                this.segurosForm.get('tratamiento')?.setValue(true);
                this.segurosForm.get('debitoAuto')?.setValue(true);
                this.Blockseguro = null;
                this.BlockMonto = null;
                this.BlockEstado = null;
                this.segurosForm.controls['DescripcionTieneSeguro'].setErrors(null);
                this.segurosForm.controls['DescripcionTieneSeguro'].clearValidators();
                this.segurosForm.controls['DescripcionTieneSeguro'].setValidators(null);
                this.mostrarPorQueCobertura = false;
                this.BlockMonto = null;
              }
            }

          } else {

            this.itemsSeguro.push(this.segurosForm.value);
            this.segurosForm.reset();
            this.segurosForm.get('tratamiento')?.setValue(true);
            this.segurosForm.get('debitoAuto')?.setValue(true);
            this.BlockMonto = null;
            this.BlockEstado = null;
          }
        } else {
          this.notif.onWarning('Advertencia',
            'Debe llenar los campos obligatorios.',
            );
        }
      }
    } else if (operacion === '1') {
      if (!valor && this.segurosForm.value.montoAsegurado === 0 &&
        (this.segurosForm.value.estadoSeguro.Id !== 3 && this.segurosForm.value.estadoSeguro.Id !== 7 )) {
        this.notif.onWarning('Advertencia',
          'El Monto asegurado debe ser mayor que 0.');
      } else {
        let validarSeguro = false;
        if (this.segurosForm.value.seguro !== '' &&
          this.segurosForm.value.montoAsegurado !== '' &&
          this.segurosForm.value.seguro !== null &&
          this.segurosForm.value.montoAsegurado !== null &&
          this.segurosForm.value.estadoSeguro !== null) {
          if (this.indexSeguro !== null) {
            // aqui debe agregar el editado al nuevo modelo
            this.segurosForm.get('seguro')?.setValue(this.segurosEdit.value.EditSeguro);
            this.itemsSeguro.splice(this.indexSeguro, 1);
            this.itemsSeguro.push(this.segurosForm.value);
            this.itemsSeguroEdit.push(this.segurosForm.value);
            this.indexSeguro = null;
            this.Blockseguro = null;
            this.segurosForm.reset();
            this.EnableUpdateSeguros = true;
            this.BlockMonto = null;
            this.BlockEstado = null;
            this.segurosForm.controls['DescripcionTieneSeguro'].setErrors(null);
            this.segurosForm.controls['DescripcionTieneSeguro'].clearValidators();
            this.segurosForm.controls['DescripcionTieneSeguro'].setValidators(null);
            this.mostrarPorQueCobertura = false;
            this.BlockMonto = null;
          } else {
            // aqui debe agregar uno nuevo al item
            if (this.itemsSeguro.length >= 1) {
              this.itemsSeguro.forEach(elementsItem => {
                if (elementsItem.seguro.Clase === this.segurosForm.value.seguro.Clase) {
                  validarSeguro = true;
                }
              });

              if (validarSeguro) {
                this.EnableUpdateSeguros = false;
                this.notif.onWarning('Advertencia',
                  'El tipo de seguro ya fue ingresado.');
                this.Blockseguro = null;
                this.BlockMonto = null;
                this.BlockEstado = null;
                this.segurosForm.get('seguro')?.reset();
                this.segurosForm.get('estadoSeguro')?.reset();
                this.segurosForm.get('tieneSeguro')?.setValue(false);
                this.mostrarCobertura = true;
                this.mostrarPorQueCobertura = false;
                this.segurosForm.get('DescripcionTieneSeguro')?.reset();
                this.segurosForm.controls['DescripcionTieneSeguro'].setErrors(null);
                this.segurosForm.controls['DescripcionTieneSeguro'].clearValidators();
                this.segurosForm.controls['DescripcionTieneSeguro'].setValidators(null);
              } else {
                const fechaCrea = moment(new Date()).format();
                this.segurosForm.get('fechaCreacion')?.setValue(fechaCrea);
                this.itemsSeguro.push(this.segurosForm.value);
                this.itemsSeguroEdit.push(this.segurosForm.value);
                this.segurosForm.reset();
                this.EnableUpdateSeguros = true;
                this.BlockMonto = null;
                this.segurosForm.controls['DescripcionTieneSeguro'].setErrors(null);
                this.segurosForm.controls['DescripcionTieneSeguro'].clearValidators();
                this.segurosForm.controls['DescripcionTieneSeguro'].setValidators(null);
                this.mostrarPorQueCobertura = false;
                this.BlockMonto = null;
                this.BlockEstado = null;
              }
            } else {
              this.itemsSeguro.forEach(elementsItem => {
                if (elementsItem.seguro.Clase === this.segurosForm.value.seguro.Clase) {
                  validarSeguro = true;
                }
              });
           if (validarSeguro) {
                this.EnableUpdateSeguros = false;
                this.notif.onWarning('Advertencia',
                  'El tipo de seguro ya fue ingresado.');
                this.Blockseguro = null;
                this.BlockMonto = null;
                this.BlockEstado = null;
                this.segurosForm.get('seguro')?.reset();
                this.segurosForm.get('estadoSeguro')?.reset();
                this.segurosForm.get('tieneSeguro')?.setValue(false);
                this.mostrarCobertura = true;
                this.mostrarPorQueCobertura = false;
                this.segurosForm.get('DescripcionTieneSeguro')?.reset();
                this.segurosForm.controls['DescripcionTieneSeguro'].setErrors(null);
                this.segurosForm.controls['DescripcionTieneSeguro'].clearValidators();
                this.segurosForm.controls['DescripcionTieneSeguro'].setValidators(null);
              } else {
                const fechaCrea = moment(new Date()).format();
                this.segurosForm.get('fechaCreacion')?.setValue(fechaCrea);
                this.itemsSeguro.push(this.segurosForm.value);
                this.itemsSeguroEdit.push(this.segurosForm.value);
                this.segurosForm.reset();
                this.EnableUpdateSeguros = true;
                this.BlockMonto = null;
                this.BlockEstado = null;
                this.segurosForm.controls['DescripcionTieneSeguro'].setErrors(null);
                this.segurosForm.controls['DescripcionTieneSeguro'].clearValidators();
                this.segurosForm.controls['DescripcionTieneSeguro'].setValidators(null);
                this.mostrarPorQueCobertura = false;
                this.BlockMonto = null;
              }
            }
          }
        } else {
          this.EnableUpdateSeguros = false;
          this.notif.onWarning('Advertencia',
            'Debe llenar los campos obligatorios.');
        }
      }
    } else {
      this.notif.onWarning('Advertencia',
        'Debe seleccionar una operación válida.');
      this.segurosForm.reset();
      this.segurosForm.get('tratamiento')?.setValue(true);
    }
  }

  deleteItems(index : number, data : any, datosSeguro : any) {
    const operacion = this.basicosFrom.get('operacion')?.value;
    if (operacion === '1') {
      if (datosSeguro.seguro.Clase === 10 || datosSeguro.seguro.Clase === 20) {
        this.EnableUpdateSeguros = false;
        this.notif.onWarning('Advertencia',
          'No se puede eliminar el seguro "Vida individual", es obligatorio.',
          );
      } else {
        if (data !== 2) {
          datosSeguro.estadoSeguro = 0;
          if (datosSeguro.idAsegurado !== null) {
            this.EnableUpdateSeguros = true;
            this.itemsSeguroEdit.push(datosSeguro);
          } else {
            this.EnableUpdateSeguros = true;
            this.itemsSeguroEdit.splice(index - 1, 1);
          }
          this.itemsSeguro.splice(index, 1);
          this.EnableUpdateSeguros = true;
        } else {
          this.itemsAsegurado.splice(index, 1);
          this.EnableUpdateSeguros = true;
        }
      }
    } else {
      if (data !== 2) {
        datosSeguro.estadoSeguro = 0;
        if (datosSeguro.idAsegurado !== null) {
          this.EnableUpdateSeguros = true;
          this.itemsSeguroEdit.push(datosSeguro);
        } else {
          this.EnableUpdateSeguros = true;
          this.itemsSeguroEdit.splice(index - 1, 1);
        }
        this.EnableUpdateSeguros = true;
        this.itemsSeguro.splice(index, 1);
      } else {
        this.EnableUpdateSeguros = true;
        this.itemsAsegurado.splice(index, 1);
      }
    }
  }

  setDataSeguro() {
    const operacion = this.basicosFrom.get('operacion')?.value;
    const tercerEdit = localStorage.getItem('TerceroNatura');
    if (operacion === '5') {
      this.allItemsFormSaves.tratamientoDto = {};
      this.allItemsFormSaves.segurosDto = {};
      this.allItemsFormSeguro = [];
      this.allItemsFormLogSeguro = [];
      let validarSeguro = 0;
      if (this.itemsSeguro.length <= 0 && this.basicosFrom.value.tipoCliente === '15') { // si es tercero y no tiene seguros dejelo ir

          if (this.segurosForm.get('tratamiento')?.value) {
              this.tratamientoForm.get('Acepto')?.setValue(this.segurosForm.get('tratamiento')?.value);
              this.tratamientoForm.get('FechaAceptacion')?.setValue(formatDate(new Date(), 'yyyy-MM-dd HH:mm:ss', 'en'));
              this.tratamientoForm.get('fechaNoAceptacion')?.setValue('');
            } else {
              this.tratamientoForm.get('Acepto')?.setValue(this.segurosForm.get('tratamiento')?.value);
              this.tratamientoForm.get('FechaAceptacion')?.setValue('');
              this.tratamientoForm.get('fechaNoAceptacion')?.setValue(formatDate(new Date(), 'yyyy-MM-dd HH:mm:ss', 'en'));
        }
        this.allItemsFormSaves.logSegurosDto = this.allItemsFormLogSeguro;
        this.logSegurosSave.get('logSegurosDto')?.setValue(this.allItemsFormLogSeguro);
        this.allItemsFormSaves.segurosDto = this.allItemsFormSeguro;
        this.segurosSave.get('SegurosDto')?.setValue(this.allItemsFormSeguro);
        this.allItemsFormSaves.tratamientoDto = this.tratamientoForm.value;
        this.tratamientoSave.get('TratamientoDto')?.setValue(this.tratamientoForm.value);
        this.allItemsFormSaves.cooberturaDto = this.coberturaForm.value;
        this.allItemsFormSave.push(this.segurosSave.value);
        this.allItemsFormSave.push(this.tratamientoSave.value);
        this.allItemsFormSave.push(this.logSegurosSave.value);
        this.GuardarFormulario();

      } else {
        if (this.itemsSeguro.length > 0) {

          this.itemsSeguro.forEach(( elementSeg : any ) => {
            if (elementSeg.seguro.Clase === 10 || elementSeg.seguro.Clase === 20) {
              validarSeguro = validarSeguro + 1;
            } else {
              validarSeguro = validarSeguro + 0;
            }
          });

          if (validarSeguro === 0) {
            this.notif.onWarning('Advertencia',
              'El seguro "Vida individual", es obligatorio.',
              );
          } else {
            if (this.segurosForm.get('tratamiento')?.value) {
              this.tratamientoForm.get('Acepto')?.setValue(this.segurosForm.get('tratamiento')?.value);
              this.tratamientoForm.get('FechaAceptacion')?.setValue(formatDate(new Date(), 'yyyy-MM-dd HH:mm:ss', 'en'));
              this.tratamientoForm.get('fechaNoAceptacion')?.setValue('');
            } else {
              this.tratamientoForm.get('Acepto')?.setValue(this.segurosForm.get('tratamiento')?.value);
              this.tratamientoForm.get('FechaAceptacion')?.setValue('');
              this.tratamientoForm.get('fechaNoAceptacion')?.setValue(formatDate(new Date(), 'yyyy-MM-dd HH:mm:ss', 'en'));
            }
            let data : string | null = localStorage.getItem('Data');
            const dataLocal = JSON.parse(window.atob(data == null ? "": data));
            this.itemsSeguro.forEach(elementSav => {
              this.segurosFormSet.get('IdSeguro')?.setValue(elementSav.seguro.Clase);
              this.segurosFormSet.get('MontoAsegurado')?.setValue(elementSav.montoAsegurado);
              this.segurosFormSet.get('FechaCreacion')?.setValue(formatDate(new Date(), 'yyyy-MM-dd HH:mm:ss', 'en'));
              this.segurosFormSet.get('FechaRptaAseguradora')?.setValue(elementSav.fechaAsegurado);
              this.segurosFormSet.get('IdAsesorCrea')?.setValue(dataLocal.lngTercero);
              this.segurosFormSet.get('IdOficina')?.setValue(dataLocal.IdOficina);
              this.segurosFormSet.get('IdEstado')?.setValue(elementSav.estadoSeguro.Id);
              if (elementSav.tieneSeguro !== null && elementSav.tieneSeguro !== undefined && elementSav.tieneSeguro !== '') {
                this.segurosFormSet.get('SinCobertura')?.setValue(elementSav.tieneSeguro);
              } else {
                this.segurosFormSet.get('SinCobertura')?.setValue(null);
              }
              if (elementSav.DescripcionTieneSeguro !== null && elementSav.DescripcionTieneSeguro !== undefined
                && elementSav.DescripcionTieneSeguro !== '') {
                this.segurosFormSet.get('PorqueSinCobertura')?.setValue(elementSav.DescripcionTieneSeguro);
              } else {
                this.segurosFormSet.get('PorqueSinCobertura')?.setValue(null);
              }
              this.allItemsFormSeguro.push(this.segurosFormSet.value);
              this.logSegurosForm.get('IdSeguro')?.setValue(this.segurosFormSet.value.IdSeguro);
              this.logSegurosForm.get('IdEstado')?.setValue(this.segurosFormSet.value.IdEstado);
              this.logSegurosForm.get('MontoAsegurado')?.setValue(this.segurosFormSet.value.MontoAsegurado);
              this.logSegurosForm.get('FechaCreacion')?.setValue(this.segurosFormSet.value.FechaCreacion);
              this.logSegurosForm.get('FechaModificacion')?.setValue(this.segurosFormSet.get('FechaCreacion')?.value);
              this.logSegurosForm.get('FechaRptaAseguradora')?.setValue(this.segurosFormSet.value.FechaRptaAseguradora);
              this.allItemsFormLogSeguro.push(this.logSegurosForm.value);
            });

            this.allItemsFormSaves.logSegurosDto = this.allItemsFormLogSeguro;
            this.logSegurosSave.get('logSegurosDto')?.setValue(this.allItemsFormLogSeguro);
            this.allItemsFormSaves.segurosDto = this.allItemsFormSeguro;
            this.segurosSave.get('SegurosDto')?.setValue(this.allItemsFormSeguro);
            this.allItemsFormSaves.tratamientoDto = this.tratamientoForm.value;
            this.tratamientoSave.get('TratamientoDto')?.setValue(this.tratamientoForm.value);
            this.allItemsFormSaves.cooberturaDto = this.coberturaForm.value;
            this.allItemsFormSave.push(this.segurosSave.value);
            this.allItemsFormSave.push(this.tratamientoSave.value);
            this.allItemsFormSave.push(this.logSegurosSave.value);
            this.GuardarFormulario();
          }

        } else {
          this.notif.onWarning('Advertencia',
            'El seguro "Vida individual", es obligatorio.',
            );
        }
      }
    } else if (operacion === '1') {
       this.EnableUpdateSeguros = false;
      let validarSeguro = 0;
      if (this.itemsSeguro.length <= 0 && this.basicosFrom.value.tipoCliente === '15') {
      } else {
        if (this.itemsSeguro.length > 0) {
          this.itemsSeguro.forEach(( elementSeg : any ) => {
            if (elementSeg.seguro.Clase === 10 || elementSeg.seguro.Clase === 20) {
              validarSeguro = validarSeguro + 1;
            } else {
              validarSeguro = validarSeguro + 0;
            }
          });
          if (validarSeguro === 0) {
            this.notif.onWarning('Advertencia',
              'El seguro "Vida individual", es obligatorio.',
              );
          } else {
            this.Blockseguro = null;
            let data : string | null = localStorage.getItem('Data');
            const dataLocal = JSON.parse(window.atob(data == null ? "": data));
            this.itemsSeguroEdit.forEach(( elementSeg : any ) => {
              this.segurosFormSet.get('IdAsegurado')?.setValue(elementSeg.idAsegurado);
              this.segurosFormSet.get('IdSeguro')?.setValue(elementSeg.seguro.Clase);
              this.segurosFormSet.get('IdTercero')?.setValue(tercerEdit);
              this.segurosFormSet.get('MontoAsegurado')?.setValue(elementSeg.montoAsegurado);
              this.segurosFormSet.get('FechaCreacion')?.setValue(elementSeg.fechaCreacion);
              this.segurosFormSet.get('FechaRptaAseguradora')?.setValue(elementSeg.fechaAsegurado);
              this.segurosFormSet.get('IdAsesorCrea')?.setValue(dataLocal.lngTercero);
              this.segurosFormSet.get('IdOficina')?.setValue(dataLocal.IdOficina);
              this.segurosFormSet.get('IdAsegurado')?.setValue(elementSeg.idAsegurado);
              if (elementSeg.estadoSeguro !== 0) {
                this.segurosFormSet.get('IdEstado')?.setValue(elementSeg.estadoSeguro.Id);
              } else {
                this.segurosFormSet.get('IdEstado')?.setValue(elementSeg.estadoSeguro);
              }
              if (elementSeg.tieneSeguro !== null && elementSeg.tieneSeguro !== undefined && elementSeg.tieneSeguro !== '') {
                this.segurosFormSet.get('SinCobertura')?.setValue(elementSeg.tieneSeguro);
              } else {
                this.segurosFormSet.get('SinCobertura')?.setValue(null);
              }
              if (elementSeg.DescripcionTieneSeguro !== null && elementSeg.DescripcionTieneSeguro !== undefined
                && elementSeg.DescripcionTieneSeguro !== '') {
                this.segurosFormSet.get('PorqueSinCobertura')?.setValue(elementSeg.DescripcionTieneSeguro);
              } else {
                this.segurosFormSet.get('PorqueSinCobertura')?.setValue(null);
              }
              this.allItemsFormSeguro.push(this.segurosFormSet.value);
            });
            this.allItemsFormSaves.logSegurosDto = this.allItemsFormLogSeguro;
            this.logSegurosSave.get('logSegurosDto')?.setValue(this.allItemsFormLogSeguro);

            this.EditarSeguros(this.allItemsFormSeguro);
            this.devolverTab(9);

          }
        } else {
          this.notif.onWarning('Advertencia',
            'El seguro "Vida individual", es obligatorio.',
            );
        }
      }
    } else if (operacion === '14') {
      const fechaManual = this.segurosForm.get('fechaTrataManual')?.value;
      let data : string | null = localStorage.getItem('Data');
      const dataStor = JSON.parse(window.atob(data == null ? "": data));
      if (fechaManual == null) {
        this.notif.onWarning('Advertencia', 'Debe ingresar una fecha de actualización válida.');
      } else {
        this.tratamientoForm.get('FechaAceptacion')?.setValue(formatDate(fechaManual, 'yyyy-MM-dd HH:mm:ss', 'en'));
        this.tratamientoForm.get('IdTercero')?.setValue(localStorage.getItem('TerceroNatura'));
        this.tratamientoForm.get('Acepto')?.setValue(true);
        this.tratamientoForm.get('fechaNoAceptacion')?.setValue('');
        this.tratamientoForm.get('IdAsesor')?.setValue(dataStor.lngTercero);
        this.EditarTratamiento(this.tratamientoForm.value);
        this.segurosForm.get('tratamiento')?.setValue(true);
        this.blockTratamiento = true;
        this.btnGuardarOculto = true;
        this.btnOcultoBuscar = false;
        this.btnTratamiento = false;
        this.btnMarcarEntrevista = false;
        this.MostrarFechaTratamiento = false;
        $('#basicoTab').removeClass('activar');
        $('#basicoTab').removeClass('active');
        $('#basicoTab').removeClass('disableTab');
        this.VolverArriba();
      }
    } else if (operacion === '22') {
      const fechaManual = this.segurosForm.get('fechaTrataManual')?.value;
      let data : string | null = localStorage.getItem('Data');
      const dataStor = JSON.parse(window.atob(data == null ? "": data));
      if (fechaManual == null) {
        this.notif.onWarning('Advertencia', 'Debe ingresar una fecha de actualización válida.');
      } else {
        this.tratamientoForm.get('FechaAceptacion')?.setValue('');
        this.tratamientoForm.get('IdTercero')?.setValue(localStorage.getItem('TerceroNatura'));
        this.tratamientoForm.get('Acepto')?.setValue(false);
        this.tratamientoForm.get('fechaNoAceptacion')?.setValue(formatDate(fechaManual, 'yyyy-MM-dd HH:mm:ss', 'en'));
        this.tratamientoForm.get('IdAsesor')?.setValue(dataStor.lngTercero);
        this.EditarTratamiento(this.tratamientoForm.value);
        this.segurosForm.get('tratamiento')?.setValue(false);
        this.blockTratamiento = true;
        this.btnGuardarOculto = false;
        this.btnOcultoBuscar = false;
        this.btnTratamiento = false;
        this.btnMarcarEntrevista = false;
        this.MostrarFechaTratamiento = false;
        $('#basicoTab').removeClass('activar');
        $('#basicoTab').removeClass('active');
        $('#basicoTab').removeClass('disableTab');
        this.VolverArriba();
      }
    } else {
      this.Blockseguro = null;
      this.notif.onWarning('Advertencia', 'Debe seleccionar una operación válida.',
        );
      this.VolverArriba();
    }
  }

  validarSeguro() {
    const seguroData = this.segurosForm.get('seguro')?.value;
    if (seguroData !== null) {
      if (seguroData.Clase === 10) {
        this.mostrarCobertura = true;
      } else {
        this.BlockMonto = null;
        this.segurosForm.get('tieneSeguro')?.setValue(false);
        this.mostrarCobertura = false;
        this.BlockEstado = null;
        this.segurosForm.get('estadoSeguro')?.reset();
      }
      if (seguroData.Clase === undefined || seguroData.Clase === null) {
        this.segurosForm.get('seguro')?.reset();
         this.notif.onWarning('Advertencia', 'Debe seleccionar un seguro valido.');
      }
    }
  }

  validarCampoArea() {
    this.descripcionObligatoria = false;
    if (this.segurosForm.get('DescripcionTieneSeguro')?.value !== '') {
      this.descripcionObligatoria = false;
    } else {
      this.descripcionObligatoria = true;
    }
  }

  MapearSeguro(i : any, data : any) {
    this.VolverArriba();
    this.indexSeguro = i;
    this.Blockseguro = true;

    if (data.seguro.Clase === 10) {
      this.mostrarCobertura = true;
    } else {
      this.mostrarCobertura = false;
    }
    this.segurosForm.get('idAsegurado')?.setValue(data.idAsegurado);
    this.segurosForm.get('fechaCreacion')?.setValue(data.fechaCreacion);
    this.segurosEdit.get('EditSeguro')?.setValue(data.seguro);
    this.segurosForm.get('seguro')?.setValue(data.seguro.Descripcion);
    this.segurosForm.get('seguroData')?.setValue(data.seguro);
    this.segurosForm.get('montoAsegurado')?.setValue(data.montoAsegurado);
    this.segurosForm.get('estadoSeguro')?.setValue(data.estadoSeguro);
    // this.segurosForm.get('fechaAsegurado')?.setValue(data.fechaAsegurado);
    if (data.fechaAsegurado !== null  &&  data.fechaAsegurado !== undefined ) {
    const dateString = data.fechaAsegurado;
    const newDate = new Date(dateString);
    newDate.setMinutes(newDate.getMinutes() + newDate.getTimezoneOffset())
    const fechaStringNew = moment(newDate).format('YYYY-MM-DD');
    this.segurosForm.get('fechaAsegurado')?.setValue(fechaStringNew);
    } else {
      this.segurosForm.get('fechaAsegurado')?.setValue(null);
    }
    this.segurosForm.get('tieneSeguro')?.setValue(data.tieneSeguro);
    if (data.tieneSeguro && data.tieneSeguro !== null && data.tieneSeguro !== undefined) {
      this.segurosForm.controls['DescripcionTieneSeguro'].setErrors({ 'incorrect': true });
      this.segurosForm.controls['DescripcionTieneSeguro'].setValidators([Validators.required]);
      this.BlockMonto = true;
      this.BlockEstado = true;
      this.segurosForm.get('montoAsegurado')?.setValue(0);
      this.mostrarPorQueCobertura = true;
      this.dataEstadosSeguro.forEach((elementMonto : any ) => {
        if (elementMonto.Id === 3) {
          this.segurosForm.get('estadoSeguro')?.setValue(elementMonto);
        }
      });
    } else {
      this.segurosForm.controls['DescripcionTieneSeguro'].setErrors(null);
      this.segurosForm.controls['DescripcionTieneSeguro'].clearValidators();
      this.segurosForm.controls['DescripcionTieneSeguro'].setValidators(null);
      this.mostrarPorQueCobertura = false;
      this.segurosForm.get('DescripcionTieneSeguro')?.reset();
      this.BlockMonto = null;
      this.BlockEstado = null;
    }
    this.segurosForm.get('DescripcionTieneSeguro')?.setValue(data.DescripcionTieneSeguro);
  }

  editItems(updateSeguro : any) {
    this.Blockseguro = null;
    this.EditarSeguros(updateSeguro);
  }

  GetHistorialLogSeguros() {
    this.itemsLogSeguro = [];
    const tercerEdit = localStorage.getItem('TerceroNatura');
    this.clientesService.GetHistoralLogSeguro(tercerEdit == null ? "" : tercerEdit).subscribe(
      result => {
        result.forEach((elementHisto: any) => {
          this.LogSeguroModel = new LogSegurosModel;
          this.dataSeguros.forEach(( elementSeg : any ) => {
            if (elementSeg.Clase === elementHisto.IdSeguro) {
              this.LogSeguroModel.Seguro = elementSeg.Descripcion;
            }
          });
          this.dataEstadosSeguro.forEach((elementEstado : any) => {
            if (elementHisto.IdEstado !== 0) {
              if (elementEstado.Id === elementHisto.IdEstado) {
                this.LogSeguroModel.Estado = elementEstado.Nombre;
              }
            } else {
              this.LogSeguroModel.Estado = 'Eliminado';
            }
          });
          this.LogSeguroModel.FechaCreacion = elementHisto.FechaCreacion;
          this.LogSeguroModel.FechaModificacion = elementHisto.FechaModificacion;
          this.LogSeguroModel.FechaRptaAseguradora = elementHisto.FechaRptaAseguradora;
          this.LogSeguroModel.MontoAsegurado = elementHisto.MontoAsegurado;
          this.itemsLogSeguro.push(this.LogSeguroModel);
        });
      },
      error => {
        this.notif.onWarning('Advertencia',
          'El tipo de seguro ya fue ingresado.');
        console.error('GetHistorialLogSeguro - ' + error);
      });
  }

  getBakcSeguros() {
    this.itemsSeguro = [];
    const tercerEdit = localStorage.getItem('TerceroNatura');
    this.clientesService.VolverACargarSeguros(tercerEdit == null ? "" : tercerEdit).subscribe(
      result => {
        result.forEach(( elementSeg : any ) => {
          this.segurosForm.get('idAsegurado')?.setValue(elementSeg.IdAsegurado);
          this.dataSeguros.forEach(elementSeguro => {
            if (elementSeguro.Clase === elementSeg.IdSeguro) {
              this.segurosForm.get('seguro')?.setValue(elementSeguro);
              this.segurosEdit.get('EditSeguro')?.setValue(elementSeguro);
            }
          });
          this.dataEstadosSeguro.forEach((elementEstadoSe : any ) => {
            if (elementEstadoSe.Id === elementSeg.IdEstado) {
              this.segurosForm.get('estadoSeguro')?.setValue(elementEstadoSe);
            }
          });
          this.segurosForm.get('fechaCreacion')?.setValue(elementSeg.FechaCreacion);
          this.segurosForm.get('fechaAsegurado')?.setValue(elementSeg.FechaRptaAseguradora);
          this.segurosForm.get('montoAsegurado')?.setValue(elementSeg.MontoAsegurado);
          this.segurosForm.get('tieneSeguro')?.setValue(elementSeg.SinCobertura);
          this.segurosForm.get('DescripcionTieneSeguro')?.setValue(elementSeg.PorqueSinCobertura);

          this.itemsSeguro.push(this.segurosForm.value);
          this.segurosForm.reset();
        });
        console.log( "lista",  this.itemsSeguro)
      },
      error => {
        this.notif.onWarning('Advertencia',
          'Error al cargar los seguros.');
        console.error('GetHistorialLogSeguro - ' + error);
      });
  }

  validarEstado() {
    const valorEstado = this.segurosForm.value.estadoSeguro.Id;
    if (valorEstado === 3 || valorEstado === 6) {
      this.BlockMonto = true;
      this.segurosForm.get('montoAsegurado')?.setValue(0);
    } else {
      this.BlockMonto = null;
    }
  }

  montoCero() {
    const valor = this.segurosForm.get('tieneSeguro')?.value;
    if (!valor) {
      this.segurosForm.controls['DescripcionTieneSeguro'].setErrors({ 'incorrect': true });
      this.segurosForm.controls['DescripcionTieneSeguro'].setValidators([Validators.required]);
      this.BlockMonto = true;
      this.BlockEstado = true;
      this.segurosForm.get('montoAsegurado')?.setValue(0);
      this.mostrarPorQueCobertura = true;
      this.dataEstadosSeguro.forEach((elementMonto : any) => {
        if (elementMonto.Id === 6) {
          this.segurosForm.get('estadoSeguro')?.setValue(elementMonto);
        }
      });
    } else {
      this.segurosForm.controls['DescripcionTieneSeguro'].setErrors(null);
      this.segurosForm.controls['DescripcionTieneSeguro'].clearValidators();
      this.segurosForm.controls['DescripcionTieneSeguro'].setValidators(null);
      this.mostrarPorQueCobertura = false;
      this.segurosForm.get('DescripcionTieneSeguro')?.reset();
      this.segurosForm.get('estadoSeguro')?.reset();
      this.BlockMonto = null;
      this.BlockEstado = null;
    }
  }

  //#endregion

  //#region Metodos GuardarTodo
  GuardarFormulario() {
    let tieneObligaciones = false;
    const campoPasivoV = this.patrimonioForm.get('tlPasivo')?.value;
    if (this.itemsEgresos.length > 0) {
      this.itemsEgresos.forEach(elementEgregso => {
        if (elementEgregso.concepto.Id === 6) {
          tieneObligaciones = true;
          this.formPasivoLocked = null;
        }
      });
    }
    // se valida que no tenga pasivo y que no tenga obligaciones financieras
    if (tieneObligaciones && (campoPasivoV === '' || campoPasivoV === null || campoPasivoV === 0)) { // Mensajde de validacion
      this.notif.onWarning('Advertencia', 'El pasivo es obligatorio.');
      this.botonActivosAnterior.nativeElement.click();
      $('#seguroTab').removeClass('activar');
      $('#seguroTab').removeClass('active');
      this.devolverTab(4);
      this.VolverArriba();

    } else {

      this.loading = true;

      if (this.allItemsFormSaves.asociadosNaturalesDto != null &&
        this.allItemsFormSaves.financieroDto != null &&
        this.allItemsFormSaves.contactoDto != null &&
        this.allItemsFormSaves.referenciaDto != null &&
        this.allItemsFormSaves.segurosDto != null) {
          let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
       

        this.allItemsFormSaves.userWork = resultPerfil.Usuario;
        // Guardar el asociado natural
        this.itemWorkManagerInsert = this.allItemsFormSaves;
        this.clientesService.GuardarNaturalesBasico(this.allItemsFormSaves).subscribe(
          result => {
            const opera = this.basicosFrom.get('operacion')?.value;
            this.operacion =  this.basicosFrom.get('operacion')?.value;
            this.basicosFrom.get('operacion')?.reset();
            const resulNatural = JSON.parse(result['_body']);
            console.log(resulNatural);
            if (resulNatural.Result !== null) {
              if (resulNatural.Result.dataWorkManager !== null && resulNatural.Result.dataWorkManager !== undefined) {
                const valorWork = resulNatural.Result.dataWorkManager.indexOf('OK ----- True');
                console.log(valorWork);
                if ( valorWork < 0) {
                  Swal.fire({
                    title: 'Advertencia',
                    text: '',
                    html: 'El asociado no se creo en el <strong>WorkManager</strong>,' +
                    ' Intente nuevamente pulsando <strong>Aceptar</strong>. ',
                    icon: 'warning',
                    showCancelButton: false,
                    confirmButtonText: 'Aceptar',
                    cancelButtonText: 'No',
                    confirmButtonColor: 'rgb(13,165,80)',
                    cancelButtonColor: 'rgb(160,0,87)',
                    allowOutsideClick: false,
                    allowEscapeKey: false
                    // tslint:disable-next-line:no-shadowed-variable
                  }).then((results : any) => {
                    if (results.value) {
                      this.clientesService.ReplicarWorkManager(this.itemWorkManagerInsert).subscribe(
                      resultWork => {
                      const resulNaturalWork = JSON.parse(result['_body']);
                      console.log(resulNaturalWork);
                      const valorWorkNat = resulNaturalWork.Result.dataWorkManager.indexOf('OK ----- True');
                      console.log(valorWorkNat);
                          if (valorWorkNat < 0) {
                          Swal.fire({
                          title: 'Advertencia',
                          text: '',
                          html: 'El asociado no se creo en el <strong>WorkManager</strong>,' +
                          'Por favor envie un <strong>GLPI</strong> para gestionar su creacion. ',
                          icon: 'warning',
                          showCancelButton: false,
                          confirmButtonText: 'Aceptar',
                          cancelButtonText: 'No',
                          confirmButtonColor: 'rgb(13,165,80)',
                          cancelButtonColor: 'rgb(160,0,87)',
                          allowOutsideClick: false,
                          allowEscapeKey: false
                          // tslint:disable-next-line:no-shadowed-variable
                        }).then((results : any) => {
                          this.AbrirCorrespondencia.nativeElement.click();
                        });
                      } else {
                          this.AbrirCorrespondencia.nativeElement.click();
                      }
                      });
                    }
                  });
                } else {
                  this.AbrirCorrespondencia.nativeElement.click();
                }
              } else {
                this.AbrirCorrespondencia.nativeElement.click();
              }
              this.loading = false;
              this.BlockVinculacion = true;
              this.CargarServicios = 1;
              this.serviciosFrom.reset();
              this.serviciosFrom.get('esVinculacion')?.setValue(true);
              if (this.cambioEmpleo) {
                this.financieroFrom.reset();
                this.allItemsFormSaves.financieroDto = null;
                this.allItemsFormFinanciero = [];
                this.itemsIngresos = [];
                this.itemsEgresos = [];
                this.allItemsForm = [];
                this.acomuladorIngresos = 0;
                this.acomuladorEgresos = 0;
                this.acomuladorOperacional = 0;
                this.cambioEmpleo = false;
              }
              let dataobj : string | null = localStorage.getItem('Data');
              const data = JSON.parse(window.atob(dataobj == null ? "": dataobj));
              this.serviciosFrom.get('Oficina')?.setValue(data.Oficina);
              this.serviciosFrom.get('Asesor')?.setValue(data.Nombre);
              $('#bodyGeneral').addClass('quietarPadding');
              this.consultarCorrespondenciaPpal(resulNatural.Result.tercerosDto.IdTercero);
              this.entrevistaForm.reset();
              this.DesbloquearRespuesta2 = true;
              this.DesbloquearRespuesta6 = true;
              this.DesbloquearRespuesta14 = true;
              this.DesbloquearRespuesta17 = true;
              localStorage.setItem('TerceroNatura', resulNatural.Result.tercerosDto.IdTercero);
             
              this.GuardarLog(resulNatural.Result, opera, 0, Number(localStorage.getItem('TerceroNatura')),11);
              if (resulNatural.Result.asociadosNaturalesDto.IdRelacion !== 15) {
                // si es diferente de tercero guarda el debito automatico si no no
                this.GuardarDebitoAuto(1, resulNatural.Result.tercerosDto.IdTercero);
              }
              if (this.patrimonioForm.get('tlPasivo')?.value !== null && this.patrimonioForm.get('tlPasivo')?.value !== undefined ) {
                this.GuardarPasivo(resulNatural.Result.tercerosDto.IdTercero, this.patrimonioForm.get('tlPasivo')?.value);
              }
              // aqui agregar la operacion que realizo y asi mostrar si es credito venculacion o edicion
              this.serviciosFrom.get('operacionSeleccionada')?.setValue(this.basicosFrom.get('operacion')?.value);
              localStorage.setItem('DataService', JSON.stringify(this.serviciosFrom.value));
              this.entrevistaForm.reset();
              this.allItemsFormSaves = {
                asociadosNaturalesDto: {},
                tercerosDto: {},
                financieroDto: {},
                contactoDto: {},
                activoDto: {},
                conyugueDto: {},
                laboralDto: {},
                referenciaDto: {},
                entrevistaDto: {},
                listaDePeps: {},
                segurosDto: {},
                tratamientoDto: {},
                cooberturaDto: {},
                logSegurosDto: {},
                userWork: ''
              };
              this.asesorForm.reset();
              this.entrevistaForm.reset();
              this.entrevistaFormSet.reset();
              this.disableAsesor = true;
              this.botonSiguiente.nativeElement.click();
              this.devolverTab(1);
              this.BloquearFormBuscar();
              this.disbaleBusqueda = true;
              this.loading = false;
              this.infoTutor = [];
              this.allItemsFormRefencia = [];
              this.allItemsFormSave = [];
              this.allItemsPeps = [];
              this.bloqDeparta = false;
              this.bloqCiudad= false;
              this.bloqDepartaExp= false;
              this.bloqCiudadExp= false;
              this.bloqDepartaCont= false;
              this.bloqCiudad= false;
              this.bloqDepartaAct= false;
              this.bloqCiudadAct= false;
              this.bloqDepartaRef= false;
              this.bloqCiudadRef= false;
              this.buscarAllNameCedula(resulNatural.Result.tercerosDto.NumeroDocumento);
            } else {
              this.loading = false;
              this.notif.onWarning('Advertencia',
                'El asociado ya fue ingresado.',
                );
              this.serviciosFrom.get('esVinculacion')?.setValue(false);
            }
          },
          error => {
            this.loading = false;
            console.error('Guardar natural - ' + error);
          }
        );
      } else {
        this.loading = false;
        this.notif.onWarning('Advertencia',
          'Debe llenar los campos obligatorios para completar el formulario.',
          );
      }
    }
  }

  AbrirCorrespondenciaImpresion() {
    const operacion  =  +this.basicosFrom.get('operacion')?.value;
    const tercero = localStorage.getItem('TerceroNatura');
    const seleccionada = +this.Correspondenciasform.get('SeleccionCorrespondencia')?.value;
    if(seleccionada === 0 || seleccionada === null || seleccionada === undefined) {
      this.Correspondenciasform.get('SeleccionCorrespondencia')?.reset();
       this.notif.onWarning('Advertencia',
          'Debe seleccionar una dirección para recibir la correspondencia.',
          );
      this.bloqCorrespondencia = true;
    }  else {
      if (operacion ===  1) {
        this.CerrarCorrespondencia.nativeElement.click();
        console.log('datos a guardar en contacto - ' + this.Correspondenciasform.value);
        this.clientesService.EditarCorrespondecia(tercero == null ? "" : tercero, this.Correspondenciasform.value.SeleccionCorrespondencia).subscribe(
          result => {
          });
      } else {
        this.CerrarCorrespondencia.nativeElement.click();
        console.log('datos a guardar en contacto - ' + this.Correspondenciasform.value);
        this.clientesService.EditarCorrespondecia(tercero == null ? "" : tercero,  this.Correspondenciasform.value.SeleccionCorrespondencia).subscribe(
          result => {
          });
          this.abrirServicios.nativeElement.click();
      }
    }
  }

  validarCorrespondenciaSeleccionada() {
    const seleccionada = +this.Correspondenciasform.get('SeleccionCorrespondencia')?.value;
    if(seleccionada === 0 || seleccionada === null || seleccionada === undefined) {
      this.Correspondenciasform.get('SeleccionCorrespondencia')?.reset();
       this.notif.onWarning('Advertencia',
          'Debe seleccionar una dirección para recibir la correspondencia.',
          );
      this.bloqCorrespondencia = true;
    } else {
      this.bloqCorrespondencia = null;
    }
  }

  GuardarPasivo(tercero : any, pasivo : any) {
    this.clientesService.GuardarPasivo(tercero, pasivo).subscribe(
      (result) => {
      },
      error => {
      });
  }

  GuardarDebitoAuto(siNo : any, tercero : any) {
    this.clientesService.MarcarDebitoAutomatico(siNo, tercero).subscribe(
      (result) => {
      },
      error => {
      });
  }
  //#endregion

  //#region Metodos EditarTodo
  EditarBasicoFinanciero(updateNaturalBasico : any) {
    this.GuardarLog(updateNaturalBasico, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.EditarBasicoFinanciero(updateNaturalBasico).subscribe(
      result => {
        if (result) {
          this.limpiarFormularios(this.referenciaForm);
          this.botonSiguiente.nativeElement.click();
          this.devolverTab(1);
          $('#basicoTab').addClass('activar');
          $('#basicoTab').addClass('active');
          $('#financieroTab').removeClass('activar');
          $('#financieroTab').removeClass('active');
          $('#financieroTab').addClass('disableTab');
          this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
          this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
        } else {
          this.notif.onWarning('Advertencia', 'El registro no se actualizó correctamente.');
        }
      },
      error => {
        console.error('Error - Editar basico - ' + error);
      }
    );
  }

  EditarFinanciero(updateNatural : any) {
    this.GuardarLog(updateNatural, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.EditarFinanciero(updateNatural).subscribe(
      result => {
        if (result) {
          this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
          this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
        } else {
          this.notif.onWarning('Advertencia', 'El registro no se actualizó correctamente.');
        }
      },
      error => {
        console.error('Error - Editar basico - ' + error);
      }
    );
  }

  EditarContactos(updateContacto : any) {
    const tercero = localStorage.getItem('TerceroNatura');  
    this.GuardarLog(updateContacto, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')), 11);
    this.clientesService.EditarContactos(updateContacto).subscribe(
      () => {
        this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
        this.AsesorModifica(tercero == null ? "" : tercero);
        this.EnableUpdateContacto = false;
        this.clientesService.EditarCorrespondecia(tercero == null ? "" : tercero, 0).subscribe( result => { });
        this.consultarCorrespondenciaPpal(tercero == null ? "" : tercero);
        this.AbrirCorrespondencia.nativeElement.click();
        this.limpiarFormularios(this.contactoForm);
      },
      error => {
        console.error('EditarContactos - ' + error);
      }
    );
  }

  EditarActivos(updateActivos : any, tercero : string) {
    this.GuardarLog('Se editan los activos - ' + JSON.stringify(updateActivos), this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.EditarActivos(updateActivos,tercero).subscribe(
      result => {
        const terceroPasivo = Number(localStorage.getItem('TerceroNatura'));
        const valorPasivo = this.patrimonioForm.get('tlPasivo')?.value;
        this.GuardarLog('Se edita o agrega Total pasivos - ' + 'Tercero: ' + terceroPasivo + ' Valor: ' + valorPasivo,
        this.basicosFrom.get('operacion')?.value, 0,  Number(localStorage.getItem('TerceroNatura')),11);
        this.GuardarPasivo(Number(localStorage.getItem('TerceroNatura')), this.patrimonioForm.get('tlPasivo')?.value);
        this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
        this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
        this.EnableUpdatePatrimonio = false;
        this.formLockedHipoPigno = false;
        this.disableAfavor = true;
        this.mostrarObligacion = false;
        this.BlockActivo = null;
        this.limpiarFormularios(this.activoForm);
      },
      error => {
        console.error('EditarActivos - ' + error);
      }
    );
  }

  EditarPasivos(Pasivo : any , IdTercero : any) {
    this.clientesService.EditarActivos(Pasivo, IdTercero).subscribe(
      result => {
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }

  EditarConyugue(updateConyugue : any) {
    this.GuardarLog(updateConyugue, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.EditarConyugue(updateConyugue).subscribe(
      result => {
        this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
        this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
        this.EnableUpdateConyugue = false;
        this.limpiarFormularios(this.conyugueForm);
      },
      error => {
        console.error('EditarConyugue - ' + error);
      }
    );
  }

  EliminarConyugue(tercero : string) {
    this.GuardarLog('Elimino conyugue: ' + JSON.stringify(this.itemConyugueConsultado), this.basicosFrom.get('operacion')?.value, 0
    , Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.EliminarConyugue(tercero).subscribe(
      result => {
        this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
      },
      error => {
        console.error('EliminarConyugue - ' + error);
      });
  }

  EliminarLaborales(tercero : string) {
    this.GuardarLog('Elimino Laborales: ' + JSON.stringify(this.itemsLaboralesConsultados),
    this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.EliminarLaborales(tercero).subscribe(
      result => {
        this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
      },
      error => {
        console.error('EliminarConyugue - ' + error);
      });
  }

  EditarLaboral(updateLaboral : any) {
    this.GuardarLog(updateLaboral, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.EditarLaboral(updateLaboral).subscribe(
      result => {
        this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
        this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
        this.EnableUpdateLaboral = false;
        this.limpiarFormularios(this.laboralForm);
      },
      error => {
        console.error('EditarLaboral - ' + error);
      }
    );
  }

  RegistrarLaboralEdit(updateLaboral : any) {
    this.GuardarLog(updateLaboral, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.AgregarLaboralEdit(updateLaboral).subscribe(
      result => {
        this.allItemsFormLaboralEdit = [];
        this.itemsLaboralEdit = [];
      },
      error => {
        console.error('EditarLaboral - ' + error);
      }
    );
  }

  EditarReferencias(updateReferencia : any) {
    this.GuardarLog(updateReferencia, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.EditarReferencias(updateReferencia).subscribe(
      result => {
        this.referenciaForm.reset();
        this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
        this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
        this.EnableUpdateReferencia = false;
        this.limpiarFormularios(this.referenciaForm);
      },
      error => {
        console.error('EditarReferencias - ' + error);
      }
    );
  }

  EditarEntrevista(updateEntrevista : any) {
    this.GuardarLog(updateEntrevista, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.EditarEntrevista(updateEntrevista).subscribe(
      result => {
        this.EnableUpdateEntrevista = false;
        this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
        this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
      },
      error => {
        console.error('EditarConyugue - ' + error);
      }
    );
  }

  EditarPPES(updatePPES : any) {
    this.clientesService.EditarPPES(updatePPES).subscribe(
      result => {
        this.relacionPepsForm.reset();
        this.marcoNo = null;
        this.devolverTab(1);
        this.BuscarNaturalesAll(this.DocumentoSolicitud);
      },
      error => {
        console.error('EditarConyugue - ' + error);
      }
    );
  }

  EliminarPPES() {
    let TerceroNatura : string | null = localStorage.getItem('TerceroNatura');
    this.clientesService.EliminarPPES(TerceroNatura == null ? "" : TerceroNatura).subscribe(
      result => {
        this.relacionPepsForm.reset();
        this.marcoNo = null;
        this.devolverTab(1);
        this.BuscarNaturalesAll(this.DocumentoSolicitud);
      },
      error => {
        console.error('EditarConyugue - ' + error);
      }
    );
  }

  EditarSeguros(updateSeguros : any) {
    this.GuardarLog(updateSeguros, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.EditarSeguros(updateSeguros).subscribe(
      result => {
        const tercero = localStorage.getItem('TerceroNatura');
        let siNo = 0;
        if (this.segurosForm.get('debitoAuto')?.value) {
          siNo = 1;
        }
        if (this.MarcoDebito) {
          this.GuardarDebitoAuto(siNo, tercero);
        }
        this.itemsSeguroEdit = [];
        this.allItemsFormSeguro = [];
        this.GetHistorialLogSeguros();
        this.getBakcSeguros();
        // this.basicosFrom.get('operacion')?.reset();
        this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
        this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
        this.EnableUpdateSeguros = false;
        this.limpiarFormularios(this.segurosForm);
      },
      error => {
        this.EnableUpdateSeguros = true;
        console.error('EditarSeguro - ' + error);
      }
    );
  }

  EditarTratamiento(updateTratamiento : any) {
    this.GuardarLog(updateTratamiento, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.tratamientoConsulta = updateTratamiento.Acepto;
    this.clientesService.EditarTratamiento(updateTratamiento).subscribe(
      result => {
        this.basicosFrom.get('operacion')?.reset();
        this.segurosForm.get('fechaTrataManual')?.reset();
        $('#basicoTab').removeClass('disableTab');
        $('#financieroTab').removeClass('disableTab');
        $('#contactoTab').removeClass('disableTab');
        $('#activoTab').removeClass('disableTab');
        $('#conyugueTab').removeClass('disableTab');
        $('#laboralTab').removeClass('disableTab');
        $('#referenciaTab').removeClass('disableTab');
        $('#entrevistaTab').removeClass('disableTab');
        $('#seguroTab').removeClass('disableTab');
        $('#fechasTab').addClass('disableTab');        
        this.btnOcultoBuscar = false;
        this.btnGuardarOculto = false;
        this.siguienteOculto = true;
        this.VolverArriba();
        this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
        this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
      },
      error => {
        console.error('EditarTratamiento - ' + error);
      }
    );
  }

  EditarOficina(tercero : string , oficina : string) {
    const dataOficina = 'tercero modificado - ' + tercero + ' oficina modificada' + oficina;
    this.GuardarLog(dataOficina, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.EditarOficina(tercero, oficina).subscribe(
      result => {
        this.basicosFrom.get('operacion')?.reset();
        this.botonSiguiente.nativeElement.click();
        this.devolverTab(1);
        this.blockBtnBasico = false;
        this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
        this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
        this.ProOficina = '0';
        this.ProDescripcionOpe = ' ';
        this.OperacionMarcada = undefined;
        this.VolverArriba();
        this.disbaleOficina = true;
        this.btnGuardarOculto = false;
        this.siguienteOculto = true;
      },
      error => {
        console.error('EditarOficina - ' + error);
      }
    );
  }

  EditarAsesorExterno(tercero : string, asesor : string | number) {
    const varCodigo = this.asesorForm.get('strCodigo')?.value;
    const varNombre = this.asesorForm.get('strNombre')?.value;
    if ((varCodigo === null || varCodigo === undefined || varCodigo === '') &&
      (varNombre === null || varNombre === undefined || varNombre === '')) {
      if (asesor === '') {
        asesor = 0;
      }
      const dataAsesor = 'Asesor externo modificado - ' + tercero + ' -' + asesor;
      this.GuardarLog(dataAsesor, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
      this.clientesService.EditarAsesorExterno(tercero, asesor.toString()).subscribe(
        result => {
          this.basicosFrom.get('operacion')?.reset();
          this.botonSiguiente.nativeElement.click();
          this.devolverTab(1);
          this.MostrarAsesorExterno = true;
          this.disableAsesor = true;
          this.btnGuardarOculto = false;
          this.siguienteOculto = true;
          this.btnOcultoBuscar = false;
          $('#basicoTab').removeClass('disableTab');
          $('#financieroTab').removeClass('disableTab');
          $('#contactoTab').removeClass('disableTab');
          $('#activoTab').removeClass('disableTab');
          $('#conyugueTab').removeClass('disableTab');
          $('#laboralTab').removeClass('disableTab');
          $('#referenciaTab').removeClass('disableTab');
          $('#entrevistaTab').removeClass('disableTab');
          $('#seguroTab').removeClass('disableTab');
          $('#fechasTab').addClass('disableTab');
          this.blockBtnBasico = false;
          this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
          this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
          this.ProIdAsesorE = '0';
          this.ProDescripcionOpe = ' ';
          this.OperacionMarcada = undefined;
          this.VolverArriba();
            this.BuscarNaturalesAll(this.DocumentoSolicitud);
        },
        error => {
          this.blockBtnBasico = false;
          console.error('EditarAsesorExterno - ' + error);
        });
    } else if (varCodigo !== null && varCodigo !== undefined && varCodigo !== '' &&
      varNombre !== null && varNombre !== undefined && varNombre !== '') {
      if (asesor === '') {
        asesor = 0;
      }
      const dataAsesor = 'Asesor externo modificado - ' + tercero + ' -' + asesor;
      this.GuardarLog(dataAsesor, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
      this.clientesService.EditarAsesorExterno(tercero, asesor.toString()).subscribe(
        result => {
          this.basicosFrom.get('operacion')?.reset();
          this.botonSiguiente.nativeElement.click();
          this.devolverTab(1);
          this.MostrarAsesorExterno = true;
          this.disableAsesor = true;
          this.btnGuardarOculto = false;
          this.siguienteOculto = true;
          this.btnOcultoBuscar = false;
          $('#basicoTab').removeClass('disableTab');
          $('#financieroTab').removeClass('disableTab');
          $('#contactoTab').removeClass('disableTab');
          $('#activoTab').removeClass('disableTab');
          $('#conyugueTab').removeClass('disableTab');
          $('#laboralTab').removeClass('disableTab');
          $('#referenciaTab').removeClass('disableTab');
          $('#entrevistaTab').removeClass('disableTab');
          $('#seguroTab').removeClass('disableTab');
          $('#fechasTab').addClass('disableTab');
          this.blockBtnBasico = false;
          this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
          this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
          this.ProIdAsesorE = '0';
          this.ProDescripcionOpe = ' ';
          this.OperacionMarcada = undefined;
          this.VolverArriba();
            this.BuscarNaturalesAll(this.DocumentoSolicitud);
        },
        error => {
          this.blockBtnBasico = false;
          console.error('EditarAsesorExterno - ' + error);
        });
    } else {
      this.blockBtnBasico = false;
      this.notif.onWarning('Advertencia', 'Debe seleccionar un asesor externo válido.');
    }
  }


  EditarAsesor(tercero : string, asesor : string | number) {
    const varCodigo = this.asesorForm.get('strCodigoAse')?.value;
    const varNombre = this.asesorForm.get('strNombreAse')?.value;
    if ((varCodigo === null || varCodigo === undefined || varCodigo === '') &&
      (varNombre === null || varNombre === undefined || varNombre === '')) {
      if (asesor === '') {
        asesor = 0;
      }
      const dataAsesor = 'Asesor modificado - Tercero: ' + tercero + '  - Asesor:' + asesor;
      this.GuardarLog(dataAsesor, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
      this.clientesService.EditarAsesor(tercero, asesor.toString()).subscribe(
        result => {
          this.basicosFrom.get('operacion')?.reset();
          this.botonSiguiente.nativeElement.click();
          this.devolverTab(1);
          this.MostrarAsesorExterno = true;
          this.disableAsesor = true;
          this.disableAsesorPpal = true;
          this.btnGuardarOculto = false;
          this.siguienteOculto = true;
          this.btnOcultoBuscar = false;
          $('#basicoTab').removeClass('disableTab');
          $('#financieroTab').removeClass('disableTab');
          $('#contactoTab').removeClass('disableTab');
          $('#activoTab').removeClass('disableTab');
          $('#conyugueTab').removeClass('disableTab');
          $('#laboralTab').removeClass('disableTab');
          $('#referenciaTab').removeClass('disableTab');
          $('#entrevistaTab').removeClass('disableTab');
          $('#seguroTab').removeClass('disableTab');
          $('#fechasTab').addClass('disableTab');
          this.blockBtnBasico = false;
          this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
          this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
          this.ProAsesor = '0';
          this.ProDescripcionOpe = ' ';
          this.OperacionMarcada = undefined;
            this.BuscarNaturalesAll(this.DocumentoSolicitud);
          this.VolverArriba();
        },
        error => {
          this.blockBtnBasico = false;
          console.error('EditarAsesor - ' + error);
        });
    } else if (varCodigo !== null && varCodigo !== undefined && varCodigo !== '' &&
      varNombre !== null && varNombre !== undefined && varNombre !== '') {
      if (asesor === '') {
        asesor = 0;
      }
      const dataAsesor = 'Asesor modificado - Tercero: ' + tercero + '  - Asesor:' + asesor;
      this.GuardarLog(dataAsesor, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
      this.clientesService.EditarAsesor(tercero, asesor.toString()).subscribe(
        result => {
          this.basicosFrom.get('operacion')?.reset();
          this.botonSiguiente.nativeElement.click();
          this.devolverTab(1);
          this.MostrarAsesorExterno = true;
          this.disableAsesor = true;
          this.disableAsesorPpal = true;
          this.btnGuardarOculto = false;
          this.siguienteOculto = true;
          this.btnOcultoBuscar = false;
          $('#basicoTab').removeClass('disableTab');
          $('#financieroTab').removeClass('disableTab');
          $('#contactoTab').removeClass('disableTab');
          $('#activoTab').removeClass('disableTab');
          $('#conyugueTab').removeClass('disableTab');
          $('#laboralTab').removeClass('disableTab');
          $('#referenciaTab').removeClass('disableTab');
          $('#entrevistaTab').removeClass('disableTab');
          $('#seguroTab').removeClass('disableTab');
          $('#fechasTab').addClass('disableTab');
          this.blockBtnBasico = false;
          this.notif.onSuccess('Exitoso', 'El registro se actualizó correctamente.');
          this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
          this.ProAsesor = '0';
          this.ProDescripcionOpe = ' ';
          this.OperacionMarcada = undefined;
            this.BuscarNaturalesAll(this.DocumentoSolicitud);
          this.VolverArriba();
        },
        error => {
          this.blockBtnBasico = false;
          console.error('EditarAsesor - ' + error);
        });
    } else {
      this.blockBtnBasico = false;
      this.notif.onWarning('Advertencia', 'Debe seleccionar un asesor válido.');
      this.disableAsesorPpal = null;
      this.asesorForm.get('strCodigoAse')?.reset();
      this.asesorForm.get('strNombreAse')?.reset();
    }
  }


  cambioCheck() {
    this.MarcoDebito = true;
  }

  //#endregion

  //#region ---- OPERACIONES NATURALES

  //#region Buscar por cedula

  removerDisableTabs() {
    $('#basicoTab').removeClass('disableTab');
    $('#financieroTab').removeClass('disableTab');
    $('#contactoTab').removeClass('disableTab');
    $('#activoTab').removeClass('disableTab');
    $('#conyugueTab').removeClass('disableTab');
    $('#laboralTab').removeClass('disableTab');
    $('#referenciaTab').removeClass('disableTab');
    $('#entrevistaTab').removeClass('disableTab');
    $('#seguroTab').removeClass('disableTab');
  }

  BuscarNaturalesAll(documento : string) {
    if (documento !== null && documento !== undefined && documento !== '') {
      this.loading = true;
      this.allItemsForm = [];
      this.datatratamientoLog = [];
      this.dataPepsLog = [];
      this.ResetAllFormBusqueda();
      this.ResetItemForm();
      this.GetEstado();
      this.GetConveniosAll();
      this.GetEPSAll();
      this.GetAsesorExternoAllMapear();
      this.totalActivos = 0;
      this.totalPatrimonio = 0;
      this.disbaleFromDocumento = true;
      this.acomuladorIngresos = 0;
      this.acomuladorEgresos = 0;
      this.acomuladorCostos = 0;
      this.acomuladorOperacional = 0;
      this.mostrarOficina = true;
      this.OcultarSeguro = true;
      this.infoArrendador = false;
      $('#fechasTab').removeClass('disableTab');
      this.basicosFrom.get('DocumentoBusqueda')?.setValue(documento);
      this.DocumentoSolicitud = documento;


      this.clientesService.BuscarNaturalesAll(documento).subscribe(
        (result : any) => {
          console.log("qqqq",result)
          if (result !== null) {
            this.basicosFrom.get('IdTerceroPrincipal')?.setValue(result.asociadosNaturalesDto.IdTercero);
            this.btnBuscar = true;
            this.loading = false;
            this.disbaleBusqueda = true;
            this.VolverArriba();
            this.dataCiudad = this.dataCiudadesAll;
            this.dataCiudadExp = this.dataCiudadesAll;
            this.dataCiudadesNaci = this.dataCiudadesAll;
            this.dataDepartamentos = this.dataDepartamentosAll;
            this.dataDepartamentoNaci = this.dataDepartamentosAll;
            this.dataDepartamentoExp = this.dataDepartamentosAll;
            this.removerDisableTabs();
            this.botonSiguiente.nativeElement.click();
            this.formPasivoLocked = true;
            this.bloquearClick = true;
            //#region Mapear Basicos
            if (result.asociadosNaturalesDto !== null) {
              this.basicosFrom.get('tipoCliente')?.setValue(result.asociadosNaturalesDto.IdRelacion);
              this.basicosFrom.get('RegimenTributario')?.setValue(result.asociadosNaturalesDto.RegimenTributario);
            } 
            this.relacionAnterior = result.asociadosNaturalesDto.IdRelacion;
            if (result.asociadosNaturalesDto.IdRelacion === 15) {
              this.BlockDeudor = null;
              this.BlockInputService = null;
              this.oculatObligatorioTercero = false;
              this.oculatObligatorioTerceroProveedor = true;
              this.basicosFrom.controls['Nombre'].setValue('');
              this.basicosFrom.controls['metodo'].setValidators(null);
              this.basicosFrom.controls['metodo'].setErrors(null);
              this.basicosFrom.controls['NombreDrop'].setValidators(null);
              this.basicosFrom.controls['NombreDrop'].setErrors(null);
              this.basicosFrom.controls['numHijos'].setValidators(null);
              this.basicosFrom.controls['numHijos'].setErrors(null);
              this.basicosFrom.controls['numHijosEstudian'].setValidators(null);
              this.basicosFrom.controls['numHijosEstudian'].setErrors(null);
              this.btnGuardarOculto = true;
              this.siguienteOculto = false;
              this.blockTratamiento = null;
              this.formTutorOculto = false;
              this.basicosFrom.get('IdentificacionTutor')?.clearValidators();
              this.basicosFrom.controls['IdentificacionTutor'].setErrors(null);
              this.basicosFrom.controls['IdentificacionTutor'].setValidators(null);
              this.EsProveedor = true;
            } else if (result.asociadosNaturalesDto.IdRelacion === 10) {
              this.BlockDeudor = null;
              this.BlockInputService = null;
              this.oculatObligatorioTercero = true;
              this.oculatObligatorioTerceroProveedor = true;
              this.basicosFrom.controls['IdentificacionTutor'].setValidators([Validators.required]);
              this.basicosFrom.controls['metodo'].setValidators([Validators.required]);
              this.basicosFrom.controls['metodo'].setErrors([Validators.required]);
              this.basicosFrom.controls['NombreDrop'].setValidators([Validators.required]);
              this.basicosFrom.controls['NombreDrop'].setErrors([Validators.required]);
              this.EsProveedor = false;
            } else {
              this.BlockDeudor = null;
              this.BlockInputService = null;
              this.EsProveedor = false;
              this.oculatObligatorioTercero = true;
              this.oculatObligatorioTerceroProveedor = true;
              this.basicosFrom.controls['metodo'].setValidators([Validators.required]);
              this.basicosFrom.controls['metodo'].setErrors([Validators.required]);
              this.basicosFrom.controls['NombreDrop'].setValidators([Validators.required]);
              this.basicosFrom.controls['NombreDrop'].setErrors([Validators.required]);
              this.basicosFrom.controls['numHijos'].setValidators(null);
              this.basicosFrom.controls['numHijos'].setErrors(null);
              this.basicosFrom.controls['numHijosEstudian'].setValidators(null);
              this.basicosFrom.controls['numHijosEstudian'].setErrors(null);
              this.basicosFrom.get('IdentificacionTutor')?.clearValidators();
              this.basicosFrom.controls['IdentificacionTutor'].setErrors(null);
              this.basicosFrom.controls['IdentificacionTutor'].setValidators(null);
            }
            this.basicosFrom.get('idNatural')?.setValue(result.asociadosNaturalesDto.IdNatural);
            this.dataOficinas.forEach(( elementOfi : any ) => {
              if (+elementOfi.Valor === result.asociadosNaturalesDto.IdOficina) {
                this.basicosFrom.get('oficina')?.setValue(elementOfi.Descripcion);
                this.oficinaVieja = elementOfi.Descripcion;
                this.objOficinaVieja = elementOfi;
              }
            });

            if (result.asociadosNaturalesDto !== null && result.asociadosNaturalesDto.IdTutor !== 0
              && result.asociadosNaturalesDto.IdRelacion === 10) {
              this.clientesGetListService.GetInfoGenNit(result.asociadosNaturalesDto.IdTutor).subscribe(
                resultInfo => {
                  this.formTutorOculto = true;
                  this.infoTutor = resultInfo;
                  this.basicosFrom.get('IdentificacionTutor')?.setValue(resultInfo.strDocumento);
                  this.basicosFrom.get('NombreTutor')?.setValue(resultInfo.strPrimerNombre + ' ' + resultInfo.strSegundoNombre
                    + ' ' + resultInfo.strPrimerApellido + ' ' + resultInfo.strSegundoApellido);
                  this.InfoTutorSeleccionado.DocumentoTutor.push(resultInfo.strDocumento);
                },
                error => {
                  this.notif.onDanger('Error - Tutor', error);
                  const errorMessage = <any>error;
                  console.log(errorMessage);
                }
              );
            } else if (result.asociadosNaturalesDto === null || result.asociadosNaturalesDto.IdTutor === 0
              && result.asociadosNaturalesDto.IdRelacion === 10) {
              this.formTutorOculto = true;
              this.basicosFrom.get('IdentificacionTutor')?.reset();
              this.basicosFrom.get('NombreTutor')?.reset();
            } else if (result.asociadosNaturalesDto !== null && result.asociadosNaturalesDto.IdTutor !== 0
              && result.asociadosNaturalesDto.IdRelacion === 5) {
              this.formTutorOculto = false;
              this.basicosFrom.get('IdentificacionTutor')?.reset();
              this.basicosFrom.get('NombreTutor')?.reset();
            } else {
              if (result.asociadosNaturalesDto.IdRelacion === 15 && result.asociadosNaturalesDto !== null
                && result.asociadosNaturalesDto.IdTutor !== 0) {
                this.formTutorOculto = false;
                this.basicosFrom.get('IdentificacionTutor')?.reset();
                this.basicosFrom.get('NombreTutor')?.reset();
              } else {
                this.formTutorOculto = false;
                this.basicosFrom.get('IdentificacionTutor')?.reset();
                this.basicosFrom.get('NombreTutor')?.reset();
              }
            }
            this.basicosFrom.get('fechaNacimiento')?.setValue(result.tercerosDto.FechaNacimiento);
            this.clientesGetListService.GetActividadEconomica(result.asociadosNaturalesDto.IdTipoOcupacion).subscribe(
              resultActividad => {
                this.dataActividad = resultActividad;
                resultActividad.forEach(( elementActividad : any ) => {
                  if (elementActividad.Id === result.asociadosNaturalesDto.IdActividadEconomica) {
                    this.basicosFrom.get('actividad')?.setValue(elementActividad.Descripcion);
                    this.BasicosEdit.get('EditActividad')?.setValue(elementActividad);
                  }
                });
              },
              error => {
                const errorMessage = <any>error;
                this.notif.onDanger('Error', errorMessage);
                console.error(errorMessage);
              }
            );
            this.dataProfesion.forEach(( elementProfesion : any ) => {
              if (elementProfesion.Clase === result.asociadosNaturalesDto.IdTituloProfesional) {
                this.dataProfesionMapper = elementProfesion;
                this.basicosFrom.get('profesion')?.setValue(elementProfesion.Descripcion);
              }
            });
            this.basicosFrom.get('tipoOcupacion')?.setValue(result.asociadosNaturalesDto.IdTipoOcupacion);
            this.basicosFrom.get('tipoEmpleo')?.setValue(result.asociadosNaturalesDto.IdTipoEmpleo);
            this.empleoAnterior = result.asociadosNaturalesDto.IdTipoEmpleo;
            this.GetTipoOcupacion();
            localStorage.setItem('TerceroNatura', result.asociadosNaturalesDto.IdTercero);
            this.idTerceroConsulta = result.asociadosNaturalesDto.IdTercero;
            this.basicosFrom.get('metodo')?.setValue(result.asociadosNaturalesDto.MetodoConocio);
            this.basicosFrom.get('tipoDocumento')?.setValue(result.tercerosDto.IdTipoDocumento);
            this.tipoDocumentoAnterior = result.tercerosDto.IdTipoDocumento;
            this.basicosFrom.get('numeroDocumento')?.setValue(result.tercerosDto.NumeroDocumento);
            this.objMotivoEnvio.Documento = result.tercerosDto.NumeroDocumento;
            this.documentoAnterior = result.tercerosDto.NumeroDocumento;
            this.basicosFrom.get('fechaExpedicion')?.setValue(result.tercerosDto.FechaExpDocumento);

            if ( result.tercerosDto.IdCiudadExpeDto !== null &&  
              result.tercerosDto.IdCiudadExpeDto !== undefined && result.tercerosDto.IdCiudadExpeDto !== 0) {
              this.AgregarValidadoresDepaCiuExp();
              
              this.dataCiudadesAll.forEach((elementCiu : any ) => {
                if (elementCiu.IdCiudad === result.tercerosDto.IdCiudadExpeDto) {
                  this.basicosFrom.get('ciudadExpedicion')?.setValue(+result.tercerosDto.IdCiudadExpeDto);
                  this.CiudadMapperExp = elementCiu;
                  this.CiuCargaInicial = elementCiu.Descripcion;
                  this.BasicosEdit.get('EditCiudadExp')?.setValue(elementCiu);
                  this.objMotivoEnvio.CiudadExpedicion = elementCiu.Nombre;
                  this.dataDepartamentosAll.forEach((elementDep : any ) => {
                    if (elementDep.IdDepartamento === elementCiu.IdDepartamento) {
                      this.basicosFrom.get('departExpedicion')?.setValue(elementCiu.IdDepartamento);
                      this.DepartMapperExp = elementDep;
                      this.DepaCargaInicialExp = elementDep.Descripcion;
                      this.dataPaisesAll.forEach((elementPais : any ) => {
                        if (elementPais.IdPais === elementDep.IdPais) {
                          this.PaiseCargaInicial = elementPais.Descripcion;
                          this.basicosFrom.get('paisExpedicion')?.setValue(elementDep.IdPais);
                          this.PaisMapperExp = elementPais;
                        }
                      });
                    }
                  });
                }
              });
            } else {
              if (result.tercerosDto.IdPaisExpe !== null && result.tercerosDto.IdPaisExpe !== undefined &&
                result.tercerosDto.IdPaisExpe !== 0) {
                 this.EliminarValidadoresDepaCiuExp();
                  this.dataPaisesAll.forEach((elementPais : any ) => {
                    if (elementPais.IdPais === result.tercerosDto.IdPaisExpe) {
                      this.PaisMapperExp = elementPais;
                       this.PaiseCargaInicial = elementPais.Descripcion;
                      this.basicosFrom.get('paisExpedicion')?.setValue(result.tercerosDto.IdPaisExpe);
                    }
                  });
              }
            }
            if (result.tercerosDto.IdCiudadNto !== null &&  result.tercerosDto.IdCiudadNto !== undefined &&
              result.tercerosDto.IdCiudadNto !== 0) {
              this.AgregarValidadoresDepaCiuNaci();
              this.dataCiudadesAll.forEach((elementCiu : any ) => {
                if (elementCiu.IdCiudad === result.tercerosDto.IdCiudadNto) {
                  this.basicosFrom.get('ciudadNacimiento')?.setValue(+result.tercerosDto.IdCiudadNto);
                  this.CiudadMapperNac = elementCiu;
                  this.BasicosEdit.get('EditCiudadNto')?.setValue(elementCiu);
                  this.dataDepartamentosAll.forEach((elementDep : any ) => {
                    if (elementDep.IdDepartamento === elementCiu.IdDepartamento) {
                      this.basicosFrom.get('departNacimiento')?.setValue(elementCiu.IdDepartamento);
                      this.DepartMapperNac = elementDep;
                      this.DepaCargaInicialNaci = elementDep.Descripcion;
                      this.dataPaisesAll.forEach((elementPais : any ) => {
                        if (elementPais.IdPais === elementDep.IdPais) {
                           this.PaiseCargaInicial = elementPais.Descripcion;
                          this.basicosFrom.get('paisNacimiento')?.setValue(elementDep.IdPais);
                          this.PaisMapperNac = elementPais;
                        }
                      });
                    }
                  });
                }
              });
            } else {
              if (result.tercerosDto.IdPaisNto !== null && result.tercerosDto.IdPaisNto !== undefined &&
                result.tercerosDto.IdPaisNto !== 0) {

                this.EliminarValidadoresDepaCiuNaci();
                  this.dataPaisesAll.forEach((elementPais : any ) => {
                    if (elementPais.IdPais === result.tercerosDto.IdPaisNto) {
                      this.PaisMapperExp = elementPais;
                      this.PaiseCargaInicial = elementPais.Descripcion;
                      this.basicosFrom.get('paisNacimiento')?.setValue(result.tercerosDto.IdPaisNto);
                    }
                  });
              }
            }
            this.basicosFrom.get('primerApellido')?.setValue(result.tercerosDto.PrimerApellido);
            this.ApeViejo = result.tercerosDto.PrimerApellido;
            this.basicosFrom.get('segundoApellido')?.setValue(result.tercerosDto.SegundoApellido);
            this.segApeViejo = result.tercerosDto.SegundoApellido;
            this.basicosFrom.get('primerNombre')?.setValue(result.tercerosDto.PrimerNombre);
            this.PriVNomViejo = result.tercerosDto.PrimerNombre;
            this.basicosFrom.get('segundoNombre')?.setValue(result.tercerosDto.SegundoNombre);
            this.SegNomViejo = result.tercerosDto.SegundoNombre;
            this.objMotivoEnvio.Nombre = result.tercerosDto.PrimerNombre + ' ' + result.tercerosDto.SegundoNombre + ' ' +
              result.tercerosDto.PrimerApellido + ' ' + result.tercerosDto.SegundoApellido;

            if (result.tercerosDto.IdAsesorExterno !== null && result.tercerosDto.IdAsesorExterno !== undefined) {
             this.asesorForm.get('strCodigo')?.setValue('');
              this.asesorForm.get('strNombre')?.setValue('');
              this.clientesGetListService.GetAsesorExterno(this.asesorForm.value).subscribe(
                resultExterno => {
                  resultExterno.forEach((elementAsesorExt: any) => {
                    if (elementAsesorExt.intIdAsesor === result.tercerosDto.IdAsesorExterno) {
                      this.asesorForm.get('strCodigo')?.setValue(elementAsesorExt.intIdAsesor);
                      this.asesorForm.get('strNombre')?.setValue(elementAsesorExt.Nombre);
                      this.NombreAsesorExt = elementAsesorExt.Nombre;
                      this.CedulaAsesorExt = elementAsesorExt.intIdAsesor;
                    } else if (elementAsesorExt.lngTercero === result.tercerosDto.IdAsesorExterno) {
                      this.asesorForm.get('strCodigo')?.setValue(elementAsesorExt.intIdAsesor);
                      this.asesorForm.get('strNombre')?.setValue(elementAsesorExt.Nombre);
                      this.NombreAsesorExt = elementAsesorExt.Nombre;
                      this.CedulaAsesorExt = elementAsesorExt.intIdAsesor;
                    }
                  });
                  this.MostrarAsesorExterno = true;
                });

            } else {
              this.MostrarAsesorExterno = false;
              this.NombreAsesorExt = '';
              this.CedulaAsesorExt = '';
            }

            if (this.dataEstado !== null &&  this.dataEstado !== undefined) {
              this.dataEstado.forEach((elementEstado : any) => {
                if (elementEstado.IdEstado === result.tercerosDto.IdEstado) {
                  this.basicosFrom.get('estado')?.setValue(elementEstado.IdEstado);
                  this.estadoAnterior = result.tercerosDto.IdEstado;
                }
              });
            }
            if( +result.tercerosDto.IdGenero !== null && +result.tercerosDto.IdGenero !== undefined ){
              this.basicosFrom.get('genero')?.setValue(+result.tercerosDto.IdGenero);
            } else {
              this.basicosFrom.get('genero')?.setValue(null);
            }
            if (result.tercerosDto.IdGenero === 1) {
              this.disableAmaCasa = false;
            } else {
              this.disableAmaCasa = true;
            }
            if(+result.asociadosNaturalesDto.IdEstadoCivil !== 0) {
              this.basicosFrom.get('estadoCivil')?.setValue(+result.asociadosNaturalesDto.IdEstadoCivil);
            } else {
              this.basicosFrom.get('estadoCivil')?.setValue(null);
            }
            this.estadoCivilAnterior = result.asociadosNaturalesDto.IdEstadoCivil;
            this.estadoCivilSeleccionado = +result.asociadosNaturalesDto.IdEstadoCivil;

            if (this.dataEmpresas !== null && this.dataEmpresas !== undefined) {
               this.dataEmpresas.forEach(( elementEps : any ) => {
              if (elementEps.IdEPS === result.asociadosNaturalesDto.IdEPS) {
                this.basicosFrom.get('NombreDrop')?.setValue(elementEps.Nombre);
                this.BasicosEdit.get('EditEPS')?.setValue(elementEps);
              }
            });
            }
            if(+result.asociadosNaturalesDto.Estrato !== 0) {
              this.basicosFrom.get('estrato')?.setValue(+result.asociadosNaturalesDto.Estrato);
            } else {
              this.basicosFrom.get('estrato')?.setValue(null)
            }
            this.rangeChanged = +result.asociadosNaturalesDto.Estrato;
            if(+result.asociadosNaturalesDto.IdTipoVivienda !== 0) {
              this.basicosFrom.get('tipoVivienda')?.setValue(result.asociadosNaturalesDto.IdTipoVivienda);
            } else {
               this.basicosFrom.get('tipoVivienda')?.setValue(null)
            }
            this.viviendaAnterior = result.asociadosNaturalesDto.IdTipoVivienda;
              if (result.asociadosNaturalesDto.Fecha_Vive === null) {
                this.basicosFrom.get('viveDesde')?.setValue(null);
              } else {
                const dateCompare = new Date('01-01-1901');
                const newDateString = new Date(result.asociadosNaturalesDto.Fecha_Vive);
                if (newDateString > dateCompare) {
                const dateString = result.asociadosNaturalesDto.Fecha_Vive;
                const newDate = new Date(dateString);
                const fechaStringNew = moment(newDate).format('YYYY-MM-DD');
                this.basicosFrom.get('viveDesde')?.setValue(fechaStringNew);
                } else {
                  this.basicosFrom.get('viveDesde')?.setValue(null);
                }
              }
            if(result.asociadosNaturalesDto.NumHijos !== null && result.asociadosNaturalesDto.NumHijos !== undefined){
               this.basicosFrom.get('numHijos')?.setValue(result.asociadosNaturalesDto.NumHijos.toString());
            }
            if(result.asociadosNaturalesDto.NumHijosEstudian !== null && result.asociadosNaturalesDto.NumHijosEstudian !== undefined){
              this.basicosFrom.get('numHijosEstudian')?.setValue(result.asociadosNaturalesDto.NumHijosEstudian.toString());
            }
            this.basicosFrom.get('tipoEmpleo')?.setValue(result.asociadosNaturalesDto.IdTipoEmpleo);
            if (result.asociadosNaturalesDto.IdTipoEmpleo === 1 || result.asociadosNaturalesDto.IdTipoEmpleo === 2 ||
                result.asociadosNaturalesDto.IdTipoEmpleo === 3 || result.asociadosNaturalesDto.IdTipoEmpleo  === 5 ||
                result.asociadosNaturalesDto.IdTipoEmpleo === 6 || result.asociadosNaturalesDto.IdTipoEmpleo === 7 ||
                result.asociadosNaturalesDto.IdTipoEmpleo  === 8 || result.asociadosNaturalesDto.IdTipoEmpleo  === 9 ||
                result.asociadosNaturalesDto.IdTipoEmpleo  === 14 || result.asociadosNaturalesDto.IdTipoEmpleo  === 15) {
              this.ocultarLaboral = false;
              this.ocultarLaboralDos = true;
            } else {
              this.ocultarLaboral = true;
              this.ocultarLaboralDos = false;
            }
            localStorage.setItem('laborSeleccionada', result.asociadosNaturalesDto.IdTipoEmpleo);
            this.basicosFrom.get('nivelEstudio')?.setValue(result.asociadosNaturalesDto.IdNivelEstudio);
            this.basicosFrom.get('tipoOcupacion')?.setValue(result.asociadosNaturalesDto.IdTipoOcupacion);
            if(result.asociadosNaturalesDto.IdMotivoIngreso !== 0){
               this.basicosFrom.get('motivoIngreso')?.setValue(result.asociadosNaturalesDto.IdMotivoIngreso);
            } else {
               this.basicosFrom.get('motivoIngreso')?.setValue(null);
            }
            this.basicosFrom.get('IdNacionalidad')?.setValue(result.asociadosNaturalesDto.IdNacionalidad);
            this.basicosFrom.get('amaCasa')?.setValue(result.asociadosNaturalesDto.MadreCabezaFamilia);
            this.basicosFrom.get('publica')?.setValue(result.asociadosNaturalesDto.PersPEP);
            if (result.asociadosNaturalesDto.NumPersCargo !== null && result.asociadosNaturalesDto.NumPersCargo !== 0) {
              this.basicosFrom.get('personasCargo')?.setValue(true);
              this.disablePersonasACargo = false;
            } else {
              this.basicosFrom.get('personasCargo')?.setValue(false);
              this.disablePersonasACargo = true;
            }
            if (result.asociadosNaturalesDto.NumPersCargo !== null && result.asociadosNaturalesDto.NumPersCargo !== 0) {
              this.basicosFrom.get('numeroPersonasCargo')?.setValue(result.asociadosNaturalesDto.NumPersCargo);
            } else {
              this.basicosFrom.get('numeroPersonasCargo')?.setValue(0);
            }
            if (result.asociadosNaturalesDto.OtroPor !== null) {
              this.basicosFrom.get('otroPor')?.setValue(
                this.MaysPrimera(result.asociadosNaturalesDto.OtroPor.toLowerCase()));
              this.disableMetodo = false;
            } else {
              this.basicosFrom.get('otroPor')?.setValue(null);
              this.disableMetodo = true;
            }
            if (result.asociadosNaturalesDto.NombreArrendador !== null && result.asociadosNaturalesDto.NombreArrendador !== undefined
              && result.asociadosNaturalesDto.NombreArrendador !== '') {
              this.infoArrendador = true;
              this.basicosFrom.get('nombreArrendador')?.setValue(
                this.MaysPrimera(result.asociadosNaturalesDto.NombreArrendador.toLowerCase()));
            } else {
              this.infoArrendador = false;
              this.basicosFrom.get('nombreArrendador')?.setValue(null);
            }
            this.basicosFrom.get('telefonoArrendador')?.setValue(result.asociadosNaturalesDto.TelefonoArrendador);
            if (result.asociadosNaturalesDto.IdAsesorCrea !== 2) {
              if (result.asociadosNaturalesDto.IdAsesorCrea !== 0 &&
                result.asociadosNaturalesDto.IdAsesorCrea !== null &&
                result.asociadosNaturalesDto.IdAsesorCrea !== undefined) {
                this.clientesService.GetAsesor(result.asociadosNaturalesDto.IdAsesorCrea).subscribe(
                  resultSeg => {
                    if (resultSeg.length >= 1) {
                      this.NombreAsesor = resultSeg[0].Nombre;
                      this.CedulaAsesor = resultSeg[0].IdAsesor;
                      this.asesorForm.get('strCodigoAse')?.setValue(resultSeg[0].IdAsesor);
                      this.asesorForm.get('strNombreAse')?.setValue(resultSeg[0].Nombre);
                      this.objMotivoEnvio.NombreAsesor = this.NombreAsesor;
                      localStorage.setItem('solicituRetiroJson', window.btoa(JSON.stringify(this.objMotivoEnvio)));
                    } else {
                      this.NombreAsesor = '';
                      this.CedulaAsesor = '';
                    }
                  }, error => {
                    this.notif.onDanger('Error', error);
                    console.error('asignarSegmento -' + error);
                  });
              } else {
              }
            } else {
              this.NombreAsesor = 'Coogranada';
              this.CedulaAsesor = result.asociadosNaturalesDto.IdAsesorCrea;
              this.asesorForm.get('strCodigoAse')?.setValue(2);
              this.asesorForm.get('strNombreAse')?.setValue('Coogranada');
            }
            this.basicosFormSet.get('asociadosNaturalesDto')?.setValue(this.basicosFrom.value);
            this.allItemsFormSaves.asociadosNaturalesDto = this.basicosFormSet.value;
            if (result.asociadosNaturalesDto.FechaCreacion === null) {
              this.fechaCreacion = null;
            } else {
              this.fechaCreacion = result.asociadosNaturalesDto.FechaCreacion;
              const dateStringCrea = result.asociadosNaturalesDto.FechaCreacion;
              this.fechaCreacionNatural = result.asociadosNaturalesDto.FechaCreacion;
              this.fechasForm.get('fechaTabCreacion')?.setValue(
                new DatePipe('en-CO').transform(dateStringCrea, 'yyyy/MM/dd HH:mm:ss'));
            }
            if (result.asociadosNaturalesDto.FechaMod === null) {
              this.fechaModificacion = null;
            } else {
              const dateStringModi = result.asociadosNaturalesDto.FechaMod;
              this.fechasForm.get('fechaTabModificacion')?.setValue(
                new DatePipe('en-CO').transform(dateStringModi, 'yyyy/MM/dd HH:mm:ss'));

              this.fechasForm.get('fechaTabSolicitudReingreso')?.setValue(
                new DatePipe('en-CO').transform(dateStringModi, 'yyyy/MM/dd HH:mm:ss'));
            }
            if (result.asociadosNaturalesDto.FechaSolicitudRetiro === null) {
              this.fechaRetiro = null;
              this.fechasForm.get('fechaTabSoliciudRetiro')?.setValue(null);
            } else {
              const dateStringRetiro = result.asociadosNaturalesDto.FechaSolicitudRetiro;
              this.fechasForm.get('fechaTabSoliciudRetiro')?.setValue(
                new DatePipe('en-CO').transform(dateStringRetiro, 'yyyy/MM/dd HH:mm:ss'));
            }
            if (result.asociadosNaturalesDto.FechaRetiro === null) {
              this.fechaRetiro = null;
              this.fechasForm.get('fechaTabRetiro')?.setValue(null);
            } else {
              const dateStringRetiro = result.asociadosNaturalesDto.FechaRetiro;
              this.fechasForm.get('fechaTabRetiro')?.setValue(
                new DatePipe('en-CO').transform(dateStringRetiro, 'yyyy/MM/dd HH:mm:ss'));
            }
            //#endregion
            
            //#region Mapear financieros
            if (result.financieroDto !== null && result.financieroDto !== undefined) {
              result.financieroDto.forEach(( elementFinanciero : any ) => {
                this.financieroFrom.get('idDatoFinanciero')?.setValue(elementFinanciero.IdDatoFinanciero);
                this.dataCategoria.forEach(( elementCate : any ) => {
                  if (elementCate.Id === elementFinanciero.IdCategoria) {
                    this.financieroFrom.get('categoria')?.setValue(elementCate);
                  }
                });
                this.financieroFrom.get('valor')?.setValue(elementFinanciero.Valor);
                this.financieroFrom.get('observacion')?.setValue(elementFinanciero.Descripcion);

                this.dataConceptoAll.forEach(( elementConcep : any ) => {
                  if (elementConcep.Id === elementFinanciero.IdConceptoFinan) {
                    this.financieroFrom.get('concepto')?.setValue(elementConcep);
                  }
                });
                if (elementFinanciero.IdCategoria === 1) {
                  if (elementFinanciero.IdConceptoFinan === 12) {
                    this.acomuladorCostos = this.acomuladorCostos + elementFinanciero.Valor;
                  } else {
                    this.acomuladorIngresos = this.acomuladorIngresos + elementFinanciero.Valor;
                  }
                  this.itemsIngresos.push(this.financieroFrom.value);
                } else {
                  this.acomuladorEgresos = this.acomuladorEgresos + elementFinanciero.Valor;
                  this.itemsEgresos.push(this.financieroFrom.value);
                }
              });
              result.financieroDto.forEach(( elementFinanciero : any ) => {
                if (elementFinanciero.IdCategoria === 1) {
                  if (elementFinanciero.IdConceptoFinan === 12) {
                    this.acomuladorOperacional = this.acomuladorIngresos - this.acomuladorCostos;
                  }
                }
              });
              this.financieroFrom.reset();
            }
            //#endregion

            //#region Mapear Contactos

          if (result.contactoDto !== null && result.contactoDto !== undefined) {
              result.contactoDto.forEach((elementContacto  : any) => {
                this.dataContacto.forEach((elementDataContacto : any) => {
                  if (elementDataContacto.Id === elementContacto.IdTipoContacto) {
                   this.contactoForm.get('TipoContacto')?.setValue(elementDataContacto);
                  }
                });
                if (elementContacto.IdTipoContacto === 3) {// Email
                  this.contactoForm.get('Email')?.setValue(elementContacto.Descripcion);
                  if (elementContacto.ContactoPrincipal) {
                    this.objMotivoEnvio.Email = elementContacto.Descripcion;
                  } else {
                    this.objMotivoEnvio.Email = elementContacto.Descripcion;
                  }
                } else if (elementContacto.IdTipoContacto === 1 || elementContacto.IdTipoContacto === 2) { // Direccion
                  this.contactoForm.get('Email')?.setValue(null);
                  this.contactoForm.get('DescripcionAdress')?.setValue(elementContacto.Descripcion);
                  this.contactoForm.get('DescripcionAdressIds')?.setValue(elementContacto.DescripcionIds);
                  if (elementContacto.ContactoPrincipal) {
                    this.objMotivoEnvio.Direccion = elementContacto.Descripcion;
                  }
                } else if (elementContacto.IdTipoContacto === 4 ||
                  elementContacto.IdTipoContacto === 5 ||
                  elementContacto.IdTipoContacto === 6) {
                  if (elementContacto.ContactoPrincipal) {
                    this.contactoForm.get('Celular')?.setValue(elementContacto.Descripcion);
                    this.contactoForm.get('Email')?.setValue(null);
                    this.objMotivoEnvio.Celular = elementContacto.Descripcion;
                  } else {
                    if (elementContacto.IdTipoContacto === 6) {
                       this.contactoForm.get('Celular')?.setValue(elementContacto.Descripcion);
                       this.contactoForm.get('Email')?.setValue(null);
                      this.objMotivoEnvio.Celular = elementContacto.Descripcion;
                    }
                  }
                  if (elementContacto.IdTipoContacto === 4) {
                    this.contactoForm.get('Telefonos')?.setValue(elementContacto.Descripcion);
                    this.contactoForm.get('Email')?.setValue(null);
                    this.objMotivoEnvio.Telefono = elementContacto.Descripcion;
                  }
                  if (elementContacto.IdTipoContacto === 5) {
                     this.contactoForm.get('Telefonos')?.setValue(elementContacto.Descripcion);
                    this.contactoForm.get('Email')?.setValue(null);
                    this.objMotivoEnvio.TelefonoEmpresa = elementContacto.Descripcion;
                  }
                } else {
                  this.contactoForm.get('DescripcionAdress')?.setValue('');
                  this.contactoForm.get('DescripcionAdressIds')?.setValue('');
                  this.contactoForm.get('Email')?.setValue(null);
                }
                if (elementContacto.IdCiudad !== 0 && elementContacto.IdCiudad !== null && elementContacto.IdCiudad !== undefined) {
                  if(elementContacto.IdBarrio !== null && elementContacto.IdBarrio !== undefined && elementContacto.IdBarrio !== 0) {
                    this.dataBarriosAll.forEach((elementBarr  : any) => {
                      if (elementBarr.IdBarrio === elementContacto.IdBarrio) {
                        this.contactoForm.get('Barrio')?.setValue(elementBarr);
                          this.dataCiudadesAll.forEach((elementCiu : any ) => {
                            if (elementCiu.IdCiudad === elementContacto.IdCiudad) {
                              this.contactoForm.get('Ciudad')?.setValue(elementCiu);
                                this.dataDepartamentosAll.forEach((elementDep : any ) => {
                                  if (elementDep.IdDepartamento === elementCiu.IdDepartamento) {
                                    this.contactoForm.get('Departamento')?.setValue(elementDep);
                                    this.dataPaisesAll.forEach((elementPais : any ) => {
                                        if (elementPais.IdPais === elementDep.IdPais) {
                                          this.contactoForm.get('Pais')?.setValue(elementPais);
                                        }
                                      });
                                  }
                                });
                            }
                          });
                      }
                    });
                  } else {
                    this.dataCiudadesAll.forEach((elementCiu : any ) => {
                    if (elementCiu.IdCiudad === elementContacto.IdCiudad) {
                      this.contactoForm.get('Ciudad')?.setValue(elementCiu);
                        this.dataDepartamentosAll.forEach((elementDep : any ) => {
                          if (elementDep.IdDepartamento === elementCiu.IdDepartamento) {
                            this.contactoForm.get('Departamento')?.setValue(elementDep);
                             this.dataPaisesAll.forEach((elementPais : any ) => {
                                if (elementPais.IdPais === elementDep.IdPais) {
                                  this.contactoForm.get('Pais')?.setValue(elementPais);
                                  this.PaisMapperCont = elementPais;
                                }
                              });
                          }
                        });
                    }
                  });
                  }
                } else {
                  if (elementContacto.IdPais !== 0 && elementContacto.IdPais !== null && elementContacto.IdPais !== undefined) {
                   this.dataPaisesAll.forEach((elementPais : any ) => {
                      if (elementPais.IdPais === elementContacto.IdPais) {
                        this.contactoForm.get('Pais')?.setValue(elementPais);
                        this.PaisMapperCont = elementPais;
                      }
                    });
                  }
                }
                this.contactoForm.get('contactoPpal')?.setValue(elementContacto.ContactoPrincipal);
                this.contactoForm.get('IdDatoContacto')?.setValue(elementContacto.IdDatoContacto);
                this.contactoForm.get('IdTercero')?.setValue(elementContacto.IdTercero);
                this.itemsContacto.push(this.contactoForm.value);
                this.contactoForm.reset();
              });
            }
            //#endregion

            //#region Mapear Activo
            if (result.activoDto !== null && result.activoDto !== undefined) {
              result.activoDto.forEach((elementActivo : any) => {
               this.dataTipoActivos.forEach((elementTipoActivo : any)=> {
                  if (elementTipoActivo.Id === elementActivo.IdActivo) {
                    this.activoForm.get('tipoActivo')?.setValue(elementTipoActivo);
                  }
                });
                this.dataActivosAll.forEach((elementDataActivo : any) => {
                  if (elementDataActivo.Id === elementActivo.IdTipoPatrimonio) {
                    this.activoForm.get('activo')?.setValue(elementDataActivo);
                  }
                });
                this.dataMarcas.forEach((elementMarca : any) => {
                  if (elementMarca.Clase === elementActivo.IdMarca) {
                    this.activoForm.get('Marca')?.setValue(elementMarca);
                  }
                });
                // this.dataCiudadesAll.forEach(elementCiudad => {
                //   if (elementCiudad.IdCiudad === elementActivo.IdCiudad) {
                //     this.activoForm.get('ciudadActivos')?.setValue(elementCiudad);
                //   }
                // });
                this.activoForm.get('idPatrimonio')?.setValue(elementActivo.IdPatrimonio);
                this.activoForm.get('VrlComercial')?.setValue(elementActivo.AvaluoComercial);
                this.activoForm.get('VrlAdeudado')?.setValue(elementActivo.ValorAdeudado);
                this.activoForm.get('DireccionCompleta')?.setValue(elementActivo.Direccion);
                this.activoForm.get('DescripcionAdressIds')?.setValue(elementActivo.DescripcionIds);
                this.activoForm.get('ModeloActivo')?.setValue(elementActivo.Modelo);
                if (elementActivo.IdActivo === 1 || elementActivo.IdActivo === 2) {
                    if (elementActivo.IdCiudad !== 0 && elementActivo.IdCiudad !== null && elementActivo.IdCiudad !== undefined) {
                      this.dataCiudadesAll.forEach((elementCiu : any ) => {
                      if (elementCiu.IdCiudad === elementActivo.IdCiudad) {
                        this.activoForm.get('Ciudad')?.setValue(elementCiu);
                          this.dataDepartamentosAll.forEach((elementDep : any ) => {
                            if (elementDep.IdDepartamento === elementCiu.IdDepartamento) {
                              this.activoForm.get('Departamento')?.setValue(elementDep);
                              this.dataPaisesAll.forEach((elementPais : any ) => {
                                  if (elementPais.IdPais === elementDep.IdPais) {
                                    this.activoForm.get('Pais')?.setValue(elementPais);
                                    this.PaisMapperAct = elementPais;
                                  }
                                });
                            }
                          });
                      }
                    });
                  } else {
                      if (elementActivo.IdPais !== 0 && elementActivo.IdPais !== null && elementActivo.IdPais !== undefined) {
                      this.dataPaisesAll.forEach((elementPais : any ) => {
                        if (elementPais.IdPais === elementActivo.IdPais) {
                          this.activoForm.get('Pais')?.setValue(elementPais);
                          this.PaisMapperAct = elementPais;
                        }
                      });
                    }
                  }
                  this.activoForm.get('aFavor')?.setValue(elementActivo.aFavor);
                } else if (elementActivo.IdActivo === 2) {
                  this.activoForm.get('aFavor')?.setValue(elementActivo.aFavor);
                }
                this.activoForm.get('Placa')?.setValue(elementActivo.Placa);
                this.activoForm.get('identificacionLegal')?.setValue(elementActivo.IdentificadorLegal);
                this.activoForm.get('VrlAdeudadoVehi')?.setValue(elementActivo.ValorHipoteca);
                this.activoForm.get('descripcionOtro')?.setValue(elementActivo.DescripcionOtro);
                // this.activoForm.get('complemen')?.setValue(elementActivo.Complemento);
                if (elementActivo.EntidadHipoPignora !== '' && elementActivo.EntidadHipoPignora !== null
                  && elementActivo.EntidadHipoPignora !== 'false' && elementActivo.EntidadHipoPignora !== '0' ) {
                  this.activoForm.get('hipotecado')?.setValue(true);
                } else {
                  this.activoForm.get('hipotecado')?.setValue(false);
                }
                if (elementActivo.IdActivo === 1) {
                  this.totalActivos = this.totalActivos + elementActivo.AvaluoComercial;
                  this.itemsPropiedad.push(this.activoForm.value);
                } else if (elementActivo.IdActivo === 3) {
                  this.totalActivos = this.totalActivos + elementActivo.AvaluoComercial;
                  this.itemsOtros.push(this.activoForm.value);
                } else {
                  this.totalActivos = this.totalActivos + elementActivo.AvaluoComercial;
                  this.activoForm.get('DireccionCompleta')?.setValue(null);
                  this.itemsVehiculo.push(this.activoForm.value);
                }
                this.activoForm.reset();
              });
              this.patrimonioForm.get('tlActivo')?.setValue(this.totalActivos);
              this.totalPatrimonio = this.totalActivos - result.asociadosNaturalesDto.TotalPasivos;
              if (result.asociadosNaturalesDto.TotalPasivos !== null) {
                this.patrimonioForm.get('tlPasivo')?.setValue(result.asociadosNaturalesDto.TotalPasivos);
              }
              else {
                this.patrimonioForm.get('tlPasivo')?.setValue(0);
              }
              this.patrimonioForm.get('tlPatrimonio')?.setValue(this.totalPatrimonio);
            }
            //#endregion

            //#region Mapear Conyugue
            if (result.conyugueDto !== null && result.conyugueDto !== undefined) {
              this.conyugueViejo = result.conyugueDto;
              this.conyugueForm.get('idConyugue')?.setValue(result.conyugueDto.IdConyuge);
              this.dataTipoDocumentoConyugue.forEach((elementConyugue : any) => {
                if (result.conyugueDto.IdTipoDocumento === elementConyugue.Clase) {
                  this.conyugueForm.get('DescripcionTipoDocumento')?.setValue(elementConyugue.Descripcion);
                }
              });
              this.conyugueForm.get('NumeroDocumento')?.setValue(result.conyugueDto.Documento);
              this.conyugueForm.get('PrimerApellidoC')?.setValue(result.conyugueDto.PrimerApellido);
              this.conyugueForm.get('SegundoApellidoC')?.setValue(result.conyugueDto.SegundoApellido);
              this.conyugueForm.get('PrimerNombreC')?.setValue(result.conyugueDto.PrimerNombre);
              this.conyugueForm.get('SegundoNombreC')?.setValue(result.conyugueDto.SegundoNombre);
              this.conyugueForm.get('TelefonoResidenciaC')?.setValue(result.conyugueDto.TelefonoResidencia);
              this.conyugueForm.get('NumeroCelularC')?.setValue(result.conyugueDto.NumeroCelular);
              this.conyugueForm.get('Nit')?.setValue(result.conyugueDto.NitEmpresa);
              this.conyugueForm.get('NombreDropMostrar')?.setValue(result.conyugueDto.NombreEmpresa);
              
              this.ocupacionesConyugue.forEach(( elementOcupacion : any ) => {
                if (+elementOcupacion.Value === result.conyugueDto.IdOcupacion) {
                  this.conyugueForm.get('TipoOcupacionC')?.setValue(elementOcupacion);
                }
              });
              this.conyugueForm.get('IngresosC')?.setValue(result.conyugueDto.Ingresos);
              this.conyugueForm.get('EgresosC')?.setValue(result.conyugueDto.Egresos);
              if (result.conyugueDto.Antiguedad !== null) {
                const antiguedad = result.conyugueDto.Antiguedad.split('|');
                if (antiguedad[0] !== 'null' && antiguedad[1] !== 'null') {
                  this.antiguedadStr = antiguedad[0] + '|' + antiguedad[1];
                  this.conyugueForm.get('AntiguedadEmpresa')?.setValue('Años - ' + antiguedad[0] + ' Meses - ' + antiguedad[1]);
                } else {
                  this.antiguedadStr = '' + '|' + '';
                  this.conyugueForm.get('AntiguedadEmpresa')?.setValue('Años - ' + '' + ' Meses - ' + '');
                }
              } else {
                this.conyugueForm.get('AntiguedadEmpresa')?.setValue(null);
              }
              this.conyugueForm.get('TelefonoEmpresa')?.setValue(result.conyugueDto.EmpresaLabora);
              this.conyugueForm.get('DetalleOcupacionC')?.setValue(result.conyugueDto.DetalleOcupacion);

              this.itemsConyugue.push(this.conyugueForm.value);
              this.itemConyugueConsultado.push(this.conyugueForm.value);
              this.conyugueForm.reset();
            }
            //#endregion

            //#region Mapear Laboral
            if (result.laboralDto !== null && result.laboralDto.length > 0 && result.laboralDto !== undefined) {
              result.laboralDto.forEach((elementLaboral: any) => {
                this.laboralForm.get('idAsocEmpresa')?.setValue(elementLaboral.IdAsocEmpresa);
                // aqui ir por la empresa especifica
                if (elementLaboral.IdEmpresa !== 0 && (elementLaboral.IdNatural === 0 || elementLaboral.IdNatural === null )) {
                  this.clientesGetListService.GetUnicaEmpresa(elementLaboral.IdEmpresa).subscribe(
                    resultUnica => {
                      if (resultUnica !== null) {
                        this.laboralForm.get('NombreDrop')?.setValue(resultUnica);
                        this.objMotivoEnvio.Empresa = resultUnica.Nombre;
                        localStorage.setItem('solicituRetiroJson', window.btoa(JSON.stringify(this.objMotivoEnvio)));
                        if((this.dataCargos != undefined))
                          this.dataCargos.forEach((elementCargos: any) => {
                            if (elementCargos.Clase === elementLaboral.IdCargo) {
                              this.laboralForm.get('cargo')?.setValue(elementCargos);
                            }
                          });
                        this.dataPeriodos.forEach((elementPeriodo : any) => {
                          if (elementPeriodo.Clase === elementLaboral.IdPeriodoPago) {
                            this.laboralForm.get('periodoPago')?.setValue(elementPeriodo);
                          }
                        });
                        if (elementLaboral.IdConvenio !== 0) {
                          this.dataConvenio.forEach((elementConvenio : any) => {
                            if (elementConvenio.intConvenio === elementLaboral.IdConvenio) {
                              this.laboralForm.get('convenio')?.setValue(elementConvenio);
                            }
                          });
                        } else {
                          this.laboralForm.get('convenio')?.setValue(null);
                        }
                        this.dataContratos.forEach((elementContrato : any) => {
                          if (elementContrato.Clase === elementLaboral.IdTipoContratoLaboral) {
                            this.laboralForm.get('tipoContrato')?.setValue(elementContrato);
                          }
                        });
                        this.laboralForm.get('EmpresaString')?.setValue(elementLaboral.EmpresaDescripcion);
                        this.laboralForm.get('NumPersonasCargo')?.setValue(elementLaboral.NumPersonasCargo);
                        this.laboralForm.get('fechaIngreso')?.setValue(elementLaboral.FechaLabora);
                        this.laboralForm.get('porConsulta')?.setValue(false);
                        this.itemsLaboral.push(this.laboralForm.value);
                        this.itemsLaboralesConsultados.push(this.laboralForm.value);
                        this.laboralForm.reset();
                      }
                    });

                } else if (elementLaboral.IdEmpresa !== 0 && elementLaboral.IdNatural === 1) {
                  this.clientesService.BuscarNaturalLaboral(elementLaboral.IdEmpresa).subscribe(
                    resultTerc => {
                      this.laboralForm.get('NombreDrop')?.setValue(resultTerc);
                      localStorage.setItem('solicituRetiroJson', window.btoa(JSON.stringify(this.objMotivoEnvio)));
                      this.dataCargos.forEach((elementCargos: any) => {
                        if (elementCargos.Clase === elementLaboral.IdCargo) {
                          this.laboralForm.get('cargo')?.setValue(elementCargos);
                        }
                      });
                      this.dataPeriodos.forEach((elementPeriodo : any) => {
                        if (elementPeriodo.Clase === elementLaboral.IdPeriodoPago) {
                          this.laboralForm.get('periodoPago')?.setValue(elementPeriodo);
                        }
                      });
                      if (elementLaboral.IdConvenio !== 0) {
                        this.dataConvenio.forEach((elementConvenio : any) => {
                          if (elementConvenio.intConvenio === elementLaboral.IdConvenio) {
                            this.laboralForm.get('convenio')?.setValue(elementConvenio);
                          }
                        });
                      } else {
                        this.laboralForm.get('convenio')?.setValue(null);
                      }
                      this.dataContratos.forEach((elementContrato : any) => {
                        if (elementContrato.Clase === elementLaboral.IdTipoContratoLaboral) {
                          this.laboralForm.get('tipoContrato')?.setValue(elementContrato);
                        }
                      });
                      this.laboralForm.get('EmpresaString')?.setValue(elementLaboral.EmpresaDescripcion);
                      this.laboralForm.get('NumPersonasCargo')?.setValue(elementLaboral.NumPersonasCargo);
                      this.laboralForm.get('fechaIngreso')?.setValue(elementLaboral.FechaLabora);
                      this.laboralForm.get('IdTipoLocal')?.setValue(elementLaboral.IdTipoLocal);
                      if (this.laboralForm.get('IdTipoLocal')?.value === 15) {
                        (this.laboralForm.get('DescripcionTipoLocal')?.setValue('Propio'))
                      } else if ((this.laboralForm.get('IdTipoLocal')?.value === 1)) {
                        (this.laboralForm.get('DescripcionTipoLocal')?.setValue('Arrendado'))
                      }
                      this.laboralForm.get('NombreArrendador')?.setValue(elementLaboral.NombreArrendador);
                      this.laboralForm.get('TelefonoArrendador')?.setValue(elementLaboral.TelefonoArrendador);

                      this.laboralForm.get('porConsulta')?.setValue(true);
                      this.itemsLaboral.push(this.laboralForm.value);
                      this.itemsLaboralesConsultados.push(this.laboralForm.value);
                      this.laboralForm.reset();
                    });
                } else {

                  // this.itemsLaboral = result.laboralDto;
                  

                  this.laboralForm.get('EmpresaString')?.setValue(elementLaboral.EmpresaDescripcion);
                  this.laboralForm.get('NumPersonasCargo')?.setValue(elementLaboral.NumPersonasCargo);
                  this.laboralForm.get('fechaIngreso')?.setValue(elementLaboral.FechaLabora);
                  this.laboralForm.get('IdTipoLocal')?.setValue(elementLaboral.IdTipoLocal);
                  if (this.laboralForm.get('IdTipoLocal')?.value === 15) {
                    (this.laboralForm.get('DescripcionTipoLocal')?.setValue('Propio'))
                  } else if(this.laboralForm.get('IdTipoLocal')?.value === 1) {
                    (this.laboralForm.get('DescripcionTipoLocal')?.setValue('Arrendado'))
                  }
                  this.laboralForm.get('NombreArrendador')?.setValue(elementLaboral.NombreArrendador);
                  this.laboralForm.get('TelefonoArrendador')?.setValue(elementLaboral.TelefonoArrendador);

                  this.itemsLaboral.push(this.laboralForm.value);
                  this.itemsLaboralesConsultados.push(this.laboralForm.value);
                  this.laboralForm.reset();
                }
              });
            }
            //#endregion

            //#region Mapear Referencia
            if (result.referenciaDto !== null && result.referenciaDto !== undefined) {
              result.referenciaDto.forEach(( elementReferencia : any ) => {
                if (elementReferencia.IdTipoReferencia === 1) { // Comercial
                  this.referenciaForm.get('DescripcionEmpresa')?.setValue(elementReferencia.DescripcionEmpresa);
                  this.referenciaForm.get('idReferencia')?.setValue(elementReferencia.IdReferencia);
                  this.referenciaForm.get('DescripcionEmpresa')?.setValue(elementReferencia.DescripcionEmpresa);
                  this.dataReferencias.forEach(( elementRefe: any ) => {
                    if (elementRefe.Id === elementReferencia.IdTipoReferencia) {
                      this.referenciaForm.get('idTipoReferencia')?.setValue(elementRefe.Id);
                      this.referenciaForm.get('NombreEmpresa')?.setValue(elementRefe.Descripcion);
                    }
                  });
                  this.referenciaForm.get('TelefonoEmpresas')?.setValue(elementReferencia.TelefonoEmpresa);
                  this.referenciaForm.get('ServicioProductoComercial')?.setValue(elementReferencia.ServicioProducto);

                   if (elementReferencia.IdCiudad !== null &&  elementReferencia.IdCiudad!== undefined && elementReferencia.IdCiudad!== 0) {
                    this.dataCiudadesAll.forEach((elementCiu : any ) => {
                      if (elementCiu.IdCiudad === elementReferencia.IdCiudad) {
                        this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                        this.CiudadMapperRefe = elementCiu;
                        this.dataDepartamentosAll.forEach((elementDep : any ) => {
                          if (elementDep.IdDepartamento === elementCiu.IdDepartamento) {
                            this.referenciaForm.get('Departamento')?.setValue(elementDep);
                            this.DepartMapperRefe = elementDep;
                            this.dataPaisesAll.forEach((elementPais : any ) => {
                              if (elementPais.IdPais === elementDep.IdPais) {
                                this.referenciaForm.get('Pais')?.setValue(elementPais);
                                this.PaisMapperRefe = elementPais;
                              }
                            });
                          }
                        });
                      }
                    });
                  } else {
                     if (elementReferencia.IdPais !== null && elementReferencia.IdPais !== undefined && elementReferencia.IdPais!== 0) {
                      this.dataPaisesAll.forEach((elementPais : any ) => {
                          if (elementPais.IdPais === elementReferencia.IdPais) {
                            this.referenciaForm.get('Pais')?.setValue(elementPais);
                            this.PaisMapperRefe = elementPais;
                          }
                        });
                      }
                  }
                  if (elementReferencia.IdTipoReferencia === 1) {
                    this.itemsFinancieraComercial.push(this.referenciaForm.value);
                    this.referenciaForm.reset();
                  }
                } else if (elementReferencia.IdTipoReferencia === 3) { // financiera
                  this.referenciaForm.get('idReferencia')?.setValue(elementReferencia.IdReferencia);
                  this.dataReferencias.forEach(( elementRefe: any ) => {
                    if (elementRefe.Id === elementReferencia.IdTipoReferencia) {
                      this.referenciaForm.get('idTipoReferencia')?.setValue(elementRefe.Id);
                      this.referenciaForm.get('NombreEmpresa')?.setValue(elementRefe.Descripcion);
                    }
                  });
                  this.referenciaForm.get('DescripcionEmpresaR')?.setValue(elementReferencia.DescripcionEmpresa);
                  if (elementReferencia.IdCiudad !== null && elementReferencia.IdCiudad !== undefined && elementReferencia.IdCiudad !== 0) {
                    this.dataCiudadesAll.forEach((elementCiu : any ) => {
                      if (elementCiu.IdCiudad === elementReferencia.IdCiudad) {
                        this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                        this.CiudadMapperRefe = elementCiu;
                        this.dataDepartamentosAll.forEach((elementDep : any ) => {
                          if (elementDep.IdDepartamento === elementCiu.IdDepartamento) {
                            this.referenciaForm.get('Departamento')?.setValue(elementDep);
                            this.DepartMapperRefe = elementDep;
                            this.dataPaisesAll.forEach((elementPais : any ) => {
                              if (elementPais.IdPais === elementDep.IdPais) {
                                this.referenciaForm.get('Pais')?.setValue(elementPais);
                                this.PaisMapperRefe = elementPais;
                              }
                            });
                          }
                        });
                      }
                    });
                  } else {
                     if (elementReferencia.IdPais !== null && elementReferencia.IdPais !== undefined && elementReferencia.IdPais!== 0) {
                      this.dataPaisesAll.forEach((elementPais : any ) => {
                          if (elementPais.IdPais === elementReferencia.IdPais) {
                            this.referenciaForm.get('Pais')?.setValue(elementPais);
                            this.PaisMapperRefe = elementPais;
                          }
                        });
                      }
                  }
                  this.referenciaForm.get('TelefonoFinanciera')?.setValue(elementReferencia.TelefonoEmpresa);
                  this.referenciaForm.get('ServicioProductoFinanciera')?.setValue(elementReferencia.ServicioProducto);
                  this.referenciaForm.get('NumeroProductoFinanciera')?.setValue(elementReferencia.NumeroProducto);
                  if (elementReferencia.IdTipoReferencia === 3) {
                    this.itemsFinancieraComercial.push(this.referenciaForm.value);
                    this.referenciaForm.reset();
                  }
                }  else if (elementReferencia.IdTipoReferencia === 2) { // familiar
                  this.referenciaForm.get('idReferencia')?.setValue(elementReferencia.IdReferencia);
                  this.dataReferencias.forEach(( elementRefe: any ) => {
                    if (elementRefe.Id === elementReferencia.IdTipoReferencia) {
                      this.referenciaForm.get('idTipoReferencia')?.setValue(elementRefe.Id);
                      this.referenciaForm.get('NombreEmpresa')?.setValue(elementRefe.Descripcion);
                    }
                  });
                  if (elementReferencia.IdOficina !== null &&  elementReferencia.IdOficina !== undefined && elementReferencia.IdOficina !== 0) {
                    this.dataCiudadesAll.forEach((elementCiu : any ) => {
                      if (elementCiu.IdCiudad === elementReferencia.IdOficina) {
                        this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                        this.CiudadMapperRefe = elementCiu;
                        this.dataDepartamentosAll.forEach((elementDep : any ) => {
                          if (elementDep.IdDepartamento === elementCiu.IdDepartamento) {
                            this.referenciaForm.get('Departamento')?.setValue(elementDep);
                            this.DepartMapperRefe = elementDep;
                            this.dataPaisesAll.forEach((elementPais : any ) => {
                              if (elementPais.IdPais === elementDep.IdPais) {
                                this.referenciaForm.get('Pais')?.setValue(elementPais);
                                this.PaisMapperRefe = elementPais;
                              }
                            });
                          }
                        });
                      }
                    });
                  } else if (elementReferencia.IdCiudad !== null &&  elementReferencia.IdCiudad !== undefined && elementReferencia.IdCiudad !== 0) {
                     this.dataCiudadesAll.forEach((elementCiu : any ) => {
                       if (elementCiu.IdCiudad === elementReferencia.IdCiudad) {
                        this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                        this.CiudadMapperRefe = elementCiu;
                        this.dataDepartamentosAll.forEach((elementDep : any ) => {
                          if (elementDep.IdDepartamento === elementCiu.IdDepartamento) {
                            this.referenciaForm.get('Departamento')?.setValue(elementDep);
                            this.DepartMapperRefe = elementDep;
                            this.dataPaisesAll.forEach((elementPais : any ) => {
                              if (elementPais.IdPais === elementDep.IdPais) {
                                this.referenciaForm.get('Pais')?.setValue(elementPais);
                                this.PaisMapperRefe = elementPais;
                              }
                            });
                          }
                        });
                      }
                    });
                  } else {
                    if (elementReferencia.IdPais !== null && elementReferencia.IdPais !== undefined && elementReferencia.IdPais !== 0) {
                      this.dataPaisesAll.forEach((elementPais : any ) => {
                        if (elementPais.IdPais === elementReferencia.IdPais) {
                          this.referenciaForm.get('Pais')?.setValue(elementPais);
                          this.PaisMapperRefe = elementPais;
                        }
                      });
                    }
                  }
                  if (elementReferencia.IdTipoReferencia === 2) {
                     this.dataParentescos.forEach((elementParent : any) => {
                        if (elementParent.Clase === elementReferencia.IdParentesco) {
                          this.referenciaForm.get('IdParentesco')?.setValue(elementParent);
                        }
                      });
                  } 
                  this.referenciaForm.get('PrimerNombre')?.setValue(elementReferencia.PrimerNombre);
                  this.referenciaForm.get('SegundoNombre')?.setValue(elementReferencia.SegundoNombre);
                  this.referenciaForm.get('PrimerApellido')?.setValue(elementReferencia.PrimerApellido);
                  this.referenciaForm.get('SegundoApellido')?.setValue(elementReferencia.SegundoApellido);
                  this.referenciaForm.get('TelefonoContactos')?.setValue(elementReferencia.TelefonoContacto);
                  this.referenciaForm.get('TelefonoEmpresaPersonal')?.setValue(elementReferencia.TelefonoEmpresa);
                  this.referenciaForm.get('extEmpresarial')?.setValue(elementReferencia.Ext);
                  this.referenciaForm.get('celular')?.setValue(elementReferencia.Celular);
                  if (elementReferencia.Email !== null && elementReferencia.Email !== '') {
                    this.referenciaForm.get('email')?.setValue(elementReferencia.Email);
                  } else {
                    this.referenciaForm.get('email')?.setValue(null);
                  }
                  if (elementReferencia.IdTipoReferencia === 2) {
                    this.itemsFamiliaPersonal.push(this.referenciaForm.value);
                    console.log(this.itemsFamiliaPersonal);
                    this.referenciaForm.reset();
                  }
                } else  { // personal
                  this.referenciaForm.get('idReferencia')?.setValue(elementReferencia.IdReferencia);
                  this.dataReferencias.forEach(( elementRefe: any ) => {
                    if (elementRefe.Id === elementReferencia.IdTipoReferencia) {
                      this.referenciaForm.get('idTipoReferencia')?.setValue(elementRefe.Id);
                      this.referenciaForm.get('NombreEmpresa')?.setValue(elementRefe.Descripcion);
                    }
                  });
                  if (elementReferencia.IdOficina !== null &&  elementReferencia.IdOficina !== undefined && elementReferencia.IdOficina !== 0) {
                    this.dataCiudadesAll.forEach((elementCiu : any ) => {
                      if (elementCiu.IdCiudad === elementReferencia.IdOficina) {
                        this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                        this.CiudadMapperRefe = elementCiu;
                        this.dataDepartamentosAll.forEach((elementDep : any ) => {
                          if (elementDep.IdDepartamento === elementCiu.IdDepartamento) {
                            this.referenciaForm.get('Departamento')?.setValue(elementDep);
                            this.DepartMapperRefe = elementDep;
                            this.dataPaisesAll.forEach((elementPais : any ) => {
                              if (elementPais.IdPais === elementDep.IdPais) {
                                this.referenciaForm.get('Pais')?.setValue(elementPais);
                                this.PaisMapperRefe = elementPais;
                              }
                            });
                          }
                        });
                      }
                    });
                  } else if (elementReferencia.IdCiudad !== null &&  elementReferencia.IdCiudad !== undefined && elementReferencia.IdCiudad !== 0) {
                     this.dataCiudadesAll.forEach((elementCiu : any ) => {
                      if (elementCiu.IdCiudad === elementReferencia.IdCiudad) {
                        this.referenciaForm.get('Ciudad')?.setValue(elementCiu);
                        this.CiudadMapperRefe = elementCiu;
                        this.dataDepartamentosAll.forEach((elementDep : any ) => {
                          if (elementDep.IdDepartamento === elementCiu.IdDepartamento) {
                            this.referenciaForm.get('Departamento')?.setValue(elementDep);
                            this.DepartMapperRefe = elementDep;
                            this.dataPaisesAll.forEach((elementPais : any ) => {
                              if (elementPais.IdPais === elementDep.IdPais) {
                                this.referenciaForm.get('Pais')?.setValue(elementPais);
                                this.PaisMapperRefe = elementPais;
                              }
                            });
                          }
                        });
                      }
                    });
                  } else {
                     if (elementReferencia.IdPais !== null && elementReferencia.IdPais !== undefined && elementReferencia.IdPais!== 0) {
                      this.dataPaisesAll.forEach((elementPais : any ) => {
                          if (elementPais.IdPais === elementReferencia.IdPais) {
                            this.referenciaForm.get('Pais')?.setValue(elementPais);
                            this.PaisMapperRefe = elementPais;
                          }
                        });
                      }
                  }
                  if (elementReferencia.IdTipoReferencia === 4) {
                     this.dataParentescosChange.forEach(elementParentChange => {
                      if (elementParentChange.Clase === elementReferencia.IdParentesco) {
                        this.referenciaForm.get('IdParentesco')?.setValue(elementParentChange);
                      }
                    });
                  }
                  this.referenciaForm.get('PrimerNombre')?.setValue(elementReferencia.PrimerNombre);
                  this.referenciaForm.get('SegundoNombre')?.setValue(elementReferencia.SegundoNombre);
                  this.referenciaForm.get('PrimerApellido')?.setValue(elementReferencia.PrimerApellido);
                  this.referenciaForm.get('SegundoApellido')?.setValue(elementReferencia.SegundoApellido);
                  this.referenciaForm.get('TelefonoContactos')?.setValue(elementReferencia.TelefonoContacto);
                  this.referenciaForm.get('TelefonoEmpresaPersonal')?.setValue(elementReferencia.TelefonoEmpresa);
                  this.referenciaForm.get('extEmpresarial')?.setValue(elementReferencia.Ext);
                  this.referenciaForm.get('celular')?.setValue(elementReferencia.Celular);
                  if (elementReferencia.Email !== null && elementReferencia.Email !== '') {
                    this.referenciaForm.get('email')?.setValue(elementReferencia.Email);
                  } else {
                    this.referenciaForm.get('email')?.setValue(null);
                  }
                }
               
                if (elementReferencia.IdTipoReferencia === 4) {
                  this.itemsFamiliaPersonal.push(this.referenciaForm.value);
                  this.referenciaForm.reset();
                }
              });
              this.referenciaForm.reset();
            }
            //#endregion

            //#region Mapear Entrevista
            if (result.entrevistaDto !== null && result.entrevistaDto !== undefined) {
              result.entrevistaDto.forEach(( elementEntrevista : any ) => {
                if (elementEntrevista.NumeroPregunta === 1) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(false);
                  } else if (elementEntrevista.Respuesta === 'false') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(false);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(true);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 2) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(false);
                  } else if (elementEntrevista.Respuesta === 'false'){
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(false);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(true);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 3) {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementEntrevista.Respuesta);
                }
                 if (elementEntrevista.NumeroPregunta === 4) {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementEntrevista.Respuesta );
                }
                if (elementEntrevista.NumeroPregunta === 5) {
                  this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementEntrevista.Respuesta);
                }
                if (elementEntrevista.NumeroPregunta === 6) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(false);
                  } else if (elementEntrevista.Respuesta === 'false'){
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(false);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(true);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 7) {
                  this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementEntrevista.Respuesta);
                }
                if (elementEntrevista.NumeroPregunta === 8) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                  } else  if (elementEntrevista.Respuesta === 'false'){
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(null);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 9) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                  } else if (elementEntrevista.Respuesta === 'false'){
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(null);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 10) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                  } else if (elementEntrevista.Respuesta === 'false') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(null);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 11) {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementEntrevista.Respuesta);
                }
                if (elementEntrevista.NumeroPregunta === 12) {
                  if (elementEntrevista.Respuesta !== '' && elementEntrevista.Respuesta !== null) {
                     this.dataPaisesAll.forEach((elementPais : any ) => {
                      if (elementPais.IdPais === +elementEntrevista.Respuesta) {
                        this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementPais);
                      }
                    });
                  } else {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(null);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 13) {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementEntrevista.Respuesta);
                }
                if (elementEntrevista.NumeroPregunta === 14) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(false);
                  } else if (elementEntrevista.Respuesta === 'false'){
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(false);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(true);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 15) {
                  if (elementEntrevista.Respuesta !== '' && elementEntrevista.Respuesta !== null) {
                    this.dataPaisesAll.forEach((elementPais : any ) => {
                      if (elementPais.IdPais === +elementEntrevista.Respuesta) {
                        this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementPais);
                      }
                    });
                  } else {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(null);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 16) {
                  if (elementEntrevista.Respuesta !== '' && elementEntrevista.Respuesta !== null) {
                    this.dataDivisas.forEach(( elementDivisa : any ) => {
                      if (elementDivisa.Id === +elementEntrevista.Respuesta) {
                        this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementDivisa);
                      }
                    });
                  } else {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(null);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 17) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(false);
                  } else if (elementEntrevista.Respuesta === 'false') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(false);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(true);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 18) {
                  if (elementEntrevista.Respuesta !== '' && elementEntrevista.Respuesta !== null) {
                    this.dataPaisesAll.forEach((elementPais : any ) => {
                      if (elementPais.IdPais === +elementEntrevista.Respuesta) {
                        this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementPais);
                      }
                    });
                  } else {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(null);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 19) {
                  if (elementEntrevista.Respuesta !== '' && elementEntrevista.Respuesta !== null) {
                    this.dataDivisas.forEach(( elementDivisa : any ) => {
                      if (elementDivisa.Id === +elementEntrevista.Respuesta) {
                        this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementDivisa);
                      }
                    });
                  } else {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(null);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 20) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(false);
                  } else if (elementEntrevista.Respuesta === 'false'){
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(false);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(true);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 21) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(false);
                  } else if (elementEntrevista.Respuesta === 'false') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(false);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(true);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 22) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(false);
                  } else  if (elementEntrevista.Respuesta === 'false'){
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(false);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(true);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 23) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(false);

                    if (elementEntrevista.NumeroPregunta === 23) {
                      this.preguntaPeps = true;
                      this.mostrarFemiliaresPeps = true;
                      result.listaDePeps.forEach(( elementPeps: any ) => {
                        this.relacionPepsForm.get('IdRelacionPEPS')?.setValue(elementPeps.IdRelacionPEPS);
                        this.relacionPepsForm.get('IdPregunta')?.setValue(elementEntrevista.NumeroPregunta);
                        this.dataCargos.forEach((elementCargos: any) => {
                          if (elementCargos.Clase === +elementPeps.Cargo) {
                            this.relacionPepsForm.get('Cargo')?.setValue(elementCargos);
                          }
                        });
                        this.dataParentescosPeps.forEach((elementParent : any) => {
                          if (elementParent.IdParentesco === elementPeps.IdParentesco) {
                            this.relacionPepsForm.get('IdParentesco')?.setValue(elementParent);
                          }
                        });
                        this.relacionPepsForm.get('NombreCompleto')?.setValue(elementPeps.NombreCompleto);
                        this.relacionPepsForm.get('Identificacion')?.setValue(elementPeps.Identificacion);
                        this.relacionPepsForm.get('PeriodoDesde')?.setValue(elementPeps.PeriodoDesde);
                        this.relacionPepsForm.get('PeriodoHasta')?.setValue(elementPeps.PeriodoHasta);
                        this.relacionPepsForm.get('IdTercero')?.setValue(elementPeps.IdTercero);
                        this.itemRelacionPeps.push(this.relacionPepsForm.value);
                      });
                      this.relacionPepsForm.reset();
                    }

                  } else {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(false);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(true);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 24) {
                  this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementEntrevista.Respuesta);
                }
                if (elementEntrevista.NumeroPregunta === 25) {
                  if (elementEntrevista.Respuesta !== '' && elementEntrevista.Respuesta !== null) {
                    this.dataDivisas.forEach(( elementDivisa : any ) => {
                      if (elementDivisa.Id === +elementEntrevista.Respuesta) {
                        this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementDivisa);
                      }
                    });
                  } else {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(null);
                  }
                }
                if (elementEntrevista.NumeroPregunta === 26) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(false);
                  } else if (elementEntrevista.Respuesta === 'false'){
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(false);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(true);
                  }
                }
                 if (elementEntrevista.NumeroPregunta === 28) {
                  if (elementEntrevista.Respuesta === 'true') {
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(true);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(false);
                  } else  if (elementEntrevista.Respuesta === 'false'){
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(false);
                    this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'No')?.setValue(true);
                  }
                }
                 if (elementEntrevista.NumeroPregunta === 29) {
                  this.entrevistaForm.get('RPregunta' + elementEntrevista.NumeroPregunta + 'Si')?.setValue(elementEntrevista.Respuesta);
                }
              });
            }
            //#endregion

            //#region Mapear Seguros
            if (result.segurosDto !== null) {
              result.segurosDto.forEach(( elementSeg : any ) => {
                this.segurosForm.get('idAsegurado')?.setValue(elementSeg.IdAsegurado);
                this.dataSeguros.forEach(elementSeguro => {
                  if (elementSeguro.Clase === elementSeg.IdSeguro) {
                    this.segurosForm.get('seguro')?.setValue(elementSeguro);
                    this.segurosEdit.get('EditSeguro')?.setValue(elementSeguro);
                  }
                });
                this.dataEstadosSeguro.forEach((elementEstadoSe : any) => {
                  if (elementEstadoSe.Id === elementSeg.IdEstado) {
                    this.segurosForm.get('estadoSeguro')?.setValue(elementEstadoSe);
                  }
                });
                this.segurosForm.get('fechaCreacion')?.setValue(elementSeg.FechaCreacion);
                this.segurosForm.get('fechaAsegurado')?.setValue(elementSeg.FechaRptaAseguradora);
                this.segurosForm.get('montoAsegurado')?.setValue(elementSeg.MontoAsegurado);
                this.segurosForm.get('tieneSeguro')?.setValue(elementSeg.SinCobertura);
                this.segurosForm.get('DescripcionTieneSeguro')?.setValue(elementSeg.PorqueSinCobertura);
                this.itemsSeguro.push(this.segurosForm.value);
                this.segurosForm.reset();
              });
            }

            if (result.asociadosNaturalesDto.DebitoAutomatico && result.asociadosNaturalesDto.DebitoAutomatico !== null) {
              this.segurosForm.get('debitoAuto')?.setValue(true);
            } else {
              this.segurosForm.get('debitoAuto')?.setValue(false);
            }
            //#endregion

            //#region Mapear LogSeguros
            if (result.logSegurosDto.length > 0) {
              result.logSegurosDto.forEach((elementSeguroLog : any) => {
                this.LogSeguroModel = new LogSegurosModel;
                this.dataEstadosSeguro.forEach((elementEstado : any) => {
                  if (elementSeguroLog.IdEstado !== 0) {
                    if (elementEstado.Id === elementSeguroLog.IdEstado) {
                      this.LogSeguroModel.Estado = elementEstado.Nombre;
                    }
                  } else {
                    this.LogSeguroModel.Estado = 'Eliminado';
                  }
                });

                this.dataSeguros.forEach(elementSeguro => {
                  if (elementSeguro.Clase === elementSeguroLog.IdSeguro) {
                    this.LogSeguroModel.Seguro = elementSeguro.Descripcion;
                  }
                });
                this.LogSeguroModel.FechaCreacion = new DatePipe('en-CO').transform(
                  elementSeguroLog.FechaCreacion, 'yyyy/MM/dd HH:mm:ss');
                this.LogSeguroModel.FechaModificacion = new DatePipe('en-CO').transform(
                  elementSeguroLog.FechaModificacion, 'yyyy/MM/dd HH:mm:ss');
                this.LogSeguroModel.FechaRptaAseguradora = new DatePipe('en-CO').transform(
                  elementSeguroLog.FechaRptaAseguradora, 'yyyy/MM/dd HH:mm:ss');
                this.LogSeguroModel.MontoAsegurado = elementSeguroLog.MontoAsegurado;

                this.itemsLogSeguro.push(this.LogSeguroModel);
                this.OcultarSeguro = true;
              });
            } else {
              this.OcultarSeguro = false;
              if (result.cooberturaDto !== undefined) {
                this.segurosForm.get('tieneSeguro')?.setValue(result.cooberturaDto.Coobertura);
                this.segurosForm.get('DescripcionTieneSeguro')?.setValue(result.cooberturaDto.DescripcionPorque);
              } else {
                this.segurosForm.get('tieneSeguro')?.setValue(false);
                this.segurosForm.get('DescripcionTieneSeguro')?.setValue('N/A');
              }
            }
            //#endregion

            //#region Mapear Tratamiento
            if (result.tratamientoDto !== null) {
              if (result.tratamientoDto.Acepto) {
                this.tratamientoConsulta = true;
                this.blockTratamiento = true;
                this.tratamientoForm.get('IdTratamiento')?.setValue(result.tratamientoDto.IdTratamiento);
                this.segurosForm.get('tratamiento')?.setValue(true);
              } else {
                this.blockTratamiento = true;
                this.tratamientoConsulta = false;
                this.tratamientoForm.get('IdTratamiento')?.setValue(result.tratamientoDto.IdTratamiento);
                this.segurosForm.get('tratamiento')?.setValue(false);
              }
            } else {
              this.tratamientoConsulta = false;
              if (result.tratamientoDto !== null) {
                this.tratamientoForm.get('IdTratamiento')?.setValue(result.tratamientoDto.IdTratamiento);
              } else {
                this.tratamientoForm.get('IdTratamiento')?.setValue(0);
              }
              this.segurosForm.get('tratamiento')?.setValue(false);
            }
            //#endregion

            //#region Mapper TratamientoLog
            if (result.tratamientoLogDto !== null) {
              result.tratamientoLogDto.forEach((elementLogTrata : any) => {
                if (elementLogTrata.Acepto === true) {
                  elementLogTrata.Acepto = 'Acepto';
                } else {
                  elementLogTrata.Acepto = 'No acepto';
                }
                const fechaAceto = new DatePipe('en-CO').transform(
                  elementLogTrata.FechaAceptacion, 'yyyy/MM/dd');
                elementLogTrata.FechaAceptacion = fechaAceto;
                const fechaNoAcepto = new DatePipe('en-CO').transform(
                  elementLogTrata.fechaNoAceptacion, 'yyyy/MM/dd');
                elementLogTrata.fechaNoAceptacion = fechaNoAcepto;
                this.datatratamientoLog.push(elementLogTrata);
              });
            }
            //#endregion

            //#region Mapper LogPeps
            if (result.pepsDto !== null) {
              result.pepsDto.forEach((elementLogPeps : any) => {
                if (elementLogPeps.FechaMarcacion !== null) {
                  elementLogPeps.marca = 'Marcado';
                } else {
                  elementLogPeps.marca = 'Desmarcado';
                }
                if (elementLogPeps.IdAsesorMarca !== 0) {
                  this.dataPepsLog.push(elementLogPeps);
                } else {
                  this.dataPepsLog.push(elementLogPeps);
                }
              });
            }
            //#endregion

            //#region Mapper Solicitud RetiroLog
            this.fechasForm.get('fechaTabSoliciudRetiro')?.setValue(
              new DatePipe('en-CO').transform(result.asociadosNaturalesDto.FechaSolicitudRetiro, 'yyyy/MM/dd HH:mm:ss'));
            this.GetRetirosLog(result.asociadosNaturalesDto.IdTercero);
            //#endregion

            //#region  Mapper Solicitud ReingresoLog
            this.fechasForm.get('fechaTabSolicitudReingreso')?.setValue(
              new DatePipe('en-CO').transform(result.asociadosNaturalesDto.FechaReingreso, 'yyyy/MM/dd HH:mm:ss'));
            this.GetReingresosLog(result.asociadosNaturalesDto.IdTercero);

            this.RetiradoBloqueado = +result.GetResultCliNaturalesGenTerceros;
            localStorage.setItem('solicituRetiroJson', window.btoa(JSON.stringify(this.objMotivoEnvio)));
            //#endregion
    
          } else {
            this.disbaleBusqueda = null;
            this.OcultarSeguro = false;
            this.disbaleFromDocumento = null;
            this.disableForm = true;
            this.disbaleFromTutor = true;
            this.formTutorOculto = false;
            this.ResetAllFormBusqueda();
            this.ResetItemForm();
            this.notif.onWarning('Advertencia', 'No se encontró registro.');
            this.loading = false;
            this.mostrarOficina = false;
            this.basicosFrom.get('operacion')?.setValue(2);
            this.basicosFrom.get('NombreBusqueda')?.reset();
            this.basicosFrom.get('DocumentoBusqueda')?.reset();
            this.generalesService.Autofocus('BuscarDocumento');
          }
        },
        error => {
          this.loading = false;
          this.notif.onWarning('Error', error);
          console.error('BuscarNaturalesAll - ' + error);
        });

      return true;
    }
    return false;
  }

  validarTipoOperacionEditar() {
    let data : string | null = localStorage.getItem('Data');
    const dataUser = JSON.parse(window.atob(data == null ? "": data));
    const results = this.basicosFrom.get('operacion')?.value;
    this.operacionesModel.idOperacion = results.ERP_tblOperacion.IdOperacion;
    this.operacionesModel.idPerfil = dataUser.UsuarioPerfil;
    if (results.ERP_tblOperacion.Descripcion === 'Buscar') {
      this.disableForm = null;
      this.disableFormEstado = null;
      this.disbaleFromDocumento = null;
    }
  }

  //#endregion

  //#region Buscar por nombre

  BuscarNaturalAllName() {
    this.loading = true;
    const strNombreBusqueda = this.basicosFrom.get('NombreBusqueda')?.value;
    if (strNombreBusqueda === '' || strNombreBusqueda === null || strNombreBusqueda === undefined) {
      this.disableForm = true;
      this.loading = false;
    } else {
      this.clientesService.BuscarNaturalesAllNombre(strNombreBusqueda).subscribe(
        result => {
          if (result.length !== 0) {
          this.loading = false;
          this.dataTercero = result;
          this.BuscarAsociados.nativeElement.click();
          } else {
            this.loading = false;
            this.notif.onWarning('Advertencia', 'No se encontró  registro.');
            this.basicosFrom.get('NombreBusqueda')?.reset();
            this.basicosFrom.get('DocumentoBusqueda')?.reset();
            this.generalesService.Autofocus('BuscarNombre');

          }
          
        },
        error => {
          console.error('ERROR - BuscarNaturalesAllName - ' + error);
        });
    }
  }

  buscarAllNameCedula(documentoSeleccionado : string ) {
    this.bloquearClick = true;
    this.BuscarNaturalesAll(documentoSeleccionado);
  }

  // Buscar por nombres  y cedula para laboral

  buscarAllNaturalLaboral(objeto : any, definir : any) {
    const arrayResult = [];
    this.loading = true;
    this.bloquearClick = true;
    this.clientesService.BuscarNaturalesALLLaboral(objeto, definir).subscribe(
      result => {
        this.loading = false;
        // arrayResult.push(result);
        this.dataTercero = result;
        this.BuscarAsociadosLaboral.nativeElement.click();
      },
      error => {
        console.error('ERROR - BuscarNaturalesAllNameDoc - ' + error);
      });
  }

  buscarAllNameCedulaEditLaboral(documentoSeleccionado : string) {
    this.bloquearClick = true;
    this.BuscarNaturalesAll(documentoSeleccionado);
  }

  // Buscar por nombres  y cedula para laboral
  buscarAllNaturalLaboralEdit(objeto : any, definir : any) {
    this.loading = true;
    this.bloquearClick = true;
    this.clientesService.BuscarNaturalesALLLaboral(objeto, definir).subscribe(
      result => {
        this.loading = false;
        this.dataTercero = result;
      },
      error => {
        console.error('ERROR - BuscarNaturalesAllNameDoc - ' + error);
      });
  }
  //#endregion

  //#region Cambiar estado - Relacion - documentos y nombres

  cambiarEstadoNatural() {
    this.blockBtnBasico = true;
    let data : string | null = localStorage.getItem('Data');
    const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
    const cambio = new CambioEstadoModel();
    cambio.IdEstado = this.basicosFrom.get('estado')?.value;
    cambio.IdTercero = Number(localStorage.getItem('TerceroNatura'));
    cambio.userWork = resultPerfil.Usuario;
    if (this.operacionesModel.idOperacion.toString() === '9') {
      this.GuardarLog(cambio, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
      this.clientesService.CambiarEstadoNatural(cambio).subscribe(
        result => {
          if (result) {
            if (result.Mensaje === undefined) {
              this.estadoAnterior = cambio.IdEstado;
              this.basicosFrom.get('operacion')?.reset();
              this.VolverArriba();
              this.disableFormEstado = true;
              this.FormCambioEstado.reset();
              this.btnGuardarOculto = false;
              this.siguienteOculto = true;
              this.btnOcultoBuscar = false;
              $('#basicoTab').removeClass('disableTab');
              $('#financieroTab').removeClass('disableTab');
              $('#contactoTab').removeClass('disableTab');
              $('#conyugueTab').removeClass('disableTab');
              $('#laboralTab').removeClass('disableTab');
              $('#referenciaTab').removeClass('disableTab');
              $('#entrevistaTab').removeClass('disableTab');
              $('#seguroTab').removeClass('disableTab');
              $('#fechasTab').addClass('disableTab');
              $('#activoTab').removeClass('disableTab');
              this.blockBtnBasico = false;
              this.notif.onSuccess('Exitoso', 'El cambio de estado se realizó correctamente');
              this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
              this.BuscarNaturalesAll(this.DocumentoSolicitud);
              this.ProEstado = '0';
              this.ProDescripcionOpe = ' ';
              this.OperacionMarcada = undefined;
            } else {
              this.notif.onWarning('Advertencia', 'El asociado tiene cuenta de aportes activa.');
              this.blockBtnBasico = null;
              
              }
          } else {
            this.blockBtnBasico = true;
            this.notif.onWarning('Advertencia',
              'El cambio de estado no se realizó correctamente - ' + result);
          }
        },
        error => {
          this.blockBtnBasico = true;
          this.notif.onDanger('Error', error);
          console.error('BuscarNaturalesAll - ' + error);
        }
      );
    } else {
      this.blockBtnBasico = true;
    }
  }

   ActivarDocumento() {
    this.blockBtnBasico = true;
    let data : string | null = localStorage.getItem('Data');
    const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
    const cambio = new CambioEstadoModel();
    cambio.IdEstado = this.basicosFrom.get('estado')?.value;
    cambio.IdTercero = Number(localStorage.getItem('TerceroNatura'));
    cambio.userWork = resultPerfil.Usuario;
    if (this.operacionesModel.idOperacion.toString() === '47') {
      this.GuardarLog(cambio, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
      this.clientesService.ActivarDocumentoBloqueado(cambio).subscribe(
        result => {
          if (result) {
            this.estadoAnterior = cambio.IdEstado;
            this.basicosFrom.get('operacion')?.reset();
            this.VolverArriba();
            this.disableFormEstado = true;
            this.FormCambioEstado.reset();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.btnOcultoBuscar = false;
            $('#basicoTab').removeClass('disableTab');
            $('#financieroTab').removeClass('disableTab');
            $('#contactoTab').removeClass('disableTab');
            $('#activoTab').removeClass('disableTab');
            $('#conyugueTab').removeClass('disableTab');
            $('#laboralTab').removeClass('disableTab');
            $('#referenciaTab').removeClass('disableTab');
            $('#entrevistaTab').removeClass('disableTab');
            $('#seguroTab').removeClass('disableTab');
            $('#fechasTab').addClass('disableTab');
            this.blockBtnBasico = false;
            this.notif.onSuccess('Exitoso', 'La activación del documento se realizó correctamente');
            this.BuscarNaturalesAll(this.DocumentoSolicitud);
          } else {
            this.blockBtnBasico = true;
            this.notif.onWarning('Advertencia',
              'La activación del documento no se realizó correctamente - ' + result);
          }
        },
        error => {
          this.blockBtnBasico = true;
          this.notif.onDanger('Error', error);
          console.error('BuscarNaturalesAll - ' + error);
        }
      );
    } else {
      this.blockBtnBasico = true;
    }
  }

  cambiarEstadoAutomaticoNatural() {
    const cambio = new CambioEstadoModel();
    cambio.IdEstado = this.basicosFrom.get('estado')?.value;
    cambio.IdTercero = Number(localStorage.getItem('TerceroNatura'));
    this.GuardarLog(cambio, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.CambiarEstadoNatural(cambio).subscribe(
      result => {
        if (result) {
          this.basicosFrom.get('operacion')?.reset();
          this.VolverArriba();
          this.notif.onSuccess('Exitoso', 'El cambio de estado se realizó correctamente');
          this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
        } else {
          this.notif.onWarning('Advertencia',
            'El cambio de estado no se realizó correctamentee - ' + result);
        }
      },
      error => {
        this.notif.onDanger('Error', error);
        console.error('BuscarNaturalesAll - ' + error);
      }
    );
  }

  cambiarRelacion() {
    this.loading = true;
    this.blockBtnBasico = true;
    let data : string | null = localStorage.getItem('Data');
    const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
    const relacion = +this.basicosFrom.get('tipoCliente')?.value;
    if (relacion !== this.relacionAnterior) {
      if (relacion === 15 && this.relacionAnterior === 5) { // relacion anterior asociado a Tercero
        this.clientesService.TieneCuentas(Number(localStorage.getItem('TerceroNatura'))).subscribe(
          resultCuenta => {
            if (!resultCuenta) {
              this.loading = false;
              this.notif.onWarning('Advertencia', 'No se puede realizar el cambio de relación, el asociado tiene cuentas activas.');
              this.siguienteOculto = true;
              this.btnOcultoBuscar = true;
              this.VolverArriba();
              this.basicosFrom.get('tipoCliente')?.setValue(this.relacionAnterior);
              this.basicosFrom.get('tipoDocumento')?.setValue(this.tipoDocumentoAnterior);
              this.disableFromTipoDocumento = true;
              this.disableFromTipoCliente = false;
              this.blockBtnBasico = null;
            } else {
              this.cambioRelacionModel.idRelacion = +this.basicosFrom.get('tipoCliente')?.value;
              this.cambioRelacionModel.idTercero = Number(localStorage.getItem('TerceroNatura'));
              this.cambioRelacionModel.userWork = resultPerfil.Usuario;
              if (this.dataAsociados !== null && this.dataAsociados !== undefined) {
                this.cambioRelacionModel.idTutor = this.dataAsociados[0].LngTercero;
              } else {
                this.cambioRelacionModel.idTutor = null;
              }
              this.cambioRelacionModel.idTipoDocumento = +this.basicosFrom.get('tipoDocumento')?.value;
              this.GuardarLog(this.cambioRelacionModel, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
              this.clientesService.CambiarRelacion(this.cambioRelacionModel).subscribe(
                result => {
                  this.loading = false;
                  this.basicosFrom.get('operacion')?.reset();
                  this.VolverArriba();
                  this.blockBtnBasico = false;
                  this.notif.onSuccess('Exitoso', 'El cambio de relación se realizó correctamente',
                    );
                    this.notif.onWarning('Advertencia', 'Recuerde revisar y actualizar la fecha de Expedición.');
                  this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
                  this.ProRelacion = '0';
                  this.ProIdTutor = '0';
                  this.ProNomTutor = '0';
                  this.ProDescripcionOpe = ' ';
                  this.OperacionMarcada = undefined;
                  this.disableFromTipoCliente = true;
                  this.disableFromTipoDocumento = true;
                  this.disbaleFromTutor = true;
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                  this.btnOcultoBuscar = false;
                  $('#basicoTab').removeClass('disableTab');
                  $('#financieroTab').removeClass('disableTab');
                  $('#contactoTab').removeClass('disableTab');
                  $('#activoTab').removeClass('disableTab');
                  $('#conyugueTab').removeClass('disableTab');
                  $('#laboralTab').removeClass('disableTab');
                  $('#referenciaTab').removeClass('disableTab');
                  $('#entrevistaTab').removeClass('disableTab');
                  $('#seguroTab').removeClass('disableTab');
                  $('#fechasTab').addClass('disableTab');
                  this.BuscarNaturalesAll(this.DocumentoSolicitud);
                },
                error => {

                });
            }
          });
      } else if (relacion === 15 && this.relacionAnterior === 10) { // relacion anterior menor a Tercero
        this.clientesService.TieneCuentas(Number(localStorage.getItem('TerceroNatura'))).subscribe(
          resultCuenta => {
            if (!resultCuenta) {
              this.notif.onWarning('Advertencia', 'No se puede realizar el cambio de relación, el asociado tiene cuentas activas.');
              this.VolverArriba();
              this.basicosFrom.get('tipoCliente')?.setValue(this.relacionAnterior);
              this.basicosFrom.get('tipoDocumento')?.setValue(this.tipoDocumentoAnterior);
              this.disableFromTipoDocumento = true;
              this.disableFromTipoCliente = true;
              this.blockBtnBasico = false;
              this.loading = false;
            } else {
              this.cambioRelacionModel.idRelacion = +this.basicosFrom.get('tipoCliente')?.value;
              this.cambioRelacionModel.idTercero = Number(localStorage.getItem('TerceroNatura'));
              this.cambioRelacionModel.userWork = resultPerfil.Usuario;
              if (this.dataAsociados !== null && this.dataAsociados !== undefined) {
                this.cambioRelacionModel.idTutor = this.dataAsociados[0].LngTercero;
              } else {
                this.cambioRelacionModel.idTutor = null;
              }
              this.cambioRelacionModel.idTipoDocumento = +this.basicosFrom.get('tipoDocumento')?.value;
              this.GuardarLog(this.cambioRelacionModel, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
              this.clientesService.CambiarRelacion(this.cambioRelacionModel).subscribe(
                result => {
                  this.loading = false;
                  this.basicosFrom.get('operacion')?.reset();
                  this.VolverArriba();
                  this.blockBtnBasico = false;
                  this.notif.onSuccess('Exitoso', 'El cambio de relación se realizó correctamente.' );
                  this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
                  this.ProRelacion = '0';
                  this.ProIdTutor = '0';
                  this.ProNomTutor = '0';
                  this.ProDescripcionOpe = ' ';
                  this.OperacionMarcada = undefined;                 
                  this.disableFromTipoCliente = true;
                  this.disableFromTipoDocumento = true;
                  this.disbaleFromTutor = true;
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                  this.btnOcultoBuscar = false;
                  $('#basicoTab').removeClass('disableTab');
                  $('#financieroTab').removeClass('disableTab');
                  $('#contactoTab').removeClass('disableTab');
                  $('#activoTab').removeClass('disableTab');
                  $('#conyugueTab').removeClass('disableTab');
                  $('#laboralTab').removeClass('disableTab');
                  $('#referenciaTab').removeClass('disableTab');
                  $('#entrevistaTab').removeClass('disableTab');
                  $('#seguroTab').removeClass('disableTab');
                  $('#fechasTab').addClass('disableTab');
                  this.BuscarNaturalesAll(this.DocumentoSolicitud);
                },
                error => {
                });
            }
          });
      } else if (relacion === 5 && this.relacionAnterior === 15) { // relacion anterior tercero a asociado

        if (resultPerfil.IdAsesor === null || resultPerfil.admRetiroFecha !== null) { // mensaje de validacion
          if (resultPerfil.admRetiroFecha !== null) {
            this.notif.onWarning('Advertencia',
              'El asesor se encuentra retirado.');
            this.blockBtnBasico = null;
          } else {
            this.notif.onWarning('Advertencia',
              'El usuario debe ser asesor.');
            this.blockBtnBasico = null;
          }
          this.loading = false;
        } else {
          // proceso normal
          this.cambioRelacionModel.idRelacion = +this.basicosFrom.get('tipoCliente')?.value;
          this.cambioRelacionModel.idTercero = Number(localStorage.getItem('TerceroNatura'));
          this.cambioRelacionModel.userWork = resultPerfil.Usuario;
          if (this.dataAsociados !== null && this.dataAsociados !== undefined) {
            this.cambioRelacionModel.idTutor = this.dataAsociados[0].LngTercero;
          } else {
            this.cambioRelacionModel.idTutor = null;
          }
          this.cambioRelacionModel.idTipoDocumento = +this.basicosFrom.get('tipoDocumento')?.value;
          this.GuardarLog(this.cambioRelacionModel, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
          this.clientesService.CambiarRelacion(this.cambioRelacionModel).subscribe(
            result => {
              this.loading = false;
              this.basicosFrom.get('operacion')?.reset();
              this.VolverArriba();
              this.blockBtnBasico = false;
              this.notif.onSuccess('Exitoso', 'El cambio de relación se realizó correctamente.');
              this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
              this.ProRelacion = '0';
              this.ProIdTutor = '0';
              this.ProNomTutor = '0';
              this.ProDescripcionOpe = ' ';
              this.OperacionMarcada = undefined;
              this.disableFromTipoCliente = true;
              this.disableFromTipoDocumento = true;
              this.disbaleFromTutor = true;
              this.btnGuardarOculto = false;
              this.siguienteOculto = true;
              this.btnOcultoBuscar = false;
              $('#basicoTab').removeClass('disableTab');
              $('#financieroTab').removeClass('disableTab');
              $('#contactoTab').removeClass('disableTab');
              $('#activoTab').removeClass('disableTab');
              $('#conyugueTab').removeClass('disableTab');
              $('#laboralTab').removeClass('disableTab');
              $('#referenciaTab').removeClass('disableTab');
              $('#entrevistaTab').removeClass('disableTab');
              $('#seguroTab').removeClass('disableTab');
              $('#fechasTab').addClass('disableTab');
              this.BuscarNaturalesAll(this.DocumentoSolicitud);
            },
            error => {
            });
        }
       
      } else { // relacion anterior de tercero a menor
        if (resultPerfil.IdAsesor === null || resultPerfil.admRetiroFecha !== null) { // mensaje de validacion
          if (resultPerfil.admRetiroFecha !== null) {
            this.notif.onWarning('Advertencia', 'El asesor se encuentra retirado.',
              );
          } else {
            this.notif.onWarning('Advertencia', 'El usuario debe ser asesor.',
              );
          }  
          this.loading = false;
        } else {
          // Proceso normal
          const tipoDoc = this.basicosFrom.value.tipoDocumento;
          if (tipoDoc === null) {
            this.loading = false;
            this.VolverArriba();
            this.notif.onWarning('Advertencia', 'Debe seleccionar un tipo de documento válido.',
              );
            this.VolverArriba();
            this.basicosFrom.get('tipoCliente')?.setValue(this.relacionAnterior);
            this.basicosFrom.get('tipoDocumento')?.setValue(this.tipoDocumentoAnterior);
            this.disableFromTipoDocumento = true;
            this.disableFromTipoCliente = true;
            this.blockBtnBasico = false;
            this.loading = false;
          } else {
            this.cambioRelacionModel.idRelacion = +this.basicosFrom.get('tipoCliente')?.value;
            this.cambioRelacionModel.idTercero = Number(localStorage.getItem('TerceroNatura'));
            this.cambioRelacionModel.userWork = resultPerfil.Usuario;
            if (this.dataAsociados !== null && this.dataAsociados !== undefined) {
              this.cambioRelacionModel.idTutor = this.dataAsociados[0].LngTercero;
            } else {
              this.cambioRelacionModel.idTutor = null;
            }
            if (this.cambioRelacionModel.idTutor === null && this.relacionAnterior !== 10) {
              this.VolverArriba();
              this.loading = false;
              this.notif.onWarning('Advertencia', 'Debe ingresar la información del tutor.',
                );
              this.blockBtnBasico = false;
              this.loading = false;
            } else {
              this.cambioRelacionModel.idTipoDocumento = +this.basicosFrom.get('tipoDocumento')?.value;
              this.GuardarLog(this.cambioRelacionModel, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
              this.clientesService.CambiarRelacion(this.cambioRelacionModel).subscribe(
                result => {
                  this.loading = false;
                  this.basicosFrom.get('operacion')?.reset();
                  this.VolverArriba();
                  this.blockBtnBasico = false;
                  this.notif.onSuccess('Exitoso', 'El cambio de relación se realizó correctamente.',
                    );
                  this.notif.onWarning('Advertencia', 'Debes actualizar el tipo y número de documento del asociado.',
                    );
                  this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
                  this.disableFromTipoCliente = true;
                  this.disableFromTipoDocumento = true;
                  this.disbaleFromTutor = true;
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                  this.btnOcultoBuscar = false;
                  $('#basicoTab').removeClass('disableTab');
                  $('#financieroTab').removeClass('disableTab');
                  $('#contactoTab').removeClass('disableTab');
                  $('#activoTab').removeClass('disableTab');
                  $('#conyugueTab').removeClass('disableTab');
                  $('#laboralTab').removeClass('disableTab');
                  $('#referenciaTab').removeClass('disableTab');
                  $('#entrevistaTab').removeClass('disableTab');
                  $('#seguroTab').removeClass('disableTab');
                  $('#fechasTab').addClass('disableTab');
                  this.BuscarNaturalesAll(this.DocumentoSolicitud);
                },
                error => {
                });
            }
          }
        }
       
      }
    } else {
      this.basicosFrom.get('operacion')?.reset();
      this.VolverArriba();
      this.notif.onWarning('Advertencia', 'Debe cambiar el tipo de relación.',
        );
      this.blockBtnBasico = false;
      this.loading = false;
    }
  }

  cambiarTipoDocumento() {
    this.blockBtnBasico = true;
    let data : string | null = localStorage.getItem('Data');
    const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
    this.cambioTipoDocumentoModel.idTercero = Number(localStorage.getItem('TerceroNatura'));
    this.cambioTipoDocumentoModel.idtipoDocumento = this.basicosFrom.get('tipoDocumento')?.value;
    this.cambioTipoDocumentoModel.Documento = this.basicosFrom.get('numeroDocumento')?.value;
    this.DocumentoSolicitud = this.basicosFrom.get('numeroDocumento')?.value;
    this.cambioTipoDocumentoModel.userWork = resultPerfil.Usuario;
    if (this.cambioTipoDocumentoModel.idtipoDocumento !== this.tipoDocumentoAnterior ||
      this.cambioTipoDocumentoModel.Documento !== this.documentoAnterior) {
    this.GuardarLog(this.cambioTipoDocumentoModel, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.CambiarTipoDocumento(this.cambioTipoDocumentoModel).subscribe(
      result => {
        this.yaIngreso = false;
        this.basicosFrom.get('operacion')?.reset();
        this.VolverArriba();
        this.disableFromTipoDocumento = true;
        this.disableFormNumeroDocumento = true;
        this.btnGuardarOculto = false;
        this.siguienteOculto = true;
        this.btnOcultoBuscar = false;
        $('#basicoTab').removeClass('disableTab');
        $('#financieroTab').removeClass('disableTab');
        $('#contactoTab').removeClass('disableTab');
        $('#activoTab').removeClass('disableTab');
        $('#conyugueTab').removeClass('disableTab');
        $('#laboralTab').removeClass('disableTab');
        $('#referenciaTab').removeClass('disableTab');
        $('#entrevistaTab').removeClass('disableTab');
        $('#seguroTab').removeClass('disableTab');
        $('#fechasTab').addClass('disableTab');
        this.blockBtnBasico = false;
        this.notif.onSuccess('Exitoso', 'El cambio tipo y número de documento se realizó correctamente.',
          );
        this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
        this.ProTipoD = '0';
        this.ProDocumento = '0';
        this.ProDescripcionOpe = ' ';
        this.OperacionMarcada = undefined;
          this.BuscarNaturalesAll(this.DocumentoSolicitud);
      },
      error => {
        this.blockBtnBasico = false;
      });

    } else {
      this.blockBtnBasico = false;
        this.notif.onWarning('Advertencia', 'Se debe realizar un cambio para esta operación.');
    }
  }

  cambiarNombresApellidos() {
    this.loading = true;
    this.blockBtnBasico = true;
    let data : string | null = localStorage.getItem('Data');
    const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
    if ($('#priNom').val().trim() === '' || $('#priApe').val().trim() === '') {
      this.notif.onWarning('Advertencia', 'Debe ingresar primer apellido y primer nombre. ',
        );
      this.blockBtnBasico = false;
       this.loading = false;
    } else {
      if(this.ApeViejo !== this.basicosFrom.get('primerApellido')?.value || this.segApeViejo !== this.basicosFrom.get('segundoApellido')?.value
       || this.PriVNomViejo !== this.basicosFrom.get('primerNombre')?.value || this.SegNomViejo !== this.basicosFrom.get('segundoNombre')?.value ) {
        this.cambioNombresApellidosModel.idTercero = Number(localStorage.getItem('TerceroNatura'));
        this.cambioNombresApellidosModel.primerNombre = this.basicosFrom.get('primerNombre')?.value;
        this.cambioNombresApellidosModel.segundoNombre = this.basicosFrom.get('segundoNombre')?.value;
        this.cambioNombresApellidosModel.primerApellido = this.basicosFrom.get('primerApellido')?.value;
        this.cambioNombresApellidosModel.segundoApellido = this.basicosFrom.get('segundoApellido')?.value;
        this.cambioNombresApellidosModel.userWork = resultPerfil.Usuario;
        this.GuardarLog(this.cambioNombresApellidosModel, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
        this.clientesService.CambiarNombreApellido(this.cambioNombresApellidosModel).subscribe(
          result => {
            this.basicosFrom.get('operacion')?.reset();
            this.VolverArriba();
            this.disableFormPA = true;
            this.disableFormPN = true;
            this.disableFormSA = true;
            this.disableFormSN = true;
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.btnOcultoBuscar = false;
            $('#basicoTab').removeClass('disableTab');
            $('#financieroTab').removeClass('disableTab');
            $('#contactoTab').removeClass('disableTab');
            $('#activoTab').removeClass('disableTab');
            $('#conyugueTab').removeClass('disableTab');
            $('#laboralTab').removeClass('disableTab');
            $('#referenciaTab').removeClass('disableTab');
            $('#entrevistaTab').removeClass('disableTab');
            $('#seguroTab').removeClass('disableTab');
            $('#fechasTab').addClass('disableTab');
            this.blockBtnBasico = false;
            this.notif.onSuccess('Exitoso', 'El cambio de nombres y apellidos se realizó correctamente.',
              );
            this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
            this.ProPrimerNombre = '0';
            this.ProSegundoNombre = '0';
            this.ProPrimerApellido = '0';
            this.ProSegundoApellido = '0';
            this.ProDescripcionOpe = ' ';
            this.OperacionMarcada = undefined;
              this.loading = false;
              this.BuscarNaturalesAll(this.DocumentoSolicitud);
          },
          error => {
            this.blockBtnBasico = false;
          });
      } else {
        this.loading = false;
        this.blockBtnBasico = null;
        this.notif.onWarning('Advertencia', 'Debe realizar cambios en los nombres y apellidos.');
        this.VolverArriba();
      }
    }
  }

  //#endregion

  //#region Marcacion PPES
  DesmacarPPES() {
    const ppes = new MarcarDesmarcarPPESModel();
    let data : string | null = localStorage.getItem('Data');
    const dataUser = JSON.parse(window.atob(data == null ? "": data));
    ppes.IdAsesorMarca = dataUser.lngTercero;
    ppes.IdTerceroMarca = Number(localStorage.getItem('TerceroNatura'));

    if (this.operacionesModel.idOperacion.toString() === '8') {
      ppes.marca = false;
      this.GuardarLog(ppes, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
      this.clientesService.MarcarDesmarcarPPES(ppes).subscribe(
        result => {
          if (result) {
            this.GuardarListPeps(false);
            this.basicosFrom.get('operacion')?.reset();
            this.VolverArriba();
            this.blockBtnBasico = false;
            this.notif.onSuccess('Exitoso', 'La desmarcación lista PEPS se realizó correctamente.',
              );
            this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
            this.basicosFrom.get('publica')?.setValue(false);
            this.clientesService.EditarEntrevistaPeps(Number(localStorage.getItem('TerceroNatura')), false, false, false, false , false).subscribe(
              resultPeps => {
                this.btnGuardarOculto = false;
                this.siguienteOculto = true;
              });
          } else {
            this.blockBtnBasico = false;
            this.VolverArriba();
            this.btnGuardarOculto = false;
            this.siguienteOculto = true;
            this.basicosFrom.get('operacion')?.reset();
            this.notif.onWarning('Advertencia', 'El asociado ya está desmarcado.');
          }
        },
        error => {
          this.blockBtnBasico = false;
          this.notif.onDanger('Error', error);
          console.error('MacarPPES - ' + error);
        });
    }
  }

  MarcarPPESEntrevista() {
    const ppes = new MarcarDesmarcarPPESModel();
    let data : string | null = localStorage.getItem('Data');
    const dataUser = JSON.parse(window.atob(data == null ? "": data));
    ppes.IdAsesorMarca = dataUser.lngTercero;
    ppes.IdTerceroMarca = Number(localStorage.getItem('TerceroNatura'));
    if (this.operacionesModel.idOperacion.toString() === '7') {
      const respta1 = this.entrevistaForm.get('RPregunta20Si')?.value;
      const respta2 = this.entrevistaForm.get('RPregunta21Si')?.value;
      const respta3 = this.entrevistaForm.get('RPregunta22Si')?.value;
      const respta4 = this.entrevistaForm.get('RPregunta23Si')?.value;
      const respta5 = this.entrevistaForm.get('RPregunta26Si')?.value;
      if (respta1 === null || respta2 === null || respta3 === null || respta4 === null || respta5 === null) {
        this.notif.onWarning('Advertencia', 'Debe seleccionar todas las preguntas sobre PEPS.');
        this.blockBtnBasico = null;
      } else {
        if ((respta4 === true || respta4 === 'true') && (this.itemRelacionPeps.length === 0)) {
          this.notif.onWarning('Advertencia', 'Debe ingresar informacion de los Peps.');
          this.blockBtnBasico = null;
        } else {
            ppes.marca = true;
            this.GuardarLog(ppes, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
            this.clientesService.MarcarDesmarcarPPES(ppes).subscribe(
              result => {
                if (result) {
                  this.clientesService.EditarEntrevistaPeps(Number(localStorage.getItem('TerceroNatura')),
                    respta1, respta2, respta3, respta4, respta5).subscribe(
                    resultPeps => {
                      this.GuardarListPeps(respta4);
                      this.basicosFrom.get('operacion')?.reset();
                      this.VolverArriba();
                      this.blockBtnBasico = false;
                      this.formBuscarLocked = true;
                      this.notif.onSuccess('Exitoso', 'La marcación lista PEPS se realizó correctamente.',
                        );
                      this.AsesorModifica(Number(localStorage.getItem('TerceroNatura')).toString());
                      this.basicosFrom.get('publica')?.setValue(true);                      
                      this.btnTratamientoMarcar = false;
                      this.btnMarcarEntrevista = false;
                      this.btnGuardarOculto = false;
                      this.siguienteOculto = true;                       
                      this.formLockedReconocimiento = true;
                      this.formLockedRecursos = true;
                      this.BloquearPreguntasPeps = true;
                    });
                } else {
                  this.VolverArriba();
                  this.basicosFrom.get('operacion')?.reset();
                  this.btnGuardarOculto = false;
                  this.siguienteOculto = true;
                  this.btnTratamientoMarcar = false;
                  this.btnMarcarEntrevista = true;
                  this.formLockedReconocimiento = true;
                  this.formLockedRecursos = true;
                  this.blockBtnBasico = false;
                  this.notif.onWarning('Advertencia', 'El asociado ya está marcado.');
                  this.BloquearPreguntasPeps = true;
                }
              },
              error => {
                this.blockBtnBasico = null;
                this.notif.onDanger('Error', error);
                console.error('MacarPPES - ' + error);
              });
          }
      }
    }
  }

  GuardarListPeps(marcoNo : any ) {
     if (this.itemRelacionPeps != null) {
      this.allItemsPeps = [];
      this.itemRelacionPeps.forEach(( elementpeps: any ) => {
        this.relacionPepsForm.get('IdPregunta')?.setValue(elementpeps.IdPregunta);
        this.relacionPepsForm.get('NombreCompleto')?.setValue(elementpeps.NombreCompleto);
        this.relacionPepsForm.get('Identificacion')?.setValue(elementpeps.Identificacion);
        this.relacionPepsForm.get('Cargo')?.setValue(elementpeps.Cargo.Clase);
        this.relacionPepsForm.get('PeriodoDesde')?.setValue(elementpeps.PeriodoDesde);
        this.relacionPepsForm.get('PeriodoHasta')?.setValue(elementpeps.PeriodoHasta);
        this.relacionPepsForm.get('IdParentesco')?.setValue(elementpeps.IdParentesco.IdParentesco);
        this.relacionPepsForm.get('IdTercero')?.setValue(elementpeps.IdTercero);
        this.allItemsPeps.push(this.relacionPepsForm.value);
      });

      this.allItemsFormSaves.listaDePeps = this.allItemsPeps;
      this.relacionPepsSave.get('ListaDePeps')?.setValue(this.allItemsPeps);
      this.allItemsFormSave.push(this.relacionPepsSave.value);

    } else {

      this.allItemsFormSaves.listaDePeps = [];
      this.relacionPepsSave.get('ListaDePeps')?.setValue([]);
      this.allItemsFormSave.push(this.relacionPepsSave.value);
    }
    if (marcoNo !== null) {
      if (marcoNo) {
        this.EditarPPES(this.allItemsPeps);
      } else {
        this.EliminarPPES();
      }
    } else {
      this.EditarPPES(this.allItemsPeps);
    }
  }
  //#endregion

  //#region Solicitud reingreso
  GetReingresosLog(tercero : string) {
    this.clientesService.GetReingresosLog(tercero).subscribe(
      result => {
        result.forEach(( elementReiLog: any ) => {
          elementReiLog.FechaReingreso = new DatePipe('en-CO').transform(elementReiLog.FechaReingreso, 'yyyy/MM/dd HH:mm:ss');
          this.dataReingresoLog.push(elementReiLog);
        });
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      }
    );
  }

  setDataSolicitudReingreso() {
    let dataobj : string | null = localStorage.getItem('Data');
    const data = JSON.parse(window.atob(dataobj == null ? "": dataobj));
    const opera = this.basicosFrom.get('operacion')?.value;
    const objReingreso = new SolicitudReingresoModel();
    objReingreso.FechaReingreso = formatDate(new Date(), 'yyyy/MM/dd HH:mm:ss', 'en');
    objReingreso.IdTercero = Number(localStorage.getItem('TerceroNatura'));
    objReingreso.IdAsesor = data.lngTercero;
    this.GuardarLog(objReingreso, opera, 0, Number(localStorage.getItem('TerceroNatura')),11);
    this.clientesService.GuardarReingreso(objReingreso).subscribe(
      resultReingre => {
        this.basicosFrom.get('operacion')?.reset();
        this.clientesService.CambiarMotivoReingreso(objReingreso.IdTercero, 65).subscribe(
          resultMotivo => {
          });
        const cambio = new CambioEstadoModel();
        cambio.IdEstado = 5; // se cambia el estado a activo
        cambio.IdTercero = Number(localStorage.getItem('TerceroNatura'));
        cambio.userWork = data.Usuario;
        this.GuardarLog(cambio, 9, 0, Number(localStorage.getItem('TerceroNatura')),11);
        this.clientesService.CambiarEstadoNatural(cambio).subscribe(
          resultCambio => {      
          });
        this.notif.onSuccess('Exitoso', 'El asociado se reingresó correctamente.');
        this.disbaleBusqueda = true;
        this.btnGuardarOculto = false;
        this.siguienteOculto = true;
        this.basicosFrom.get('estado')?.setValue(5) // falta verifica
        // this.BuscarNaturalesAll(this.DocumentoSolicitud);
      }, error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      });
  }
  //#endregion

  //#region Solicitud Retiro
  GetMotivosRetiro() {
    this.clientesService.GetMotivosRetiro().subscribe(
      result => {
        this.dataMotivos = result;
        this.solicitudRetiroForm.get('idMotivo')?.setValue('0');
        this.abrirRetiro.nativeElement.click();
        this.botonSiguiente.nativeElement.click();
        this.removeActiveTab();
        this.devolverTab(1);
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      }
    );
  }

  SetDataSolicituretiro() {
    const dataForm = this.solicitudRetiroForm.value;
    if (dataForm.idMotivo === '' || dataForm.idMotivo === null || dataForm.idMotivo === '0') {
      this.solicitudRetiroForm.get('idMotivo')?.setValue('0');
      this.notif.onWarning('Advertencia', 'Debe seleccionar un motivo de retiro.',
        );
      this.basicosFrom.get('operacion')?.reset();
      this.mostrarBtn = false;
      this.abrirRetiro.nativeElement.click();
      this.botonSiguiente.nativeElement.click();
    } else {
      if (dataForm.idMotivo === '12' || dataForm.idMotivo === '11') {
        if (dataForm.ObservacionMotivo === '' || dataForm.ObservacionMotivo === null) {
          this.mostarErrorMotivoDescripcion = true;
        } else {
          this.mostarErrorMotivoDescripcion = false;
          // aqui realizar el registro
          let data : string | null = localStorage.getItem('Data');
          const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
          let motivo : string | null = localStorage.getItem('solicituRetiroJson')
          const resulMotivoEnvio = JSON.parse(window.atob(motivo == null ? "" : motivo));
          this.objMotivo.DescripcionOtro = this.solicitudRetiroForm.get('ObservacionMotivo')?.value;
          this.objMotivo.FechaRetiro = formatDate(new Date(), 'yyyy/MM/dd HH:mm:ss', 'en');
          this.objMotivo.IdTercero = this.basicosFrom.get('IdTerceroPrincipal')?.value;
          this.objMotivo.IdAsesor = resultPerfil.lngTercero;
          this.objMotivo.MotivoRetiro = this.solicitudRetiroForm.get('idMotivo')?.value;
          this.objMotivoEnvio.Nombre = resulMotivoEnvio.Nombre;
          this.objMotivoEnvio.Documento = resulMotivoEnvio.Documento;
          this.objMotivoEnvio.Motivo = this.solicitudRetiroForm.get('idMotivo')?.value;
          this.objMotivoEnvio.Otro = this.objMotivo.DescripcionOtro;
          this.objMotivoEnvio.Celular = resulMotivoEnvio.Celular;
          this.objMotivoEnvio.Direccion = resulMotivoEnvio.Direccion;
          this.objMotivoEnvio.TelefonoEmpresa = resulMotivoEnvio.TelefonoEmpresa;
          this.objMotivoEnvio.NombreAsesor = resultPerfil.Nombre;
          this.objMotivoEnvio.Email = resulMotivoEnvio.Email;
          this.objMotivoEnvio.CiudadExpedicion = resulMotivoEnvio.CiudadExpedicion;
          this.objMotivoEnvio.Empresa = resulMotivoEnvio.Empresa;
          this.motivoEnvioJson = JSON.stringify(this.objMotivoEnvio);
          this.GuardarLog(this.objMotivo, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
          this.clientesService.GuardarRetiro(this.objMotivo).subscribe(
            result => {
              // aqui abrir el modal para imprimir
              this.ObservacionRetiro = false;
              this.solicitudRetiroForm.reset();
              this.cerrarRetiro.nativeElement.click();
              this.openSolicitudRetiro.nativeElement.click();
              this.basicosFrom.get('operacion')?.reset();
              this.btnGuardarOculto = true;
              this.siguienteOculto = false;
              this.mostrarBtn = false;
              // AQUI BUSCAR DE NUEVO EL HISTORIAL DEL USUARIO
              this.BuscarNaturalesAll(this.DocumentoSolicitud);
              // this.GetRetirosLog(Number(localStorage.getItem('TerceroNatura')));
            }, error => {
              this.motivoEnvioJson = null;
              const errorMessage = <any>error;
              this.notif.onDanger('Error', errorMessage);
              console.error(errorMessage);
            });
        }
      } else {
        this.mostarErrorMotivoDescripcion = false;
        // aqui realizar el registro
        let data : string | null = localStorage.getItem('Data');
        const resultPerfil = JSON.parse(window.atob(data == null ? "": data));
        let motivo : string | null = localStorage.getItem('solicituRetiroJson');
        const resulMotivoEnvio = JSON.parse(window.atob(motivo == null ? "" : motivo));
        this.objMotivo.DescripcionOtro = this.solicitudRetiroForm.get('ObservacionMotivo')?.value;
        this.objMotivo.DescripcionOtro = this.solicitudRetiroForm.get('ObservacionMotivo')?.value;
        this.objMotivo.FechaRetiro = formatDate(new Date(), 'yyyy/MM/dd HH:mm:ss', 'en');
        this.objMotivo.IdTercero = this.basicosFrom.get('IdTerceroPrincipal')?.value;
        this.objMotivo.IdAsesor = resultPerfil.lngTercero;
        this.objMotivo.MotivoRetiro = this.solicitudRetiroForm.get('idMotivo')?.value;
        this.objMotivoEnvio.Nombre = resulMotivoEnvio.Nombre;
        this.objMotivoEnvio.Documento = resulMotivoEnvio.Documento;
        this.objMotivoEnvio.Motivo = this.solicitudRetiroForm.get('idMotivo')?.value;
        this.objMotivoEnvio.Otro = this.objMotivo.DescripcionOtro;
        this.objMotivoEnvio.Celular = resulMotivoEnvio.Celular;
        this.objMotivoEnvio.Direccion = resulMotivoEnvio.Direccion;
        this.objMotivoEnvio.TelefonoEmpresa = resulMotivoEnvio.TelefonoEmpresa;
        this.objMotivoEnvio.NombreAsesor = resultPerfil.Nombre;
        this.objMotivoEnvio.Email = resulMotivoEnvio.Email;
        this.objMotivoEnvio.CiudadExpedicion = resulMotivoEnvio.CiudadExpedicion;
        this.objMotivoEnvio.Empresa = resulMotivoEnvio.Empresa;
        this.motivoEnvioJson = JSON.stringify(this.objMotivoEnvio);
        this.GuardarLog(this.objMotivo, this.basicosFrom.get('operacion')?.value, 0, Number(localStorage.getItem('TerceroNatura')),11);
        this.clientesService.GuardarRetiro(this.objMotivo).subscribe(
          result => {
            this.ObservacionRetiro = false;
            this.solicitudRetiroForm.reset();
            this.cerrarRetiro.nativeElement.click();
            this.openSolicitudRetiro.nativeElement.click();
            this.basicosFrom.get('operacion')?.reset();
            this.btnGuardarOculto = true;
            this.siguienteOculto = false;
            this.mostrarBtn = false;
            // AQUI BUSCAR DE NUEVO EL HISTORIAL DEL USUARIO
            this.BuscarNaturalesAll(this.DocumentoSolicitud);
            // this.GetRetirosLog(Number(localStorage.getItem('TerceroNatura')));
          }, error => {
            this.motivoEnvioJson = null;
            const errorMessage = <any>error;
            this.notif.onDanger('Error', errorMessage);
            console.error(errorMessage);
          });
      }
    }
  }

  validarOtroMotivo() {
    const MotivoEscogido = this.solicitudRetiroForm.get('idMotivo')?.value;
    if (MotivoEscogido === '12' || MotivoEscogido === '11') {
      this.ObservacionRetiro = true;
    } else {
      this.ObservacionRetiro = false;
      this.mostarErrorMotivoDescripcion = false;
      this.solicitudRetiroForm.get('ObservacionMotivo')?.reset();
    }
  }

  GetRetirosLog(tercero : string) {
    this.dataRetiroLog = [];
    this.clientesService.GetRetirosLog(tercero).subscribe(
      result => {
        result.forEach(( elementReiLog: any ) => {
          elementReiLog.FechaRetiro = new DatePipe('en-CO').transform(elementReiLog.FechaRetiro, 'yyyy/MM/dd HH:mm:ss');
          if (elementReiLog.IdAsesor !== 0) {
            this.dataRetiroLog.push(elementReiLog);
          } else {
            this.dataRetiroLog.push(elementReiLog);
          }
        });
      },
      error => {
        const errorMessage = <any>error;
        this.notif.onDanger('Error', errorMessage);
        console.error(errorMessage);
      }
    );
  }

  Reimprimir(idRetiroLog : string) {
    this.IdSolicitud = idRetiroLog;
    this.openSolicitudRetiroReimprimir.nativeElement.click();
  }
  //#endregion

  //#endregion

  //#region Validaciones FormControl

  changeZoom(value: number) {
    this.rangeChanged = value;
  }

  validateBasicos() {

    const DocumentoBusqueda = new FormControl('', []);
    const NombreBusqueda = new FormControl('', []);
    const idNatural = new FormControl('', []);
    const operacion = new FormControl('', [Validators.required]);
    const tipoCliente = new FormControl('', [Validators.required]);
    const tipoDocumento = new FormControl('', [Validators.required]);
    const numeroDocumento = new FormControl('', [Validators.required, Validators.minLength(3),
    Validators.maxLength(15), Validators.pattern('^[0-9]*')]);

    const fechaExpedicion = new FormControl('', [Validators.required]);
    const ciudadExpedicion = new FormControl('', [Validators.required]);
    const departExpedicion = new FormControl('', [Validators.required]);
    const paisExpedicion = new FormControl('',[Validators.required]);

    const fechaNacimiento = new FormControl('', [Validators.required]);
    const ciudadNacimiento = new FormControl('', [Validators.required]);
    const departNacimiento = new FormControl('', [Validators.required]);
    const paisNacimiento = new FormControl('',[Validators.required]);

    const primerNombre = new FormControl('', [Validators.required, Validators.pattern('[a-zA-ZñÑáéíóúÁÉÍÓÚ ]+')]);
    const segundoNombre = new FormControl('', [Validators.pattern('[a-zA-ZñÑáéíóúÁÉÍÓÚ ]+')]);
    const primerApellido = new FormControl('', [Validators.required, Validators.pattern('[a-zA-ZñÑáéíóúÁÉÍÓÚ ]+')]);
    const segundoApellido = new FormControl('', [Validators.pattern('[a-zA-ZñÑáéíóúÁÉÍÓÚ ]+')]);
    
    const estado = new FormControl('', [Validators.required]);
    const genero = new FormControl('', [Validators.required]);
    const estadoCivil = new FormControl('', [Validators.required]);
    const estrato = new FormControl('', [Validators.required]);
    const tipoVivienda = new FormControl('', [Validators.required]);
    const viveDesde = new FormControl('', [Validators.required]);
    const numHijos = new FormControl('', [Validators.required, Validators.pattern('^[0-9]*')]);
    const numHijosEstudian = new FormControl('', [Validators.required, Validators.pattern('^[0-9]*')]);
    const tipoEmpleo = new FormControl('', [Validators.required]);
    const nivelEstudio = new FormControl('', [Validators.required]);
    const tipoOcupacion = new FormControl('', [Validators.required]);
    const motivoIngreso = new FormControl('', [Validators.required]);
    const IdNacionalidad = new FormControl('', []);
    const publica = new FormControl('', []);
    const personasCargo = new FormControl('', []);
    const numeroPersonasCargo = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const actividad = new FormControl('', [Validators.required]);
    const profesion = new FormControl('', []);
    const segmento = new FormControl('', []);
    const setSegmento = new FormControl('', []);
    const Nombre = new FormControl('', []);
    const NIT = new FormControl('', []);
    const NombreTutor = new FormControl('', []);
    const IdentificacionTutor = new FormControl('', []);
    const NombreDrop = new FormControl('', []);
    const amaCasa = new FormControl('', []);
    const metodo = new FormControl('', []);
    const otroPor = new FormControl('', []);
    const oficina = new FormControl('', []);
    const nombreArrendador = new FormControl('', []);
    const telefonoArrendador = new FormControl('', []);

    const IdNatural = new FormControl('', []);
    const IdTercero = new FormControl('', []);
    const IdTerceroPrincipal = new FormControl('', []);
    const MadreCabezaFamilia = new FormControl('', []);
    const IdTipoVivienda = new FormControl('', []);
    const Estrato = new FormControl('', []);
    const Fecha_Vive = new FormControl('', []);
    const IdEstadoCivil = new FormControl('', []);
    const IdRelacion = new FormControl('', []);
    const NumHijos = new FormControl('', []);
    const NumHijosEstudian = new FormControl('', []);
    const Carnet = new FormControl('', []);
    const IdEstado = new FormControl('', []);
    const IdNivelEstudio = new FormControl('', []);
    const IdTituloProfesional = new FormControl('', []);
    const IdActividadEconomica = new FormControl('', []);
    const Dependiente = new FormControl('', []);
    const IdSegmento = new FormControl('', []);
    const IdTipoOcupacion = new FormControl('', []);
    const IdTipoEmpleo = new FormControl('', []);
    const NumPersCargo = new FormControl('', []);
    const IdTutor = new FormControl('', []);
    const IdEPS = new FormControl('', []);
    const IdMotivoIngreso = new FormControl('', []);
    const PersPEP = new FormControl('', []);
    const FechaCreacion = new FormControl('', []);
    const IdAsesorCrea = new FormControl('', []);
    const FechaMod = new FormControl('', []);
    const IdAsesorMod = new FormControl('', []);
    const FechaRetiro = new FormControl('', []);
    const IdAsesorRetira = new FormControl('', []);
    const IdOficina = new FormControl('', []);
    const MetodoConocio = new FormControl('', []);
    const ERP_tblAsocSegmentos = new FormControl('', []);
    const asociadosNaturalesDto = new FormControl('', []);
    const OtroPor = new FormControl('', []);
    const NombreArrendador = new FormControl('', []);
    const TelefonoArrendador = new FormControl('', []);

    const EditCiudadExp = new FormControl('', []);
    const EditActividad = new FormControl('', []);
    const EditCiudadNto = new FormControl('', []);
    const EditEPS = new FormControl('', []);
    
    const UsuarioERP = new FormControl('', []);
    const IdTerceroAsesor = new FormControl('', []);

    this.basicosFrom = new FormGroup({
      idNatural: idNatural,
      DocumentoBusqueda: DocumentoBusqueda,
      NombreBusqueda: NombreBusqueda,
      operacion: operacion,
      tipoCliente: tipoCliente,
      tipoDocumento: tipoDocumento,
      numeroDocumento: numeroDocumento,

      Nombre: Nombre,
      NIT: NIT,
      NombreDrop: NombreDrop,
      NombreTutor: NombreTutor,
      IdentificacionTutor: IdentificacionTutor,

      fechaExpedicion: fechaExpedicion,
      ciudadExpedicion: ciudadExpedicion,
      fechaNacimiento: fechaNacimiento,
      ciudadNacimiento: ciudadNacimiento,
      primerApellido: primerApellido,
      segundoApellido: segundoApellido,
      primerNombre: primerNombre,
      segundoNombre: segundoNombre,
      estado: estado,
      genero: genero,
      estadoCivil: estadoCivil,
      estrato: estrato,
      IdNacionalidad: IdNacionalidad,
      tipoVivienda: tipoVivienda,
      viveDesde: viveDesde,
      numHijos: numHijos,
      numHijosEstudian: numHijosEstudian,
      tipoEmpleo: tipoEmpleo,
      nivelEstudio: nivelEstudio,
      tipoOcupacion: tipoOcupacion,
      motivoIngreso: motivoIngreso,
      publica: publica,
      personasCargo: personasCargo,
      numeroPersonasCargo: numeroPersonasCargo,
      actividad: actividad,
      profesion: profesion,
      segmento: segmento,
      setSegmento: setSegmento,
      amaCasa: amaCasa,
      metodo: metodo,
      otroPor: otroPor,
      oficina: oficina,

      nombreArrendador: nombreArrendador,
      telefonoArrendador: telefonoArrendador,

      departExpedicion: departExpedicion,
      paisExpedicion:paisExpedicion,

      departNacimiento: departNacimiento,
      paisNacimiento: paisNacimiento,
      IdTerceroPrincipal: IdTerceroPrincipal,
      RegimenTributario: new FormControl(null),

    });

    this.basicoSave = new FormGroup({
      IdNatural: IdNatural,
      IdTercero: IdTercero,
      MadreCabezaFamilia: MadreCabezaFamilia,
      IdTipoVivienda: IdTipoVivienda,
      Estrato: Estrato,
      Fecha_Vive: Fecha_Vive,
      IdEstadoCivil: IdEstadoCivil,
      IdRelacion: IdRelacion,
      IdNacionalidad: IdNacionalidad,
      NumHijos: NumHijos,
      NumHijosEstudian: NumHijosEstudian,
      Carnet: Carnet,
      IdEstado: IdEstado,
      IdNivelEstudio: IdNivelEstudio,
      IdTituloProfesional: IdTituloProfesional,
      IdActividadEconomica: IdActividadEconomica,
      Dependiente: Dependiente,
      IdSegmento: IdSegmento,
      IdTipoOcupacion: IdTipoOcupacion,
      IdTipoEmpleo: IdTipoEmpleo,
      NumPersCargo: NumPersCargo,
      IdTutor: IdTutor,
      IdEPS: IdEPS,
      IdMotivoIngreso: IdMotivoIngreso,
      PersPEP: PersPEP,
      FechaCreacion: FechaCreacion,
      IdAsesorCrea: IdAsesorCrea,
      FechaMod: FechaMod,
      IdAsesorMod: IdAsesorMod,
      FechaRetiro: FechaRetiro,
      IdAsesorRetira: IdAsesorRetira,
      IdOficina: IdOficina,
      MetodoConocio: MetodoConocio,
      OtroPor: OtroPor,
      NombreArrendador: NombreArrendador,
      TelefonoArrendador: TelefonoArrendador,
      ERP_tblAsocSegmentos: ERP_tblAsocSegmentos,
      UsuarioERP : UsuarioERP,
      IdTerceroAsesor: IdTerceroAsesor,

    });

    this.basicosFormSet = new FormGroup({
      asociadosNaturalesDto: asociadosNaturalesDto
    });

    this.BasicosEdit = new FormGroup({
      EditCiudadExp: EditCiudadExp,
      EditActividad: EditActividad,
      EditCiudadNto: EditCiudadNto,
      EditEPS: EditEPS
    });


  }

  validateAsesorExterno() {
    const strCodigo = new FormControl('', []);
    const strNombre = new FormControl('', []);
    const strTipo = new FormControl('', []);
    const strCodigoAse = new FormControl('', [Validators.pattern('[0-9]*')]);
    const strNombreAse = new FormControl('', []);

    this.asesorForm = new FormGroup({
      strCodigo: strCodigo,
      strNombre: strNombre,
      strTipo: strTipo,
      strCodigoAse: strCodigoAse,
      strNombreAse: strNombreAse
    });

  }

  validateTerceroBasico() {
    const IdTercero = new FormControl('', []);
    const NumeroDocumento = new FormControl('', []);
    const IdTipoDocumento = new FormControl('', []);
    const IdCiudadExpeDto = new FormControl('', []);
    const IdCiudadNto = new FormControl('', []);
    const FechaNacimiento = new FormControl('', []);
    const FechaExpDocumento = new FormControl('', []);
    const PrimerNombre = new FormControl('', []);
    const SegundoNombre = new FormControl('', []);
    const PrimerApellido = new FormControl('', []);
    const SegundoApellido = new FormControl('', []);
    const IdGenero = new FormControl('', []);
    const IdEstado = new FormControl('', []);
    const IdAsesorExterno = new FormControl('', []);
    const IdPaisExpe = new FormControl('', []);
    const IdPaisNto = new FormControl('', []);

    this.terceroSave = new FormGroup({
      IdTercero: IdTercero,
      NumeroDocumento: NumeroDocumento,
      IdTipoDocumento: IdTipoDocumento,
      IdCiudadExpeDto: IdCiudadExpeDto,
      IdCiudadNto: IdCiudadNto,
      FechaNacimiento: FechaNacimiento,
      FechaExpDocumento: FechaExpDocumento,
      PrimerNombre: PrimerNombre,
      SegundoNombre: SegundoNombre,
      PrimerApellido: PrimerApellido,
      SegundoApellido: SegundoApellido,
      IdGenero: IdGenero,
      IdEstado: IdEstado,
      IdAsesorExterno: IdAsesorExterno,
      IdPaisExpe: IdPaisExpe,
      IdPaisNto: IdPaisNto
    });
  }

  ValidateFinancieros() {
    const idConceptoFinan = new FormControl('', []);
    const idDatoFinanciero = new FormControl('', []);
    const categoria = new FormControl('',
      [
        Validators.required
      ]);
    const concepto = new FormControl('',
      [
        Validators.required
      ]);
    const valor = new FormControl('',
      [
        Validators.required,
        Validators.pattern('[0-9]*')
      ]);
    const observacion = new FormControl('', []);
    const dataEgresos = new FormControl('', []);
    const dataIngresos = new FormControl('', []);

    const IdDatoFinanciero = new FormControl('', []);
    const IdTercero = new FormControl('', []);
    const IdCategoria = new FormControl('', []);
    const IdConceptoFinan = new FormControl('', []);
    const Valor = new FormControl('', []);
    const Descripcion = new FormControl('', []);
    const FinancieroDto = new FormControl('', []);

    this.financieroFrom = new FormGroup({
      idDatoFinanciero: idDatoFinanciero,
      idConceptoFinan: idConceptoFinan,
      categoria: categoria,
      concepto: concepto,
      valor: valor,
      observacion: observacion,
      dataEgresos: dataEgresos,
      dataIngresos: dataIngresos,
      FinancieroDto: FinancieroDto
    });

    this.financieroSetForm = new FormGroup({
      IdDatoFinanciero: IdDatoFinanciero,
      IdTercero: IdTercero,
      IdCategoria: IdCategoria,
      IdConceptoFinan: IdConceptoFinan,
      Valor: Valor,
      Descripcion: Descripcion
    });

    this.financieroSave = new FormGroup({
      FinancieroDto: FinancieroDto
    });

  }

  validateContactos() {
    const IdDatoContacto = new FormControl('', []);
    const IdTercero = new FormControl('', []);
    const TipoContacto = new FormControl('', [Validators.required]);
    const contactoPpal = new FormControl('', []);
    const Vias = new FormControl('', []);
    const NumeroUno = new FormControl('', []);
    const Letra = new FormControl('', []);
    const NumeroDos = new FormControl('', []);
    const LetraDos = new FormControl('', []);
    const Cardi = new FormControl('', []);
    const CardiDos = new FormControl('', []);
    const NumeroTres = new FormControl('', []);
    const Imuebles = new FormControl('', []);
    const NumeroCuatro = new FormControl('', []);
    const Observacion = new FormControl('', []);
    const Email = new FormControl('', []);
    const Telefonos = new FormControl('', [Validators.pattern('^[0-9]*'), Validators.maxLength(7), Validators.minLength(7)]);
    const Celular = new FormControl('', [Validators.pattern('^[0-9]*'), Validators.maxLength(10), Validators.minLength(10)]);

    const Pais = new FormControl('', []);
    const Departamento = new FormControl('', []);
    const Ciudad = new FormControl('', []);
    const Barrio = new FormControl('', []);

    const DescripcionVereda = new FormControl('', []);
    const DescripcionAdress = new FormControl('', []);

    const DescripcionAdressIds = new FormControl('', []);
    const Usuario = new FormControl('', []);
    const Oficina = new FormControl('', []);

    this.contactoForm = new FormGroup({
      IdDatoContacto: IdDatoContacto,
      IdTercero: IdTercero,
      TipoContacto: TipoContacto,
      contactoPpal: contactoPpal,
      Vias: Vias,
      NumeroUno: NumeroUno,
      Letra: Letra,
      NumeroDos: NumeroDos,
      LetraDos: LetraDos,
      Cardi: Cardi,
      CardiDos: CardiDos,
      NumeroTres: NumeroTres,
      Imuebles: Imuebles,
      NumeroCuatro: NumeroCuatro,
      Observacion: Observacion,
      Pais: Pais,
      Departamento: Departamento,
      Ciudad: Ciudad,
      Barrio: Barrio,
      Email: Email,
      Telefonos: Telefonos,
      Celular: Celular,
      DescripcionVereda: DescripcionVereda,
      DescripcionAdress: DescripcionAdress,
      DescripcionAdressIds: DescripcionAdressIds,
      Usuario: Usuario,
      Oficina: Oficina

    });
  }

  validateActivos() {
    const ciudadActivos = new FormControl('', [ ]);
    const tipoActivo = new FormControl('', [ Validators.required]);
    const activo = new FormControl('', [ Validators.required]);
    const identificacionLegal = new FormControl('', []);
    const VrlComercial = new FormControl('', [Validators.required, Validators.pattern('[0-9]*')]);
    const VrlAdeudado = new FormControl('', [Validators.pattern('[0-9]*')]);
    const VrlAdeudadoVehi = new FormControl('', [Validators.pattern('[0-9]*')]);
    const tlActivo = new FormControl('', []);
    const tlPasivo = new FormControl('', []);
    const tlPatrimonio = new FormControl('', []);
    const descripcionOtro = new FormControl('', []);
    const Complemento = new FormControl('', []);

    const hipotecado = new FormControl('', []);
    const VrlPignorado = new FormControl('', []);
    const Marca = new FormControl('', []);
    const ModeloActivo = new FormControl('', []);
    const Placa = new FormControl('', []);
    const Pais = new FormControl('', [Validators.required]);
    const Departamento = new FormControl('', [Validators.required]);
    const Ciudad = new FormControl('', [Validators.required]);

    const DescripcionVereda = new FormControl('', []);
    const DescripcionAdress = new FormControl('', []);

    const DescripcionAdressIds = new FormControl('', []);
    const Vias = new FormControl('', []);
    const NumeroUno = new FormControl('', []);
    const Letra = new FormControl('', []);
    const NumeroDos = new FormControl('', []);
    const LetraDos = new FormControl('', []);
    const Cardi = new FormControl('', []);
    const CardiDos = new FormControl('', []);
    const NumeroTres = new FormControl('', []);
    const Imuebles = new FormControl('', []);
    const NumeroCuatro = new FormControl('', []);
    const ObservacionCom = new FormControl('', []);

    const aFavor = new FormControl('', []);
    const aFavorVehiculo = new FormControl('', []);
    const dataPropiedad = new FormControl('', []);
    const dataVehiculo = new FormControl('', []);
    const DireccionCompleta = new FormControl('', []);
    const idPatrimonio = new FormControl('', []);

    const IdPatrimonio = new FormControl('', []);
    const IdTercero = new FormControl('', []);
    const IdActivo = new FormControl('', []);
    const IdTipoPatrimonio = new FormControl('', []);
    const IdentificadorLegal = new FormControl('', []);
    const IdMarca = new FormControl('', []);
    const IdCiudad = new FormControl('', []);
    const Modelo = new FormControl('', []);
    const Direccion = new FormControl('', []);
    const AvaluoComercial = new FormControl('', []);
    const ValorAdeudado = new FormControl('', []);
    const EntidadHipoPignora = new FormControl('', []);
    const ValorHipoteca = new FormControl('', []);
    const DescripcionOtro = new FormControl('', []);
    const ActivoDto = new FormControl('', []);
    const Observacion = new FormControl('', []);
    const DescripcionIds = new FormControl('', []);
    const IdPais = new FormControl('', []);

    this.activoForm = new FormGroup({
      ciudadActivos: ciudadActivos,
      Vias: Vias,
      NumeroUno: NumeroUno,
      Letra: Letra,
      NumeroDos: NumeroDos,
      LetraDos: LetraDos,
      Cardi: Cardi,
      CardiDos:CardiDos,
      NumeroTres: NumeroTres,
      Imuebles: Imuebles,
      NumeroCuatro: NumeroCuatro,
      ObservacionCom: ObservacionCom,
      tipoActivo: tipoActivo,
      activo: activo,
      identificacionLegal: identificacionLegal,
      VrlComercial: VrlComercial,
      VrlAdeudado: VrlAdeudado,
      VrlAdeudadoVehi: VrlAdeudadoVehi,
      hipotecado: hipotecado,
      VrlPignorado: VrlPignorado,
      Marca: Marca,
      ModeloActivo: ModeloActivo,
      Placa: Placa,
      aFavor: aFavor,
      dataPropiedad: dataPropiedad,
      dataVehiculo: dataVehiculo,
      DireccionCompleta: DireccionCompleta,
      idPatrimonio: idPatrimonio,
      descripcionOtro: descripcionOtro,
      aFavorVehiculo: aFavorVehiculo,
      Pais:Pais,
      Departamento: Departamento,
      Ciudad: Ciudad,
      DescripcionVereda: DescripcionVereda,
      DescripcionAdress:DescripcionAdress,
      DescripcionAdressIds: DescripcionAdressIds
    });

    this.ActivoFormSet = new FormGroup({
      IdPatrimonio: IdPatrimonio,
      IdTercero: IdTercero,
      IdActivo: IdActivo,
      IdTipoPatrimonio: IdTipoPatrimonio,
      IdentificadorLegal: IdentificadorLegal,
      IdMarca: IdMarca,
      IdCiudad: IdCiudad,
      Modelo: Modelo,
      Direccion: Direccion,
      AvaluoComercial: AvaluoComercial,
      ValorAdeudado: ValorAdeudado,
      EntidadHipoPignora: EntidadHipoPignora,
      ValorHipoteca: ValorHipoteca,
      Placa: Placa,
      aFavor: aFavor,
      DescripcionOtro: DescripcionOtro,
      Complemento: Complemento,
      DescripcionIds: DescripcionIds,
      IdPais: IdPais
    });

    this.activoSave = new FormGroup({
      ActivoDto: ActivoDto
    });

    this.patrimonioForm = new FormGroup({
      tlActivo: tlActivo,
      tlPasivo: tlPasivo,
      tlPatrimonio: tlPatrimonio
    });

  }

  validateConyugue() {
    const idConyugue = new FormControl('', []);
    const TipoDocumento = new FormControl('', [Validators.required]);
    const NumeroDocumento = new FormControl('', [Validators.required, Validators.pattern('^[0-9]*')]);
    const PrimerApellidoC = new FormControl('', [Validators.required, Validators.pattern('[a-zA-ZñÑ ]*')]);
    const SegundoApellidoC = new FormControl('', [Validators.pattern('[a-zA-ZñÑ ]*')]);
    const PrimerNombreC = new FormControl('', [Validators.required, Validators.pattern('[a-zA-ZñÑ ]*')]);
    const SegundoNombreC = new FormControl('', [Validators.pattern('[a-zA-ZñÑ ]*')]);

    const TelefonoResidenciaC = new FormControl('', [Validators.pattern('^[0-9]*'), Validators.maxLength(7), Validators.minLength(7)]);
    const NumeroCelularC = new FormControl('', [Validators.pattern('^[0-9]*'), Validators.maxLength(10), Validators.minLength(10)]);
    const EmpresaLaboraC = new FormControl('', []);
    const TipoOcupacion = new FormControl('', []);
    const IngresosC = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const EgresosC = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const NitEmpresaC = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const AntiguedadEmpresa = new FormControl('', []);
    const years = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const meses = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const TelefonoEmpresa = new FormControl('', [Validators.pattern('^[0-9]*'), Validators.maxLength(7), Validators.minLength(7)]);
    const DetalleOcupacionC = new FormControl('', []);

    const Nombre = new FormControl('', []);
    const Nit = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const NombreDrop = new FormControl('', []);
    const NombreDropMostrar = new FormControl('', []);

    const IdTipoDocumento = new FormControl('', []);
    const Documento = new FormControl('', []);
    const PrimerApellido = new FormControl('', []);
    const SegundoApellido = new FormControl('', []);
    const PrimerNombre = new FormControl('', []);
    const SegundoNombre = new FormControl('', []);
    const TelefonoResidencia = new FormControl('', []);
    const NumeroCelular = new FormControl('', []);
    const EmpresaLabora = new FormControl('', []);
    const IdOcupacion = new FormControl('', []);
    const Ingresos = new FormControl('', []);
    const Egresos = new FormControl('', []);
    const NitEmpresa = new FormControl('', []);
    const Antiguedad = new FormControl('', []);
    const TelEmpresa = new FormControl('', []);
    const DetalleOcupacion = new FormControl('', []);
    const IdConyuge = new FormControl('', []);
    const IdTercero = new FormControl('', []);
    const IdTipoDocumentoConyuge = new FormControl('', []);
    const DescripcionTipoDocumento = new FormControl('', []);
    const Oficina = new FormControl('', []);
    const Asesor = new FormControl('', []);
    const UsuarioERP = new FormControl('', []);
    const IdTerceroAsesor = new FormControl('', []);

    const ConyugueDto = new FormControl('', []);

    this.conyugueForm = new FormGroup({
      TipoDocumento: TipoDocumento,
      NumeroDocumento: NumeroDocumento,
      PrimerApellidoC: PrimerApellidoC,
      SegundoApellidoC: SegundoApellidoC,
      PrimerNombreC: PrimerNombreC,
      SegundoNombreC: SegundoNombreC,
      TelefonoResidenciaC: TelefonoResidenciaC,
      NumeroCelularC: NumeroCelularC,
      EmpresaLaboraC: EmpresaLaboraC,
      TipoOcupacionC: TipoOcupacion,
      IngresosC: IngresosC,
      EgresosC: EgresosC,
      NitEmpresaC: NitEmpresaC,
      AntiguedadEmpresa: AntiguedadEmpresa,
      years: years,
      meses: meses,
      TelefonoEmpresa: TelefonoEmpresa,
      DetalleOcupacionC: DetalleOcupacionC,
      Nombre: Nombre,
      Nit: Nit,
      NombreDrop: NombreDrop,
      NombreDropMostrar: NombreDropMostrar,
      idConyugue: idConyugue,
      IdTipoDocumentoConyuge: IdTipoDocumentoConyuge,
      DescripcionTipoDocumento: DescripcionTipoDocumento
    });

    this.conyugueFormSet = new FormGroup({
      IdConyuge: IdConyuge,
      IdTercero: IdTercero,
      IdTipoDocumento: IdTipoDocumento,
      Documento: Documento,
      PrimerApellido: PrimerApellido,
      SegundoApellido: SegundoApellido,
      PrimerNombre: PrimerNombre,
      SegundoNombre: SegundoNombre,
      TelefonoResidencia: TelefonoResidencia,
      NumeroCelular: NumeroCelular,
      EmpresaLabora: EmpresaLabora,
      IdOcupacion: IdOcupacion,
      Ingresos: Ingresos,
      Egresos: Egresos,
      NitEmpresa: NitEmpresa,
      Antiguedad: Antiguedad,
      TelEmpresa: TelEmpresa,
      DetalleOcupacion: DetalleOcupacion,
      TelefonoEmpresa: TelefonoEmpresa,
      Oficina: Oficina,
      Asesor: Asesor,
      UsuarioERP: UsuarioERP,
      IdTerceroAsesor: IdTerceroAsesor
    });

    this.conyugueSave = new FormGroup({
      ConyugueDto: ConyugueDto
    });

  }

  validateLaboral() {
    const cargo = new FormControl('',[]);
    const periodoPago = new FormControl('',[]);
    const convenio = new FormControl('', []);
    const tipoContrato = new FormControl('',[]);
    const fechaIngreso = new FormControl('', [ Validators.required ]);
    const dataLaboral = new FormControl('', []);
    const Nombre = new FormControl('', []);
    const Nit = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const NombreDropMostrar = new FormControl('', []);
    const NombreDrop = new FormControl('', []);
    const EmpresaString = new FormControl('', []);
    const pagaConConvenio = new FormControl('', []);
    const idAsocEmpresa = new FormControl('', []);
    const porConsulta = new FormControl('', []);
    const DescripcionTipoLocal = new FormControl('', []);
    const IdTipoLocal = new FormControl('', []);
    const NombreArrendador = new FormControl('', []);
    const TelefonoArrendador = new FormControl('', []);

    const IdEmpresa = new FormControl('', []);
    const IdConvenio = new FormControl('', []);
    const IdCargo = new FormControl('', []);
    const IdTipoContratoLaboral = new FormControl('', []);
    const FechaLabora = new FormControl('', []);
    const IdPeriodoPago = new FormControl('', []);
    const NumPersonasCargo = new FormControl('0', [Validators.pattern('^[0-9]*')]);
    const IdAsocEmpresa = new FormControl('', []);
    const IdTercero = new FormControl('', []);
    const EmpresaDescripcion = new FormControl('', []);
    const IdNatural = new FormControl('', []);

    const LaboralDto = new FormControl('', []);

    this.laboralForm = new FormGroup({
      cargo: cargo,
      periodoPago: periodoPago,
      convenio: convenio,
      tipoContrato: tipoContrato,
      fechaIngreso: fechaIngreso,
      dataLaboral: dataLaboral,
      Nit: Nit,
      Nombre: Nombre,
      NombreDrop: NombreDrop,
      pagaConConvenio: pagaConConvenio,
      NumPersonasCargo: NumPersonasCargo,
      idAsocEmpresa: idAsocEmpresa,
      NombreDropMostrar: NombreDropMostrar,
      EmpresaString: EmpresaString,
      porConsulta: porConsulta,
      DescripcionTipoLocal: DescripcionTipoLocal,
      IdTipoLocal: IdTipoLocal,
      NombreArrendador: NombreArrendador,
      TelefonoArrendador: TelefonoArrendador

    });

    this.laboralFormSet = new FormGroup({
      IdEmpresa: IdEmpresa,
      IdConvenio: IdConvenio,
      IdCargo: IdCargo,
      IdTipoContratoLaboral: IdTipoContratoLaboral,
      FechaLabora: FechaLabora,
      IdPeriodoPago: IdPeriodoPago,
      NumPersonasCargo: NumPersonasCargo,
      IdAsocEmpresa: IdAsocEmpresa,
      IdTercero: IdTercero,
      EmpresaDescripcion: EmpresaDescripcion,
      IdNatural: IdNatural,
    });

    this.laboralSave = new FormGroup({
      LaboralDto: LaboralDto
    });

  }

  validateLaboralEdit() {
    const cargo = new FormControl('', [Validators.required]);
    const periodoPago = new FormControl('',[Validators.required]);
    const convenio = new FormControl('', []);
    const tipoContrato = new FormControl('',[Validators.required]);
    const fechaIngreso = new FormControl('',[Validators.required]);
    const dataLaboral = new FormControl('', []);
    const Nombre = new FormControl('', []);
    const Nit = new FormControl('', []);
    const NombreDropMostrar = new FormControl('', [Validators.required]);
    const NombreDrop = new FormControl('', []);
    const pagaConConvenio = new FormControl('', []);
    const idAsocEmpresa = new FormControl('', []);

    const IdEmpresa = new FormControl('', []);
    const IdConvenio = new FormControl('', []);
    const IdCargo = new FormControl('', []);
    const IdTipoContratoLaboral = new FormControl('', []);
    const FechaLabora = new FormControl('', []);
    const IdPeriodoPago = new FormControl('', []);
    const NumPersonasCargo = new FormControl('0', []);
    const IdAsocEmpresa = new FormControl('', []);
    const IdTercero = new FormControl('', []);
    const EmpresaDescripcion = new FormControl('', []);
    const IdNatural = new FormControl('', []);
    const DescripcionTipoLocal = new FormControl('', []);
    const IdTipoLocal = new FormControl('', []);
    const NombreArrendador = new FormControl('', []);
    const TelefonoArrendador = new FormControl('', [Validators.pattern('[0-9]*')]);

    const LaboralDto = new FormControl('', []);
    const EmpresaString =  new FormControl('', []);
    const porConsulta =  new FormControl('', []);

    this.laboralFormEdit = new FormGroup({
      cargo: cargo,
      periodoPago: periodoPago,
      convenio: convenio,
      tipoContrato: tipoContrato,
      fechaIngreso: fechaIngreso,
      dataLaboral: dataLaboral,
      Nit: Nit,
      Nombre: Nombre,
      NombreDrop: NombreDrop,
      pagaConConvenio: pagaConConvenio,
      NumPersonasCargo: NumPersonasCargo,
      idAsocEmpresa: idAsocEmpresa,
      NombreDropMostrar: NombreDropMostrar,
      EmpresaString: EmpresaString,
      porConsulta: porConsulta,
      DescripcionTipoLocal: DescripcionTipoLocal,
      IdTipoLocal: IdTipoLocal,
      NombreArrendador: NombreArrendador,
      TelefonoArrendador: TelefonoArrendador
    });

    this.laboralFormSet = new FormGroup({
      IdEmpresa: IdEmpresa,
      IdConvenio: IdConvenio,
      IdCargo: IdCargo,
      IdTipoContratoLaboral: IdTipoContratoLaboral,
      FechaLabora: FechaLabora,
      IdPeriodoPago: IdPeriodoPago,
      NumPersonasCargo: NumPersonasCargo,
      IdAsocEmpresa: IdAsocEmpresa,
      IdTercero: IdTercero,
      EmpresaDescripcion: EmpresaDescripcion,
      IdNatural: IdNatural,
      DescripcionTipoLocal: DescripcionTipoLocal,
      IdTipoLocal: IdTipoLocal,
      NombreArrendador: NombreArrendador,
      TelefonoArrendador: TelefonoArrendador
      
    });

    this.laboralSave = new FormGroup({
      LaboralDto: LaboralDto
    });

  }

  validateReferencia() {
    const idReferencia = new FormControl('', []);
    const IdReferencia = new FormControl('', []);
    const IdTercero = new FormControl('', []);
    const IdTipoReferencia = new FormControl('', []);

    const NombreEmpresa = new FormControl('', []);
    const idTipoReferencia = new FormControl('', []);
    const IdParentesco = new FormControl('', []);
    const PrimerApellido = new FormControl('', []);
    const SegundoApellido = new FormControl('', []);
    const PrimerNombre = new FormControl('', []);
    const SegundoNombre = new FormControl('', []);
    const IdCiudad = new FormControl('', []);
    const IdCiudadR = new FormControl('', []);
    const ciudad = new FormControl('', []);
    const email = new FormControl('', []);
    const extEmpresarial = new FormControl('', []);
    const IdPais = new FormControl('', []);
     const Pais = new FormControl('', []);
    const Departamento = new FormControl('', []);
    const Ciudad = new FormControl('', []);

    const TelefonoEmpresa = new FormControl('', []);
    const TelefonoEmpresas = new FormControl('', []);
    const TelefonoEmpresaPersonal = new FormControl('', []);
    const celular = new FormControl('', []);
    const Celular = new FormControl('', []);
    const IdOficina = new FormControl('', []);
    const IdOficinaR = new FormControl('', []);
    const NumeroProducto = new FormControl('', []);
    const ServicioProducto = new FormControl('', []);
    const ServicioProductoComercial = new FormControl('', []);
    const DescripcionEmpresa = new FormControl('', []);
    const DescripcionEmpresaR = new FormControl('', []);
    const Ext = new FormControl('', []);
    const EmpresaComercial = new FormControl('', []);
    const EmpresaFinanciera = new FormControl('', []);
    const EmpresaComercialMostrar = new FormControl('', []);
    const EmpresaFinancieraMostrar = new FormControl('', []);
    const CiudadComercial = new FormControl('', []);
    const TelefonoContactos = new FormControl('', []);
    const TelefonoContacto = new FormControl('', []);
    const dataFamiliaPersonal = new FormControl('', []);
    const dataFinancieraComercial = new FormControl('', []);
    const Email = new FormControl('', []);
    const TelefonoFinanciera = new FormControl('', []);
    const NumeroProductoFinanciera = new FormControl('', []);
    const ServicioProductoFinanciera = new FormControl('', []);

    const Nit = new FormControl('', []);
    const Nombre = new FormControl('', []);
    const ReferenciaDto = new FormControl('', []);

    this.referenciaForm = new FormGroup({
      idReferencia: idReferencia,
      NombreEmpresa: NombreEmpresa,
      idTipoReferencia: idTipoReferencia,
      IdParentesco: IdParentesco,
      PrimerApellido: PrimerApellido,
      SegundoApellido: SegundoApellido,
      PrimerNombre: PrimerNombre,
      SegundoNombre: SegundoNombre,
      IdCiudadR: IdCiudadR,
      ciudad: ciudad,
      email: email,
      TelefonoContactos: TelefonoContactos,
      dataFamiliaPersonal: dataFamiliaPersonal,
      dataFinancieraComercial: dataFinancieraComercial,
      TelefonoEmpresas: TelefonoEmpresas,
      celular: celular,
      IdOficinaR: IdOficinaR,
      NumeroProducto: NumeroProducto,
      ServicioProducto: ServicioProducto,
      ServicioProductoComercial: ServicioProductoComercial,
      DescripcionEmpresa: DescripcionEmpresa,
      DescripcionEmpresaR: DescripcionEmpresaR,
      EmpresaComercial: EmpresaComercial,
      EmpresaFinanciera: EmpresaFinanciera,
      EmpresaComercialMostrar: EmpresaComercialMostrar,
      EmpresaFinancieraMostrar: EmpresaFinancieraMostrar,
      CiudadComercial: CiudadComercial,
      extEmpresarial: extEmpresarial,
      Nit: Nit,
      Nombre: Nombre,
      TelefonoFinanciera: TelefonoFinanciera,
      NumeroProductoFinanciera: NumeroProductoFinanciera,
      ServicioProductoFinanciera: ServicioProductoFinanciera,
      TelefonoEmpresaPersonal: TelefonoEmpresaPersonal,
      Pais: Pais,
      Departamento: Departamento,
      Ciudad: Ciudad
    });

    this.referenciaFormSet = new FormGroup({
      IdReferencia: IdReferencia,
      IdTercero: IdTercero,
      IdTipoReferencia: IdTipoReferencia,
      PrimerNombre: PrimerNombre,
      SegundoNombre: SegundoNombre,
      PrimerApellido: PrimerApellido,
      SegundoApellido: SegundoApellido,
      IdParentesco: IdParentesco,
      TelefonoContacto: TelefonoContacto,
      TelefonoEmpresa: TelefonoEmpresa,
      Celular: Celular,
      Email: Email,
      IdCiudad: IdCiudad,
      IdPais: IdPais,
      IdOficina: IdOficina,
      NumeroProducto: NumeroProducto,
      ServicioProducto: ServicioProducto,
      DescripcionEmpresa: DescripcionEmpresa,
      Ext: Ext
    });

    this.referenciaSave = new FormGroup({
      ReferenciaDto: ReferenciaDto
    });

  }

  validateEntrevista() {
    const RPregunta1Si = new FormControl('', []);
    const RPregunta1No = new FormControl('', []);
    const RPregunta2Si = new FormControl('', []);
    const RPregunta2No = new FormControl('', []);
    const RPregunta3Si = new FormControl('', []);
    const RPregunta4Si = new FormControl('', []);
    const RPregunta5Si = new FormControl('', [Validators.required]);
    const RPregunta6Si = new FormControl('', []);
    const RPregunta6No = new FormControl('', []);
    const RPregunta7Si = new FormControl('', []);
    const RPregunta8Si = new FormControl('', []);
    const RPregunta9Si = new FormControl('', []);
    const RPregunta10Si = new FormControl('', []);
    const RPregunta11Si = new FormControl('', []);
    const RPregunta12Si = new FormControl('', []);
    const RPregunta13Si = new FormControl('', []);
    const RPregunta14Si = new FormControl('', []);
    const RPregunta14No = new FormControl('', []);
    const RPregunta15Si = new FormControl('', []);
    const RPregunta16Si = new FormControl('', []);
    const RPregunta17Si = new FormControl('', []);
    const RPregunta17No = new FormControl('', []);
    const RPregunta18Si = new FormControl('', []);
    const RPregunta19Si = new FormControl('', []);
    const RPregunta20Si = new FormControl('', []);
    const RPregunta20No = new FormControl('', []);
    const RPregunta21Si = new FormControl('', []);
    const RPregunta21No = new FormControl('', []);
    const RPregunta22Si = new FormControl('', []);
    const RPregunta22No = new FormControl('', []);
    const RPregunta23Si = new FormControl('', []);
    const RPregunta23No = new FormControl('', []);
    const RPregunta24Si = new FormControl('', []);
    const RPregunta25Si = new FormControl('', []);
    const RPregunta26Si = new FormControl('', []);
    const RPregunta26No = new FormControl('', []);
    const RPregunta27Si = new FormControl('', []);
    const RPregunta28Si = new FormControl('', []);
    const RPregunta28No = new FormControl('', []);
    const RPregunta29Si = new FormControl('', []);
    const listPEPS = new FormControl('', []);
    const idEntrevista = new FormControl('', []);
    const IdEntrevista = new FormControl('', []);
    const IdTercero = new FormControl('', []);
    const NumeroPregunta = new FormControl('', []);
    const Respuesta = new FormControl('', []);
    const EntrevistaDto = new FormControl('', []);

    this.entrevistaForm = new FormGroup({
      idEntrevista: idEntrevista,
      RPregunta1Si: RPregunta1Si,
      RPregunta1No: RPregunta1No,
      RPregunta2Si: RPregunta2Si,
      RPregunta2No: RPregunta2No,
      RPregunta3Si: RPregunta3Si,
      RPregunta4Si: RPregunta4Si,
      RPregunta5Si: RPregunta5Si,
      RPregunta6Si: RPregunta6Si,
      RPregunta6No: RPregunta6No,
      RPregunta7Si: RPregunta7Si,
      RPregunta8Si: RPregunta8Si,
      RPregunta9Si: RPregunta9Si,
      RPregunta10Si: RPregunta10Si,
      RPregunta11Si: RPregunta11Si,
      RPregunta12Si: RPregunta12Si,
      RPregunta13Si: RPregunta13Si,
      RPregunta14Si: RPregunta14Si,
      RPregunta14No: RPregunta14No,
      RPregunta15Si: RPregunta15Si,
      RPregunta16Si: RPregunta16Si,
      RPregunta17Si: RPregunta17Si,
      RPregunta17No: RPregunta17No,
      RPregunta18Si: RPregunta18Si,
      RPregunta19Si: RPregunta19Si,
      RPregunta20Si: RPregunta20Si,
      RPregunta20No: RPregunta20No,
      RPregunta21Si: RPregunta21Si,
      RPregunta21No: RPregunta21No,
      RPregunta22Si: RPregunta22Si,
      RPregunta22No: RPregunta22No,
      RPregunta23Si: RPregunta23Si,
      RPregunta23No: RPregunta23No,
      RPregunta24Si: RPregunta24Si,
      RPregunta25Si: RPregunta25Si,
      RPregunta26Si: RPregunta26Si,
      RPregunta26No: RPregunta26No,
      RPregunta27Si: RPregunta27Si,
      RPregunta28Si: RPregunta28Si,
      RPregunta28No: RPregunta28No,
      RPregunta29Si: RPregunta29Si,
      listPEPS: listPEPS,
    });

    this.entrevistaFormSet = new FormGroup({
      NumeroPregunta: NumeroPregunta,
      Respuesta: Respuesta,
      IdTercero: IdTercero,
      IdEntrevista: IdEntrevista
    });

    this.entrevistaSave = new FormGroup({
      EntrevistaDto: EntrevistaDto
    });

  }

  validateRelacionPEPS() {
    const IdRelacionPEPS = new FormControl('', []);
    const IdPregunta = new FormControl('', []);
    const NombreCompleto = new FormControl('', [Validators.required, Validators.pattern('[a-zA-ZñÑ ]*')]);
    const Identificacion = new FormControl('', [Validators.required, Validators.minLength(4),
    Validators.maxLength(10), Validators.pattern('^[0-9]*')]);
    const Cargo = new FormControl('', [Validators.required]);
    const PeriodoDesde = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const PeriodoHasta = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const IdParentesco = new FormControl('', [Validators.required]);
    const IdTercero = new FormControl('', []);

    const ListaDePeps = new FormControl('', []);

    this.relacionPepsForm = new FormGroup({
      IdRelacionPEPS: IdRelacionPEPS,
      IdPregunta: IdPregunta,
      NombreCompleto: NombreCompleto,
      Identificacion: Identificacion,
      Cargo: Cargo,
      PeriodoDesde: PeriodoDesde,
      PeriodoHasta: PeriodoHasta,
      IdParentesco: IdParentesco,
      IdTercero: IdTercero
    });

    this.relacionPepsSave = new FormGroup({
      ListaDePeps: ListaDePeps
    });
  }

  validateSeguros() {
    const idAsegurado = new FormControl('', []);
    const seguro = new FormControl('', [Validators.required]);
    const montoAsegurado = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const estadoSeguro = new FormControl('', [Validators.required]);
    const fechaAsegurado = new FormControl('', []);
    const tieneSeguro = new FormControl('', []);
    const DescripcionTieneSeguro = new FormControl('', []);
    const tratamiento = new FormControl('', []);
    const fechaCreacion = new FormControl('', []);
    const debitoAuto = new FormControl('', []);
    const IdAsegurado = new FormControl('', []);
    const IdSeguro = new FormControl('', []);
    const IdTercero = new FormControl('', []);
    const MontoAsegurado = new FormControl('', []);
    const FechaCreacion = new FormControl('', []);
    const FechaRptaAseguradora = new FormControl('', []);
    const IdAsesorCrea = new FormControl('', []);
    const IdOficina = new FormControl('', []);
    const IdEstado = new FormControl('', []);
    const SinCobertura = new FormControl('', []);
    const PorqueSinCobertura = new FormControl('', []);
    const IdAsesor = new FormControl('', []);

    const IdTratamiento = new FormControl('', []);
    const Acepto = new FormControl('', []);
    const FechaAceptacion = new FormControl('', []);
    const fechaNoAceptacion = new FormControl('', []);

    const fechaTrataManual = new FormControl('', []);
    const fechaTabCreacion = new FormControl('', []);
    const fechaTabModificacion = new FormControl('', []);
    const fechaTabRetiro = new FormControl('', []);
    const fechaTabSoliciudRetiro = new FormControl('', []);
    const fechaTabSolicitudReingreso = new FormControl('', []);

    const Coobertura = new FormControl('', []);
    const DescripcionPorque = new FormControl('', []);

    const SegurosDto = new FormControl('', []);
    const TratamientoDto = new FormControl('', []);
    const CooberturaDto = new FormControl('', []);

    const seguroData = new FormControl('', []);
    const EditSeguro = new FormControl('', []);


    this.segurosForm = new FormGroup({
      idAsegurado: idAsegurado,
      seguro: seguro,
      montoAsegurado: montoAsegurado,
      estadoSeguro: estadoSeguro,
      fechaAsegurado: fechaAsegurado,
      tieneSeguro: tieneSeguro,
      DescripcionTieneSeguro: DescripcionTieneSeguro,
      tratamiento: tratamiento,
      fechaCreacion: fechaCreacion,
      seguroData: seguroData,
      fechaTrataManual: fechaTrataManual,
      debitoAuto: debitoAuto
    });

    this.segurosFormSet = new FormGroup({
      IdAsegurado: IdAsegurado,
      IdSeguro: IdSeguro,
      IdTercero: IdTercero,
      MontoAsegurado: MontoAsegurado,
      FechaCreacion: FechaCreacion,
      FechaRptaAseguradora: FechaRptaAseguradora,
      IdAsesorCrea: IdAsesorCrea,
      IdOficina: IdOficina,
      IdEstado: IdEstado,
      SinCobertura: SinCobertura,
      PorqueSinCobertura: PorqueSinCobertura
    });

    this.segurosSave = new FormGroup({
      SegurosDto: SegurosDto
    });

    this.segurosEdit = new FormGroup({
      EditSeguro: EditSeguro,

    });

    this.tratamientoForm = new FormGroup({
      IdTratamiento: IdTratamiento,
      IdTercero: IdTercero,
      Acepto: Acepto,
      FechaAceptacion: FechaAceptacion,
      fechaNoAceptacion: fechaNoAceptacion,
      IdAsesor: IdAsesor
    });

    this.tratamientoSave = new FormGroup({
      TratamientoDto: TratamientoDto
    });

    this.coberturaForm = new FormGroup({
      Coobertura: Coobertura,
      DescripcionPorque: DescripcionPorque
    });

    this.coberturaSave = new FormGroup({
      CooberturaDto: CooberturaDto
    });

    this.fechasForm = new FormGroup({
      fechaTabCreacion: fechaTabCreacion,
      fechaTabModificacion: fechaTabModificacion,
      fechaTabRetiro: fechaTabRetiro,
      fechaTabSolicitudReingreso: fechaTabSolicitudReingreso,
      fechaTabSoliciudRetiro: fechaTabSoliciudRetiro
    });

  }

  validateAsegurados() {
    const tipoDocumento = new FormControl('', [Validators.required]);
    const identificacion = new FormControl('', [Validators.required]);
    const parentesco = new FormControl('', [Validators.required]);
    const nombreBenficiario = new FormControl('',[ Validators.required]);
    const telefono = new FormControl('',[Validators.required]);
    const porcentaje = new FormControl('',[Validators.required]);

    this.aseguradosForm = new FormGroup({
      tipoDocumento: tipoDocumento,
      identificacion: identificacion,
      parentesco: parentesco,
      nombreBenficiario: nombreBenficiario,
      telefono: telefono,
      porcentaje: porcentaje
    });
  }

  validateServicios() {
    const servicioSolicitado = new FormControl('', []);
    const montoSolicitado = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const plazoDeseado = new FormControl('', [Validators.pattern('^[0-9]*')]);
    const Destino = new FormControl('', []);
    const Oficina = new FormControl('', []);
    const Asesor = new FormControl('', []);
    const EsAsociado = new FormControl('', []);
    const NombreDudor = new FormControl('', []);
    const tipoIdentificacion = new FormControl('', []);
    const DocumentoDeudor = new FormControl('', []);
    const operacionSeleccionada = new FormControl('', []);
    const esVinculacion = new FormControl('', []);
    const NumeroDocumento = new FormControl('', []);
    const NombreDeudor = new FormControl('', []);
    const TipoDocumento = new FormControl('', []);

    this.serviciosFrom = new FormGroup({
      servicioSolicitado: servicioSolicitado,
      montoSolicitado: montoSolicitado,
      plazoDeseado: plazoDeseado,
      Destino: Destino,
      Oficina: Oficina,
      Asesor: Asesor,
      EsAsociado: EsAsociado,
      NombreDudor: NombreDudor,
      tipoIdentificacion: tipoIdentificacion,
      DocumentoDeudor: DocumentoDeudor,
      operacionSeleccionada: operacionSeleccionada,
      esVinculacion: esVinculacion,
      NumeroDocumento: NumeroDocumento,
      NombreDeudor: NombreDeudor,
      TipoDocumento: TipoDocumento
    });
  }

  validateLogSeguro() {
    const IdLogSeguro = new FormControl('', []);
    const IdTercero = new FormControl('', []);
    const FechaModificacion = new FormControl('', []);
    const IdEstado = new FormControl('', []);
    const IdSeguro = new FormControl('', []);
    const MontoAsegurado = new FormControl('', []);
    const FechaCreacion = new FormControl('', []);
    const FechaRptaAseguradora = new FormControl('', []);

    const logSegurosDto = new FormControl('', []);

    this.logSegurosForm = new FormGroup({
      IdLogSeguro: IdLogSeguro,
      IdTercero: IdTercero,
      FechaModificacion: FechaModificacion,
      IdEstado: IdEstado,
      IdSeguro: IdSeguro,
      MontoAsegurado: MontoAsegurado,
      FechaCreacion: FechaCreacion,
      FechaRptaAseguradora: FechaRptaAseguradora
    });

    this.logSegurosSave = new FormGroup({
      logSegurosDto: logSegurosDto
    });

  }

  FormVetados() {
    const documeto = new FormControl('', []);
    const strNombreCompleto = new FormControl('', []);

    this.vetadosFrom = new FormGroup({
      documeto: documeto,
      strNombreCompleto: strNombreCompleto
    });
  }

  ValidateFormCambioEstado() {
    const lngTercero = new FormControl('', []);
    const Observacion = new FormControl('', []);
    const IdTipoObservacion = new FormControl('', []);

    this.FormCambioEstado = new FormGroup({
      lngTercero: lngTercero,
      Observacion: Observacion,
      IdTipoObservacion: IdTipoObservacion
    });
  }

  validateSolicituRetiro() {
    const idMotivo = new FormControl('', []);
    const ObservacionMotivo = new FormControl('', []);

    this.solicitudRetiroForm = new FormGroup({

      idMotivo: idMotivo,
      ObservacionMotivo: ObservacionMotivo
    });
  }

  ValidateCorrespondencia() {
    const SeleccionCorrespondencia = new FormControl('', []);

    this.Correspondenciasform = new FormGroup({
      SeleccionCorrespondencia: SeleccionCorrespondencia
    });
  }
  //#endregion

  //#region Generales
  GuardarLog(formulario : any, operacion : number, cuenta : number, tercero : number | null, modulo : number) {
    this.generalesService.Guardarlog(formulario, operacion, cuenta, tercero, modulo).subscribe(
      result => {
      }
    );
  }

  ValidErrorForm(formulario: any) {

    Object.keys(formulario.controls).forEach(field => { // {1}
       console.log(field);
      const control = formulario.get(field);            // {2}
       console.log(control);
      control.markAsTouched({ onlySelf: true });       // {3}
       console.log(control.status);
    });
  }

  onPuntoComa($event : any) {
    const hijos = $event;
    const key = hijos.keyCode;

    if (key === 46 || key === 44 || key === 45 || key === 43 || key === 47 || key === 42) {
      hijos.preventDefault();
    }
  }

  NombresCapitaliceBasico() {
    const self = this;
     $('#IdComplemento').keyup(function () {
      $(self).val($(self).val().substr(0,1).toUpperCase() + $(self).val().substr(1).toLowerCase());
    });
    $('#priApe').keyup(function () {
      $(self).val($(self).val().substr(0,1).toUpperCase() + $(self).val().substr(1).toLowerCase());
    });
    $('#segApe').keyup(function () {
      $(self).val($(self).val().substr(0,1).toUpperCase() + $(self).val().substr(1).toLowerCase());
    });
    $('#priNom').keyup(function () {
      $(self).val($(self).val().substr(0,1).toUpperCase() + $(self).val().substr(1).toLowerCase());
    });
    $('#segNom').keyup(function () {
      $(self).val($(self).val().substr(0,1).toUpperCase() + $(self).val().substr(1).toLowerCase());
    });
  }

  capitalize() { 
    const self = this;
    $(self).keyup(function(event : any) { 
      var box = event.target; 
      var txt = $(self).val(); 
      var stringStart = box.selectionStart; 
      var stringEnd = box.selectionEnd; 
      $(self).val(txt.replace(/^(.)|(\s|\-)(.)/g, function($word : string) { 
      return $word.toUpperCase(); 
      })); 
      box.setSelectionRange(stringStart , stringEnd); 
    }); 

    return this; 
  } 

  NombreCapitalicePeps() {
    const self = this;
    $('#nombreCompletoPeps').keyup(function () {
      $(self).val($(self).val().substr(0, 1).toUpperCase() + $(self).val().substr(1).toLowerCase());
    });
  }

  VeredaCapitaliceContac() {
    const self = this;
    $('#NumeroUnoDescrip').keyup(function () {
      $(self).val($(self).val().substr(0, 1).toUpperCase() + $(self).val().substr(1).toLowerCase());
    });
  }

  ObservacionCapitalice() {
    const self = this;
    $('#observa').keyup(function () {
    $(self).val($(self).val().substr(0, 1).toUpperCase() + $(self).val().substr(1).toLowerCase());
    });
  }

  EntrevistaCapitalice() {
    const self = this;
    $('#RPre12').keyup(function () {
      $(self).val($(self).val().substr(0, 1).toUpperCase() + $(self).val().substr(1).toLowerCase());
    });
    $('#RPre20').keyup(function () {
      $(self).val($(self).val().substr(0, 1).toUpperCase() + $(self).val().substr(1).toLowerCase());
    });
    $('#RPre24').keyup(function () {
      $(self).val($(self).val().substr(0, 1).toUpperCase() + $(self).val().substr(1).toLowerCase());
    });
  }

  NombresApellidosPepsCapitalice() {
    const self = this;
    $('#nombreCompletoPeps').keyup(function () {
      $(self).val($(self).val().substr(0, 1).toUpperCase() + $(self).val().substr(1).toLowerCase());
    });
  }

  validarNumeroDos() {
    const self = this;
    const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
    const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
    $('#NumeroDos').on('input', function (e : any) {
      if (!patt.test(self.value)) {
        self.value = self.value.replace(pattReplace, '');
      }
    });
  }
  validarNumeroTres() {
    const self = this;
     const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
     const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
     $('#NumeroTres').on('input', function (e : any) {
       if (!patt.test(self.value)) {
        self.value = self.value.replace(pattReplace, '');
       }
     });
  }
  validarNumerocuatro() {
    const self = this;
    const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
    const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
    $('#NumeroCuatro').on('input', function (e : any) {
      if (!patt.test(self.value)) {
        self.value = self.value.replace(pattReplace, '');
      }
    });
  }

  validarNumeroDosActivo() {
    const self = this;
    const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
    const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
    $('#NumeroDosActivo').on('input', function (e : any) {
      if (!patt.test(self.value)) {
        self.value = self.value.replace(pattReplace, '');
      }
    });
  }
  validarNumeroTresActivo() {
    const self = this;
    const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
    const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
    $('#NumeroTresActivo').on('input', function (e : any) {
      if (!patt.test(self.value)) {
        self.value = self.value.replace(pattReplace, '');
      }
    });
  }
  validarNumerocuatroActivo() {
    const self = this;
    const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
    const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
    $('#NumeroCuatroActivo').on('input', function (e : any) {
      if (!patt.test(self.value)) {
        self.value = self.value.replace(pattReplace, '');
      }
    });
  }

  validarCaracteresEspecialesModelo() {
    const self = this;
      const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
      const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
      $('#modeloVehiculo').on('input', function (e : any) {
        if (!patt.test(self.value)) {
          self.value = self.value.replace(pattReplace, '');
        }
      });
  }

  validarCaracteresEspecialesDestino() {
    const self = this;
      const patt = new RegExp('/^[ 0-9áéíóúüñ]*$/');
      const pattReplace = new RegExp('[^ 0-9áéíóúüñ]+');
      $('#destinoServicio').on('input', function (e : any) {
        if (!patt.test(self.value)) {
          self.value = self.value.replace(pattReplace, '');
        }
      });
  }

  MaysPrimera(string : string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  consultarDeudor(documento : string) {
    if (documento === '' || documento === null || documento === undefined) {
      this.BlockServiciosInput = null;
      this.serviciosFrom.get('NumeroDocumento')?.reset();
      this.serviciosFrom.get('NombreDeudor')?.reset();
    } else {
      if (this.basicosFrom.get('numeroDocumento')?.value !== documento) {
        this.motrarErrorDeudor = false;
        this.BlockServiciosInput = true;
        this.clientesService.GetPersonsXDocument(documento).subscribe(
          result => {
            if (result !== null) {
              if (result.PrimerNombre === null || result.PrimerNombre === undefined) {
                result.PrimerNombre = '';
              }
              if (result.SegundoNombre === null || result.SegundoNombre === undefined) {
                result.SegundoNombre = '';
              }
              if (result.PrimerApellido === null || result.PrimerApellido === undefined) {
                result.PrimerApellido = '';
              }
              if (result.SegundoApellido === null || result.SegundoApellido === undefined) {
                result.SegundoApellido = '';
              }
              this.serviciosFrom.get('NombreDeudor')?.setValue(
                result.PrimerNombre + ' ' + result.SegundoNombre + ' ' +
                result.PrimerApellido + ' ' + result.SegundoApellido);
              this.serviciosFrom.get('TipoDocumento')?.setValue(result.IdTipoDocumento);
            } else {
              this.serviciosFrom.get('NombreDeudor')?.reset();
              this.serviciosFrom.get('NumeroDocumento')?.reset();
            }
          }, error => {
            console.error('Error consultar deudor - ' + error);
          });
      } else {
        this.motrarErrorDeudor = true;
        this.serviciosFrom.get('NumeroDocumento')?.reset();
        this.serviciosFrom.get('NombreDeudor')?.reset();
      }
    }
  }

  consultarCorrespondenciaPpal(tercero : string) {
    this.clientesService.ObtenerContactosPrincpales(tercero).subscribe(
      result => {
        this.dataCorrespondencia = result;
      },
      error => {
         console.error('Error consultar deudor - ' + error);
     });
  }

  bloquearServicios(documento : string) {
    this.motrarErrorDeudor = false;
    if (documento === null || documento === undefined) {
      this.BlockServiciosInput = null;
    } else {
      this.BlockServiciosInput = true;
    }
  }

  bloquearDeudor() {
    const monto = this.serviciosFrom.get('montoSolicitado')?.value;
    const plazo = this.serviciosFrom.get('plazoDeseado')?.value;
    const destino = this.serviciosFrom.get('Destino')?.value ;
    if ((monto === '' || monto === null || monto === undefined) && (plazo === '' || plazo === null || plazo === undefined)
      && (destino === '' || destino === null || destino === undefined)) {
      this.BlockDeudor = null;
      this.BlockServiciosInput = true;
    } else {
      this.BlockDeudor = true;
      this.BlockServiciosInput = null;
    }
  }

  PreCargarPais() {
    this.dataPaisesAll.forEach((elementPais : any ) => {
      if (elementPais.IdPais === 42 ) {
        this.PaisMapper = elementPais;
        this.PaisMapperAct = elementPais;
        this.PaisMapperNac = elementPais;
        this.PaisMapperRefe = elementPais;
        this.PaiseCargaInicial = elementPais.Descripcion;
        this.basicosFrom.get('paisExpedicion')?.setValue(elementPais.IdPais);
        this.basicosFrom.get('paisNacimiento')?.setValue(elementPais.IdPais);
        this.contactoForm.get('Pais')?.setValue(elementPais.IdPais);

        this.contactoForm.controls['Pais'].setErrors(null);
        this.contactoForm.controls['Pais'].clearValidators();

        this.activoForm.get('Pais')?.setValue(elementPais.IdPais);
        this.referenciaForm.get('Pais')?.setValue(elementPais.IdPais);

        this.recursosGeneralesService.GetDepartamentosList(elementPais.IdPais).subscribe(
          resultDepart => {
            this.dataDepartamentoNaci = resultDepart;
            this.dataDepartamentoExp = resultDepart;
            this.bloqDeparta = null;
            this.bloqDepartaCont = null;
            this.bloqDepartaRef = null;
            this.bloqDepartaExp = null;
            this.bloqDepartaAct = null;
            this.dataDepartamentos = resultDepart;
        });
      }

    });
  }
  NoPermitirTab() {
     $('#CiuRefe').on('keydown', function (e : any) {
    //  $('#').addEventListener('keydown', function (e) {
        if (e.which == 9) {
            e.preventDefault();
        }
    });

    $('#CiuCont').on('keydown', function (e : any) {
    //  $('#').addEventListener('keydown', function (e) {
        if (e.which == 9) {
            e.preventDefault();
        }
    });

    $('#CiuPatri').on('keydown', function (e : any) {
    //  $('#').addEventListener('keydown', function (e) {
        if (e.which == 9) {
            e.preventDefault();
        }
    });

    $('#CiuRefe').on('keydown', function (e : any) {
    //  $('#').addEventListener('keydown', function (e) {
        if (e.which == 9) {
            e.preventDefault();
        }
    });

    function capLock(e : any){
      var kc = e.keyCode ? e.keyCode : e.which;
      var sk = e.shiftKey ? e.shiftKey : kc === 16;
       ((kc >= 65 && kc <= 90) && !sk) || 
          ((kc >= 97 && kc <= 122) && sk) ? 'visible' : 'hidden';
     
    }
  }

  limpiarDatosImpresion() {
    this.documentoConsultar = [];
    this.infoMenor = [];
  }
  AsesorModifica(tercero : string) {
    let data : string | null = localStorage.getItem('Data');
    const Datos = JSON.parse(window.atob(data == null ? "": data));
    this.clientesService.ActualizaAsesorMod(Datos.IdAsesor, tercero).subscribe(
      result => {
      },
      error => {
        const errorMessage = <any>error;
        console.log(errorMessage);
      }
    );
  }

  CambiarColor(fil : any, producto : any) {
    if (producto === 1) {

      $(".filIng_" + this.ColorAnterior1).css("background", "#FFFFFF");
      $(".filIng_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior1 = fil;

    }
    if (producto === 2) {

      $(".filEgr_" + this.ColorAnterior2).css("background", "#FFFFFF");
      $(".filEgr_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior2 = fil;    
     
    }
    if (producto === 3) {

      $(".filContacto_" + this.ColorAnterior3).css("background", "#FFFFFF");
      $(".filContacto_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior3 = fil;
    
    }
    if (producto === 4) {

      $(".filProp_" + this.ColorAnterior4).css("background", "#FFFFFF");
      $(".filProp_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior4 = fil;

    }
    if (producto === 5) {

      $(".filVeh_" + this.ColorAnterior5).css("background", "#FFFFFF");
      $(".filVeh_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior5 = fil;

     
    }
    if (producto === 6) {

      $(".filotros_" + this.ColorAnterior6).css("background", "#FFFFFF");
      $(".filotros_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior6 = fil;
  
    }
    if (producto === 7) {

      $(".filconyu_" + this.ColorAnterior7).css("background", "#FFFFFF");
      $(".filconyu_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior7 = fil;
  
    }
    if (producto === 8) {

      $(".fillab_" + this.ColorAnterior8).css("background", "#FFFFFF");
      $(".fillab_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior8 = fil;
      
    }
     if (producto === 9) {

      $(".filRef_" + this.ColorAnterior9).css("background", "#FFFFFF");
      $(".filRef_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior9 = fil;

    }
     if (producto === 10) {

      $(".filCom_" + this.ColorAnterior10).css("background", "#FFFFFF");
      $(".filCom_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior10 = fil;

    }
    if (producto === 11) {

      $(".filSeg_" + this.ColorAnterior11).css("background", "#FFFFFF");
      $(".filSeg_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior11 = fil;

    }
    if (producto === 12) {

      $(".filpep_" + this.ColorAnterior12).css("background", "#FFFFFF");
      $(".filpep_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior12 = fil;

    }
    if (producto === 13) {

      $(".filSegt_" + this.ColorAnterior13).css("background", "#FFFFFF");
      $(".filSegt_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior13 = fil;
 
    }
     if (producto === 14) {

      $(".fillogtra_" + this.ColorAnterior14).css("background", "#FFFFFF");
      $(".fillogtra_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior14 = fil;    

    }
    if (producto === 15) {

      $(".fillogpeps_" + this.ColorAnterior15).css("background", "#FFFFFF");
      $(".fillogpeps_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior15 = fil;

    }
    if (producto === 16) {

      $(".fillogRet_" + this.ColorAnterior16).css("background", "#FFFFFF");
      $(".fillogRet_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior16 = fil;

    }
    if (producto === 17) {

      $(".fillogRein_" + this.ColorAnterior17).css("background", "#FFFFFF");
      $(".fillogRein_" + fil).css("background", "#e5e5e5");

      this.ColorAnterior17 = fil;

    }    
  }
 
  

  //#endregion
}
